{"fileType":"apogee app js workspace","version":"0.60","references":{"viewState":{"treeState":1,"lists":{"es module":{"treeState":0},"js link":{"treeState":0},"css link":{"treeState":0}}}},"code":{"model":{"fileType":"apogee model","version":0.3,"name":"Workspace","children":{"main":{"name":"main","type":"apogee.Folder","children":{"formFunctionBody":{"name":"formFunctionBody","type":"apogee.JsonMember","updateData":{"data":"let output = {};\noutput[\"url\"] = \"http://localhost:3456/reflect/basic?qp1=345\"\noutput[\"method\"] = \"POST\"\noutput[\"body\"] = JSON.stringify(dummy)\noutput[\"headers\"] = [{\"key\":\"Content-Type\",\"value\":\"application/json\"}]\noutput[\"outputFormat\"] = \"json\"\nreturn output;"}},"evaluatedFormResult":{"name":"evaluatedFormResult","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let output = {};\noutput[\"url\"] = \"http://localhost:3456/reflect/basic?qp1=345\"\noutput[\"method\"] = \"POST\"\noutput[\"body\"] = JSON.stringify(dummy)\noutput[\"headers\"] = [{\"key\":\"Content-Type\",\"value\":\"application/json\"}]\noutput[\"outputFormat\"] = \"json\"\nreturn output;","supplementalCode":""}},"requestForm":{"name":"requestForm","type":"apogee.FunctionMember","updateData":{"argList":["admin"],"functionBody":"let onSubmit = (formValue,formObject) => {\n    let formMeta = formObject.getMeta();\n    let functionBody = apogeeui.getFormResultFunctionBody(formValue,formMeta);\n    admin.getCommandMessenger().dataCommand(\"formFunctionBody\",functionBody);\n}\n\nreturn [\n    {\n        type: \"heading\",\n        level: 2,\n        text: \"Request\"\n    },\n    {\n        type: \"textField\",\n        label: \"URL: \",\n        size: 80,\n        key: \"url\",\n        hint: \"string\"\n    },\n    {\n        type: \"dropdown\",\n        label: \"Method: \",\n        entries: [[\"--not specified--\",null],\"GET\",\"POST\",\"PUT\",\"HEAD\",\"PATCH\",\"DELETE\"],\n        value: \"GET\",\n        key: \"method\",\n        meta: {\n            excludeValue: null\n        }\n    },\n    {\n        type: \"textField\",\n        label: \"Body: \",\n        size: 80,\n        key: \"body\",\n        meta: {\n            expression: \"simple\",\n            excludeValue: \"\"\n        },\n        hint: \"optional, reference\"\n    },\n     {\n\t\ttype: \"showHideLayout\", //REQUIRED\n\t\theading: \"Headers\", //OPTIONAL\n\t\tlevel: 3, //OPTIONAL\n\t\tclosed: true, //OPTIONAL - This gives the initial state\n\t\tformData: [ //REQUIRED - These are elements in the layout. They still appead as children in the parent form.\n\t\t    {\n\t\t        type: \"list\",\n\t\t        label: \"Headers: \",\n\t\t        entryType: {\n\t\t            label: \"Header\",\n\t\t            layout: {\n\t\t                type: \"panel\",\n\t\t                formData: [\n                            {\n                                type: \"textField\",\n                                label: \"Key: \",\n                                key: \"key\"\n                            },\n                            {\n                                type: \"textField\",\n                                label: \"Value: \",\n                                key: \"value\"\n                            }\n\t\t                ],\n\t\t                key: \"header\"\n\t\t            }\n\t\t        },\n\t\t        key: \"headers\"\n\t\t    }\n\t\t]\n\t},\n    {\n        type: \"heading\",\n        level: 2,\n        text: \"Response\",\n    },\n    {\n        type: \"radioButtonGroup\",\n        label: \"Output Format: \",\n        entries: [[\"Text\",\"text\"],[\"JSON\",\"json\"]],\n        key: \"outputFormat\",\n    },\n    {\n        type: \"submit\",\n        onSubmit: onSubmit,\n        submitLabel: \"Submit\"\n    },\n]","supplementalCode":""}},"request":{"name":"request","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let options = {};\nif(evaluatedFormResult.method !== undefined) options.method = evaluatedFormResult.method;\nif(evaluatedFormResult.body !== undefined) options.body = evaluatedFormResult.body;\nif(evaluatedFormResult.headers) {\n    options.header = {};\n    evaluatedFormResult.headers.forEach(headerEntry => {\n        options.header[headerEntry.key] = headerEntry.value\n    })\n}\n//return options\nif(evaluatedFormResult.outputFormat == \"json\") {\n     return apogeeutil.jsonRequest(evaluatedFormResult.url,options);   \n}\nelse {\n    return apogeeutil.textRequest(evaluatedFormResult.url,options);\n}","supplementalCode":""}},"dummy":{"name":"dummy","type":"apogee.JsonMember","updateData":{"data":{"a":[1,2,3],"b":false}}}}}}},"components":{"main":{"type":"apogeeapp.PageComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Request Cell"}]},{"type":"heading2","content":[{"type":"text","text":"Notes"}]},{"type":"paragraph","content":[{"type":"text","text":"This is some initial work on a HTTP request cell."}]},{"type":"paragraph","content":[{"type":"text","text":"To Think About:"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"I don't think you should have to stringify json if you are putting it in. (Maybe detect if it is an object or array? This makes a potential error for strings as json)"}]},{"type":"listItem","content":[{"type":"text","text":"I should predefiine some headers (like content type, etc)"}]},{"type":"listItem","content":[{"type":"text","text":"I should add a form cell to do form encoding."}]},{"type":"listItem","content":[{"type":"text","text":"for url I should probably let people use a reference optionally."}]},{"type":"listItem","content":[{"type":"text","text":"the output should be two views - headers and data. And we should include the error body, maybe in the data field, with the data field having an error."}]},{"type":"listItem","content":[{"type":"text","text":"Maybe we need two tables - a \"save\" table(makes the request whenever inputs change) and a \"button\" table (only makes request when you press the button)"}]}]},{"type":"paragraph","content":[{"type":"text","text":"Potential New Model Features"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"NEW TABLE TYPE: RAM Data Table - doesn't save anything (maybe a different name)"}]},{"type":"listItem","content":[{"type":"text","text":"Setting data values on tables with errors (in this case, giving the response body, as text, which may include error data. Maybe in general we should include error information)"}]}]},{"type":"heading3","content":[{"type":"text","text":"On the server side:"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"I should make the method controllable"}]},{"type":"listItem","content":[{"type":"text","text":"I should add other input fields"}]},{"type":"listItem","content":[{"type":"text","text":"I should add output headers!"}]}]},{"type":"paragraph","content":[{"type":"text","text":"other fields on the server size. These are some fields taken from Express documentation for the request."}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"base url"}]},{"type":"listItem","content":[{"type":"text","text":"cookies"}]},{"type":"listItem","content":[{"type":"text","text":"hostname"}]},{"type":"listItem","content":[{"type":"text","text":"ip"}]},{"type":"listItem","content":[{"type":"text","text":"ips"}]},{"type":"listItem","content":[{"type":"text","text":"method"}]},{"type":"listItem","content":[{"type":"text","text":"originalUrl"}]},{"type":"listItem","content":[{"type":"text","text":"path"}]},{"type":"listItem","content":[{"type":"text","text":"protocol"}]},{"type":"listItem","content":[{"type":"text","text":"params (something from rest - field values)"}]},{"type":"listItem","content":[{"type":"text","text":"route"}]},{"type":"listItem","content":[{"type":"text","text":"secure"}]},{"type":"listItem","content":[{"type":"text","text":"signedCookies"}]},{"type":"listItem","content":[{"type":"text","text":"range (to reconstruct!!!)"}]}]},{"type":"heading2","content":[{"type":"text","text":"Code"}]},{"type":"paragraph","content":[{"type":"text","text":"This cell is just used for the body"}]},{"type":"apogeeComponent","attrs":{"name":"dummy","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"test url: http://localhost:3456/reflect/basic?qp1=345"}]},{"type":"apogeeComponent","attrs":{"name":"requestForm","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"formFunctionBody","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"evaluatedFormResult","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"request","id":0,"state":""}}]}},"children":{"formFunctionBody":{"type":"apogeeapp.JsonCell","dataView":"Text Data","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"evaluatedFormResult":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"requestForm":{"type":"apogeeapp.ActionFormCell","viewState":{"childDisplayState":{"views":{"Form":{"isViewActive":true},"Code":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"request":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"dummy":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}}},"viewState":{"treeState":1,"tabOpened":true,"tabShowing":true}},"viewState":{"treeState":1}}},"viewState":{"treeState":1}}