{"version":3,"file":"keymap.js","sources":["../src/keymap.js"],"sourcesContent":["import keyName from \"w3c-keyname\"\nimport {Plugin} from \"prosemirror-state\"\n\n// declare global: navigator\n\nconst mac = typeof navigator != \"undefined\" ? /Mac/.test(navigator.platform) : false\n\nfunction normalizeKeyName(name) {\n  let parts = name.split(/-(?!$)/), result = parts[parts.length - 1]\n  if (result == \"Space\") result = \" \"\n  let alt, ctrl, shift, meta\n  for (let i = 0; i < parts.length - 1; i++) {\n    let mod = parts[i]\n    if (/^(cmd|meta|m)$/i.test(mod)) meta = true\n    else if (/^a(lt)?$/i.test(mod)) alt = true\n    else if (/^(c|ctrl|control)$/i.test(mod)) ctrl = true\n    else if (/^s(hift)?$/i.test(mod)) shift = true\n    else if (/^mod$/i.test(mod)) { if (mac) meta = true; else ctrl = true }\n    else throw new Error(\"Unrecognized modifier name: \" + mod)\n  }\n  if (alt) result = \"Alt-\" + result\n  if (ctrl) result = \"Ctrl-\" + result\n  if (meta) result = \"Meta-\" + result\n  if (shift) result = \"Shift-\" + result\n  return result\n}\n\nfunction normalize(map) {\n  let copy = Object.create(null)\n  for (let prop in map) copy[normalizeKeyName(prop)] = map[prop]\n  return copy\n}\n\nfunction modifiers(name, event, shift) {\n  if (event.altKey) name = \"Alt-\" + name\n  if (event.ctrlKey) name = \"Ctrl-\" + name\n  if (event.metaKey) name = \"Meta-\" + name\n  if (shift !== false && event.shiftKey) name = \"Shift-\" + name\n  return name\n}\n\n// :: (Object) → Plugin\n// Create a keymap plugin for the given set of bindings.\n//\n// Bindings should map key names to [command](#commands)-style\n// functions, which will be called with `(EditorState, dispatch,\n// EditorView)` arguments, and should return true when they've handled\n// the key. Note that the view argument isn't part of the command\n// protocol, but can be used as an escape hatch if a binding needs to\n// directly interact with the UI.\n//\n// Key names may be strings like `\"Shift-Ctrl-Enter\"`—a key\n// identifier prefixed with zero or more modifiers. Key identifiers\n// are based on the strings that can appear in\n// [`KeyEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key).\n// Use lowercase letters to refer to letter keys (or uppercase letters\n// if you want shift to be held). You may use `\"Space\"` as an alias\n// for the `\" \"` name.\n//\n// Modifiers can be given in any order. `Shift-` (or `s-`), `Alt-` (or\n// `a-`), `Ctrl-` (or `c-` or `Control-`) and `Cmd-` (or `m-` or\n// `Meta-`) are recognized. For characters that are created by holding\n// shift, the `Shift-` prefix is implied, and should not be added\n// explicitly.\n//\n// You can use `Mod-` as a shorthand for `Cmd-` on Mac and `Ctrl-` on\n// other platforms.\n//\n// You can add multiple keymap plugins to an editor. The order in\n// which they appear determines their precedence (the ones early in\n// the array get to dispatch first).\nexport function keymap(bindings) {\n  return new Plugin({props: {handleKeyDown: keydownHandler(bindings)}})\n}\n\n// :: (Object) → (view: EditorView, event: dom.Event) → bool\n// Given a set of bindings (using the same format as\n// [`keymap`](#keymap.keymap), return a [keydown\n// handler](#view.EditorProps.handleKeyDown) handles them.\nexport function keydownHandler(bindings) {\n  let map = normalize(bindings)\n  return function(view, event) {\n    let name = keyName(event), isChar = name.length == 1 && name != \" \", baseName\n    let direct = map[modifiers(name, event, !isChar)]\n    if (direct && direct(view.state, view.dispatch, view)) return true\n    if (isChar && (event.shiftKey || event.altKey || event.metaKey) &&\n        (baseName = keyName.base[event.keyCode]) && baseName != name) {\n      let fromCode = map[modifiers(baseName, event, true)]\n      if (fromCode && fromCode(view.state, view.dispatch, view)) return true\n    }\n    return false\n  }\n}\n"],"names":["const","let","Plugin"],"mappings":"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"}