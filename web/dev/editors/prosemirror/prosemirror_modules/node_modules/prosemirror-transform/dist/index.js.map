{"version":3,"file":"index.js","sources":["../src/map.js","../src/transform.js","../src/step.js","../src/replace_step.js","../src/structure.js","../src/mark_step.js","../src/mark.js","../src/replace.js"],"sourcesContent":["// Mappable:: interface\n// There are several things that positions can be mapped through.\n// Such objects conform to this interface.\n//\n//   map:: (pos: number, assoc: ?number) → number\n//   Map a position through this object. When given, `assoc` (should\n//   be -1 or 1, defaults to 1) determines with which side the\n//   position is associated, which determines in which direction to\n//   move when a chunk of content is inserted at the mapped position.\n//\n//   mapResult:: (pos: number, assoc: ?number) → MapResult\n//   Map a position, and return an object containing additional\n//   information about the mapping. The result's `deleted` field tells\n//   you whether the position was deleted (completely enclosed in a\n//   replaced range) during the mapping. When content on only one side\n//   is deleted, the position itself is only considered deleted when\n//   `assoc` points in the direction of the deleted content.\n\n// Recovery values encode a range index and an offset. They are\n// represented as numbers, because tons of them will be created when\n// mapping, for example, a large number of decorations. The number's\n// lower 16 bits provide the index, the remaining bits the offset.\n//\n// Note: We intentionally don't use bit shift operators to en- and\n// decode these, since those clip to 32 bits, which we might in rare\n// cases want to overflow. A 64-bit float can represent 48-bit\n// integers precisely.\n\nconst lower16 = 0xffff\nconst factor16 = Math.pow(2, 16)\n\nfunction makeRecover(index, offset) { return index + offset * factor16 }\nfunction recoverIndex(value) { return value & lower16 }\nfunction recoverOffset(value) { return (value - (value & lower16)) / factor16 }\n\n// ::- An object representing a mapped position with extra\n// information.\nexport class MapResult {\n  constructor(pos, deleted = false, recover = null) {\n    // :: number The mapped version of the position.\n    this.pos = pos\n    // :: bool Tells you whether the position was deleted, that is,\n    // whether the step removed its surroundings from the document.\n    this.deleted = deleted\n    this.recover = recover\n  }\n}\n\n// :: class extends Mappable\n// A map describing the deletions and insertions made by a step, which\n// can be used to find the correspondence between positions in the\n// pre-step version of a document and the same position in the\n// post-step version.\nexport class StepMap {\n  // :: ([number])\n  // Create a position map. The modifications to the document are\n  // represented as an array of numbers, in which each group of three\n  // represents a modified chunk as `[start, oldSize, newSize]`.\n  constructor(ranges, inverted = false) {\n    this.ranges = ranges\n    this.inverted = inverted\n  }\n\n  recover(value) {\n    let diff = 0, index = recoverIndex(value)\n    if (!this.inverted) for (let i = 0; i < index; i++)\n      diff += this.ranges[i * 3 + 2] - this.ranges[i * 3 + 1]\n    return this.ranges[index * 3] + diff + recoverOffset(value)\n  }\n\n  // : (number, ?number) → MapResult\n  mapResult(pos, assoc = 1) { return this._map(pos, assoc, false) }\n\n  // : (number, ?number) → number\n  map(pos, assoc = 1) { return this._map(pos, assoc, true) }\n\n  _map(pos, assoc, simple) {\n    let diff = 0, oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2\n    for (let i = 0; i < this.ranges.length; i += 3) {\n      let start = this.ranges[i] - (this.inverted ? diff : 0)\n      if (start > pos) break\n      let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex], end = start + oldSize\n      if (pos <= end) {\n        let side = !oldSize ? assoc : pos == start ? -1 : pos == end ? 1 : assoc\n        let result = start + diff + (side < 0 ? 0 : newSize)\n        if (simple) return result\n        let recover = makeRecover(i / 3, pos - start)\n        return new MapResult(result, assoc < 0 ? pos != start : pos != end, recover)\n      }\n      diff += newSize - oldSize\n    }\n    return simple ? pos + diff : new MapResult(pos + diff)\n  }\n\n  touches(pos, recover) {\n    let diff = 0, index = recoverIndex(recover)\n    let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2\n    for (let i = 0; i < this.ranges.length; i += 3) {\n      let start = this.ranges[i] - (this.inverted ? diff : 0)\n      if (start > pos) break\n      let oldSize = this.ranges[i + oldIndex], end = start + oldSize\n      if (pos <= end && i == index * 3) return true\n      diff += this.ranges[i + newIndex] - oldSize\n    }\n    return false\n  }\n\n  // :: ((oldStart: number, oldEnd: number, newStart: number, newEnd: number))\n  // Calls the given function on each of the changed ranges included in\n  // this map.\n  forEach(f) {\n    let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2\n    for (let i = 0, diff = 0; i < this.ranges.length; i += 3) {\n      let start = this.ranges[i], oldStart = start - (this.inverted ? diff : 0), newStart = start + (this.inverted ? 0 : diff)\n      let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex]\n      f(oldStart, oldStart + oldSize, newStart, newStart + newSize)\n      diff += newSize - oldSize\n    }\n  }\n\n  // :: () → StepMap\n  // Create an inverted version of this map. The result can be used to\n  // map positions in the post-step document to the pre-step document.\n  invert() {\n    return new StepMap(this.ranges, !this.inverted)\n  }\n\n  toString() {\n    return (this.inverted ? \"-\" : \"\") + JSON.stringify(this.ranges)\n  }\n\n  // :: (n: number) → StepMap\n  // Create a map that moves all positions by offset `n` (which may be\n  // negative). This can be useful when applying steps meant for a\n  // sub-document to a larger document, or vice-versa.\n  static offset(n) {\n    return n == 0 ? StepMap.empty : new StepMap(n < 0 ? [0, -n, 0] : [0, 0, n])\n  }\n}\n\nStepMap.empty = new StepMap([])\n\n// :: class extends Mappable\n// A mapping represents a pipeline of zero or more [step\n// maps](#transform.StepMap). It has special provisions for losslessly\n// handling mapping positions through a series of steps in which some\n// steps are inverted versions of earlier steps. (This comes up when\n// ‘[rebasing](/docs/guide/#transform.rebasing)’ steps for\n// collaboration or history management.)\nexport class Mapping {\n  // :: (?[StepMap])\n  // Create a new mapping with the given position maps.\n  constructor(maps, mirror, from, to) {\n    // :: [StepMap]\n    // The step maps in this mapping.\n    this.maps = maps || []\n    // :: number\n    // The starting position in the `maps` array, used when `map` or\n    // `mapResult` is called.\n    this.from = from || 0\n    // :: number\n    // The end position in the `maps` array.\n    this.to = to == null ? this.maps.length : to\n    this.mirror = mirror\n  }\n\n  // :: (?number, ?number) → Mapping\n  // Create a mapping that maps only through a part of this one.\n  slice(from = 0, to = this.maps.length) {\n    return new Mapping(this.maps, this.mirror, from, to)\n  }\n\n  copy() {\n    return new Mapping(this.maps.slice(), this.mirror && this.mirror.slice(), this.from, this.to)\n  }\n\n  // :: (StepMap, ?number)\n  // Add a step map to the end of this mapping. If `mirrors` is\n  // given, it should be the index of the step map that is the mirror\n  // image of this one.\n  appendMap(map, mirrors) {\n    this.to = this.maps.push(map)\n    if (mirrors != null) this.setMirror(this.maps.length - 1, mirrors)\n  }\n\n  // :: (Mapping)\n  // Add all the step maps in a given mapping to this one (preserving\n  // mirroring information).\n  appendMapping(mapping) {\n    for (let i = 0, startSize = this.maps.length; i < mapping.maps.length; i++) {\n      let mirr = mapping.getMirror(i)\n      this.appendMap(mapping.maps[i], mirr != null && mirr < i ? startSize + mirr : null)\n    }\n  }\n\n  // :: (number) → ?number\n  // Finds the offset of the step map that mirrors the map at the\n  // given offset, in this mapping (as per the second argument to\n  // `appendMap`).\n  getMirror(n) {\n    if (this.mirror) for (let i = 0; i < this.mirror.length; i++)\n      if (this.mirror[i] == n) return this.mirror[i + (i % 2 ? -1 : 1)]\n  }\n\n  setMirror(n, m) {\n    if (!this.mirror) this.mirror = []\n    this.mirror.push(n, m)\n  }\n\n  // :: (Mapping)\n  // Append the inverse of the given mapping to this one.\n  appendMappingInverted(mapping) {\n    for (let i = mapping.maps.length - 1, totalSize = this.maps.length + mapping.maps.length; i >= 0; i--) {\n      let mirr = mapping.getMirror(i)\n      this.appendMap(mapping.maps[i].invert(), mirr != null && mirr > i ? totalSize - mirr - 1 : null)\n    }\n  }\n\n  // () → Mapping\n  // Create an inverted version of this mapping.\n  invert() {\n    let inverse = new Mapping\n    inverse.appendMappingInverted(this)\n    return inverse\n  }\n\n  // : (number, ?number) → number\n  // Map a position through this mapping.\n  map(pos, assoc = 1) {\n    if (this.mirror) return this._map(pos, assoc, true)\n    for (let i = this.from; i < this.to; i++)\n      pos = this.maps[i].map(pos, assoc)\n    return pos\n  }\n\n  // : (number, ?number) → MapResult\n  // Map a position through this mapping, returning a mapping\n  // result.\n  mapResult(pos, assoc = 1) { return this._map(pos, assoc, false) }\n\n  _map(pos, assoc, simple) {\n    let deleted = false, recoverables = null\n\n    for (let i = this.from; i < this.to; i++) {\n      let map = this.maps[i], rec = recoverables && recoverables[i]\n      if (rec != null && map.touches(pos, rec)) {\n        pos = map.recover(rec)\n        continue\n      }\n\n      let result = map.mapResult(pos, assoc)\n      if (result.recover != null) {\n        let corr = this.getMirror(i)\n        if (corr != null && corr > i && corr < this.to) {\n          if (result.deleted) {\n            i = corr\n            pos = this.maps[corr].recover(result.recover)\n            continue\n          } else {\n            ;(recoverables || (recoverables = Object.create(null)))[corr] = result.recover\n          }\n        }\n      }\n\n      if (result.deleted) deleted = true\n      pos = result.pos\n    }\n\n    return simple ? pos : new MapResult(pos, deleted)\n  }\n}\n","import {Mapping} from \"./map\"\n\nexport function TransformError(message) {\n  let err = Error.call(this, message)\n  err.__proto__ = TransformError.prototype\n  return err\n}\n\nTransformError.prototype = Object.create(Error.prototype)\nTransformError.prototype.constructor = TransformError\nTransformError.prototype.name = \"TransformError\"\n\n// ::- Abstraction to build up and track an array of\n// [steps](#transform.Step) representing a document transformation.\n//\n// Most transforming methods return the `Transform` object itself, so\n// that they can be chained.\nexport class Transform {\n  // :: (Node)\n  // Create a transform that starts with the given document.\n  constructor(doc) {\n    // :: Node\n    // The current document (the result of applying the steps in the\n    // transform).\n    this.doc = doc\n    // :: [Step]\n    // The steps in this transform.\n    this.steps = []\n    // :: [Node]\n    // The documents before each of the steps.\n    this.docs = []\n    // :: Mapping\n    // A mapping with the maps for each of the steps in this transform.\n    this.mapping = new Mapping\n  }\n\n  // :: Node The starting document.\n  get before() { return this.docs.length ? this.docs[0] : this.doc }\n\n  // :: (step: Step) → this\n  // Apply a new step in this transform, saving the result. Throws an\n  // error when the step fails.\n  step(object) {\n    let result = this.maybeStep(object)\n    if (result.failed) throw new TransformError(result.failed)\n    return this\n  }\n\n  // :: (Step) → StepResult\n  // Try to apply a step in this transformation, ignoring it if it\n  // fails. Returns the step result.\n  maybeStep(step) {\n    let result = step.apply(this.doc)\n    if (!result.failed) this.addStep(step, result.doc)\n    return result\n  }\n\n  // :: bool\n  // True when the document has been changed (when there are any\n  // steps).\n  get docChanged() {\n    return this.steps.length > 0\n  }\n\n  addStep(step, doc) {\n    this.docs.push(this.doc)\n    this.steps.push(step)\n    this.mapping.appendMap(step.getMap())\n    this.doc = doc\n  }\n}\n","import {ReplaceError} from \"prosemirror-model\"\n\nimport {StepMap} from \"./map\"\n\nfunction mustOverride() { throw new Error(\"Override me\") }\n\nconst stepsByID = Object.create(null)\n\n// ::- A step object represents an atomic change. It generally applies\n// only to the document it was created for, since the positions\n// stored in it will only make sense for that document.\n//\n// New steps are defined by creating classes that extend `Step`,\n// overriding the `apply`, `invert`, `map`, `getMap` and `fromJSON`\n// methods, and registering your class with a unique\n// JSON-serialization identifier using\n// [`Step.jsonID`](#transform.Step^jsonID).\nexport class Step {\n  // :: (doc: Node) → StepResult\n  // Applies this step to the given document, returning a result\n  // object that either indicates failure, if the step can not be\n  // applied to this document, or indicates success by containing a\n  // transformed document.\n  apply(_doc) { return mustOverride() }\n\n  // :: () → StepMap\n  // Get the step map that represents the changes made by this step,\n  // and which can be used to transform between positions in the old\n  // and the new document.\n  getMap() { return StepMap.empty }\n\n  // :: (doc: Node) → Step\n  // Create an inverted version of this step. Needs the document as it\n  // was before the step as argument.\n  invert(_doc) { return mustOverride() }\n\n  // :: (mapping: Mappable) → ?Step\n  // Map this step through a mappable thing, returning either a\n  // version of that step with its positions adjusted, or `null` if\n  // the step was entirely deleted by the mapping.\n  map(_mapping) { return mustOverride() }\n\n  // :: (other: Step) → ?Step\n  // Try to merge this step with another one, to be applied directly\n  // after it. Returns the merged step when possible, null if the\n  // steps can't be merged.\n  merge(_other) { return null }\n\n  // :: () → Object\n  // Create a JSON-serializeable representation of this step. When\n  // defining this for a custom subclass, make sure the result object\n  // includes the step type's [JSON id](#transform.Step^jsonID) under\n  // the `stepType` property.\n  toJSON() { return mustOverride() }\n\n  // :: (Schema, Object) → Step\n  // Deserialize a step from its JSON representation. Will call\n  // through to the step class' own implementation of this method.\n  static fromJSON(schema, json) {\n    if (!json || !json.stepType) throw new RangeError(\"Invalid input for Step.fromJSON\")\n    let type = stepsByID[json.stepType]\n    if (!type) throw new RangeError(`No step type ${json.stepType} defined`)\n    return type.fromJSON(schema, json)\n  }\n\n  // :: (string, constructor<Step>)\n  // To be able to serialize steps to JSON, each step needs a string\n  // ID to attach to its JSON representation. Use this method to\n  // register an ID for your step classes. Try to pick something\n  // that's unlikely to clash with steps from other modules.\n  static jsonID(id, stepClass) {\n    if (id in stepsByID) throw new RangeError(\"Duplicate use of step JSON ID \" + id)\n    stepsByID[id] = stepClass\n    stepClass.prototype.jsonID = id\n    return stepClass\n  }\n}\n\n// ::- The result of [applying](#transform.Step.apply) a step. Contains either a\n// new document or a failure value.\nexport class StepResult {\n  // : (?Node, ?string)\n  constructor(doc, failed) {\n    // :: ?Node The transformed document.\n    this.doc = doc\n    // :: ?string Text providing information about a failed step.\n    this.failed = failed\n  }\n\n  // :: (Node) → StepResult\n  // Create a successful step result.\n  static ok(doc) { return new StepResult(doc, null) }\n\n  // :: (string) → StepResult\n  // Create a failed step result.\n  static fail(message) { return new StepResult(null, message) }\n\n  // :: (Node, number, number, Slice) → StepResult\n  // Call [`Node.replace`](#model.Node.replace) with the given\n  // arguments. Create a successful result if it succeeds, and a\n  // failed one if it throws a `ReplaceError`.\n  static fromReplace(doc, from, to, slice) {\n    try {\n      return StepResult.ok(doc.replace(from, to, slice))\n    } catch (e) {\n      if (e instanceof ReplaceError) return StepResult.fail(e.message)\n      throw e\n    }\n  }\n}\n","import {Slice} from \"prosemirror-model\"\n\nimport {Step, StepResult} from \"./step\"\nimport {StepMap} from \"./map\"\n\n// ::- Replace a part of the document with a slice of new content.\nexport class ReplaceStep extends Step {\n  // :: (number, number, Slice, ?bool)\n  // The given `slice` should fit the 'gap' between `from` and\n  // `to`—the depths must line up, and the surrounding nodes must be\n  // able to be joined with the open sides of the slice. When\n  // `structure` is true, the step will fail if the content between\n  // from and to is not just a sequence of closing and then opening\n  // tokens (this is to guard against rebased replace steps\n  // overwriting something they weren't supposed to).\n  constructor(from, to, slice, structure) {\n    super()\n    this.from = from\n    this.to = to\n    this.slice = slice\n    this.structure = !!structure\n  }\n\n  apply(doc) {\n    if (this.structure && contentBetween(doc, this.from, this.to))\n      return StepResult.fail(\"Structure replace would overwrite content\")\n    return StepResult.fromReplace(doc, this.from, this.to, this.slice)\n  }\n\n  getMap() {\n    return new StepMap([this.from, this.to - this.from, this.slice.size])\n  }\n\n  invert(doc) {\n    return new ReplaceStep(this.from, this.from + this.slice.size, doc.slice(this.from, this.to))\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    if (from.deleted && to.deleted) return null\n    return new ReplaceStep(from.pos, Math.max(from.pos, to.pos), this.slice)\n  }\n\n  merge(other) {\n    if (!(other instanceof ReplaceStep) || other.structure != this.structure) return null\n\n    if (this.from + this.slice.size == other.from && !this.slice.openEnd && !other.slice.openStart) {\n      let slice = this.slice.size + other.slice.size == 0 ? Slice.empty\n          : new Slice(this.slice.content.append(other.slice.content), this.slice.openStart, other.slice.openEnd)\n      return new ReplaceStep(this.from, this.to + (other.to - other.from), slice, this.structure)\n    } else if (other.to == this.from && !this.slice.openStart && !other.slice.openEnd) {\n      let slice = this.slice.size + other.slice.size == 0 ? Slice.empty\n          : new Slice(other.slice.content.append(this.slice.content), other.slice.openStart, this.slice.openEnd)\n      return new ReplaceStep(other.from, this.to, slice, this.structure)\n    } else {\n      return null\n    }\n  }\n\n  toJSON() {\n    let json = {stepType: \"replace\", from: this.from, to: this.to}\n    if (this.slice.size) json.slice = this.slice.toJSON()\n    if (this.structure) json.structure = true\n    return json\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\")\n      throw new RangeError(\"Invalid input for ReplaceStep.fromJSON\")\n    return new ReplaceStep(json.from, json.to, Slice.fromJSON(schema, json.slice), !!json.structure)\n  }\n}\n\nStep.jsonID(\"replace\", ReplaceStep)\n\n// ::- Replace a part of the document with a slice of content, but\n// preserve a range of the replaced content by moving it into the\n// slice.\nexport class ReplaceAroundStep extends Step {\n  // :: (number, number, number, number, Slice, number, ?bool)\n  // Create a replace-around step with the given range and gap.\n  // `insert` should be the point in the slice into which the content\n  // of the gap should be moved. `structure` has the same meaning as\n  // it has in the [`ReplaceStep`](#transform.ReplaceStep) class.\n  constructor(from, to, gapFrom, gapTo, slice, insert, structure) {\n    super()\n    this.from = from\n    this.to = to\n    this.gapFrom = gapFrom\n    this.gapTo = gapTo\n    this.slice = slice\n    this.insert = insert\n    this.structure = !!structure\n  }\n\n  apply(doc) {\n    if (this.structure && (contentBetween(doc, this.from, this.gapFrom) ||\n                           contentBetween(doc, this.gapTo, this.to)))\n      return StepResult.fail(\"Structure gap-replace would overwrite content\")\n\n    let gap = doc.slice(this.gapFrom, this.gapTo)\n    if (gap.openStart || gap.openEnd)\n      return StepResult.fail(\"Gap is not a flat range\")\n    let inserted = this.slice.insertAt(this.insert, gap.content)\n    if (!inserted) return StepResult.fail(\"Content does not fit in gap\")\n    return StepResult.fromReplace(doc, this.from, this.to, inserted)\n  }\n\n  getMap() {\n    return new StepMap([this.from, this.gapFrom - this.from, this.insert,\n                        this.gapTo, this.to - this.gapTo, this.slice.size - this.insert])\n  }\n\n  invert(doc) {\n    let gap = this.gapTo - this.gapFrom\n    return new ReplaceAroundStep(this.from, this.from + this.slice.size + gap,\n                                 this.from + this.insert, this.from + this.insert + gap,\n                                 doc.slice(this.from, this.to).removeBetween(this.gapFrom - this.from, this.gapTo - this.from),\n                                 this.gapFrom - this.from, this.structure)\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    let gapFrom = mapping.map(this.gapFrom, -1), gapTo = mapping.map(this.gapTo, 1)\n    if ((from.deleted && to.deleted) || gapFrom < from.pos || gapTo > to.pos) return null\n    return new ReplaceAroundStep(from.pos, to.pos, gapFrom, gapTo, this.slice, this.insert, this.structure)\n  }\n\n  toJSON() {\n    let json = {stepType: \"replaceAround\", from: this.from, to: this.to,\n                gapFrom: this.gapFrom, gapTo: this.gapTo, insert: this.insert}\n    if (this.slice.size) json.slice = this.slice.toJSON()\n    if (this.structure) json.structure = true\n    return json\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\" ||\n        typeof json.gapFrom != \"number\" || typeof json.gapTo != \"number\" || typeof json.insert != \"number\")\n      throw new RangeError(\"Invalid input for ReplaceAroundStep.fromJSON\")\n    return new ReplaceAroundStep(json.from, json.to, json.gapFrom, json.gapTo,\n                                 Slice.fromJSON(schema, json.slice), json.insert, !!json.structure)\n  }\n}\n\nStep.jsonID(\"replaceAround\", ReplaceAroundStep)\n\nfunction contentBetween(doc, from, to) {\n  let $from = doc.resolve(from), dist = to - from, depth = $from.depth\n  while (dist > 0 && depth > 0 && $from.indexAfter(depth) == $from.node(depth).childCount) {\n    depth--\n    dist--\n  }\n  if (dist > 0) {\n    let next = $from.node(depth).maybeChild($from.indexAfter(depth))\n    while (dist > 0) {\n      if (!next || next.isLeaf) return true\n      next = next.firstChild\n      dist--\n    }\n  }\n  return false\n}\n","import {Slice, Fragment} from \"prosemirror-model\"\n\nimport {Transform} from \"./transform\"\nimport {ReplaceStep, ReplaceAroundStep} from \"./replace_step\"\n\nfunction canCut(node, start, end) {\n  return (start == 0 || node.canReplace(start, node.childCount)) &&\n    (end == node.childCount || node.canReplace(0, end))\n}\n\n// :: (NodeRange) → ?number\n// Try to find a target depth to which the content in the given range\n// can be lifted. Will not go across\n// [isolating](#model.NodeSpec.isolating) parent nodes.\nexport function liftTarget(range) {\n  let parent = range.parent\n  let content = parent.content.cutByIndex(range.startIndex, range.endIndex)\n  for (let depth = range.depth;; --depth) {\n    let node = range.$from.node(depth)\n    let index = range.$from.index(depth), endIndex = range.$to.indexAfter(depth)\n    if (depth < range.depth && node.canReplace(index, endIndex, content))\n      return depth\n    if (depth == 0 || node.type.spec.isolating || !canCut(node, index, endIndex)) break\n  }\n}\n\n// :: (NodeRange, number) → this\n// Split the content in the given range off from its parent, if there\n// is sibling content before or after it, and move it up the tree to\n// the depth specified by `target`. You'll probably want to use\n// [`liftTarget`](#transform.liftTarget) to compute `target`, to make\n// sure the lift is valid.\nTransform.prototype.lift = function(range, target) {\n  let {$from, $to, depth} = range\n\n  let gapStart = $from.before(depth + 1), gapEnd = $to.after(depth + 1)\n  let start = gapStart, end = gapEnd\n\n  let before = Fragment.empty, openStart = 0\n  for (let d = depth, splitting = false; d > target; d--)\n    if (splitting || $from.index(d) > 0) {\n      splitting = true\n      before = Fragment.from($from.node(d).copy(before))\n      openStart++\n    } else {\n      start--\n    }\n  let after = Fragment.empty, openEnd = 0\n  for (let d = depth, splitting = false; d > target; d--)\n    if (splitting || $to.after(d + 1) < $to.end(d)) {\n      splitting = true\n      after = Fragment.from($to.node(d).copy(after))\n      openEnd++\n    } else {\n      end++\n    }\n\n  return this.step(new ReplaceAroundStep(start, end, gapStart, gapEnd,\n                                         new Slice(before.append(after), openStart, openEnd),\n                                         before.size - openStart, true))\n}\n\n// :: (NodeRange, NodeType, ?Object, ?NodeRange) → ?[{type: NodeType, attrs: ?Object}]\n// Try to find a valid way to wrap the content in the given range in a\n// node of the given type. May introduce extra nodes around and inside\n// the wrapper node, if necessary. Returns null if no valid wrapping\n// could be found. When `innerRange` is given, that range's content is\n// used as the content to fit into the wrapping, instead of the\n// content of `range`.\nexport function findWrapping(range, nodeType, attrs, innerRange = range) {\n  let around = findWrappingOutside(range, nodeType)\n  let inner = around && findWrappingInside(innerRange, nodeType)\n  if (!inner) return null\n  return around.map(withAttrs).concat({type: nodeType, attrs}).concat(inner.map(withAttrs))\n}\n\nfunction withAttrs(type) { return {type, attrs: null} }\n\nfunction findWrappingOutside(range, type) {\n  let {parent, startIndex, endIndex} = range\n  let around = parent.contentMatchAt(startIndex).findWrapping(type)\n  if (!around) return null\n  let outer = around.length ? around[0] : type\n  return parent.canReplaceWith(startIndex, endIndex, outer) ? around : null\n}\n\nfunction findWrappingInside(range, type) {\n  let {parent, startIndex, endIndex} = range\n  let inner = parent.child(startIndex)\n  let inside = type.contentMatch.findWrapping(inner.type)\n  if (!inside) return null\n  let lastType = inside.length ? inside[inside.length - 1] : type\n  let innerMatch = lastType.contentMatch\n  for (let i = startIndex; innerMatch && i < endIndex; i++)\n    innerMatch = innerMatch.matchType(parent.child(i).type)\n  if (!innerMatch || !innerMatch.validEnd) return null\n  return inside\n}\n\n// :: (NodeRange, [{type: NodeType, attrs: ?Object}]) → this\n// Wrap the given [range](#model.NodeRange) in the given set of wrappers.\n// The wrappers are assumed to be valid in this position, and should\n// probably be computed with [`findWrapping`](#transform.findWrapping).\nTransform.prototype.wrap = function(range, wrappers) {\n  let content = Fragment.empty\n  for (let i = wrappers.length - 1; i >= 0; i--)\n    content = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content))\n\n  let start = range.start, end = range.end\n  return this.step(new ReplaceAroundStep(start, end, start, end, new Slice(content, 0, 0), wrappers.length, true))\n}\n\n// :: (number, ?number, NodeType, ?Object) → this\n// Set the type of all textblocks (partly) between `from` and `to` to\n// the given node type with the given attributes.\nTransform.prototype.setBlockType = function(from, to = from, type, attrs) {\n  if (!type.isTextblock) throw new RangeError(\"Type given to setBlockType should be a textblock\")\n  let mapFrom = this.steps.length\n  this.doc.nodesBetween(from, to, (node, pos) => {\n    if (node.isTextblock && !node.hasMarkup(type, attrs) && canChangeType(this.doc, this.mapping.slice(mapFrom).map(pos), type)) {\n      // Ensure all markup that isn't allowed in the new node type is cleared\n      this.clearIncompatible(this.mapping.slice(mapFrom).map(pos, 1), type)\n      let mapping = this.mapping.slice(mapFrom)\n      let startM = mapping.map(pos, 1), endM = mapping.map(pos + node.nodeSize, 1)\n      this.step(new ReplaceAroundStep(startM, endM, startM + 1, endM - 1,\n                                      new Slice(Fragment.from(type.create(attrs, null, node.marks)), 0, 0), 1, true))\n      return false\n    }\n  })\n  return this\n}\n\nfunction canChangeType(doc, pos, type) {\n  let $pos = doc.resolve(pos), index = $pos.index()\n  return $pos.parent.canReplaceWith(index, index + 1, type)\n}\n\n// :: (number, ?NodeType, ?Object, ?[Mark]) → this\n// Change the type, attributes, and/or marks of the node at `pos`.\n// When `type` isn't given, the existing node type is preserved,\nTransform.prototype.setNodeMarkup = function(pos, type, attrs, marks) {\n  let node = this.doc.nodeAt(pos)\n  if (!node) throw new RangeError(\"No node at given position\")\n  if (!type) type = node.type\n  let newNode = type.create(attrs, null, marks || node.marks)\n  if (node.isLeaf)\n    return this.replaceWith(pos, pos + node.nodeSize, newNode)\n\n  if (!type.validContent(node.content))\n    throw new RangeError(\"Invalid content for node type \" + type.name)\n\n  return this.step(new ReplaceAroundStep(pos, pos + node.nodeSize, pos + 1, pos + node.nodeSize - 1,\n                                         new Slice(Fragment.from(newNode), 0, 0), 1, true))\n}\n\n// :: (Node, number, number, ?[?{type: NodeType, attrs: ?Object}]) → bool\n// Check whether splitting at the given position is allowed.\nexport function canSplit(doc, pos, depth = 1, typesAfter) {\n  let $pos = doc.resolve(pos), base = $pos.depth - depth\n  let innerType = (typesAfter && typesAfter[typesAfter.length - 1]) || $pos.parent\n  if (base < 0 || $pos.parent.type.spec.isolating ||\n      !$pos.parent.canReplace($pos.index(), $pos.parent.childCount) ||\n      !innerType.type.validContent($pos.parent.content.cutByIndex($pos.index(), $pos.parent.childCount)))\n    return false\n  for (let d = $pos.depth - 1, i = depth - 2; d > base; d--, i--) {\n    let node = $pos.node(d), index = $pos.index(d)\n    if (node.type.spec.isolating) return false\n    let rest = node.content.cutByIndex(index, node.childCount)\n    let after = (typesAfter && typesAfter[i]) || node\n    if (after != node) rest = rest.replaceChild(0, after.type.create(after.attrs))\n    if (!node.canReplace(index + 1, node.childCount) || !after.type.validContent(rest))\n      return false\n  }\n  let index = $pos.indexAfter(base)\n  let baseType = typesAfter && typesAfter[0]\n  return $pos.node(base).canReplaceWith(index, index, baseType ? baseType.type : $pos.node(base + 1).type)\n}\n\n// :: (number, ?number, ?[?{type: NodeType, attrs: ?Object}]) → this\n// Split the node at the given position, and optionally, if `depth` is\n// greater than one, any number of nodes above that. By default, the\n// parts split off will inherit the node type of the original node.\n// This can be changed by passing an array of types and attributes to\n// use after the split.\nTransform.prototype.split = function(pos, depth = 1, typesAfter) {\n  let $pos = this.doc.resolve(pos), before = Fragment.empty, after = Fragment.empty\n  for (let d = $pos.depth, e = $pos.depth - depth, i = depth - 1; d > e; d--, i--) {\n    before = Fragment.from($pos.node(d).copy(before))\n    let typeAfter = typesAfter && typesAfter[i]\n    after = Fragment.from(typeAfter ? typeAfter.type.create(typeAfter.attrs, after) : $pos.node(d).copy(after))\n  }\n  return this.step(new ReplaceStep(pos, pos, new Slice(before.append(after), depth, depth, true)))\n}\n\n// :: (Node, number) → bool\n// Test whether the blocks before and after a given position can be\n// joined.\nexport function canJoin(doc, pos) {\n  let $pos = doc.resolve(pos), index = $pos.index()\n  return joinable($pos.nodeBefore, $pos.nodeAfter) &&\n    $pos.parent.canReplace(index, index + 1)\n}\n\nfunction joinable(a, b) {\n  return a && b && !a.isLeaf && a.canAppend(b)\n}\n\n// :: (Node, number, ?number) → ?number\n// Find an ancestor of the given position that can be joined to the\n// block before (or after if `dir` is positive). Returns the joinable\n// point, if any.\nexport function joinPoint(doc, pos, dir = -1) {\n  let $pos = doc.resolve(pos)\n  for (let d = $pos.depth;; d--) {\n    let before, after\n    if (d == $pos.depth) {\n      before = $pos.nodeBefore\n      after = $pos.nodeAfter\n    } else if (dir > 0) {\n      before = $pos.node(d + 1)\n      after = $pos.node(d).maybeChild($pos.index(d) + 1)\n    } else {\n      before = $pos.node(d).maybeChild($pos.index(d) - 1)\n      after = $pos.node(d + 1)\n    }\n    if (before && !before.isTextblock && joinable(before, after)) return pos\n    if (d == 0) break\n    pos = dir < 0 ? $pos.before(d) : $pos.after(d)\n  }\n}\n\n// :: (number, ?number) → this\n// Join the blocks around the given position. If depth is 2, their\n// last and first siblings are also joined, and so on.\nTransform.prototype.join = function(pos, depth = 1) {\n  let step = new ReplaceStep(pos - depth, pos + depth, Slice.empty, true)\n  return this.step(step)\n}\n\n// :: (Node, number, NodeType) → ?number\n// Try to find a point where a node of the given type can be inserted\n// near `pos`, by searching up the node hierarchy when `pos` itself\n// isn't a valid place but is at the start or end of a node. Return\n// null if no position was found.\nexport function insertPoint(doc, pos, nodeType) {\n  let $pos = doc.resolve(pos)\n  if ($pos.parent.canReplaceWith($pos.index(), $pos.index(), nodeType)) return pos\n\n  if ($pos.parentOffset == 0)\n    for (let d = $pos.depth - 1; d >= 0; d--) {\n      let index = $pos.index(d)\n      if ($pos.node(d).canReplaceWith(index, index, nodeType)) return $pos.before(d + 1)\n      if (index > 0) return null\n    }\n  if ($pos.parentOffset == $pos.parent.content.size)\n    for (let d = $pos.depth - 1; d >= 0; d--) {\n      let index = $pos.indexAfter(d)\n      if ($pos.node(d).canReplaceWith(index, index, nodeType)) return $pos.after(d + 1)\n      if (index < $pos.node(d).childCount) return null\n    }\n}\n\n// :: (Node, number, Slice) → ?number\n// Finds a position at or around the given position where the given\n// slice can be inserted. Will look at parent nodes' nearest boundary\n// and try there, even if the original position wasn't directly at the\n// start or end of that node. Returns null when no position was found.\nexport function dropPoint(doc, pos, slice) {\n  let $pos = doc.resolve(pos)\n  if (!slice.content.size) return pos\n  let content = slice.content\n  for (let i = 0; i < slice.openStart; i++) content = content.firstChild.content\n  for (let pass = 1; pass <= (slice.openStart == 0 && slice.size ? 2 : 1); pass++) {\n    for (let d = $pos.depth; d >= 0; d--) {\n      let bias = d == $pos.depth ? 0 : $pos.pos <= ($pos.start(d + 1) + $pos.end(d + 1)) / 2 ? -1 : 1\n      let insertPos = $pos.index(d) + (bias > 0 ? 1 : 0)\n      if (pass == 1\n          ? $pos.node(d).canReplace(insertPos, insertPos, content)\n          : $pos.node(d).contentMatchAt(insertPos).findWrapping(content.firstChild.type))\n        return bias == 0 ? $pos.pos : bias < 0 ? $pos.before(d + 1) : $pos.after(d + 1)\n    }\n  }\n  return null\n}\n","import {Fragment, Slice} from \"prosemirror-model\"\nimport {Step, StepResult} from \"./step\"\n\nfunction mapFragment(fragment, f, parent) {\n  let mapped = []\n  for (let i = 0; i < fragment.childCount; i++) {\n    let child = fragment.child(i)\n    if (child.content.size) child = child.copy(mapFragment(child.content, f, child))\n    if (child.isInline) child = f(child, parent, i)\n    mapped.push(child)\n  }\n  return Fragment.fromArray(mapped)\n}\n\n// ::- Add a mark to all inline content between two positions.\nexport class AddMarkStep extends Step {\n  // :: (number, number, Mark)\n  constructor(from, to, mark) {\n    super()\n    this.from = from\n    this.to = to\n    this.mark = mark\n  }\n\n  apply(doc) {\n    let oldSlice = doc.slice(this.from, this.to), $from = doc.resolve(this.from)\n    let parent = $from.node($from.sharedDepth(this.to))\n    let slice = new Slice(mapFragment(oldSlice.content, (node, parent) => {\n      if (!parent.type.allowsMarkType(this.mark.type)) return node\n      return node.mark(this.mark.addToSet(node.marks))\n    }, parent), oldSlice.openStart, oldSlice.openEnd)\n    return StepResult.fromReplace(doc, this.from, this.to, slice)\n  }\n\n  invert() {\n    return new RemoveMarkStep(this.from, this.to, this.mark)\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    if (from.deleted && to.deleted || from.pos >= to.pos) return null\n    return new AddMarkStep(from.pos, to.pos, this.mark)\n  }\n\n  merge(other) {\n    if (other instanceof AddMarkStep &&\n        other.mark.eq(this.mark) &&\n        this.from <= other.to && this.to >= other.from)\n      return new AddMarkStep(Math.min(this.from, other.from),\n                             Math.max(this.to, other.to), this.mark)\n  }\n\n  toJSON() {\n    return {stepType: \"addMark\", mark: this.mark.toJSON(),\n            from: this.from, to: this.to}\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\")\n      throw new RangeError(\"Invalid input for AddMarkStep.fromJSON\")\n    return new AddMarkStep(json.from, json.to, schema.markFromJSON(json.mark))\n  }\n}\n\nStep.jsonID(\"addMark\", AddMarkStep)\n\n// ::- Remove a mark from all inline content between two positions.\nexport class RemoveMarkStep extends Step {\n  // :: (number, number, Mark)\n  constructor(from, to, mark) {\n    super()\n    this.from = from\n    this.to = to\n    this.mark = mark\n  }\n\n  apply(doc) {\n    let oldSlice = doc.slice(this.from, this.to)\n    let slice = new Slice(mapFragment(oldSlice.content, node => {\n      return node.mark(this.mark.removeFromSet(node.marks))\n    }), oldSlice.openStart, oldSlice.openEnd)\n    return StepResult.fromReplace(doc, this.from, this.to, slice)\n  }\n\n  invert() {\n    return new AddMarkStep(this.from, this.to, this.mark)\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    if (from.deleted && to.deleted || from.pos >= to.pos) return null\n    return new RemoveMarkStep(from.pos, to.pos, this.mark)\n  }\n\n  merge(other) {\n    if (other instanceof RemoveMarkStep &&\n        other.mark.eq(this.mark) &&\n        this.from <= other.to && this.to >= other.from)\n      return new RemoveMarkStep(Math.min(this.from, other.from),\n                                Math.max(this.to, other.to), this.mark)\n  }\n\n  toJSON() {\n    return {stepType: \"removeMark\", mark: this.mark.toJSON(),\n            from: this.from, to: this.to}\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\")\n      throw new RangeError(\"Invalid input for RemoveMarkStep.fromJSON\")\n    return new RemoveMarkStep(json.from, json.to, schema.markFromJSON(json.mark))\n  }\n}\n\nStep.jsonID(\"removeMark\", RemoveMarkStep)\n","import {MarkType, Slice, Fragment} from \"prosemirror-model\"\n\nimport {Transform} from \"./transform\"\nimport {AddMarkStep, RemoveMarkStep} from \"./mark_step\"\nimport {ReplaceStep} from \"./replace_step\"\n\n// :: (number, number, Mark) → this\n// Add the given mark to the inline content between `from` and `to`.\nTransform.prototype.addMark = function(from, to, mark) {\n  let removed = [], added = [], removing = null, adding = null\n  this.doc.nodesBetween(from, to, (node, pos, parent) => {\n    if (!node.isInline) return\n    let marks = node.marks\n    if (!mark.isInSet(marks) && parent.type.allowsMarkType(mark.type)) {\n      let start = Math.max(pos, from), end = Math.min(pos + node.nodeSize, to)\n      let newSet = mark.addToSet(marks)\n\n      for (let i = 0; i < marks.length; i++) {\n        if (!marks[i].isInSet(newSet)) {\n          if (removing && removing.to == start && removing.mark.eq(marks[i]))\n            removing.to = end\n          else\n            removed.push(removing = new RemoveMarkStep(start, end, marks[i]))\n        }\n      }\n\n      if (adding && adding.to == start)\n        adding.to = end\n      else\n        added.push(adding = new AddMarkStep(start, end, mark))\n    }\n  })\n\n  removed.forEach(s => this.step(s))\n  added.forEach(s => this.step(s))\n  return this\n}\n\n// :: (number, number, ?union<Mark, MarkType>) → this\n// Remove marks from inline nodes between `from` and `to`. When `mark`\n// is a single mark, remove precisely that mark. When it is a mark type,\n// remove all marks of that type. When it is null, remove all marks of\n// any type.\nTransform.prototype.removeMark = function(from, to, mark = null) {\n  let matched = [], step = 0\n  this.doc.nodesBetween(from, to, (node, pos) => {\n    if (!node.isInline) return\n    step++\n    let toRemove = null\n    if (mark instanceof MarkType) {\n      let found = mark.isInSet(node.marks)\n      if (found) toRemove = [found]\n    } else if (mark) {\n      if (mark.isInSet(node.marks)) toRemove = [mark]\n    } else {\n      toRemove = node.marks\n    }\n    if (toRemove && toRemove.length) {\n      let end = Math.min(pos + node.nodeSize, to)\n      for (let i = 0; i < toRemove.length; i++) {\n        let style = toRemove[i], found\n        for (let j = 0; j < matched.length; j++) {\n          let m = matched[j]\n          if (m.step == step - 1 && style.eq(matched[j].style)) found = m\n        }\n        if (found) {\n          found.to = end\n          found.step = step\n        } else {\n          matched.push({style, from: Math.max(pos, from), to: end, step})\n        }\n      }\n    }\n  })\n  matched.forEach(m => this.step(new RemoveMarkStep(m.from, m.to, m.style)))\n  return this\n}\n\n// :: (number, NodeType, ?ContentMatch) → this\n// Removes all marks and nodes from the content of the node at `pos`\n// that don't match the given new parent node type. Accepts an\n// optional starting [content match](#model.ContentMatch) as third\n// argument.\nTransform.prototype.clearIncompatible = function(pos, parentType, match = parentType.contentMatch) {\n  let node = this.doc.nodeAt(pos)\n  let delSteps = [], cur = pos + 1\n  for (let i = 0; i < node.childCount; i++) {\n    let child = node.child(i), end = cur + child.nodeSize\n    let allowed = match.matchType(child.type, child.attrs)\n    if (!allowed) {\n      delSteps.push(new ReplaceStep(cur, end, Slice.empty))\n    } else {\n      match = allowed\n      for (let j = 0; j < child.marks.length; j++) if (!parentType.allowsMarkType(child.marks[j].type))\n        this.step(new RemoveMarkStep(cur, end, child.marks[j]))\n    }\n    cur = end\n  }\n  if (!match.validEnd) {\n    let fill = match.fillBefore(Fragment.empty, true)\n    this.replace(cur, cur, new Slice(fill, 0, 0))\n  }\n  for (let i = delSteps.length - 1; i >= 0; i--) this.step(delSteps[i])\n  return this\n}\n","import {Fragment, Slice} from \"prosemirror-model\"\n\nimport {ReplaceStep, ReplaceAroundStep} from \"./replace_step\"\nimport {Transform} from \"./transform\"\nimport {insertPoint} from \"./structure\"\n\n// :: (Node, number, ?number, ?Slice) → ?Step\n// ‘Fit’ a slice into a given position in the document, producing a\n// [step](#transform.Step) that inserts it. Will return null if\n// there's no meaningful way to insert the slice here, or inserting it\n// would be a no-op (an empty slice over an empty range).\nexport function replaceStep(doc, from, to = from, slice = Slice.empty) {\n  if (from == to && !slice.size) return null\n\n  let $from = doc.resolve(from), $to = doc.resolve(to)\n  // Optimization -- avoid work if it's obvious that it's not needed.\n  if (fitsTrivially($from, $to, slice)) return new ReplaceStep(from, to, slice)\n  let placed = placeSlice($from, slice)\n\n  let fittedLeft = fitLeft($from, placed)\n  let fitted = fitRight($from, $to, fittedLeft)\n  if (!fitted) return null\n  if (fittedLeft.size != fitted.size && canMoveText($from, $to, fittedLeft)) {\n    let d = $to.depth, after = $to.after(d)\n    while (d > 1 && after == $to.end(--d)) ++after\n    let fittedAfter = fitRight($from, doc.resolve(after), fittedLeft)\n    if (fittedAfter)\n      return new ReplaceAroundStep(from, after, to, $to.end(), fittedAfter, fittedLeft.size)\n  }\n  return fitted.size || from != to ? new ReplaceStep(from, to, fitted) : null\n}\n\n// :: (number, ?number, ?Slice) → this\n// Replace the part of the document between `from` and `to` with the\n// given `slice`.\nTransform.prototype.replace = function(from, to = from, slice = Slice.empty) {\n  let step = replaceStep(this.doc, from, to, slice)\n  if (step) this.step(step)\n  return this\n}\n\n// :: (number, number, union<Fragment, Node, [Node]>) → this\n// Replace the given range with the given content, which may be a\n// fragment, node, or array of nodes.\nTransform.prototype.replaceWith = function(from, to, content) {\n  return this.replace(from, to, new Slice(Fragment.from(content), 0, 0))\n}\n\n// :: (number, number) → this\n// Delete the content between the given positions.\nTransform.prototype.delete = function(from, to) {\n  return this.replace(from, to, Slice.empty)\n}\n\n// :: (number, union<Fragment, Node, [Node]>) → this\n// Insert the given content at the given position.\nTransform.prototype.insert = function(pos, content) {\n  return this.replaceWith(pos, pos, content)\n}\n\n\n\nfunction fitLeftInner($from, depth, placed, placedBelow) {\n  let content = Fragment.empty, openEnd = 0, placedHere = placed[depth]\n  if ($from.depth > depth) {\n    let inner = fitLeftInner($from, depth + 1, placed, placedBelow || placedHere)\n    openEnd = inner.openEnd + 1\n    content = Fragment.from($from.node(depth + 1).copy(inner.content))\n  }\n\n  if (placedHere) {\n    content = content.append(placedHere.content)\n    openEnd = placedHere.openEnd\n  }\n  if (placedBelow) {\n    content = content.append($from.node(depth).contentMatchAt($from.indexAfter(depth)).fillBefore(Fragment.empty, true))\n    openEnd = 0\n  }\n\n  return {content, openEnd}\n}\n\nfunction fitLeft($from, placed) {\n  let {content, openEnd} = fitLeftInner($from, 0, placed, false)\n  return new Slice(content, $from.depth, openEnd || 0)\n}\n\nfunction fitRightJoin(content, parent, $from, $to, depth, openStart, openEnd) {\n  let match, count = content.childCount, matchCount = count - (openEnd > 0 ? 1 : 0)\n  let parentNode = openStart < 0 ? parent : $from.node(depth)\n  if (openStart < 0)\n    match = parentNode.contentMatchAt(matchCount)\n  else if (count == 1 && openEnd > 0)\n    match = parentNode.contentMatchAt(openStart ? $from.index(depth) : $from.indexAfter(depth))\n  else\n    match = parentNode.contentMatchAt($from.indexAfter(depth))\n      .matchFragment(content, count > 0 && openStart ? 1 : 0, matchCount)\n\n  let toNode = $to.node(depth)\n  if (openEnd > 0 && depth < $to.depth) {\n    let after = toNode.content.cutByIndex($to.indexAfter(depth)).addToStart(content.lastChild)\n    let joinable = match.fillBefore(after, true)\n    // Can't insert content if there's a single node stretched across this gap\n    if (joinable && joinable.size && openStart > 0 && count == 1) joinable = null\n\n    if (joinable) {\n      let inner = fitRightJoin(content.lastChild.content, content.lastChild, $from, $to,\n                               depth + 1, count == 1 ? openStart - 1 : -1, openEnd - 1)\n      if (inner) {\n        let last = content.lastChild.copy(inner)\n        if (joinable.size)\n          return content.cutByIndex(0, count - 1).append(joinable).addToEnd(last)\n        else\n          return content.replaceChild(count - 1, last)\n      }\n    }\n  }\n  if (openEnd > 0)\n    match = match.matchType((count == 1 && openStart > 0 ? $from.node(depth + 1) : content.lastChild).type)\n\n  // If we're here, the next level can't be joined, so we see what\n  // happens if we leave it open.\n  let toIndex = $to.index(depth)\n  if (toIndex == toNode.childCount && !toNode.type.compatibleContent(parent.type)) return null\n  let joinable = match.fillBefore(toNode.content, true, toIndex)\n  for (let i = toIndex; joinable && i < toNode.content.childCount; i++)\n    if (!parentNode.type.allowsMarks(toNode.content.child(i).marks)) joinable = null\n  if (!joinable) return null\n\n  if (openEnd > 0) {\n    let closed = fitRightClosed(content.lastChild, openEnd - 1, $from, depth + 1,\n                                count == 1 ? openStart - 1 : -1)\n    content = content.replaceChild(count - 1, closed)\n  }\n  content = content.append(joinable)\n  if ($to.depth > depth)\n    content = content.addToEnd(fitRightSeparate($to, depth + 1))\n  return content\n}\n\nfunction fitRightClosed(node, openEnd, $from, depth, openStart) {\n  let match, content = node.content, count = content.childCount\n  if (openStart >= 0)\n    match = $from.node(depth).contentMatchAt($from.indexAfter(depth))\n      .matchFragment(content, openStart > 0 ? 1 : 0, count)\n  else\n    match = node.contentMatchAt(count)\n\n  if (openEnd > 0) {\n    let closed = fitRightClosed(content.lastChild, openEnd - 1, $from, depth + 1,\n                                count == 1 ? openStart - 1 : -1)\n    content = content.replaceChild(count - 1, closed)\n  }\n\n  return node.copy(content.append(match.fillBefore(Fragment.empty, true)))\n}\n\nfunction fitRightSeparate($to, depth) {\n  let node = $to.node(depth)\n  let fill = node.contentMatchAt(0).fillBefore(node.content, true, $to.index(depth))\n  if ($to.depth > depth) fill = fill.addToEnd(fitRightSeparate($to, depth + 1))\n  return node.copy(fill)\n}\n\nfunction normalizeSlice(content, openStart, openEnd) {\n  while (openStart > 0 && openEnd > 0 && content.childCount == 1) {\n    content = content.firstChild.content\n    openStart--\n    openEnd--\n  }\n  return new Slice(content, openStart, openEnd)\n}\n\n// : (ResolvedPos, ResolvedPos, number, Slice) → Slice\nfunction fitRight($from, $to, slice) {\n  let fitted = fitRightJoin(slice.content, $from.node(0), $from, $to, 0, slice.openStart, slice.openEnd)\n  if (!fitted) return null\n  return normalizeSlice(fitted, slice.openStart, $to.depth)\n}\n\nfunction fitsTrivially($from, $to, slice) {\n  return !slice.openStart && !slice.openEnd && $from.start() == $to.start() &&\n    $from.parent.canReplace($from.index(), $to.index(), slice.content)\n}\n\nfunction canMoveText($from, $to, slice) {\n  if (!$to.parent.isTextblock) return false\n\n  let parent = slice.openEnd ? nodeRight(slice.content, slice.openEnd)\n      : $from.node($from.depth - (slice.openStart - slice.openEnd))\n  if (!parent.isTextblock) return false\n  for (let i = $to.index(); i < $to.parent.childCount; i++)\n    if (!parent.type.allowsMarks($to.parent.child(i).marks)) return false\n  let match\n  if (slice.openEnd) {\n    match = parent.contentMatchAt(parent.childCount)\n  } else {\n    match = parent.contentMatchAt(parent.childCount)\n    if (slice.size) match = match.matchFragment(slice.content, slice.openStart ? 1 : 0)\n  }\n  match = match.matchFragment($to.parent.content, $to.index())\n  return match && match.validEnd\n}\n\nfunction nodeRight(content, depth) {\n  for (let i = 1; i < depth; i++) content = content.lastChild.content\n  return content.lastChild\n}\n\n// Algorithm for 'placing' the elements of a slice into a gap:\n//\n// We consider the content of each node that is open to the left to be\n// independently placeable. I.e. in <p(\"foo\"), p(\"bar\")>, when the\n// paragraph on the left is open, \"foo\" can be placed (somewhere on\n// the left side of the replacement gap) independently from p(\"bar\").\n//\n// So placeSlice splits up a slice into a number of sub-slices,\n// along with information on where they can be placed on the given\n// left-side edge. It works by walking the open side of the slice,\n// from the inside out, and trying to find a landing spot for each\n// element, by simultaneously scanning over the gap side. When no\n// place is found for an open node's content, it is left in that node.\n\n// : (ResolvedPos, Slice) → [{content: Fragment, openEnd: number, depth: number}]\nfunction placeSlice($from, slice) {\n  let frontier = new Frontier($from)\n  for (let pass = 1; slice.size && pass <= 3; pass++)\n    slice = frontier.placeSlice(slice.content, slice.openStart, slice.openEnd, pass)\n  while (frontier.open.length) frontier.closeNode()\n  return frontier.placed\n}\n\n// Helper class that models the open side of the insert position,\n// keeping track of the content match and already inserted content\n// at each depth.\nclass Frontier {\n  constructor($pos) {\n    // : [{parent: Node, match: ContentMatch, content: Fragment, wrapper: bool, openEnd: number, depth: number}]\n    this.open = []\n    for (let d = 0; d <= $pos.depth; d++) {\n      let parent = $pos.node(d), match = parent.contentMatchAt($pos.indexAfter(d))\n      this.open.push({parent, match, content: Fragment.empty, wrapper: false, openEnd: 0, depth: d})\n    }\n    this.placed = []\n  }\n\n  // : (Fragment, number, number, number, ?Node) → Slice\n  // Tries to place the content of the given slice, and returns a\n  // slice containing unplaced content.\n  //\n  // pass 1: try to fit directly\n  // pass 2: allow wrapper nodes to be introduced\n  // pass 3: allow unwrapping of nodes that aren't open\n  placeSlice(fragment, openStart, openEnd, pass, parent) {\n    if (openStart > 0) {\n      let first = fragment.firstChild\n      let inner = this.placeSlice(first.content, Math.max(0, openStart - 1),\n                                  openEnd && fragment.childCount == 1 ? openEnd - 1 : 0,\n                                  pass, first)\n      if (inner.content != first.content) {\n        if (inner.content.size) {\n          fragment = fragment.replaceChild(0, first.copy(inner.content))\n          openStart = inner.openStart + 1\n        } else {\n          if (fragment.childCount == 1) openEnd = 0\n          fragment = fragment.cutByIndex(1)\n          openStart = 0\n        }\n      }\n    }\n    let result = this.placeContent(fragment, openStart, openEnd, pass, parent)\n    if (pass > 2 && result.size && openStart == 0) {\n      for (let i = 0; i < result.content.childCount; i++) {\n        let child = result.content.child(i)\n        this.placeContent(child.content, 0,\n                          openEnd && i == result.content.childCount.length - 1 ? openEnd - 1 : 0,\n                          pass, child)\n      }\n      result = Fragment.empty\n    }\n    return result\n  }\n\n  placeContent(fragment, openStart, openEnd, pass, parent) {\n    let i = 0\n    // Go over the fragment's children\n    for (; i < fragment.childCount; i++) {\n      let child = fragment.child(i), placed = false, last = i == fragment.childCount - 1\n      // Try each open node in turn, starting from the innermost\n      for (let d = this.open.length - 1; d >= 0; d--) {\n        let open = this.open[d], wrap\n\n        // If pass > 1, it is allowed to wrap the node to help find a\n        // fit, so if findWrappeing returns something, we add open\n        // nodes to the frontier for that wrapping.\n        if (pass > 1 && (wrap = open.match.findWrapping(child.type)) &&\n            !(parent && wrap.length && wrap[wrap.length - 1] == parent.type)) {\n          while (this.open.length - 1 > d) this.closeNode()\n          for (let w = 0; w < wrap.length; w++) {\n            open.match = open.match.matchType(wrap[w])\n            d++\n            open = {parent: wrap[w].create(),\n                    match: wrap[w].contentMatch,\n                    content: Fragment.empty, wrapper: true, openEnd: 0, depth: d + w}\n            this.open.push(open)\n          }\n        }\n\n        // See if the child fits here\n        let match = open.match.matchType(child.type)\n        if (!match) {\n          let fill = open.match.fillBefore(Fragment.from(child))\n          if (fill) {\n            for (let j = 0; j < fill.childCount; j++) {\n              let ch = fill.child(j)\n              this.addNode(open, ch, 0)\n              match = open.match.matchFragment(ch)\n            }\n          } else if (parent && open.match.matchType(parent.type)) {\n            // Don't continue looking further up if the parent node\n            // would fit here.\n            break\n          } else {\n            continue\n          }\n        }\n\n        // Close open nodes above this one, since we're starting to\n        // add to this.\n        while (this.open.length - 1 > d) this.closeNode()\n        // Strip marks from the child or close its start when necessary\n        child = child.mark(open.parent.type.allowedMarks(child.marks))\n        if (openStart) {\n          child = closeNodeStart(child, openStart, last ? openEnd : 0)\n          openStart = 0\n        }\n        // Add the child to this open node and adjust its metadata\n        this.addNode(open, child, last ? openEnd : 0)\n        open.match = match\n        if (last) openEnd = 0\n        placed = true\n        break\n      }\n      // As soon as we've failed to place a node we stop looking at\n      // later nodes\n      if (!placed) break\n    }\n    // Close the current open node if it's not the the root and we\n    // either placed up to the end of the node or the the current\n    // slice depth's node type matches the open node's type\n    if (this.open.length > 1 &&\n        (i > 0 && i == fragment.childCount ||\n         parent && this.open[this.open.length - 1].parent.type == parent.type))\n      this.closeNode()\n\n    return new Slice(fragment.cutByIndex(i), openStart, openEnd)\n  }\n\n  addNode(open, node, openEnd) {\n    open.content = closeFragmentEnd(open.content, open.openEnd).addToEnd(node)\n    open.openEnd = openEnd\n  }\n\n  closeNode() {\n    let open = this.open.pop()\n    if (open.content.size == 0) {\n      // Nothing here\n    } else if (open.wrapper) {\n      this.addNode(this.open[this.open.length - 1], open.parent.copy(open.content), open.openEnd + 1)\n    } else {\n      this.placed[open.depth] = {depth: open.depth, content: open.content, openEnd: open.openEnd}\n    }\n  }\n}\n\nfunction closeNodeStart(node, openStart, openEnd) {\n  let content = node.content\n  if (openStart > 1) {\n    let first = closeNodeStart(node.firstChild, openStart - 1, node.childCount == 1 ? openEnd - 1 : 0)\n    content = node.content.replaceChild(0, first)\n  }\n  let fill = node.type.contentMatch.fillBefore(content, openEnd == 0)\n  return node.copy(fill.append(content))\n}\n\nfunction closeNodeEnd(node, depth) {\n  let content = node.content\n  if (depth > 1) {\n    let last = closeNodeEnd(node.lastChild, depth - 1)\n    content = node.content.replaceChild(node.childCount - 1, last)\n  }\n  let fill = node.contentMatchAt(node.childCount).fillBefore(Fragment.empty, true)\n  return node.copy(content.append(fill))\n}\n\nfunction closeFragmentEnd(fragment, depth) {\n  return depth ? fragment.replaceChild(fragment.childCount - 1, closeNodeEnd(fragment.lastChild, depth)) : fragment\n}\n\n// :: (number, number, Slice) → this\n// Replace a range of the document with a given slice, using `from`,\n// `to`, and the slice's [`openStart`](#model.Slice.openStart) property\n// as hints, rather than fixed start and end points. This method may\n// grow the replaced area or close open nodes in the slice in order to\n// get a fit that is more in line with WYSIWYG expectations, by\n// dropping fully covered parent nodes of the replaced region when\n// they are marked [non-defining](#model.NodeSpec.defining), or\n// including an open parent node from the slice that _is_ marked as\n// [defining](#model.NodeSpec.defining).\n//\n// This is the method, for example, to handle paste. The similar\n// [`replace`](#transform.Transform.replace) method is a more\n// primitive tool which will _not_ move the start and end of its given\n// range, and is useful in situations where you need more precise\n// control over what happens.\nTransform.prototype.replaceRange = function(from, to, slice) {\n  if (!slice.size) return this.deleteRange(from, to)\n\n  let $from = this.doc.resolve(from), $to = this.doc.resolve(to)\n  if (fitsTrivially($from, $to, slice))\n    return this.step(new ReplaceStep(from, to, slice))\n\n  let targetDepths = coveredDepths($from, this.doc.resolve(to))\n  // Can't replace the whole document, so remove 0 if it's present\n  if (targetDepths[targetDepths.length - 1] == 0) targetDepths.pop()\n  // Negative numbers represent not expansion over the whole node at\n  // that depth, but replacing from $from.before(-D) to $to.pos.\n  let preferredTarget = -($from.depth + 1)\n  targetDepths.unshift(preferredTarget)\n  // This loop picks a preferred target depth, if one of the covering\n  // depths is not outside of a defining node, and adds negative\n  // depths for any depth that has $from at its start and does not\n  // cross a defining node.\n  for (let d = $from.depth, pos = $from.pos - 1; d > 0; d--, pos--) {\n    let spec = $from.node(d).type.spec\n    if (spec.defining || spec.isolating) break\n    if (targetDepths.indexOf(d) > -1) preferredTarget = d\n    else if ($from.before(d) == pos) targetDepths.splice(1, 0, -d)\n  }\n  // Try to fit each possible depth of the slice into each possible\n  // target depth, starting with the preferred depths.\n  let preferredTargetIndex = targetDepths.indexOf(preferredTarget)\n\n  let leftNodes = [], preferredDepth = slice.openStart\n  for (let content = slice.content, i = 0;; i++) {\n    let node = content.firstChild\n    leftNodes.push(node)\n    if (i == slice.openStart) break\n    content = node.content\n  }\n  // Back up if the node directly above openStart, or the node above\n  // that separated only by a non-defining textblock node, is defining.\n  if (preferredDepth > 0 && leftNodes[preferredDepth - 1].type.spec.defining &&\n      $from.node(preferredTargetIndex).type != leftNodes[preferredDepth - 1].type)\n    preferredDepth -= 1\n  else if (preferredDepth >= 2 && leftNodes[preferredDepth - 1].isTextblock && leftNodes[preferredDepth - 2].type.spec.defining &&\n           $from.node(preferredTargetIndex).type != leftNodes[preferredDepth - 2].type)\n    preferredDepth -= 2\n\n  for (let j = slice.openStart; j >= 0; j--) {\n    let openDepth = (j + preferredDepth + 1) % (slice.openStart + 1)\n    let insert = leftNodes[openDepth]\n    if (!insert) continue\n    for (let i = 0; i < targetDepths.length; i++) {\n      // Loop over possible expansion levels, starting with the\n      // preferred one\n      let targetDepth = targetDepths[(i + preferredTargetIndex) % targetDepths.length], expand = true\n      if (targetDepth < 0) { expand = false; targetDepth = -targetDepth }\n      let parent = $from.node(targetDepth - 1), index = $from.index(targetDepth - 1)\n      if (parent.canReplaceWith(index, index, insert.type, insert.marks))\n        return this.replace($from.before(targetDepth), expand ? $to.after(targetDepth) : to,\n                            new Slice(closeFragment(slice.content, 0, slice.openStart, openDepth),\n                                      openDepth, slice.openEnd))\n    }\n  }\n\n  return this.replace(from, to, slice)\n}\n\nfunction closeFragment(fragment, depth, oldOpen, newOpen, parent) {\n  if (depth < oldOpen) {\n    let first = fragment.firstChild\n    fragment = fragment.replaceChild(0, first.copy(closeFragment(first.content, depth + 1, oldOpen, newOpen, first)))\n  }\n  if (depth > newOpen)\n    fragment = parent.contentMatchAt(0).fillBefore(fragment, true).append(fragment)\n  return fragment\n}\n\n// :: (number, number, Node) → this\n// Replace the given range with a node, but use `from` and `to` as\n// hints, rather than precise positions. When from and to are the same\n// and are at the start or end of a parent node in which the given\n// node doesn't fit, this method may _move_ them out towards a parent\n// that does allow the given node to be placed. When the given range\n// completely covers a parent node, this method may completely replace\n// that parent node.\nTransform.prototype.replaceRangeWith = function(from, to, node) {\n  if (!node.isInline && from == to && this.doc.resolve(from).parent.content.size) {\n    let point = insertPoint(this.doc, from, node.type)\n    if (point != null) from = to = point\n  }\n  return this.replaceRange(from, to, new Slice(Fragment.from(node), 0, 0))\n}\n\n// :: (number, number) → this\n// Delete the given range, expanding it to cover fully covered\n// parent nodes until a valid replace is found.\nTransform.prototype.deleteRange = function(from, to) {\n  let $from = this.doc.resolve(from), $to = this.doc.resolve(to)\n  let covered = coveredDepths($from, $to)\n  for (let i = 0; i < covered.length; i++) {\n    let depth = covered[i], last = i == covered.length - 1\n    if ((last && depth == 0) || $from.node(depth).type.contentMatch.validEnd)\n      return this.delete($from.start(depth), $to.end(depth))\n    if (depth > 0 && (last || $from.node(depth - 1).canReplace($from.index(depth - 1), $to.indexAfter(depth - 1))))\n      return this.delete($from.before(depth), $to.after(depth))\n  }\n  for (let d = 1; d <= $from.depth; d++) {\n    if (from - $from.start(d) == $from.depth - d && to > $from.end(d))\n      return this.delete($from.before(d), to)\n  }\n  return this.delete(from, to)\n}\n\n// : (ResolvedPos, ResolvedPos) → [number]\n// Returns an array of all depths for which $from - $to spans the\n// whole content of the nodes at that depth.\nfunction coveredDepths($from, $to) {\n  let result = [], minDepth = Math.min($from.depth, $to.depth)\n  for (let d = minDepth; d >= 0; d--) {\n    let start = $from.start(d)\n    if (start < $from.pos - ($from.depth - d) ||\n        $to.end(d) > $to.pos + ($to.depth - d) ||\n        $from.node(d).type.spec.isolating ||\n        $to.node(d).type.spec.isolating) break\n    if (start == $to.start(d)) result.push(d)\n  }\n  return result\n}\n"],"names":["const","let","this","ReplaceError","super","Slice","slice","Fragment","d","splitting","index","MarkType","found","i","joinable"],"mappings":"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"}