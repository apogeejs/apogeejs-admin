{"fileType":"apogee workspace","jsLinks":[],"cssLinks":[],"workspace":{"fileType":"apogee workspace","version":0.2,"data":{"name":"editMetaFileTest","type":"apogee.Folder","children":{"login":{"name":"login","type":"apogee.Folder","children":{"loginUrl":{"name":"loginUrl","type":"apogee.JsonTable","updateData":{"data":"http://localhost:8080/TestAuthorization/loginjson","description":""}},"loginControl":{"name":"loginControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return loginUrl;","supplementalCode":"","description":""}},"sessionResponse":{"name":"sessionResponse","type":"apogee.JsonTable","updateData":{"data":{"sessionKey":"SESS0f6c4c2238a670b8138b63d9fd03cc22=l35gsca4c6el4voh2vt60p2sf5","responseCode":1},"description":""}},"sessionKey":{"name":"sessionKey","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(sessionResponse.responseCode === 1) {\n    return sessionResponse.sessionKey;\n}\nelse {\n    throw new Error(\"Login error: \" + sessionResponse.message);\n}","supplementalCode":"","description":""}}}},"micemetarecipeDataAccess":{"name":"micemetarecipeDataAccess","type":"apogee.Folder","children":{"createRecord":{"name":"createRecord","type":"apogee.FunctionTable","updateData":{"argList":["recordInfo","fieldMap"],"functionBody":"var record = {};\n\nrecord.Id = getId();\nrecord.Type = recordInfo.name;\nrecord.Fields = fieldMap;\nrecord.read_perm = READ_PERM;\nrecord.edit_perm = EDIT_PERM;\n\nreturn record;","supplementalCode":"var READ_PERM = 2;\nvar EDIT_PERM = 15;\n\nvar nextId = -1;\n\nfunction getId() {\n    return nextId--;\n}","description":"This method creates a record given the field values and record info \nfrom the data set info. It creates and ID and uses standard permissions."}},"recordsToCreateInstructions":{"name":"recordsToCreateInstructions","type":"apogee.FunctionTable","updateData":{"argList":["recordList"],"functionBody":"var instructions = [];\n\nfor(var i = 0; i < recordList.length; i++) {\n    var createRecord = recordList[i];\n    var instruction = createCreateInstruction(createRecord);\n    instructions.push(instruction);\n}\n\nreturn instructions;","supplementalCode":"","description":"This creates a list of create instructions to go along with a list of records to be created.\n\nThere is the option to assign the ID or to leave it as undefined, in which case\nan automatically incremented ID will be assigned. (For consistency in the data\nset, either all records should be preassigned or all records should be \nautomatically assigned."}},"createCommitBody":{"name":"createCommitBody","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage"],"functionBody":"var commit = {};\nvar actions = [];\n\nif(commitMessage.length === 0) throw new Error(\"Commit message missing!\");\n\ncommit.Name = dataSetInfo.name;\ncommit.Message = commitMessage;\ncommit.Actions = actions;\n\n//single action with commits\nvar action = {};\naction.Title = \"bulk create commit\";\naction.Instr = instructionList;\nactions.push(action);\n\nreturn commit","supplementalCode":"","description":"This creates a body for a commit request, given a list of instructions and a commit message."}},"createRequestOptions":{"name":"createRequestOptions","type":"apogee.FunctionTable","updateData":{"argList":["bodyJson"],"functionBody":"var header = {};\nheader[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\nheader.sessionKey = login.sessionKey;\nheader[\"proto-version\"] = \"4.0\";\nheader[\"db-version\"] = dataSetInfo.version;\n\nrequestInfo = {};\nrequestInfo.header = header;\nrequestInfo.method = \"POST\";\nrequestInfo.body = JSON.stringify(bodyJson);\n\nreturn requestInfo;\n","supplementalCode":"","description":"This creates the requestOptions, suitable for apogee.net.promiseJsonRequest, to go with an type of request to the workingset (micemetarequest) server."}},"host":{"name":"host","type":"apogee.JsonTable","updateData":{"data":"http://localhost:8080/micemetarecipews","description":""}},"commitUrl":{"name":"commitUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvalue = host + \"/commit\";\nreturn value;\n\n","supplementalCode":"","description":""}},"requestUrl":{"name":"requestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvalue = host + \"/cannedsearch\";\nreturn value;\n\n","supplementalCode":"","description":""}},"dataSetInfo":{"name":"dataSetInfo","type":"apogee.JsonTable","updateData":{"data":{"records":{"file_entry_type":{"idField":"file_entry_type_id","name":"file_entry_type","foreignList":[{"remoteRecord":"file_entry","name":"file_entry_list","isUnique":false,"remoteField":"file_entry_type_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"file_type_id","nullOk":false,"fieldClass":"com.micello.micemetarecipe.data.FileType"},{"defaultValue":null,"name":"section","nullOk":true,"fieldClass":"org.json.JSONArray"},{"defaultValue":null,"name":"key_string","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"name","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetarecipe.data.FileEntryType"},"com_file_entry":{"idField":"com_file_entry_id","name":"com_file_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"com_file_id","nullOk":false,"fieldClass":"com.micello.micemetarecipe.data.ComFile"},{"defaultValue":null,"name":"meta_file_id","nullOk":false,"fieldClass":"com.micello.micemetarecipe.data.MetaFile"},{"defaultValue":null,"name":"file_group","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetarecipe.data.ComFileEntry"},"file_type":{"idField":"file_type_id","name":"file_type","foreignList":[{"remoteRecord":"file_entry_type","name":"file_entry_type_list","isUnique":false,"remoteField":"file_type_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":null,"name":"file_type_name","nullOk":true,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetarecipe.data.FileType"},"file_entry":{"idField":"file_entry_id","name":"file_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"file_entry_type_id","nullOk":false,"fieldClass":"com.micello.micemetarecipe.data.FileEntryType"},{"defaultValue":null,"name":"entry_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"option_name","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"entry_data","nullOk":false,"fieldClass":"org.json.JSONObject"}],"recordClass":"com.micello.micemetarecipe.data.FileEntry"},"recipe_entry":{"idField":"recipe_entry_id","name":"recipe_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"meta_file_id","nullOk":false,"fieldClass":"com.micello.micemetarecipe.data.MetaFile"},{"defaultValue":null,"name":"file_entry_id","nullOk":false,"fieldClass":"com.micello.micemetarecipe.data.FileEntry"},{"defaultValue":null,"name":"insertion_info","nullOk":true,"fieldClass":"org.json.JSONObject"}],"recordClass":"com.micello.micemetarecipe.data.RecipeEntry"},"com_file":{"idField":"com_file_id","name":"com_file","foreignList":[{"remoteRecord":"com_file_entry","name":"com_file_entry_list","isUnique":false,"remoteField":"com_file_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":null,"name":"file_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"name","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetarecipe.data.ComFile"},"meta_file":{"idField":"meta_file_id","name":"meta_file","foreignList":[{"remoteRecord":"recipe_entry","name":"recipe_entry_list","isUnique":false,"remoteField":"meta_file_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":null,"name":"file_type_id","nullOk":false,"fieldClass":"com.micello.micemetarecipe.data.FileType"},{"defaultValue":null,"name":"file_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"name","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetarecipe.data.MetaFile"}},"name":"Micemetarecipe","version":"5.0"},"description":""}},"version":{"name":"version","type":"apogee.JsonTable","updateData":{"data":"1.4","description":""}},"releaseNotes":{"name":"releaseNotes","type":"apogee.JsonTable","updateData":{"data":"","description":"1.3\n---\nFixed a field name bug\n\n1.2\n---\nFixed bug in create delete instruction\n\n1.1\n---\nAdded additional functions\n\n1.0\n---\ninitial release"}},"depedencies":{"name":"depedencies","type":"apogee.JsonTable","updateData":{"data":"none","description":""}},"createUpdateInstruction":{"name":"createUpdateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["initialRecord","targetRecord"],"functionBody":"if(initialRecord.id != targetRecord.ID) {\n    throw new Error(\"Record ID mismatch in create update instruction for target record: \" + getRecordErrorMessage(targetRecord));\n}\n\nif(initialRecord.Type != targetRecord.Type) {\n    throw new Error(\"Inital and target record types do not match. Target record: \" + getRecordErrorMessage(targetRecord));\n}\n\nvar recordInfo = getRecordInfo(initialRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Update\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = initialRecord.Id;\n\ninstruction.initialReadPerm = initialRecord.read_perm;\ninstruction.initialEditPerm = initialRecord.edit_perm;\n\nif(initialRecord.readPerm != targetRecord.readPerm) {\n    instruction.targetReadPerm = targetRecord.read_perm;\n}\n\nif(initialRecord.editPerm != targetRecord.editPerm) {\n    instruction.targetEditPerm = targetRecord.edit_perm;\n}\n\nvar initialData = {};\ninstruction.Initial = initialData;\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    \n    var initialValue;\n    var targetValue;\n    \n    var initialValue = initialRecord.Fields[field.name];\n    var targetValue = targetRecord.Fields[field.name];\n    \n    //validate target values\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecordInfo,createRecord.Id,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(createRecordInfo,createRecord.Id,field));\n        }\n    }\n    \n    if(!fieldsMatch(initialValue,targetValue,field)) {\n        initialData[field.name] = initialValue;\n        targetData[field.name] = targetValue;\n    }\n}\n\nreturn instruction;\n","supplementalCode":"function fieldsMatch(initialValue,targetValue,fieldInfo) {\n    if(fieldInfo.fieldClass === \"java.lang.String\") {\n        //compare strings with \"==\"\n        return (initialValue == targetValue);\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"java.lang\")) {\n        //compare other basic values with \"===\"\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"com.micello\")) {\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONObject\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONArray\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else {\n        throw new Error(\"unrecognized field type: \" + fieldInfo.fieldClass);\n    }\n}\n\nfunction compareJsonData(a,b) {\n    var an = apogee.util.getNormalizedObjectCopy(a);\n    var bn = apogee.util.getNormalizedObjectCopy(b);\n    var aString = JSON.stringify(an);\n    var bString = JSON.stringify(bn);\n    return aString == bString;\n}\n    ","description":""}},"createCreateInstruction":{"name":"createCreateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["createRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(createRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Create\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = createRecord.Id;\n\ninstruction.targetReadPerm = createRecord.read_perm;\ninstruction.targetEditPerm = createRecord.edit_perm;\n\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var targetValue;\n    var targetValue = createRecord.Fields[field.name];\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(record,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(record,field));\n        }\n    }\n    \n    targetData[field.name] = targetValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getFieldErrString":{"name":"getFieldErrString","type":"apogee.FunctionTable","updateData":{"argList":["record","fieldInfo"],"functionBody":"return getRecordErrString(record) + \" - \" + fieldInfo.name;","supplementalCode":"","description":""}},"getRecordErrString":{"name":"getRecordErrString","type":"apogee.FunctionTable","updateData":{"argList":["record"],"functionBody":"return record.Type + \" \" + record.Id;","supplementalCode":"","description":""}},"createDeleteInstruction":{"name":"createDeleteInstruction","type":"apogee.FunctionTable","updateData":{"argList":["deleteRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(deleteRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Delete\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = deleteRecord.Id;\n\ninstruction.initialReadPerm = deleteRecord.read_perm;\ninstruction.initialEditPerm = deleteRecord.edit_perm;\n\nvar initialData = {};\ninstruction.Initial = initialData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var initialValue = deleteRecord.Fields[field.name];\n    \n    initialData[field.name] = initialValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getRecordInfo":{"name":"getRecordInfo","type":"apogee.FunctionTable","updateData":{"argList":["recordType"],"functionBody":"var recordInfo = dataSetInfo.records[recordType];\n\nif(!recordInfo) {\n    throw new Error(\"Record type not found in getRecordInfo: \" + recordType);\n}\n\nreturn recordInfo;","supplementalCode":"","description":""}}}},"loadMetaFileRecords":{"name":"loadMetaFileRecords","type":"apogee.Folder","children":{"fileTypeSearch":{"name":"fileTypeSearch","type":"apogee.JsonTable","updateData":{"data":{"search":"file_type_list"},"description":""}},"metaFileSearch":{"name":"metaFileSearch","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvar searchDef = {};\nsearchDef.search = \"meta_file\";\nsearchDef.id = metaFileId;\nreturn searchDef;\nreturn value;\n\n","supplementalCode":"","description":""}},"fileTypeList":{"name":"fileTypeList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvar requestOptions = micemetarecipeDataAccess.createRequestOptions(fileTypeSearch);\nvalue = apogee.net.promiseJsonRequest(micemetarecipeDataAccess.requestUrl,requestOptions);\nreturn value;\n\n","supplementalCode":"","description":""}},"fileTypeEntrySearch":{"name":"fileTypeEntrySearch","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvar searchDef = {};\nsearchDef.search = \"file_type_entries\";\nsearchDef.id = fileTypeId;\nreturn searchDef;\nreturn value;\n\n","supplementalCode":"","description":""}},"fileTypeEntryList":{"name":"fileTypeEntryList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvar requestOptions = micemetarecipeDataAccess.createRequestOptions(fileTypeEntrySearch);\nvalue = apogee.net.promiseJsonRequest(micemetarecipeDataAccess.requestUrl,requestOptions);\nreturn value;\n\n","supplementalCode":"","description":""}},"recordStore":{"name":"recordStore","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvar map = {};\n\naddSearchResponse(fileTypeList,map);\naddSearchResponse(fileTypeEntryList,map);\naddSearchResponse(metaFileSearch,map);\naddSearchResponse(metaFileResponse,map);\n\nreturn map;\nreturn value;\n\n","supplementalCode":"function addSearchResponse(searchResponse,outputMap) {\n    if((!searchResponse)||(!searchResponse.success)||(!searchResponse.data)) {\n        return \"\";\n    }\n    \n    var searchResponseData = searchResponse.data;\n    \n    if(searchResponseData.Response) {\n        addRecordList(searchResponseData.Response,outputMap);\n    }\n    if(searchResponseData.Records) {\n        addRecordList(searchResponseData.Records,outputMap);\n    }\n    \n}\n\nfunction addRecordList(recordList,outputMap) {\n    for(var i = 0; i < recordList.length; i++) {\n        var record = recordList[i];\n        \n        var typeSection = outputMap[record.Type];\n        if(!typeSection) {\n            typeSection = {};\n            outputMap[record.Type] = typeSection;\n        }\n        \n        //if there is already a record, just overwrite it. They should be the same.\n        typeSection[record.Id] = record;\n    }\n}","description":""}},"context":{"name":"context","type":"apogee.JsonTable","updateData":{"data":"public","description":""}},"metaFileId":{"name":"metaFileId","type":"apogee.JsonTable","updateData":{"data":1,"description":""}},"fileTypeId":{"name":"fileTypeId","type":"apogee.JsonTable","updateData":{"data":1,"description":""}},"metaFileListSearch":{"name":"metaFileListSearch","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvar searchDef = {};\nsearchDef.search = \"meta_file_list\";\nsearchDef.file_context = context;\nreturn searchDef;\nreturn value;\n\n","supplementalCode":"","description":""}},"metaFileResponse":{"name":"metaFileResponse","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nif(metaFileId === 0) {\n    return undefined;\n}\n\nvar requestOptions = micemetarecipeDataAccess.createRequestOptions(metaFileSearch);\nvalue = apogee.net.promiseJsonRequest(micemetarecipeDataAccess.requestUrl,requestOptions);\nreturn value;\n\n","supplementalCode":"","description":""}},"metaFileList":{"name":"metaFileList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nif(context === 0) {\n    return undefined;\n}\n\nvar requestOptions = micemetarecipeDataAccess.createRequestOptions(metaFileListSearch);\nvalue = apogee.net.promiseJsonRequest(micemetarecipeDataAccess.requestUrl,requestOptions);\nreturn value;\n\n","supplementalCode":"","description":""}},"getRecord":{"name":"getRecord","type":"apogee.FunctionTable","updateData":{"argList":["recordType","recordId"],"functionBody":"typeSection = recordStore[recordType];\nif(!typeSection) {\n    throw new Error(\"Type not found!\");\n}\n\nreturn typeSection[recordId];\n","supplementalCode":"","description":""}},"fileTypeIds":{"name":"fileTypeIds","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvar output = {};\n\nvar fileTypeRecords = fileTypeList.data.Response;\nfor(var i = 0; i < fileTypeRecords.length; i++) {\n    var record = fileTypeRecords[i];\n    output[record.Fields.file_type_name] = record.Id;\n}\n\nreturn output;\nreturn value;\n\n","supplementalCode":"","description":""}},"metaFileIds":{"name":"metaFileIds","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvar output = {};\n\nvar metaFileRecords = metaFileList.data.Response;\nfor(var i = 0; i < metaFileRecords.length; i++) {\n    var record = metaFileRecords[i];\n    var fileTypeRecord = getRecord(\"file_type\",record.Fields.file_type_id);\n    var fileType = fileTypeRecord.Fields.file_type_name;\n    var metaName = record.Fields.name;\n    output[fileType + \":\" + metaName] = record.Id;\n}\n\nreturn output;\nreturn value;\n\n","supplementalCode":"","description":""}}}},"editMetaFile":{"name":"editMetaFile","type":"apogee.Folder","children":{"existingEntries":{"name":"existingEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nvar metaFileRecords = loadMetaFileRecords.metaFileResponse.data.Records;\n\nfor(var i = 0; i < metaFileRecords.length; i++) {\n    var record = metaFileRecords[i];\n    if((record.Type == \"recipe_entry\")&&(record.Fields.meta_file_id == loadMetaFileRecords.metaFileId)) {\n        output[record.Fields.file_entry_id] = record;\n    }\n}\n\nreturn output;","supplementalCode":"","description":""}},"availableEntries":{"name":"availableEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nvar recordStore = loadMetaFileRecords.recordStore;\nfor(var idString in recordStore.file_entry) {\n    var fileEntry = recordStore.file_entry[idString];\n    var fileTypeEntry = loadMetaFileRecords.getRecord(\"file_entry_type\",fileEntry.Fields.file_entry_type_id);\n    var entry = {};\n    entry.fileEntry = fileEntry;\n    entry.fileTypeEntry = fileTypeEntry;\n    entry.recipeEntry = existingEntries[idString];\n    output[idString] = entry;\n}\n\nreturn output;","supplementalCode":"","description":""}},"selectedEntries":{"name":"selectedEntries","type":"apogee.JsonTable","updateData":{"data":{"1058":{"fileEntry":{"edit_perm":15,"Type":"file_entry","Fields":{"entry_data":{"input":"enum","parentPath":[],"k":"com_type","type":"key","required":true},"ordr":0,"entry_context":"public","option_name":"Standard","file_entry_type_id":1065},"edit_ok":true,"read_perm":2,"Id":1058},"fileTypeEntry":{"edit_perm":15,"Type":"file_entry_type","Fields":{"key_string":"com_type","ordr":0,"name":"Com Type Key","file_type_id":1,"section":["property_trees","community_map"]},"edit_ok":true,"read_perm":2,"Id":1065},"recipeEntry":{"edit_perm":15,"Type":"recipe_entry","Fields":{"ordr":0,"meta_file_id":1,"file_entry_id":1058,"insertion_info":null},"edit_ok":true,"read_perm":2,"Id":1058}},"1059":{"fileEntry":{"edit_perm":15,"Type":"file_entry","Fields":{"entry_data":{"v":"Academic Building","parentPath":["com_type"],"k":"com_type","type":"value"},"ordr":1,"entry_context":"public","option_name":"Standard","file_entry_type_id":1066},"edit_ok":true,"read_perm":2,"Id":1059},"fileTypeEntry":{"edit_perm":15,"Type":"file_entry_type","Fields":{"key_string":"com_type|Academic Building","ordr":1,"name":"Academic Building","file_type_id":1,"section":["property_trees","community_map"]},"edit_ok":true,"read_perm":2,"Id":1066},"recipeEntry":{"edit_perm":15,"Type":"recipe_entry","Fields":{"ordr":1,"meta_file_id":1,"file_entry_id":1059,"insertion_info":null},"edit_ok":true,"read_perm":2,"Id":1059}},"1061":{"fileEntry":{"edit_perm":15,"Type":"file_entry","Fields":{"entry_data":{"v":"Apartment Complex","parentPath":["com_type"],"k":"com_type","type":"value"},"ordr":3,"entry_context":"public","option_name":"Standard","file_entry_type_id":1068},"edit_ok":true,"read_perm":2,"Id":1061},"fileTypeEntry":{"edit_perm":15,"Type":"file_entry_type","Fields":{"key_string":"com_type|Apartment Complex","ordr":3,"name":"Apartment Complex","file_type_id":1,"section":["property_trees","community_map"]},"edit_ok":true,"read_perm":2,"Id":1068},"recipeEntry":{"edit_perm":15,"Type":"recipe_entry","Fields":{"ordr":3,"meta_file_id":1,"file_entry_id":1061,"insertion_info":null},"edit_ok":true,"read_perm":2,"Id":1061}},"1068":{"fileEntry":{"edit_perm":15,"Type":"file_entry","Fields":{"entry_data":{"v":"Dormitory","parentPath":["com_type"],"k":"com_type","type":"value"},"ordr":10,"entry_context":"public","option_name":"Standard","file_entry_type_id":1075},"edit_ok":true,"read_perm":2,"Id":1068},"fileTypeEntry":{"edit_perm":15,"Type":"file_entry_type","Fields":{"key_string":"com_type|Dormitory","ordr":10,"name":"Dormitory","file_type_id":1,"section":["property_trees","community_map"]},"edit_ok":true,"read_perm":2,"Id":1075},"recipeEntry":{"edit_perm":15,"Type":"recipe_entry","Fields":{"ordr":10,"meta_file_id":1,"file_entry_id":1068,"insertion_info":null},"edit_ok":true,"read_perm":2,"Id":1068}},"1071":{"fileEntry":{"edit_perm":15,"Type":"file_entry","Fields":{"entry_data":{"v":"Hospital","parentPath":["com_type"],"k":"com_type","type":"value"},"ordr":13,"entry_context":"public","option_name":"Standard","file_entry_type_id":1078},"edit_ok":true,"read_perm":2,"Id":1071},"fileTypeEntry":{"edit_perm":15,"Type":"file_entry_type","Fields":{"key_string":"com_type|Hospital","ordr":13,"name":"Hospital","file_type_id":1,"section":["property_trees","community_map"]},"edit_ok":true,"read_perm":2,"Id":1078},"recipeEntry":{"edit_perm":15,"Type":"recipe_entry","Fields":{"ordr":13,"meta_file_id":1,"file_entry_id":1071,"insertion_info":null},"edit_ok":true,"read_perm":2,"Id":1071}},"1074":{"fileEntry":{"edit_perm":15,"Type":"file_entry","Fields":{"entry_data":{"v":"Library","parentPath":["com_type"],"k":"com_type","type":"value"},"ordr":16,"entry_context":"public","option_name":"Standard","file_entry_type_id":1081},"edit_ok":true,"read_perm":2,"Id":1074},"fileTypeEntry":{"edit_perm":15,"Type":"file_entry_type","Fields":{"key_string":"com_type|Library","ordr":16,"name":"Library","file_type_id":1,"section":["property_trees","community_map"]},"edit_ok":true,"read_perm":2,"Id":1081},"recipeEntry":{"edit_perm":15,"Type":"recipe_entry","Fields":{"ordr":16,"meta_file_id":1,"file_entry_id":1074,"insertion_info":null},"edit_ok":true,"read_perm":2,"Id":1074}},"1075":{"fileEntry":{"edit_perm":15,"Type":"file_entry","Fields":{"entry_data":{"v":"Metro Station","parentPath":["com_type"],"k":"com_type","type":"value"},"ordr":17,"entry_context":"public","option_name":"Standard","file_entry_type_id":1082},"edit_ok":true,"read_perm":2,"Id":1075},"fileTypeEntry":{"edit_perm":15,"Type":"file_entry_type","Fields":{"key_string":"com_type|Metro Station","ordr":17,"name":"Metro Station","file_type_id":1,"section":["property_trees","community_map"]},"edit_ok":true,"read_perm":2,"Id":1082},"recipeEntry":{"edit_perm":15,"Type":"recipe_entry","Fields":{"ordr":17,"meta_file_id":1,"file_entry_id":1075,"insertion_info":null},"edit_ok":true,"read_perm":2,"Id":1075}},"1078":{"fileEntry":{"edit_perm":15,"Type":"file_entry","Fields":{"entry_data":{"v":"Parking Garage","parentPath":["com_type"],"k":"com_type","type":"value"},"ordr":20,"entry_context":"public","option_name":"Standard","file_entry_type_id":1085},"edit_ok":true,"read_perm":2,"Id":1078},"fileTypeEntry":{"edit_perm":15,"Type":"file_entry_type","Fields":{"key_string":"com_type|Parking Garage","ordr":20,"name":"Parking Garage","file_type_id":1,"section":["property_trees","community_map"]},"edit_ok":true,"read_perm":2,"Id":1085},"recipeEntry":{"edit_perm":15,"Type":"recipe_entry","Fields":{"ordr":20,"meta_file_id":1,"file_entry_id":1078,"insertion_info":null},"edit_ok":true,"read_perm":2,"Id":1078}},"1282":{"fileEntry":{"edit_perm":15,"Type":"file_entry","Fields":{"entry_data":{"v":"basketball","parentPath":["geom_type","recreation","athletic field","sport"],"k":"sport","type":"value"},"ordr":224,"entry_context":"public","option_name":"Standard","file_entry_type_id":1289},"edit_ok":true,"read_perm":2,"Id":1282},"fileTypeEntry":{"edit_perm":15,"Type":"file_entry_type","Fields":{"key_string":"geom_type|recreation|athletic field|sport|basketball","ordr":224,"name":"Athletic Field:Basketball","file_type_id":1,"section":["property_trees","geometry"]},"edit_ok":true,"read_perm":2,"Id":1289},"recipeEntry":{"edit_perm":15,"Type":"recipe_entry","Fields":{"ordr":224,"meta_file_id":1,"file_entry_id":1282,"insertion_info":null},"edit_ok":true,"read_perm":2,"Id":1282}},"1286":{"fileEntry":{"edit_perm":15,"Type":"file_entry","Fields":{"entry_data":{"v":"hockey","parentPath":["geom_type","recreation","athletic field","sport"],"k":"sport","type":"value"},"ordr":228,"entry_context":"public","option_name":"Standard","file_entry_type_id":1293},"edit_ok":true,"read_perm":2,"Id":1286},"fileTypeEntry":{"edit_perm":15,"Type":"file_entry_type","Fields":{"key_string":"geom_type|recreation|athletic field|sport|hockey","ordr":228,"name":"Athletic Field:Hockey","file_type_id":1,"section":["property_trees","geometry"]},"edit_ok":true,"read_perm":2,"Id":1293},"recipeEntry":{"edit_perm":15,"Type":"recipe_entry","Fields":{"ordr":228,"meta_file_id":1,"file_entry_id":1286,"insertion_info":null},"edit_ok":true,"read_perm":2,"Id":1286}},"1288":{"fileEntry":{"edit_perm":15,"Type":"file_entry","Fields":{"entry_data":{"v":"tennis","parentPath":["geom_type","recreation","athletic field","sport"],"k":"sport","type":"value"},"ordr":230,"entry_context":"public","option_name":"Standard","file_entry_type_id":1295},"edit_ok":true,"read_perm":2,"Id":1288},"fileTypeEntry":{"edit_perm":15,"Type":"file_entry_type","Fields":{"key_string":"geom_type|recreation|athletic field|sport|tennis","ordr":230,"name":"Athletic Field:Tennis","file_type_id":1,"section":["property_trees","geometry"]},"edit_ok":true,"read_perm":2,"Id":1295},"recipeEntry":{"edit_perm":15,"Type":"recipe_entry","Fields":{"ordr":230,"meta_file_id":1,"file_entry_id":1288,"insertion_info":null},"edit_ok":true,"read_perm":2,"Id":1288}},"1291":{"fileEntry":{"edit_perm":15,"Type":"file_entry","Fields":{"entry_data":{"v":"asphalt","parentPath":["geom_type","recreation","athletic field","surface"],"k":"surface","type":"value"},"ordr":233,"entry_context":"public","option_name":"Standard","file_entry_type_id":1298},"edit_ok":true,"read_perm":2,"Id":1291},"fileTypeEntry":{"edit_perm":15,"Type":"file_entry_type","Fields":{"key_string":"geom_type|recreation|athletic field|surface|asphalt","ordr":233,"name":"Athletic Field:Asphalt","file_type_id":1,"section":["property_trees","geometry"]},"edit_ok":true,"read_perm":2,"Id":1298},"recipeEntry":{"edit_perm":15,"Type":"recipe_entry","Fields":{"ordr":233,"meta_file_id":1,"file_entry_id":1291,"insertion_info":null},"edit_ok":true,"read_perm":2,"Id":1291}}},"description":""}},"selectEntriesControl":{"name":"selectEntriesControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var data = {};\ndata.available = availableEntries;\ndata.selected = selectedEntries;\nreturn data;","supplementalCode":"","description":""}}}}}}},"components":{"login":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":75,"y":75}},"children":{"loginUrl":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":463,"height":106},"posInfo":{"x":27,"y":42},"state":0,"viewType":"Text"}},"loginControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":354,"height":143},"posInfo":{"x":32,"y":162},"state":0,"viewType":"Output"},"resource":{"html":"","css":"","setData":"this.loginUrl = data;","constructorAddition":"\n\n//this uses the updated version of test authorization that takes and returns a JSON\nthis.onClick = function() {\n    \n    //get the output table\n    var outputTableName = \"sessionResponse\";\n    var fromMember = mode.getMember();\n    \n    //on click\n    var bodyJson = {};\n    bodyJson.userName = resource.userInput.value;\n    bodyJson.password = resource.passwordInput.value;\n    \n    //cleaer password field\n    resource.passwordInput.value = \"\";\n    \n    var options = {};\n    options.body = JSON.stringify(bodyJson);\n    options.method = \"POST\";\n    \n    var requestPromise = apogee.net.promiseJsonRequest(this.loginUrl,options);\n    apogee.action.asynchDataUpdate(outputTableName,fromMember,requestPromise);\n}","init":"\nvar label1 = document.createElement(\"label\");\nlabel1.for = \"commitMessageInput\";\nlabel1.innerHTML = \"User:\"\nelement.appendChild(label1);\n\nvar input1 = document.createElement(\"input\");\ninput1.id = \"userInput\";\nresource.userInput = input1;\nelement.appendChild(input1);\n\nelement.appendChild(document.createElement(\"br\"));\n\nvar label2 = document.createElement(\"label\");\nlabel2.for = \"commitMessageInput\";\nlabel2.innerHTML = \"Password:\"\nelement.appendChild(label2);\n\nvar input2 = document.createElement(\"input\");\ninput2.id = \"passwordInput\";\nresource.passwordInput = input2;\nelement.appendChild(input2);\n\nelement.appendChild(document.createElement(\"br\"));\n\nvar button = document.createElement(\"button\");\nbutton.innerHTML = \"Login\";\nelement.appendChild(button);\n\nvar instance = this;\nbutton.onclick = function() {\n    instance.onClick();\n}\n\n\n"}},"sessionResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":697,"height":158},"posInfo":{"x":30,"y":368},"state":0,"viewType":"Text"}},"sessionKey":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":538,"height":92},"posInfo":{"x":36,"y":577},"state":0,"viewType":"Text"}}}},"micemetarecipeDataAccess":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":150,"y":150}},"children":{"createRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":560,"height":321},"posInfo":{"x":22,"y":221},"state":-1,"viewType":"Code"}},"recordsToCreateInstructions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":834,"height":391},"posInfo":{"x":29,"y":506},"state":-1,"viewType":"Code"}},"createCommitBody":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":32,"y":603},"state":-1,"viewType":"Notes"}},"createRequestOptions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":523,"height":254},"posInfo":{"x":34,"y":650},"state":-1,"viewType":"Code"}},"host":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":353,"height":71},"posInfo":{"x":14,"y":15},"state":0,"viewType":"Text"}},"commitUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":433,"height":51},"posInfo":{"x":568,"y":65},"state":-1,"viewType":"Text"}},"requestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":450,"height":68},"posInfo":{"x":569,"y":12},"state":-1,"viewType":"Text"}},"dataSetInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":665,"height":611},"posInfo":{"x":46,"y":126},"state":-1,"viewType":"Text"}},"version":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":197,"height":91},"posInfo":{"x":708,"y":226},"state":0,"viewType":"Text"}},"releaseNotes":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":412,"height":156},"posInfo":{"x":708,"y":342},"state":0,"viewType":"Notes"}},"depedencies":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":253,"height":102},"posInfo":{"x":706,"y":527},"state":0,"viewType":"Text"}},"createUpdateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":821,"height":496},"posInfo":{"x":21,"y":364},"state":-1,"viewType":"Private"}},"createCreateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":994,"height":643},"posInfo":{"x":21,"y":314},"state":-1,"viewType":"Code"}},"getFieldErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":512,"height":68},"posInfo":{"x":867,"y":91},"state":-1,"viewType":"Code"}},"getRecordErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":81},"posInfo":{"x":866,"y":142},"state":-1,"viewType":"Code"}},"createDeleteInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":678,"height":540},"posInfo":{"x":22,"y":413},"state":-1,"viewType":"Code"}},"getRecordInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":861,"y":45},"state":-1,"viewType":"Code"}}}},"loadMetaFileRecords":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":150,"y":75}},"children":{"fileTypeSearch":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":297,"height":82},"posInfo":{"x":55,"y":25},"state":-1,"viewType":"Text"}},"metaFileSearch":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":334,"height":117},"posInfo":{"x":872,"y":21},"state":-1,"viewType":"Text"}},"fileTypeList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":423,"height":32},"posInfo":{"x":51,"y":79},"state":-1,"viewType":"Text"}},"fileTypeEntrySearch":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":347,"height":110},"posInfo":{"x":49,"y":350},"state":-1,"viewType":"Text"}},"fileTypeEntryList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":637,"height":480},"posInfo":{"x":52,"y":411},"state":-1,"viewType":"Formula"}},"recordStore":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":739,"height":542},"posInfo":{"x":353,"y":392},"state":-1,"viewType":"JSON"}},"context":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":218,"height":89},"posInfo":{"x":952,"y":180},"state":0,"viewType":"Text"}},"metaFileId":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":227,"height":89},"posInfo":{"x":952,"y":401},"state":0,"viewType":"Text"}},"fileTypeId":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":229,"height":97},"posInfo":{"x":954,"y":288},"state":0,"viewType":"Text"}},"metaFileListSearch":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":323,"height":98},"posInfo":{"x":410,"y":22},"state":-1,"viewType":"Text"}},"metaFileResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":495,"height":325},"posInfo":{"x":873,"y":68},"state":0,"viewType":"Text"}},"metaFileList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":647,"height":300},"posInfo":{"x":417,"y":73},"state":-1,"viewType":"Formula"}},"getRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":33},"posInfo":{"x":580,"y":424},"state":-1,"viewType":"Code"}},"fileTypeIds":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":283,"height":162},"posInfo":{"x":49,"y":141},"state":0,"viewType":"Text"}},"metaFileIds":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":365,"height":209},"posInfo":{"x":412,"y":127},"state":0,"viewType":"Text"}}}},"editMetaFile":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":154,"y":207}},"children":{"existingEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":854,"height":379},"posInfo":{"x":269,"y":75},"state":0,"viewType":"Text"}},"availableEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":857,"height":418},"posInfo":{"x":60,"y":201},"state":0,"viewType":"Text"}},"selectedEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":360},"posInfo":{"x":54,"y":460},"state":0,"viewType":"JSON"}},"selectEntriesControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":838,"height":601},"posInfo":{"x":551,"y":189},"state":0,"viewType":"Output"},"resource":{"html":"<table>\n    <tr>\n        <td>\n            <h2>Selected</h2>\n        </td>\n        <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>\n        <td>\n            <h2>Available</h2>\n        </td>\n    </tr>\n    <tr>\n        <td id=\"selectedCell\" class=\"model_listCell\">\n        </td>\n        <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>\n        <td id=\"availableCell\" class=\"model_listCell\">\n        </td>\n    </tr>\n    <tr>\n        <td>\n            <input type=\"button\" value=\">>\" id=\"deselectButton\">\n        </td>\n        <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>\n        <td>\n            <input type=\"button\" value=\"<<\" id=\"selectButton\">\n        </td>\n    </tr>\n</table>\n","css":".model_listCell {\n    vertical-align: top;\n}","setData":"console.log(\"in data!\");\n\nif(!data) return;\nif(!this.selectedCell) return;\nif(!this.availableCell) return;\n\nif((!data.selected)||(!data.available)) {\n    alert(\"Improper data format: requires fields 'selected' and 'available'\");\n    return;\n}\n\nthis.selectedEntries = data.selected;\nthis.availableEntries = data.available;\n\nthis.loadSelectedEntries();\nthis.loadAvailableEntries();\n\n\n","constructorAddition":"this.selectedEntries = null;\nthis.availableEntries = null;\n\nthis.selectedElements = null;\nthis.availableElements = null;\n\nthis.selectedCell = null;\nthis.availableCell = null;\n\n\nthis.onSelectClicked = function() {\n    console.log(\"Select clicked!\");\n    var newSelectedEntries = this.addCheckedAndGetNewSelected(this.availableElements);\n    this.setNewSelectedEntries(newSelectedEntries);\n}\n\nthis.onDeselectClicked = function() {\n    var newSelectedEntries = this.removeCheckedAndGetNewSelected(this.selectedElements);\n    this.setNewSelectedEntries(newSelectedEntries);\n}\n\n//=====================================\n// Load Methods\n//=====================================\n\nthis.loadSelectedEntries = function() {\n    apogeeapp.ui.removeAllChildren(this.selectedCell);\n    this.selectedElements = [];\n    \n    for(var id in this.selectedEntries) {\n        var selectedEntry = this.selectedEntries[id];\n        this.addListElement(id,selectedEntry,this.selectedCell,this.selectedElements);\n    }\n}\n\nthis.loadAvailableEntries = function() {\n    apogeeapp.ui.removeAllChildren(this.availableCell);\n    this.availableElements = [];\n    \n    for(var id in this.availableEntries) {\n        //only includes entries not selected\n        var selectedEntry = this.selectedEntries[id];\n        if(!selectedEntry) {\n            var availableEntry = this.availableEntries[id];\n            this.addListElement(id,availableEntry,this.availableCell,this.availableElements);\n        }\n    }\n}\n\nthis.addListElement = function(id,entry,parentCell,elementsList) {\n    \n    var name = entry.fileTypeEntry.Fields.name + \" - \" + entry.fileEntry.Fields.option_name;\n    \n    var div = document.createElement(\"div\");\n    parentCell.appendChild(div);\n    \n    var checkbox = document.createElement(\"input\");\n    checkbox.setAttribute(\"type\", \"checkbox\");\n    div.appendChild(checkbox);\n    \n    var text = document.createTextNode(name);\n    div.appendChild(text);\n    \n    var element = {};\n    element.id = id;\n    element.div = div;\n    element.checkbox = checkbox;\n    elementsList.push(element);\n    \n}\n\n//=================================\n// Update methods\n//=================================\n\nthis.addCheckedAndGetNewSelected = function(elementList) {\n    var newSelected = apogee.util.deepJsonCopy(this.selectedEntries);\n    for(var i = 0; i < elementList.length; i++) {\n        var element = elementList[i];\n        if(element.checkbox.checked) {\n            var id = element.id;\n            newSelected[id] = this.availableEntries[id];\n        }\n    }\n    return newSelected;\n}\n\nthis.removeCheckedAndGetNewSelected = function(elementList) {\n    var newSelected = apogee.util.deepJsonCopy(this.selectedEntries);\n    for(var i = 0; i < elementList.length; i++) {\n        var element = elementList[i];\n        if(element.checkbox.checked) {\n            var id = element.id;\n            delete newSelected[id];\n        }\n    }\n    return newSelected;    \n}\n\nthis.setNewSelectedEntries = function(newSelectedEntries) {\n    var thisMember = mode.getMember();\n    apogee.action.dataUpdate(\"selectedEntries\",thisMember,newSelectedEntries);\n}","onLoad":"this.selectedCell = document.getElementById(\"selectedCell\");\nthis.availableCell = document.getElementById(\"availableCell\");\n\nthis.selectButton = document.getElementById(\"selectButton\");\nthis.deselectButton = document.getElementById(\"deselectButton\");\n\nvar instance = this;\nif(this.selectButton) {\n    this.selectButton.onclick = function() {\n        instance.onSelectClicked();\n    }\n}\nif(this.deselectButton) {\n    this.deselectButton.onclick = function() {\n        instance.onDeselectClicked();\n    }\n}"}}}}}}