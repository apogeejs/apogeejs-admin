{"fileType":"apogee workspace","jsLinks":[],"cssLinks":[],"workspace":{"fileType":"apogee workspace","version":0.2,"data":{"name":"editMetaFileTest","type":"apogee.Folder","children":{"login":{"name":"login","type":"apogee.Folder","children":{"loginUrl":{"name":"loginUrl","type":"apogee.JsonTable","updateData":{"data":"http://localhost:8080/TestAuthorization/loginjson","description":""}},"loginControl":{"name":"loginControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return loginUrl;","supplementalCode":"","description":""}},"sessionResponse":{"name":"sessionResponse","type":"apogee.JsonTable","updateData":{"data":"","description":""}},"sessionKey":{"name":"sessionKey","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(sessionResponse.responseCode === 1) {\n    return sessionResponse.sessionKey;\n}\nelse {\n    throw new Error(\"Login error: \" + sessionResponse.message);\n}","supplementalCode":"","description":""}}}},"micemetarecipeDataAccess":{"name":"micemetarecipeDataAccess","type":"apogee.Folder","children":{"createRecord":{"name":"createRecord","type":"apogee.FunctionTable","updateData":{"argList":["recordInfo","fieldMap"],"functionBody":"var record = {};\n\nrecord.Id = getId();\nrecord.Type = recordInfo.name;\nrecord.Fields = fieldMap;\nrecord.read_perm = READ_PERM;\nrecord.edit_perm = EDIT_PERM;\n\nreturn record;","supplementalCode":"var READ_PERM = 2;\nvar EDIT_PERM = 15;\n\nvar nextId = -1;\n\nfunction getId() {\n    return nextId--;\n}","description":"This method creates a record given the field values and record info \nfrom the data set info. It creates and ID and uses standard permissions."}},"recordsToCreateInstructions":{"name":"recordsToCreateInstructions","type":"apogee.FunctionTable","updateData":{"argList":["recordList"],"functionBody":"var instructions = [];\n\nfor(var i = 0; i < recordList.length; i++) {\n    var createRecord = recordList[i];\n    var instruction = createCreateInstruction(createRecord);\n    instructions.push(instruction);\n}\n\nreturn instructions;","supplementalCode":"","description":"This creates a list of create instructions to go along with a list of records to be created.\n\nThere is the option to assign the ID or to leave it as undefined, in which case\nan automatically incremented ID will be assigned. (For consistency in the data\nset, either all records should be preassigned or all records should be \nautomatically assigned."}},"createCommitBody":{"name":"createCommitBody","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage"],"functionBody":"var commit = {};\nvar actions = [];\n\nif(commitMessage.length === 0) throw new Error(\"Commit message missing!\");\n\ncommit.Name = dataSetInfo.name;\ncommit.Message = commitMessage;\ncommit.Actions = actions;\n\n//single action with commits\nvar action = {};\naction.Title = \"bulk create commit\";\naction.Instr = instructionList;\nactions.push(action);\n\nreturn commit","supplementalCode":"","description":"This creates a body for a commit request, given a list of instructions and a commit message."}},"createRequestOptions":{"name":"createRequestOptions","type":"apogee.FunctionTable","updateData":{"argList":["bodyJson"],"functionBody":"var header = {};\nheader[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\nheader.sessionKey = login.sessionKey;\nheader[\"proto-version\"] = \"4.0\";\nheader[\"db-version\"] = dataSetInfo.version;\n\nrequestInfo = {};\nrequestInfo.header = header;\nrequestInfo.method = \"POST\";\nrequestInfo.body = JSON.stringify(bodyJson);\n\nreturn requestInfo;\n","supplementalCode":"","description":"This creates the requestOptions, suitable for apogee.net.promiseJsonRequest, to go with an type of request to the workingset (micemetarequest) server."}},"host":{"name":"host","type":"apogee.JsonTable","updateData":{"data":"http://localhost:8080/micemetarecipews","description":""}},"commitUrl":{"name":"commitUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvalue = host + \"/commit\";\nreturn value;\n\n","supplementalCode":"","description":""}},"requestUrl":{"name":"requestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvalue = host + \"/cannedsearch\";\nreturn value;\n\n","supplementalCode":"","description":""}},"dataSetInfo":{"name":"dataSetInfo","type":"apogee.JsonTable","updateData":{"data":{"records":{"file_entry_type":{"idField":"file_entry_type_id","name":"file_entry_type","foreignList":[{"remoteRecord":"file_entry","name":"file_entry_list","isUnique":false,"remoteField":"file_entry_type_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"file_type_id","nullOk":false,"fieldClass":"com.micello.micemetarecipe.data.FileType"},{"defaultValue":null,"name":"section","nullOk":true,"fieldClass":"org.json.JSONArray"},{"defaultValue":null,"name":"key_string","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"name","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetarecipe.data.FileEntryType"},"com_file_entry":{"idField":"com_file_entry_id","name":"com_file_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"com_file_id","nullOk":false,"fieldClass":"com.micello.micemetarecipe.data.ComFile"},{"defaultValue":null,"name":"meta_file_id","nullOk":false,"fieldClass":"com.micello.micemetarecipe.data.MetaFile"},{"defaultValue":null,"name":"file_group","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetarecipe.data.ComFileEntry"},"file_type":{"idField":"file_type_id","name":"file_type","foreignList":[{"remoteRecord":"file_entry_type","name":"file_entry_type_list","isUnique":false,"remoteField":"file_type_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":null,"name":"file_type_name","nullOk":true,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetarecipe.data.FileType"},"file_entry":{"idField":"file_entry_id","name":"file_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"file_entry_type_id","nullOk":false,"fieldClass":"com.micello.micemetarecipe.data.FileEntryType"},{"defaultValue":null,"name":"entry_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"option_name","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"entry_data","nullOk":false,"fieldClass":"org.json.JSONObject"}],"recordClass":"com.micello.micemetarecipe.data.FileEntry"},"recipe_entry":{"idField":"recipe_entry_id","name":"recipe_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"meta_file_id","nullOk":false,"fieldClass":"com.micello.micemetarecipe.data.MetaFile"},{"defaultValue":null,"name":"file_entry_id","nullOk":false,"fieldClass":"com.micello.micemetarecipe.data.FileEntry"},{"defaultValue":null,"name":"insertion_info","nullOk":true,"fieldClass":"org.json.JSONObject"}],"recordClass":"com.micello.micemetarecipe.data.RecipeEntry"},"com_file":{"idField":"com_file_id","name":"com_file","foreignList":[{"remoteRecord":"com_file_entry","name":"com_file_entry_list","isUnique":false,"remoteField":"com_file_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":null,"name":"file_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"name","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetarecipe.data.ComFile"},"meta_file":{"idField":"meta_file_id","name":"meta_file","foreignList":[{"remoteRecord":"recipe_entry","name":"recipe_entry_list","isUnique":false,"remoteField":"meta_file_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":null,"name":"file_type_id","nullOk":false,"fieldClass":"com.micello.micemetarecipe.data.FileType"},{"defaultValue":null,"name":"file_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"name","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetarecipe.data.MetaFile"}},"name":"Micemetarecipe","version":"5.0"},"description":""}},"version":{"name":"version","type":"apogee.JsonTable","updateData":{"data":"1.5","description":""}},"createUpdateInstruction":{"name":"createUpdateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["initialRecord","targetRecord"],"functionBody":"if(initialRecord.Id != targetRecord.Id) {\n    throw new Error(\"Record ID mismatch in create update instruction for target record: \" + getRecordErrorMessage(targetRecord));\n}\n\nif(initialRecord.Type != targetRecord.Type) {\n    throw new Error(\"Inital and target record types do not match. Target record: \" + getRecordErrorMessage(targetRecord));\n}\n\nvar recordsDifferent = false;\n\nvar recordInfo = getRecordInfo(initialRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Update\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = initialRecord.Id;\n\ninstruction.initialReadPerm = initialRecord.read_perm;\ninstruction.initialEditPerm = initialRecord.edit_perm;\n\nif(initialRecord.readPerm != targetRecord.readPerm) {\n    instruction.targetReadPerm = targetRecord.read_perm;\n    recordsDifferent = true;\n}\n\nif(initialRecord.editPerm != targetRecord.editPerm) {\n    instruction.targetEditPerm = targetRecord.edit_perm;\n    recordsDifferent = true;\n}\n\nvar initialData = {};\ninstruction.Initial = initialData;\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    \n    var initialValue;\n    var targetValue;\n    \n    var initialValue = initialRecord.Fields[field.name];\n    var targetValue = targetRecord.Fields[field.name];\n    \n    //validate target values\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecordInfo,createRecord.Id,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(createRecordInfo,createRecord.Id,field));\n        }\n    }\n    \n    if(!fieldsMatch(initialValue,targetValue,field)) {\n        initialData[field.name] = initialValue;\n        targetData[field.name] = targetValue;\n        recordsDifferent = true;\n    }\n}\n\nif(recordsDifferent) {\n    return instruction;\n}\nelse {\n    return null;\n}\n","supplementalCode":"function fieldsMatch(initialValue,targetValue,fieldInfo) {\n    if(fieldInfo.fieldClass === \"java.lang.String\") {\n        //compare strings with \"==\"\n        return (initialValue == targetValue);\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"java.lang\")) {\n        //compare other basic values with \"===\"\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"com.micello\")) {\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONObject\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONArray\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else {\n        throw new Error(\"unrecognized field type: \" + fieldInfo.fieldClass);\n    }\n}\n\nfunction compareJsonData(a,b) {\n    var an = apogee.util.getNormalizedObjectCopy(a);\n    var bn = apogee.util.getNormalizedObjectCopy(b);\n    var aString = JSON.stringify(an);\n    var bString = JSON.stringify(bn);\n    return aString == bString;\n}\n    ","description":"This function creates an update instruction given an initial and target record. If the records are the same then NULL is returned. (No update is needed.)"}},"createCreateInstruction":{"name":"createCreateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["createRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(createRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Create\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = createRecord.Id;\n\ninstruction.targetReadPerm = createRecord.read_perm;\ninstruction.targetEditPerm = createRecord.edit_perm;\n\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var targetValue;\n    var targetValue = createRecord.Fields[field.name];\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(createRecord,field));\n        }\n    }\n    \n    targetData[field.name] = targetValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getFieldErrString":{"name":"getFieldErrString","type":"apogee.FunctionTable","updateData":{"argList":["record","fieldInfo"],"functionBody":"return getRecordErrString(record) + \" - \" + fieldInfo.name;","supplementalCode":"","description":""}},"getRecordErrString":{"name":"getRecordErrString","type":"apogee.FunctionTable","updateData":{"argList":["record"],"functionBody":"return record.Type + \" \" + record.Id;","supplementalCode":"","description":""}},"createDeleteInstruction":{"name":"createDeleteInstruction","type":"apogee.FunctionTable","updateData":{"argList":["deleteRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(deleteRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Delete\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = deleteRecord.Id;\n\ninstruction.initialReadPerm = deleteRecord.read_perm;\ninstruction.initialEditPerm = deleteRecord.edit_perm;\n\nvar initialData = {};\ninstruction.Initial = initialData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var initialValue = deleteRecord.Fields[field.name];\n    \n    initialData[field.name] = initialValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getRecordInfo":{"name":"getRecordInfo","type":"apogee.FunctionTable","updateData":{"argList":["recordType"],"functionBody":"var recordInfo = dataSetInfo.records[recordType];\n\nif(!recordInfo) {\n    throw new Error(\"Record type not found in getRecordInfo: \" + recordType);\n}\n\nreturn recordInfo;","supplementalCode":"","description":""}},"combinedEntriesToInstructionList":{"name":"combinedEntriesToInstructionList","type":"apogee.FunctionTable","updateData":{"argList":["combinedEntries"],"functionBody":"var output = [];\nfor(var key in combinedEntries) {\n    var entry = combinedEntries[key];\n    var instruction = getInstructionForCombinedEntry(entry);\n    if(instruction) {\n        output.push(instruction);\n    }\n}\n\nreturn output;","supplementalCode":"function getInstructionForCombinedEntry(combinedEntry) {\n    var newEntry = combinedEntry.newEntry;\n    var oldEntry = combinedEntry.oldEntry;\n    \n    if(newEntry) {\n        if(!oldEntry) {\n            console.log(\"Create: \" + newEntry.Id);\n            return createCreateInstruction(newEntry);\n        }\n        else {\n            //this will return null for matching records\n            console.log(\"Update(maybe): \" + newEntry.Id);\n            return createUpdateInstruction(oldEntry,newEntry);\n        }\n    }\n    else if(oldEntry) {\n        console.log(\"Delete: \" + oldEntry.Id);\n        return createDeleteInstruction(oldEntry);\n    }\n    \n    return null;\n}\n\nfunction entriesDifferent(entry1,entry2) {\n    var string1 = JSON.stringify(apogee.util.getNormalizedCopy(entry1));\n    var string2 = JSON.stringify(apogee.util.getNormalizedCopy(entry2));\n    return (string1 == string2);\n}","description":"This function takes a combined entry map of the format:\n\n{\n  \"some-identifier\":{\n    \"oldEntry\":{original record entry, if applicable},\n    \"newEntry\":{new record entry, if applicable}\n  },\n  ...\n}\n\nIt returns an instruction list.\n\n"}},"getCommitPromise":{"name":"getCommitPromise","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage"],"functionBody":"var commitBody = createCommitBody(instructionList,commitMessage);\nvar requestOptions = createRequestOptions(commitBody);\nvalue = apogee.net.promiseJsonRequest(commitUrl,requestOptions);\nreturn value;","supplementalCode":"","description":""}},"getRequestPromise":{"name":"getRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody"],"functionBody":"var requestOptions = micemetarecipeDataAccess.createRequestOptions(requestBody);\nvalue = apogee.net.promiseJsonRequest(requestUrl,requestOptions);\nreturn value;","supplementalCode":"","description":""}}}},"loadMetaFileRecords":{"name":"loadMetaFileRecords","type":"apogee.Folder","children":{"fileTypeSearch":{"name":"fileTypeSearch","type":"apogee.JsonTable","updateData":{"data":{"search":"file_type_list"},"description":""}},"metaFileSearch":{"name":"metaFileSearch","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var searchDef = {};\nsearchDef.search = \"meta_file\";\nsearchDef.id = metaFileId;\nreturn searchDef;\n\n","supplementalCode":"","description":""}},"fileTypeList":{"name":"fileTypeList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return micemetarecipeDataAccess.getRequestPromise(fileTypeSearch);\n\n","supplementalCode":"","description":""}},"fileTypeEntrySearch":{"name":"fileTypeEntrySearch","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvar searchDef = {};\nsearchDef.search = \"file_type_entries\";\nsearchDef.id = fileTypeId;\nreturn searchDef;\nreturn value;\n\n","supplementalCode":"","description":""}},"fileTypeEntryList":{"name":"fileTypeEntryList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!fileTypeId) {\n    return false;\n}\n\nreturn micemetarecipeDataAccess.getRequestPromise(fileTypeEntrySearch);\n\n","supplementalCode":"","description":""}},"recordStore":{"name":"recordStore","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var map = {};\n\naddSearchResponse(fileTypeList,map);\naddSearchResponse(fileTypeEntryList,map);\naddSearchResponse(metaFileList,map);\naddSearchResponse(metaFileResponse,map);\n\nreturn map;\n\n","supplementalCode":"function addSearchResponse(searchResponse,outputMap) {\n    if(!searchResponse) {\n        return;\n    }\n    \n    if(!searchResponse.success) {\n        throw new Error(\"Error in loading record data: \" + searchResponse.msg);\n    }\n    \n    var searchResponseData = searchResponse.data;\n    \n    if(searchResponseData.Response) {\n        addRecordList(searchResponseData.Response,outputMap);\n    }\n    if(searchResponseData.Records) {\n        addRecordList(searchResponseData.Records,outputMap);\n    }\n    \n}\n\nfunction addRecordList(recordList,outputMap) {\n    for(var i = 0; i < recordList.length; i++) {\n        var record = recordList[i];\n        \n        var typeSection = outputMap[record.Type];\n        if(!typeSection) {\n            typeSection = {};\n            outputMap[record.Type] = typeSection;\n        }\n        \n        //if there is already a record, just overwrite it. They should be the same.\n        typeSection[record.Id] = record;\n    }\n}","description":""}},"context":{"name":"context","type":"apogee.JsonTable","updateData":{"data":"","description":""}},"metaFileId":{"name":"metaFileId","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!fileSelection) {\n    return INVALID_ID;\n}\n\nif(fileSelection.editExisting) {\n    return fileSelection.metaFileId;\n}\nelse {\n    return INVALID_ID;\n}","supplementalCode":"","description":""}},"fileTypeId":{"name":"fileTypeId","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!fileSelection) {\n    return INVALID_ID;\n}\n\nif(fileSelection.editExisting) {\n    if((!metaFileResponse)||(!metaFileResponse.data)) {\n        return INVALID_ID;\n    }\n    \n    var fileTypeId = metaFileResponse.data.Response[0].Fields.file_type_id;\n    return fileTypeId;\n}\nelse {\n    return fileSelection.fileTypeId;\n}","supplementalCode":"","description":""}},"metaFileListSearch":{"name":"metaFileListSearch","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var searchDef = {};\nsearchDef.search = \"meta_file_list\";\nsearchDef.file_context = context;\nreturn searchDef;\n\n","supplementalCode":"","description":""}},"metaFileResponse":{"name":"metaFileResponse","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nif(!metaFileId) {\n    return false;\n}\n\nreturn micemetarecipeDataAccess.getRequestPromise(metaFileSearch);\n\n","supplementalCode":"","description":""}},"metaFileList":{"name":"metaFileList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nif(!context) {\n    return false;\n}\n\nreturn micemetarecipeDataAccess.getRequestPromise(metaFileListSearch);\n\n","supplementalCode":"","description":""}},"getRecord":{"name":"getRecord","type":"apogee.FunctionTable","updateData":{"argList":["recordType","recordId"],"functionBody":"typeSection = recordStore[recordType];\nif(!typeSection) {\n    throw new Error(\"Type not found!\");\n}\n\nreturn typeSection[recordId];\n","supplementalCode":"","description":""}},"fileTypeIds":{"name":"fileTypeIds","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!fileTypeList.success) {\n    throw new Error(\"File type download error: \" + fileTypeList.msg);\n}\n\n\nvar output = {};\n\nvar fileTypeRecords = fileTypeList.data.Response;\nfor(var i = 0; i < fileTypeRecords.length; i++) {\n    var record = fileTypeRecords[i];\n    output[record.Fields.file_type_name] = record.Id;\n}\n\nreturn output;\n\n","supplementalCode":"","description":""}},"metaFileSelector":{"name":"metaFileSelector","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nif((fileTypeList)&&(fileTypeList.success)) {\n    var fileTypes = {};\n    output.fileTypes = fileTypes;\n\n    var fileTypeRecords = fileTypeList.data.Response;\n    for(var i = 0; i < fileTypeRecords.length; i++) {\n        var record = fileTypeRecords[i];\n        fileTypes[record.Fields.file_type_name] = record.Id;\n    }\n}\n\nif((metaFileList)&&(metaFileList.success)) {\n    var metaFiles = {};\n    output.metaFiles = metaFiles;\n    \n    var metaFileRecords = metaFileList.data.Response;\n    for(var i = 0; i < metaFileRecords.length; i++) {\n        var record = metaFileRecords[i];\n        var fileTypeRecord = getRecord(\"file_type\",record.Fields.file_type_id);\n        var fileType = fileTypeRecord.Fields.file_type_name;\n        var metaName = record.Fields.name;\n        metaFiles[fileType + \":\" + metaName] = record.Id;\n    }\n}\n\noutput.currentMetaFileId = metaFileId;\noutput.currentFileTypeId = fileTypeId;\noutput.editExisting = fileSelection ? fileSelection.editExisting : false;\n\nreturn output;","supplementalCode":"","description":""}},"INVALID_ID":{"name":"INVALID_ID","type":"apogee.JsonTable","updateData":{"data":0,"description":""}},"fileSelection":{"name":"fileSelection","type":"apogee.JsonTable","updateData":{"data":{"editExisting":true,"metaFileId":11},"description":""}},"newMetaFileName":{"name":"newMetaFileName","type":"apogee.JsonTable","updateData":{"data":"","description":""}}}},"editMetaFile":{"name":"editMetaFile","type":"apogee.Folder","children":{"selectEntriesControl":{"name":"selectEntriesControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var data = {};\ndata.available = availableFileEntries;\ndata.selected = selectedFileEntries;\ndata.existing = existingRecipeEntries;\ndata.metaFileId = activeMetaFileEntry ? activeMetaFileEntry.Id : loadMetaFileRecords.INVALID_ID;\nreturn data;","supplementalCode":"","description":""}},"existingMetaFileEntry":{"name":"existingMetaFileEntry","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!loadMetaFileRecords.metaFileResponse) {\n    return false;\n}\n\nif(!loadMetaFileRecords.metaFileResponse.success) {\n    throw new Error(\"Meta File request error\");\n}\n\nif(loadMetaFileRecords.metaFileResponse.data.Response.length === 0) {\n    throw new Error(\"Meta file not found\");\n}\n\nreturn loadMetaFileRecords.metaFileResponse.data.Response[0];","supplementalCode":"","description":""}},"activeMetaFileEntry":{"name":"activeMetaFileEntry","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(loadMetaFileRecords.fileSelection.editExisting) {\n    return existingMetaFileEntry;\n}\nelse {\n    var fields = {};\n    fields.name = loadMetaFileRecords.newMetaFileName;\n    fields.file_type_id = loadMetaFileRecords.fileTypeId;\n    fields.file_context = loadMetaFileRecords.context;\n\n    var recordInfo =  micemetarecipeDataAccess.getRecordInfo(\"meta_file\");\n    return micemetarecipeDataAccess.createRecord(recordInfo,fields);\n}\n","supplementalCode":"","description":""}},"existingRecipeEntries":{"name":"existingRecipeEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nif(!loadMetaFileRecords.metaFileResponse) {\n    return output;\n}\n\nif(!loadMetaFileRecords.metaFileResponse.success) {\n    throw new Error(\"Error loading meta file records: \" + loadMetaFileRecords.meatFileResponse.msg);\n}\n\nvar metaFileRecords = loadMetaFileRecords.metaFileResponse.data.Records;\n\nfor(var i = 0; i < metaFileRecords.length; i++) {\n    var record = metaFileRecords[i];\n    if((record.Type == \"recipe_entry\")&&(record.Fields.meta_file_id == loadMetaFileRecords.metaFileId)) {\n        output[record.Fields.file_entry_id] = record;\n    }\n}\n\nreturn output;","supplementalCode":"","description":""}},"availableFileEntries":{"name":"availableFileEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nvar recordStore = loadMetaFileRecords.recordStore;\nfor(var idString in recordStore.file_entry) {\n    var fileEntry = recordStore.file_entry[idString];\n    var fileTypeEntry = loadMetaFileRecords.getRecord(\"file_entry_type\",fileEntry.Fields.file_entry_type_id);\n    var entry = {};\n    entry.fileEntry = fileEntry;\n    entry.fileTypeEntry = fileTypeEntry;\n    entry.recipeEntry = existingRecipeEntries[idString];\n    output[idString] = entry;\n}\n\nreturn output;","supplementalCode":"","description":""}},"selectedFileEntries":{"name":"selectedFileEntries","type":"apogee.JsonTable","updateData":{"data":{"1934":{"fileEntry":{"edit_perm":15,"Type":"file_entry","Fields":{"entry_data":{"t":"#000000","w":2,"m":"#4343ef"},"ordr":0,"entry_context":"public","option_name":"Factory","file_entry_type_id":1941},"edit_ok":true,"read_perm":2,"Id":1934},"fileTypeEntry":{"edit_perm":15,"Type":"file_entry_type","Fields":{"key_string":"Wall","ordr":0,"name":"Wall","file_type_id":5,"section":["styles"]},"edit_ok":true,"read_perm":2,"Id":1941},"recipeEntry":{"edit_perm":15,"Type":"recipe_entry","Fields":{"ordr":0,"meta_file_id":11,"file_entry_id":1934,"insertion_info":null},"edit_ok":true,"read_perm":2,"Id":3956}},"1935":{"fileEntry":{"edit_perm":15,"Type":"file_entry","Fields":{"entry_data":{"t":"#000000","w":2,"m":"#bbccdd","o":"#2a4a70"},"ordr":1,"entry_context":"public","option_name":"Factory","file_entry_type_id":1942},"edit_ok":true,"read_perm":2,"Id":1935},"fileTypeEntry":{"edit_perm":15,"Type":"file_entry_type","Fields":{"key_string":"Shelf","ordr":1,"name":"Shelf","file_type_id":5,"section":["styles"]},"edit_ok":true,"read_perm":2,"Id":1942},"recipeEntry":{"edit_perm":15,"Type":"recipe_entry","Fields":{"ordr":0,"meta_file_id":11,"file_entry_id":1935,"insertion_info":null},"edit_ok":true,"read_perm":2,"Id":3957}},"1936":{"fileEntry":{"edit_perm":15,"Type":"file_entry","Fields":{"entry_data":{"t":"#000000","w":1,"m":"#707070","o":"#303030"},"ordr":2,"entry_context":"public","option_name":"Factory","file_entry_type_id":1943},"edit_ok":true,"read_perm":2,"Id":1936},"fileTypeEntry":{"edit_perm":15,"Type":"file_entry_type","Fields":{"key_string":"Service","ordr":2,"name":"Service","file_type_id":5,"section":["styles"]},"edit_ok":true,"read_perm":2,"Id":1943},"recipeEntry":{"edit_perm":15,"Type":"recipe_entry","Fields":{"ordr":0,"meta_file_id":11,"file_entry_id":1936,"insertion_info":null},"edit_ok":true,"read_perm":2,"Id":3958}},"1942":{"fileEntry":{"edit_perm":15,"Type":"file_entry","Fields":{"entry_data":{"t":"#000000","w":1,"m":"#85a3cb","o":"#aabcda"},"ordr":8,"entry_context":"public","option_name":"Factory","file_entry_type_id":1949},"edit_ok":true,"read_perm":2,"Id":1942},"fileTypeEntry":{"edit_perm":15,"Type":"file_entry_type","Fields":{"key_string":"Room","ordr":8,"name":"Room","file_type_id":5,"section":["styles"]},"edit_ok":true,"read_perm":2,"Id":1949},"recipeEntry":{"edit_perm":15,"Type":"recipe_entry","Fields":{"ordr":0,"meta_file_id":11,"file_entry_id":1942,"insertion_info":null},"edit_ok":true,"read_perm":2,"Id":3965}},"2143":{"fileEntry":{"edit_perm":15,"Type":"file_entry","Fields":{"entry_data":{"t":"#000000","w":2,"m":"#b5c5de","o":"#384476"},"ordr":20,"entry_context":"public","option_name":"Standard","file_entry_type_id":1961},"edit_ok":true,"read_perm":2,"Id":2143},"fileTypeEntry":{"edit_perm":15,"Type":"file_entry_type","Fields":{"key_string":"Gym","ordr":20,"name":"Gym","file_type_id":5,"section":["styles"]},"edit_ok":true,"read_perm":2,"Id":1961},"recipeEntry":{"edit_perm":15,"Type":"recipe_entry","Fields":{"ordr":0,"meta_file_id":11,"file_entry_id":2143,"insertion_info":null},"edit_ok":true,"read_perm":2,"Id":3960}},"2144":{"fileEntry":{"edit_perm":15,"Type":"file_entry","Fields":{"entry_data":{"t":"#000000","w":2,"m":"#b5c5de","o":"#384476"},"ordr":21,"entry_context":"public","option_name":"Standard","file_entry_type_id":1962},"edit_ok":true,"read_perm":2,"Id":2144},"fileTypeEntry":{"edit_perm":15,"Type":"file_entry_type","Fields":{"key_string":"Cafeteria","ordr":21,"name":"Cafeteria","file_type_id":5,"section":["styles"]},"edit_ok":true,"read_perm":2,"Id":1962},"recipeEntry":{"edit_perm":15,"Type":"recipe_entry","Fields":{"ordr":0,"meta_file_id":11,"file_entry_id":2144,"insertion_info":null},"edit_ok":true,"read_perm":2,"Id":3961}},"2147":{"fileEntry":{"edit_perm":15,"Type":"file_entry","Fields":{"entry_data":{"t":"#000000","w":2,"m":"#b5c5de","o":"#384476"},"ordr":24,"entry_context":"public","option_name":"Standard","file_entry_type_id":1965},"edit_ok":true,"read_perm":2,"Id":2147},"fileTypeEntry":{"edit_perm":15,"Type":"file_entry_type","Fields":{"key_string":"Locker Room","ordr":24,"name":"Locker Room","file_type_id":5,"section":["styles"]},"edit_ok":true,"read_perm":2,"Id":1965},"recipeEntry":{"edit_perm":15,"Type":"recipe_entry","Fields":{"ordr":0,"meta_file_id":11,"file_entry_id":2147,"insertion_info":null},"edit_ok":true,"read_perm":2,"Id":3964}}},"description":""}}}},"submit":{"name":"submit","type":"apogee.Folder","children":{"submitControl":{"name":"submitControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"","supplementalCode":"","description":""}},"newRecipeEntries":{"name":"newRecipeEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nfor(var fileIdString in editMetaFile.selectedFileEntries) {\n    var selectedEntry = editMetaFile.selectedFileEntries[fileIdString];\n    var recipeEntry = selectedEntry.recipeEntry;\n    if(!recipeEntry) {\n        recipeEntry = createNewRecipeEntry(selectedEntry.fileEntry);\n    }\n    \n    output[recipeEntry.Id] = recipeEntry;\n}\n\nreturn output;","supplementalCode":"function createNewRecipeEntry(fileEntry) {\n    var order = 0;\n    \n    var fields = {};\n    fields.ordr = order;\n    fields.meta_file_id = editMetaFile.activeMetaFileEntry.Id;\n    fields.file_entry_id = fileEntry.Id;\n    fields.insertionInfo = null;\n    \n    var recipeRecordInfo = micemetarecipeDataAccess.getRecordInfo(\"recipe_entry\");\n    return micemetarecipeDataAccess.createRecord(recipeRecordInfo,fields);\n}","description":""}},"instructionList":{"name":"instructionList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return micemetarecipeDataAccess.combinedEntriesToInstructionList(combinedEntries);","supplementalCode":"","description":""}},"commitFlag":{"name":"commitFlag","type":"apogee.JsonTable","updateData":{"data":false,"description":""}},"commitResponse":{"name":"commitResponse","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((!commitFlag)||(instructionList.length == 0)) {\n    return false; \n}\n\nreturn micemetarecipeDataAccess.getCommitPromise(instructionList,commitMessage);","supplementalCode":"","description":""}},"commitResult":{"name":"commitResult","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!commitResponse) {\n    return \"no data submitted\"\n}\nelse if(!commitResponse.success) {\n    throw new Error(commitResponse.message);\n}\nelse {\n    return commitResponse.data;\n}","supplementalCode":"","description":""}},"combinedEntries":{"name":"combinedEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nvar outEntry;\nvar outIdString;\n\n//add the meta file entries\nif(editMetaFile.activeMetaFileEntry) {\n    outEntry = {};\n    outIdString = getOutputId(editMetaFile.activeMetaFileEntry);\n    output[outIdString] = outEntry;\n    outEntry.newEntry = editMetaFile.activeMetaFileEntry;\n    if(editMetaFile.existingMetaFileEntry) {\n        outEntry.oldEntry = editMetaFile.existingMetaFileEntry;\n    }\n}\n\n//add the recipe entries\nvar recipeIdString;\nvar recipeEntry;\nfor(recipeIdString in newRecipeEntries) {\n    recipeEntry = newRecipeEntries[recipeIdString];\n    \n    outIdString = getOutputId(recipeEntry);\n    outEntry = {};\n    outEntry.newEntry = recipeEntry\n    output[outIdString] = outEntry;\n}\n\nfor(recipeIdString in editMetaFile.existingRecipeEntries) {\n    recipeEntry = editMetaFile.existingRecipeEntries[recipeIdString];\n    \n    outIdString = getOutputId(recipeEntry);\n    var outEntry = output[outIdString];\n    if(!outEntry) {\n        outEntry = {};\n        output[outIdString] = outEntry;\n    }\n    outEntry.oldEntry = recipeEntry;\n}\n\nreturn output;\n","supplementalCode":"function getOutputId(record) {\n    return record.Type + \"-\" + record.Id;\n}","description":""}},"commitMessage":{"name":"commitMessage","type":"apogee.JsonTable","updateData":{"data":"test","description":""}}}}}}},"components":{"login":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":75,"y":75}},"children":{"loginUrl":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":463,"height":106},"posInfo":{"x":27,"y":42},"state":0,"viewType":"Text"}},"loginControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":354,"height":143},"posInfo":{"x":32,"y":162},"state":0,"viewType":"Output"},"resource":{"html":"","css":"","setData":"this.loginUrl = data;","constructorAddition":"\n\n//this uses the updated version of test authorization that takes and returns a JSON\nthis.onClick = function() {\n    \n    //get the output table\n    var outputTableName = \"sessionResponse\";\n    var fromMember = mode.getMember();\n    \n    //on click\n    var bodyJson = {};\n    bodyJson.userName = resource.userInput.value;\n    bodyJson.password = resource.passwordInput.value;\n    \n    //cleaer password field\n    resource.passwordInput.value = \"\";\n    \n    var options = {};\n    options.body = JSON.stringify(bodyJson);\n    options.method = \"POST\";\n    \n    var requestPromise = apogee.net.promiseJsonRequest(this.loginUrl,options);\n    apogee.action.asynchDataUpdate(outputTableName,fromMember,requestPromise);\n}","init":"\nvar label1 = document.createElement(\"label\");\nlabel1.for = \"commitMessageInput\";\nlabel1.innerHTML = \"User:\"\nelement.appendChild(label1);\n\nvar input1 = document.createElement(\"input\");\ninput1.id = \"userInput\";\nresource.userInput = input1;\nelement.appendChild(input1);\n\nelement.appendChild(document.createElement(\"br\"));\n\nvar label2 = document.createElement(\"label\");\nlabel2.for = \"commitMessageInput\";\nlabel2.innerHTML = \"Password:\"\nelement.appendChild(label2);\n\nvar input2 = document.createElement(\"input\");\ninput2.id = \"passwordInput\";\nresource.passwordInput = input2;\nelement.appendChild(input2);\n\nelement.appendChild(document.createElement(\"br\"));\n\nvar button = document.createElement(\"button\");\nbutton.innerHTML = \"Login\";\nelement.appendChild(button);\n\nvar instance = this;\nbutton.onclick = function() {\n    instance.onClick();\n}\n\n\n"}},"sessionResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":697,"height":158},"posInfo":{"x":30,"y":368},"state":0,"viewType":"Text"}},"sessionKey":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":538,"height":92},"posInfo":{"x":36,"y":577},"state":0,"viewType":"Text"}}}},"micemetarecipeDataAccess":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":46,"y":169}},"children":{"createRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":560,"height":321},"posInfo":{"x":29,"y":370},"state":-1,"viewType":"Code"}},"recordsToCreateInstructions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":834,"height":391},"posInfo":{"x":30,"y":472},"state":-1,"viewType":"Code"}},"createCommitBody":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":568,"height":400},"posInfo":{"x":111,"y":340},"state":0,"viewType":"Code"}},"createRequestOptions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":523,"height":254},"posInfo":{"x":27,"y":715},"state":-1,"viewType":"Code"}},"host":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":353,"height":71},"posInfo":{"x":14,"y":15},"state":-1,"viewType":"Text"}},"commitUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":433,"height":107},"posInfo":{"x":508,"y":713},"state":-1,"viewType":"Text"}},"requestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":450,"height":68},"posInfo":{"x":508,"y":667},"state":-1,"viewType":"Text"}},"dataSetInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":665,"height":611},"posInfo":{"x":913,"y":266},"state":-1,"viewType":"Text"}},"version":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":197,"height":91},"posInfo":{"x":589,"y":401},"state":0,"viewType":"Text"}},"createUpdateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":886,"height":655},"posInfo":{"x":42,"y":219},"state":-1,"viewType":"Code"}},"createCreateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":994,"height":643},"posInfo":{"x":42,"y":182},"state":-1,"viewType":"Code"}},"getFieldErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":512,"height":68},"posInfo":{"x":761,"y":616},"state":-1,"viewType":"Code"}},"getRecordErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":81},"posInfo":{"x":762,"y":664},"state":-1,"viewType":"Code"}},"createDeleteInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":678,"height":540},"posInfo":{"x":40,"y":259},"state":-1,"viewType":"Code"}},"getRecordInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":480,"height":400},"posInfo":{"x":924,"y":320},"state":-1,"viewType":"Code"}},"combinedEntriesToInstructionList":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":721,"height":524},"posInfo":{"x":29,"y":518},"state":-1,"viewType":"Private"}},"getCommitPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":741,"height":400},"posInfo":{"x":419,"y":163},"state":0,"viewType":"Code"}},"getRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":810,"height":400},"posInfo":{"x":424,"y":87},"state":-1,"viewType":"Code"}}}},"loadMetaFileRecords":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":66,"y":121}},"children":{"fileTypeSearch":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":292,"height":102},"posInfo":{"x":57,"y":26},"state":-1,"viewType":"Text"}},"metaFileSearch":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":334,"height":117},"posInfo":{"x":589,"y":21},"state":-1,"viewType":"Text"}},"fileTypeList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":756,"height":499},"posInfo":{"x":45,"y":81},"state":-1,"viewType":"Text"}},"fileTypeEntrySearch":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":347,"height":110},"posInfo":{"x":49,"y":350},"state":-1,"viewType":"Text"}},"fileTypeEntryList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":633,"height":289},"posInfo":{"x":51,"y":298},"state":-1,"viewType":"Formula"}},"recordStore":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":762,"height":549},"posInfo":{"x":384,"y":407},"state":-1,"viewType":"Private"}},"context":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":218,"height":89},"posInfo":{"x":927,"y":181},"state":0,"viewType":"Text"}},"metaFileId":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":262,"height":84},"posInfo":{"x":928,"y":281},"state":0,"viewType":"Text"}},"fileTypeId":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":263,"height":77},"posInfo":{"x":928,"y":382},"state":0,"viewType":"Text"}},"metaFileListSearch":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":432,"height":272},"posInfo":{"x":300,"y":87},"state":-1,"viewType":"Text"}},"metaFileResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":627,"height":325},"posInfo":{"x":589,"y":87},"state":-1,"viewType":"Text"}},"metaFileList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":744,"height":536},"posInfo":{"x":318,"y":41},"state":-1,"viewType":"Text"}},"getRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":488,"height":179},"posInfo":{"x":383,"y":352},"state":-1,"viewType":"Code"}},"fileTypeIds":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":609,"height":415},"posInfo":{"x":34,"y":133},"state":-1,"viewType":"Formula"}},"metaFileSelector":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":355,"height":161},"posInfo":{"x":341,"y":139},"state":0,"viewType":"Output"},"resource":{"html":"<input type=\"radio\" value=\"create\" name=\"createUpdate\" id=\"load_createRadio\">Create</input>\n<input type=\"radio\" value=\"update\" name=\"createUpdate\" id=\"load_updateRadio\">Update</input>\n<br><br>\n<select id=\"metaFileSelect\"></select>\n<select id=\"fileTypeSelect\"></select>\n<br><br>\n<input type=\"button\" value=\"Submit\" id=\"load_submitButton\"></input>","onLoad":"this.createRadio = document.getElementById(\"load_createRadio\");\nthis.updateRadio = document.getElementById(\"load_updateRadio\");\nthis.selectMetaFileElement = document.getElementById(\"metaFileSelect\");\nthis.selectFileTypeElement = document.getElementById(\"fileTypeSelect\");\nthis.submitButton = document.getElementById(\"load_submitButton\");\n\nvar instance = this;\nthis.submitButton.onclick = function() {\n    instance.onSubmitClick();\n}\n\nvar onRadioClick = function() {\n    instance.onRadioClick();\n}\n\nthis.createRadio.onclick = onRadioClick;\nthis.updateRadio.onclick = onRadioClick;","setData":"if(!data) return;\n\nthis.editExisting = data.editExisting;\n\nvar INVALID_ID = 0;\n\nif(this.selectMetaFileElement) {\n\n    apogeeapp.ui.removeAllChildren(this.selectMetaFileElement);\n    \n    //add a dummy entry\n    var option = document.createElement(\"option\");\n    option.text = \"<none selected>\";\n    \n    option.value = INVALID_ID;\n    if(INVALID_ID == data.currentMetaFileId) option.selected = true;\n    this.selectMetaFileElement.add(option);\n    \n    for(var fileDesc in data.metaFiles) {\n        var id = data.metaFiles[fileDesc];\n        var option = document.createElement(\"option\");\n        option.text = fileDesc;\n        option.value = id;\n        if(id == data.currentMetaFileId) option.selected = true;\n        this.selectMetaFileElement.add(option);\n    }\n}\n\nif(this.selectFileTypeElement) {\n    console.log(\"current id: \" + data.currentFileTypeId);\n\n    apogeeapp.ui.removeAllChildren(this.selectFileTypeElement);\n    \n    //add a dummy entry\n    var option = document.createElement(\"option\");\n    option.text = \"<none selected>\";\n    option.value = INVALID_ID;\n    if(INVALID_ID == data.currentFileTypeId) option.selected = true;\n    console.log(\"adding id: \" + INVALID_ID);\n    \n    this.selectFileTypeElement.add(option);\n    \n    for(var fileDesc in data.fileTypes) {\n        var id = data.fileTypes[fileDesc];\n        var option = document.createElement(\"option\");\n        option.text = fileDesc;\n        option.value = id;\n        if(id == data.currentFileTypeId) option.selected = true;\n        console.log(\"adding id: \" + id);\n        this.selectFileTypeElement.add(option);\n    }\n}\n\nthis.updateUiForCreateUpdate(data.editExisting);\n","constructorAddition":"\nthis.onSubmitClick = function() {\n    var thisMember = mode.getMember();\n    \n    var selectElement = this.editExisting ? this.selectMetaFileElement : this.selectFileTypeElement;\n    \n    if(!selectElement) {\n        alert(\"Error; UI not initialized\");\n        return;\n    }\n    \n    if(selectElement.length === 0) {\n        alert(\"Invalid selection!\");\n        return;\n    }\n    \n    var selectedIdString = selectElement.value;\n    if(!isFinite(selectedIdString)) {\n        alert(\"Invalid selection!\");\n        return;\n    }\n    var selectedId = Number(selectedIdString);\n    \n    var fileSelection = {};\n    fileSelection.editExisting = this.editExisting;\n    if(this.editExisting) {\n        fileSelection.metaFileId = selectedId;\n    }\n    else {\n        fileSelection.fileTypeId = selectedId;\n    }\n    \n    apogee.action.dataUpdate(\"fileSelection\",thisMember,fileSelection);\n}\n\nthis.onRadioClick = function() {\n    var editExisting = this.updateRadio.checked;\n    this.updateUiForCreateUpdate(editExisting);\n    \n    var thisMember = mode.getMember();\n    apogee.action.dataUpdate(\"editExisting\",thisMember,editExisting);\n}\n\nthis.updateUiForCreateUpdate = function(editExisting) {\n    this.editExisting = editExisting;\n    \n    if(this.selectFileTypeElement) {\n        this.selectFileTypeElement.style.display = editExisting ? \"none\" : \"\";\n    }\n    if(this.selectMetaFileElement) {\n        this.selectMetaFileElement.style.display = editExisting ? \"\" : \"none\";\n    }\n    \n    var createRadioSelected = !editExisting;\n    var updateRadioSelected = editExisting;\n    \n    if((this.createRadio)&&(this.createRadio.checked != createRadioSelected)) {\n        this.createRadio.checked = createRadioSelected;\n    }\n    if((this.updateRadio)&&(this.updateRadio.checked != updateRadioSelected)) {\n        this.updateRadio.checked = updateRadioSelected;\n    }\n}\n\n"}},"INVALID_ID":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":220,"height":70},"posInfo":{"x":922,"y":36},"state":0,"viewType":"Text"}},"fileSelection":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":270,"height":110},"posInfo":{"x":915,"y":511},"state":0,"viewType":"Text"}},"newMetaFileName":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":259,"height":82},"posInfo":{"x":917,"y":629},"state":0,"viewType":"Text"}}}},"editMetaFile":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":73,"y":241}},"children":{"selectEntriesControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":536,"height":456},"posInfo":{"x":485,"y":347},"state":0,"viewType":"Output"},"resource":{"html":"<table>\n    <tr>\n        <td>\n            <h2>Selected</h2>\n        </td>\n        <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>\n        <td>\n            <h2>Available</h2>\n        </td>\n    </tr>\n    <tr>\n        <td id=\"selectedCell\" class=\"model_listCell\">\n        </td>\n        <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>\n        <td id=\"availableCell\" class=\"model_listCell\">\n        </td>\n    </tr>\n    <tr>\n        <td>\n            <input type=\"button\" value=\">>\" id=\"deselectButton\">\n        </td>\n        <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>\n        <td>\n            <input type=\"button\" value=\"<<\" id=\"selectButton\">\n        </td>\n    </tr>\n</table>\n","css":".model_listCell {\n    vertical-align: top;\n}","setData":"if(!data) return;\nif(!this.selectedCell) return;\nif(!this.availableCell) return;\n\nif( (data.selected === undefined) ||\n    (data.available === undefined) ||\n    (data.metaFileId === undefined) ||\n    (data.existing === undefined)) {\n    alert(\"Improper data format: requires fields 'selected', 'available', 'metaFileId' and 'existing'\");\n    return;\n}\n\nif(this.activeMetaFileId != data.metaFileId) {\n    //refresh the selection and exit\n    //this will trigger another update\n    var newSelectedEntries = this.createSelectedArrayFromExisting(data.existing,data.available);\n    var thisMember = mode.getMember();\n    apogee.action.dataUpdate(\"selectedFileEntries\",thisMember,newSelectedEntries);\n    this.activeMetaFileId = data.metaFileId;\n    return;\n}\n\nthis.selectedEntries = data.selected;\nthis.availableEntries = data.available;\n\nthis.loadSelectedEntries();\nthis.loadAvailableEntries();\n\n\n","constructorAddition":"this.selectedEntries = null;\nthis.availableEntries = null;\n\nthis.selectedElements = null;\nthis.availableElements = null;\n\nthis.selectedCell = null;\nthis.availableCell = null;\n\nthis.activeMetaFileId = null;\n\nthis.onSelectClicked = function() {\n    console.log(\"Select clicked!\");\n    var newSelectedEntries = this.addCheckedAndGetNewSelected(this.availableElements);\n    this.setNewSelectedEntries(newSelectedEntries);\n}\n\nthis.onDeselectClicked = function() {\n    var newSelectedEntries = this.removeCheckedAndGetNewSelected(this.selectedElements);\n    this.setNewSelectedEntries(newSelectedEntries);\n}\n\n//=====================================\n// Initialize Data Methods\n//=====================================\n\nthis.createSelectedArrayFromExisting = function(existingEntries,availableEntries) {\n    var newSelectedEntries = {};\n    \n    for(var recipeIdString in existingEntries) {\n        var recipeEntry = existingEntries[recipeIdString];\n        var fileEntryId = recipeEntry.Fields.file_entry_id;\n        if(fileEntryId !== undefined) {\n            var availableEntry = availableEntries[fileEntryId];\n        }\n        else {\n            throw new Error(\"Existing entry ont found in available entries: \" + recipeIdString);\n        }\n        newSelectedEntries[fileEntryId] = availableEntry;\n    }\n    \n    return newSelectedEntries;\n}\n\n//=====================================\n// Load Methods\n//=====================================\n\nthis.loadSelectedEntries = function() {\n    apogeeapp.ui.removeAllChildren(this.selectedCell);\n    this.selectedElements = [];\n    \n    for(var id in this.selectedEntries) {\n        var selectedEntry = this.selectedEntries[id];\n        this.addListElement(id,selectedEntry,this.selectedCell,this.selectedElements);\n    }\n}\n\nthis.loadAvailableEntries = function() {\n    apogeeapp.ui.removeAllChildren(this.availableCell);\n    this.availableElements = [];\n    \n    for(var id in this.availableEntries) {\n        //only includes entries not selected\n        var selectedEntry = this.selectedEntries[id];\n        if(!selectedEntry) {\n            var availableEntry = this.availableEntries[id];\n            this.addListElement(id,availableEntry,this.availableCell,this.availableElements);\n        }\n    }\n}\n\nthis.addListElement = function(id,entry,parentCell,elementsList) {\n    \n    var name = entry.fileTypeEntry.Fields.name + \" - \" + entry.fileEntry.Fields.option_name;\n    \n    var div = document.createElement(\"div\");\n    parentCell.appendChild(div);\n    \n    var checkbox = document.createElement(\"input\");\n    checkbox.setAttribute(\"type\", \"checkbox\");\n    div.appendChild(checkbox);\n    \n    var text = document.createTextNode(name);\n    div.appendChild(text);\n    \n    var element = {};\n    element.id = id;\n    element.div = div;\n    element.checkbox = checkbox;\n    elementsList.push(element);\n    \n}\n\n//=================================\n// Update methods\n//=================================\n\nthis.addCheckedAndGetNewSelected = function(elementList) {\n    var newSelected = apogee.util.deepJsonCopy(this.selectedEntries);\n    for(var i = 0; i < elementList.length; i++) {\n        var element = elementList[i];\n        if(element.checkbox.checked) {\n            var id = element.id;\n            newSelected[id] = this.availableEntries[id];\n        }\n    }\n    return newSelected;\n}\n\nthis.removeCheckedAndGetNewSelected = function(elementList) {\n    var newSelected = apogee.util.deepJsonCopy(this.selectedEntries);\n    for(var i = 0; i < elementList.length; i++) {\n        var element = elementList[i];\n        if(element.checkbox.checked) {\n            var id = element.id;\n            delete newSelected[id];\n        }\n    }\n    return newSelected;    \n}\n\nthis.setNewSelectedEntries = function(newSelectedEntries) {\n    var thisMember = mode.getMember();\n    apogee.action.dataUpdate(\"selectedFileEntries\",thisMember,newSelectedEntries);\n}","onLoad":"this.selectedCell = document.getElementById(\"selectedCell\");\nthis.availableCell = document.getElementById(\"availableCell\");\n\nthis.selectButton = document.getElementById(\"selectButton\");\nthis.deselectButton = document.getElementById(\"deselectButton\");\n\nvar instance = this;\nif(this.selectButton) {\n    this.selectButton.onclick = function() {\n        instance.onSelectClicked();\n    }\n}\nif(this.deselectButton) {\n    this.deselectButton.onclick = function() {\n        instance.onDeselectClicked();\n    }\n}"}},"existingMetaFileEntry":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":393,"height":147},"posInfo":{"x":798,"y":15},"state":0,"viewType":"Text"}},"activeMetaFileEntry":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":327,"height":241},"posInfo":{"x":411,"y":19},"state":0,"viewType":"Text"}},"existingRecipeEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":338,"height":105},"posInfo":{"x":42,"y":36},"state":0,"viewType":"Text"}},"availableFileEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":336,"height":118},"posInfo":{"x":48,"y":176},"state":0,"viewType":"Text"}},"selectedFileEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":330,"height":372},"posInfo":{"x":61,"y":324},"state":0,"viewType":"JSON"}}}},"submit":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":75,"y":75}},"children":{"submitControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":387,"height":84},"posInfo":{"x":32,"y":40},"state":0,"viewType":"Output"},"resource":{"html":"<input type=\"button\" id=\"submit_submitButton\" value=\"Submit\"></input>\n<input type=\"button\" id=\"submit_clearButton\" value=\"Clear\"></input>","onLoad":"this.submitButton = document.getElementById(\"submit_submitButton\");\nthis.clearButton = document.getElementById(\"submit_clearButton\");\nthis.initialized = true;\n\nvar instance = this;\nthis.submitButton.onclick = function() {\n    instance.onSubmit();\n}\nthis.clearButton.onclick = function() {\n    instance.onClear();\n}","constructorAddition":"this.submitButton = null;\nthis.cancelButton = null;\nthis.initialized = false;\n\nthis.onSubmit = function() {\n    var thisMember = mode.getMember();\n    apogee.action.dataUpdate(\"commitFlag\",thisMember,true);\n}\n\nthis.onClear = function() {\n    var thisMember = mode.getMember();\n    apogee.action.dataUpdate(\"commitFlag\",thisMember,false);\n}","setData":"return null;"}},"newRecipeEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":726,"height":510},"posInfo":{"x":484,"y":37},"state":-1,"viewType":"Private"}},"instructionList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":646,"height":486},"posInfo":{"x":594,"y":491},"state":0,"viewType":"Text"}},"commitFlag":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":309,"height":197},"posInfo":{"x":40,"y":168},"state":0,"viewType":"Text"}},"commitResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":733,"height":438},"posInfo":{"x":389,"y":409},"state":0,"viewType":"Text"}},"commitResult":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":514,"height":300},"posInfo":{"x":64,"y":442},"state":0,"viewType":"Text"}},"combinedEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":596,"height":442},"posInfo":{"x":486,"y":114},"state":-1,"viewType":"Text"}},"commitMessage":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":816,"y":40},"state":0,"viewType":"Text"}}}}}}