{"fileType":"apogee app js workspace","version":"0.40","references":[{"url":"http://apogeejs.com/lib/controls/configurableForm/ConfigurableForm.js","entryType":"js link"},{"url":"http://apogeejs.com/lib/modules/taskApp/taskAppModule.js","entryType":"js link"},{"url":"http://apogeejs.com/lib/modules/taskApp/taskAppModule.js","entryType":"js link"},{"url":"http://apogeejs.com/lib/controls/configurableForm/ConfigurableForm.js","entryType":"js link"},{"url":"http://apogeejs.com/lib/modules/taskApp/taskAppModule.js","entryType":"js link"},{"url":"http://apogeejs.com/lib/controls/configurableForm/ConfigurableForm.js","entryType":"js link"},{"url":"http://apogeejs.com/lib/modules/taskApp/taskAppModule.js","entryType":"js link"},{"url":"http://apogeejs.com/lib/controls/configurableForm/ConfigurableForm.js","entryType":"js link"},{"url":"http://apogeejs.com/lib/controls/configurableForm/ConfigurableForm.css","entryType":"css link"},{"url":"http://apogeejs.com/lib/controls/configurableForm/ConfigurableForm.css","entryType":"css link"},{"url":"http://apogeejs.com/lib/controls/configurableForm/ConfigurableForm.css","entryType":"css link"},{"url":"http://apogeejs.com/lib/controls/configurableForm/ConfigurableForm.css","entryType":"css link"}],"workspace":{"fileType":"apogee workspace","version":0.2,"name":"editMetaDataWebApp","data":{"name":"Model","type":"apogee.Folder","children":{"tasks":{"name":"tasks","type":"apogee.Folder","children":{"submit":{"name":"submit","type":"apogee.Folder","children":{"submitControl":{"name":"submitControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var data = {};\ndata.instructionList = instructionList;\ndata.previousTask = state.previousTask;\n\nreturn data;","supplementalCode":"","description":""}},"commitResponse":{"name":"commitResponse","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((!liveInstructionList)||(liveInstructionList.length == 0)) {\n    return null; \n}\n\nreturn micemetarDataAccess.getCommitPromise(liveInstructionList,commitMessage,sessionKey);","supplementalCode":"","description":""}},"commitMessage":{"name":"commitMessage","type":"apogee.JsonTable","updateData":{"data":null,"description":""}},"liveInstructionList":{"name":"liveInstructionList","type":"apogee.JsonTable","updateData":{"data":null,"description":""}},"taskResult":{"name":"taskResult","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var resultValue;\n\nvar taskResult = {};\nif((!liveInstructionList)||(!commitResponse)) {\n    return \"WAITING\";\n}\nelse if(commitResponse.success === true) {\n    data = {};\n    data.commitResponse = commitResponse;\n    taskAppModule.taskCompleted(apogeeMessenger,[\"submit\",\"submitControl\"],[\"completed\",\"resetControl\"],data);\n    resultValue = \"SUCCESS\";\n}\nelse {\n    alert(\"Error making commit: \" + commitResponse.msg);\n    resultValue = \"ERROR\";\n}\n\n//for error or success - clear the commit request\nvar updateInfo = [];\nupdateInfo.push([\"liveInstructionList\",null]);\nupdateInfo.push([\"commitMessage\",null]);\napogeeMessenger.compoundDataUpdate(updateInfo);\n    \nreturn resultValue;","supplementalCode":"","description":""}},"sessionKey":{"name":"sessionKey","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return getSessionKey();","supplementalCode":"","description":""}},"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":{"valid":false,"data":null},"description":""}},"state":{"name":"state","type":"apogee.JsonTable","updateData":{"data":{"active":false,"previousTask":null},"description":""}},"instructionList":{"name":"instructionList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!state.active) return null;\n\nvar previousTask;\nswitch(state.previousTask[0]) {\n    case \"editMeta\":\n        if(editMeta.editMetaFile.result.valid) {\n            return editMeta.editPostProcess.instructionList;   \n        }\n        else {\n            return null;\n        }\n        break;\n        \n    case \"editCom\":\n        if(editCom.editComFile.result.valid) {\n            return editCom.editPostProcess.instructionList;   \n        }\n        else {\n            return null;\n        }\n        break;\n        \n    case \"editEntry\":\n        previousTask = editEntry.createInstructionList;\n        break;\n        \n    default:\n        console.log(\"Unknown task: \" + JSON.stringify(state.previousTask));\n        return;\n}\n","supplementalCode":"","description":""}}}},"editMeta":{"name":"editMeta","type":"apogee.Folder","children":{"context":{"name":"context","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(selectMetaContext.result.valid) {\n    return selectMetaContext.result.data.context;\n}\nelse {\n    return null;\n}\n","supplementalCode":"","description":""}},"sessionKey":{"name":"sessionKey","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return getSessionKey();","supplementalCode":"","description":""}},"fileSelection":{"name":"fileSelection","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(selectMetaFile.result.valid) {\n    return selectMetaFile.result.data;\n}\nelse {\n    return null;\n}\n","supplementalCode":"","description":""}},"metaFileResponse":{"name":"metaFileResponse","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!sessionKey) return null;\nif(!fileSelection) return null;\n\n\nif(fileSelection.editExisting) {\n    var searchDef = {};\n    searchDef.search = \"meta_file_short\";\n    searchDef.id = fileSelection.metaFileId;\n    return micemetarDataAccess.getRequestPromise(searchDef,sessionKey);\n}\nelse {\n    return null;\n}\n\n\n\n\n\n","supplementalCode":"","description":""}},"activeMetaFileEntry":{"name":"activeMetaFileEntry","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!fileSelection) return null;\n\nif(fileSelection.editExisting) {\n    if(!metaFileResponse) {\n        return null;\n    }\n    \n    if(!metaFileResponse.success) {\n        throw new Error(\"Meta File request error\");\n    }\n    \n    if(metaFileResponse.data.Response.length === 0) {\n        throw new Error(\"Meta file not found\");\n    }\n    \n    return metaFileResponse.data.Response[0];\n}\nelse {\n    var fields = {};\n    fields.name = fileSelection.metaFileName;\n    fields.file_type_id = fileSelection.fileTypeId;\n    fields.file_context = context;\n    fields.use_type = fileSelection.useType;\n\n    return micemetarDataAccess.createRecord(\"meta_file\",fields);\n}\n","supplementalCode":"","description":""}},"metaFileType":{"name":"metaFileType","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(activeMetaFileEntry) {\n    return getFileTypeName(activeMetaFileEntry.Fields.file_type_id);\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"dependentContexts":{"name":"dependentContexts","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(selectMetaContext.result.valid) {\n    return selectMetaContext.result.data.dependentContexts;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"existingRecipeEntries":{"name":"existingRecipeEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!metaFileResponse) {\n    //empty list\n    return [];\n}\n\nif(!metaFileResponse.success) {\n    throw new Error(\"Error loading meta file records: \" + loadMetaFileRecords.metaFileResponse.msg);\n}\n\nvar isRecipeEntry = (record) => (record.Type == \"recipe_entry\");\n\nreturn metaFileResponse.data.Records.filter(isRecipeEntry);\n","supplementalCode":"","description":""}},"existingParentEntries":{"name":"existingParentEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!metaFileResponse) {\n    //empty list\n    return [];\n}\n\nif(!metaFileResponse.success) {\n    throw new Error(\"Error loading meta file records: \" + loadMetaFileRecords.metaFileResponse.msg);\n}\n\nvar isParentEntry = (record) => (record.Type == \"meta_parent_entry\");\n\nreturn metaFileResponse.data.Records.filter(isParentEntry);\n","supplementalCode":"","description":""}}}},"getSessionKey":{"name":"getSessionKey","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"if(login.result.valid) {\n    return login.result.data.sessionKey;\n}\nelse {\n    return null;\n}\n","supplementalCode":"","description":""}},"currentTask":{"name":"currentTask","type":"apogee.JsonTable","updateData":{"data":["switcher","selectSequence"],"description":""}},"getFileTypeName":{"name":"getFileTypeName","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeId"],"functionBody":"return commonData.fileTypeIdToName[fileTypeId];","supplementalCode":"","description":""}},"commonData":{"name":"commonData","type":"apogee.Folder","children":{"fileTypeList":{"name":"fileTypeList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var sessionKey = login.sessionKey;\nif(!sessionKey) return null;\n\nvar fileTypeSearch = {};\nfileTypeSearch.search = \"file_type_list\";\n\nreturn micemetarDataAccess.getRequestPromise(fileTypeSearch,sessionKey);\n\n","supplementalCode":"","description":""}},"fileTypeIdToName":{"name":"fileTypeIdToName","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!fileTypeList) return null;\nif(!fileTypeList.success) throw new Error(\"Error loading file type list: \" + fileTypeList.msg);\n\nvar output = {};\n\nvar addToMap = (record) => {output[record.Id] = record.Fields.file_type_name;}\n\nfileTypeList.data.Response.forEach(addToMap);\n\nreturn output;","supplementalCode":"","description":""}},"fileTypeNameToId":{"name":"fileTypeNameToId","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!fileTypeList) return null;\n\nvar output = {};\n\nvar addToMap = (record) => {output[record.Fields.file_type_name] = record.Id;}\n\nfileTypeList.data.Response.forEach(addToMap);\n\nreturn output;","supplementalCode":"","description":""}},"customerInfo":{"name":"customerInfo","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"const url = \"http://eng.micello.com/apogee/data/customerJson.json\"\nreturn apogee.net.jsonRequest(url);","supplementalCode":"","description":""}},"INACTIVE_LAYOUT":{"name":"INACTIVE_LAYOUT","type":"apogee.JsonTable","updateData":{"data":{"lines":[{"type":"title","title":"inactive"}]},"description":""}},"DUMMY_DROPDOWN_ENTRY":{"name":"DUMMY_DROPDOWN_ENTRY","type":"apogee.JsonTable","updateData":{"data":"---","description":""}},"GLOBAL_CONTEXT":{"name":"GLOBAL_CONTEXT","type":"apogee.JsonTable","updateData":{"data":"public","description":""}},"CID_CONTEXT_PREFIX":{"name":"CID_CONTEXT_PREFIX","type":"apogee.JsonTable","updateData":{"data":"com_","description":""}},"DEFAULT_COM_FILE_NAME":{"name":"DEFAULT_COM_FILE_NAME","type":"apogee.JsonTable","updateData":{"data":"Standard","description":""}},"DEFAULT_META_FILE_NAME":{"name":"DEFAULT_META_FILE_NAME","type":"apogee.JsonTable","updateData":{"data":"Standard","description":""}},"getFileTypeName":{"name":"getFileTypeName","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeId"],"functionBody":"return fileTypeIdToName[fileTypeId];","supplementalCode":"","description":""}}}},"getFileTypeId":{"name":"getFileTypeId","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeName"],"functionBody":"return commonData.fileTypeNameToId[fileTypeName];","supplementalCode":"","description":""}},"login":{"name":"login","type":"apogee.Folder","children":{"loginUrl":{"name":"loginUrl","type":"apogee.JsonTable","updateData":{"data":"http://eng.micello.com/TestAuthorization/loginjson","description":""}},"sessionResponse":{"name":"sessionResponse","type":"apogee.JsonTable","updateData":{"data":{"responseCode":1,"paramTable":[{"urlPattern":"http://eng.micello.com/mfs","params":[["key","S1sshnIV1Rk9EGz32Acrl8aSYsTKYd"]]},{"urlPattern":"http://mfs.micello.com","params":[["key","nS71TmmSmgvwcXlfrGrin38AMLP48B"]]},{"urlPattern":"http://factory-mfs.micello.com","params":[["key","yfZkszbELEy6lxz1sSeUZscJlC41hL"]]},{"urlPattern":"http://mfs-hub-master.micello.com/","params":[["key","pvLuRozg2EZVrpE8nCpCrQT0FOHcLh"]]},{"urlPattern":"http://mfs-us-1.micello.com","params":[["key","nS71TmmSmgvwcXlfrGrin38AMLP48B"]]},{"urlPattern":"http://eng.micello.com/mfs-node","params":[["key","dnSkxyrgxRNtGMUYbhgV8uvdPW1V4U"]]},{"urlPattern":"http://int.micello.com/mfs","params":[["key","u1VjArfzrFKvBr7X7UVRxFB4eDQmqR"]]}],"sessionKey":"SESS0f6c4c2238a670b8138b63d9fd03cc22=kth2sm5md8jdl4cgg1e8f37a31"},"description":""}},"savedUserName":{"name":"savedUserName","type":"apogee.JsonTable","updateData":{"data":"dave","description":""}},"loginControl":{"name":"loginControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var onSubmit = (formData) => {\n    \n    //on click\n    var bodyJson = {};\n    bodyJson.userName = formData.userName;\n    bodyJson.password = formData.password;\n    \n    var options = {};\n    options.body = JSON.stringify(bodyJson);\n    options.method = \"POST\";\n    \n    var requestPromise = apogee.net.jsonRequest(loginUrl,options);\n    \n    //set the response\n    apogeeMessenger.asynchDataUpdate(\"sessionResponse\",requestPromise);\n    \n    //this clears the password...\n    apogeeMessenger.dataUpdate(\"savedUserName\",formData.userName);\n}\n\nvar onClear = () => {\n    var data = [];\n    data.push([\"savedUserName\",null]);\n    data.push([\"sessionResponse\",null]);\n    apogeeMessenger.compoundDataUpdate(data);\n}\n\nvar layout = [];\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Login\";\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"User Name: \";\nentry.key = \"userName\";\nentry.value = savedUserName;\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Password: \";\nentry.password = true;\nentry.key = \"password\";\nlayout.push(entry);\n\n//suvbmit\nentry = {};\nentry.type = \"submit\";\nentry.onSubmit = onSubmit;\nentry.onCancel = onClear;\nentry.cancelLabel = \"Clear\";\nlayout.push(entry);\n\nreturn layout;\n","supplementalCode":"","description":""}},"sessionKey":{"name":"sessionKey","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(sessionResponse) {\n    if(sessionResponse.sessionKey) {\n        return sessionResponse.sessionKey;\n    }\n    else if(sessionResponse.responseCode < 0) {\n        throw new Error(\"Error in login: \" + sessionResponse.message);\n    }\n}\n\n//if we are here the login wasn't done\nreturn null;\n","supplementalCode":"","description":""}},"appendQueryParams":{"name":"appendQueryParams","type":"apogee.FunctionTable","updateData":{"argList":["inUrl"],"functionBody":"if((!sessionResponse)||(!sessionResponse.paramTable)) {\n    throw new Error(\"Param table not loaded!\");\n}\n\nvar isMatchingKey = (paramEntry) => inUrl.startsWith(paramEntry.urlPattern);\n\nvar paramEntry = sessionResponse.paramTable.find(isMatchingKey);\n\nif(paramEntry) {\n    if(paramEntry.params.length > 1) {\n        throw new Error(\"Code only supports 1 appended parameter. (Is an easy fi to add more)\")\n    }\n    else if(paramEntry.params.length === 1) {\n        return inUrl + \"?\" + paramEntry.params[0][0] + \"=\" + paramEntry.params[0][1];\n    }\n}\n      \n//no params to add\nreturn inUrl;\n","supplementalCode":"","description":""}}}},"loadContext":{"name":"loadContext","type":"apogee.Folder","children":{"selectContext":{"name":"selectContext","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"//------------\n//create handlers\n//------------\nvar onSave = (formData,form) => {\n    apogeeMessenger.dataUpdate(\"contextInfo\",formData);\n    \n    setNotDirty(form);\n}\nvar onClear = () => {\n    apogeeMessenger.dataUpdate(\"contextInfo\",null);\n}\n\nvar onChange = (value,form) => {\n    setDirty(form);\n}\n\n//we will just enable or disable the ok button when the data is\n//clean or dirty. We should do something more noticeable\nvar setDirty = function(form) {\n    var submitElement = form.getEntry(\"submitElement\");\n    submitElement.submitDisable(false);\n}\n\nvar setNotDirty = function(form) {\n    var submitElement = form.getEntry(\"submitElement\");\n    submitElement.submitDisable(true);\n}\n\n//------------\n//create layout\n//------------\nvar layout = [];\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Select Metafile Context\";\nlayout.push(entry);\n\n//section\nvar scopeOnChange = (value,form) => {\n    //run the parent on change\n    onChange(value,form);\n    \n    //change the active panel\n    showPanel(value,form);\n}\n\n//section\nvar DEFAULT_FILE_SCOPE = \"customer\";\nvar fileScope = ((contextInfo)&&(contextInfo.fileScope)) ? contextInfo.fileScope : DEFAULT_FILE_SCOPE;\nentry = {};\nentry.type = \"dropdown\";\nentry.label = \"File Scope: \";\nentry.key = \"fileScope\";\nentry.entries = FILE_SCOPE_NAMES;\nentry.onChange = scopeOnChange;\nentry.value = fileScope;\nlayout.push(entry);\n\nvar activePanelKey = getPanelKey(entry.value);\n\n//panels\n\n//==================\n//general scope panel\n//==================\nchildFormData = [];\npanelKey = getPanelKey(\"general\");\n\nentry = {};\nentry.type = \"panel\";\nentry.formData = childFormData;\nentry.key = panelKey;\nentry.state = (entry.key == activePanelKey) ? apogeeapp.ui.ConfigurableElement.STATE_NORMAL : apogeeapp.ui.ConfigurableElement.STATE_INACTIVE;\nif((contextInfo)&&(contextInfo[panelKey])) entry.value = contextInfo[panelKey];\nentry.onChange = onChange;\nlayout.push(entry);\n\n//==================\n//customer scope panel\n//==================\nchildFormData = [];\npanelKey = getPanelKey(\"customer\");\n\n//customer name\nentry = {};\nentry.type = \"dropdown\";\nentry.label = \"Customer Name: \";\nentry.entries = _getCustomerList();\nentry.key = \"customerAuth\";\nchildFormData.push(entry);\n\nentry = {};\nentry.type = \"panel\";\nentry.formData = childFormData;\nentry.key = panelKey;\nentry.state = (entry.key == activePanelKey) ? apogeeapp.ui.ConfigurableElement.STATE_NORMAL : apogeeapp.ui.ConfigurableElement.STATE_INACTIVE;\nif((contextInfo)&&(contextInfo[panelKey])) entry.value = contextInfo[panelKey];\nentry.onChange = onChange;\nlayout.push(entry);\n\n\n//==================\n//cid scope panel\n//==================\nchildFormData = [];\npanelKey = getPanelKey(\"cid\");\n\n//cid\nentry = {};\nentry.type = \"textField\";\nentry.label = \"CID: \";\nentry.key = \"cid\";\nchildFormData.push(entry);\n\n//customer name\nentry = {};\nentry.type = \"dropdown\";\nentry.label = \"Customer Name: \";\nentry.entries = _getCustomerListWithNullOption();\nentry.key = \"customerAuth\";\nchildFormData.push(entry);\n\nentry = {};\nentry.type = \"panel\";\nentry.formData = childFormData;\nentry.key = panelKey;\nentry.state = (entry.key == activePanelKey) ? apogeeapp.ui.ConfigurableElement.STATE_NORMAL : apogeeapp.ui.ConfigurableElement.STATE_INACTIVE;\nif((contextInfo)&&(contextInfo[panelKey])) entry.value = contextInfo[panelKey];\nentry.onChange = onChange;\nlayout.push(entry);\n\n///////////////////////////////////////\n\n//additional\nentry = {};\nentry.type = \"textarea\";\nentry.label = \"Additional Contexts: \";\nentry.rows = 4;\nentry.cols = 30;\nif((contextInfo)&&(contextInfo.otherContexts))  entry.value =  contextInfo.otherContexts;\nentry.key = \"otherContexts\";\nlayout.push(entry);\n    \n//submit\nentry = {};\nentry.type = \"submit\";\nentry.onSubmit = onSave;\nentry.onCancel = onClear;\nentry.submitLabel = \"Save\";\nentry.cancelLabel = \"Clear\";\nentry.submitDisabled = true;\nentry.key = \"submitElement\";\nlayout.push(entry);\n\n\nreturn layout;\n","supplementalCode":"const FILE_SCOPE_NAMES = [[\"CID\",\"cid\"],[\"Customer\",\"customer\"],[\"General\",\"general\"]];\n\nfunction getPanelKey(scope) {\n    return scope + \"Panel\";\n}\n\n//this shows the given panel and hides the others\nfunction showPanel(selectedScopeName,form) {\n    \n    FILE_SCOPE_NAMES.forEach( scopeEntry => {\n        var scopeName = scopeEntry[1];\n        var panelState = (scopeName == selectedScopeName) ? \n            apogeeapp.ui.ConfigurableElement.STATE_NORMAL : \n            apogeeapp.ui.ConfigurableElement.STATE_INACTIVE;\n        \n        var panelKey = getPanelKey(scopeName);\n        var panel = form.getEntry(panelKey);\n        panel.setState(panelState);\n        \n    });\n    \n}\n\nfunction _getCustomerList() {\n    return commonData.customerInfo.map(entry => [entry.customerName,entry.authString]);\n}\n\nfunction _getCustomerListWithNullOption() {\n    var list = [];\n    list.push([commonData.DUMMY_DROPDOWN_ENTRY,null]);\n    return list.concat(_getCustomerList());\n}","description":""}},"contextInfo":{"name":"contextInfo","type":"apogee.JsonTable","updateData":{"data":{"fileScope":"customer","customerPanel":{"customerAuth":"~1901group"},"otherContexts":"asdf,  asdf asdfas,asdfasd"},"description":""}},"contexts":{"name":"contexts","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var data = {};\n\nif((contextInfo)&&(contextInfo.fileScope)) {\n    switch(contextInfo.fileScope) {\n        case \"general\":\n            data.fileContext = commonData.GLOBAL_CONTEXT;\n            break;\n            \n        case \"customer\":\n            if(contextInfo.customerPanel) {\n                data.fileContext = contextInfo.customerPanel.customerAuth;\n            }\n            break;\n            \n        case \"cid\":\n            if(contextInfo.cidPanel) {\n                var cid = parseInt(contextInfo.cidPanel.cid);\n                if((cid)&&(cid > 0)) {\n                    data.fileContext = commonData.CID_CONTEXT_PREFIX + cid\n                }\n                else {\n                    throw new Error(\"Invalid CID!\");\n                }\n            }\n            break;\n    }\n    \n    if(contextInfo.otherContexts) {\n        data.otherContexts = contextInfo.otherContexts.split(/[\\s,]+/);\n        \n        if(contextInfo.fileScope != commonData.GLOBAL_CONTEXT) {\n            if(data.otherContexts.indexOf(commonData.GLOBAL_CONTEXT) < 0) {\n                data.otherContexts.push(commonData.GLOBAL_CONTEXT);\n            }\n        }\n    }\n}\n\nif(data.fileContext) {\n    return data;\n}\nelse {\n    return null;\n}\n","supplementalCode":"","description":""}}}},"selectMetaFile":{"name":"selectMetaFile","type":"apogee.Folder","children":{"metaFileList":{"name":"metaFileList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var sessionKey = login.sessionKey;\nif(!sessionKey) return null;\n\nvar contexts = loadContext.contexts;\nif(!contexts) return null;\nvar context = contexts.fileContext;\nif(!context) return null;\n\nvar searchDef = {};\nsearchDef.search = \"meta_file_list\";\nsearchDef.file_context = context;\n\nreturn micemetarDataAccess.getRequestPromise(searchDef,sessionKey);\n\n","supplementalCode":"","description":""}},"selectMetaFile":{"name":"selectMetaFile","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"//------------\n//create handlers\n//------------\nvar onSave = (formData,form) => {\n    apogeeMessenger.dataUpdate(\"metaFileInfo\",formData);\n    \n    setNotDirty(form);\n}\nvar onClear = () => {\n    apogeeMessenger.dataUpdate(\"metaFileInfo\",null);\n}\n\nvar onChange = (value,form) => {\n    setDirty(form);\n}\n\n//we will just enable or disable the ok button when the data is\n//clean or dirty. We should do something more noticeable\nvar setDirty = function(form) {\n    var submitElement = form.getEntry(\"submitElement\");\n    submitElement.submitDisable(false);\n}\n\nvar setNotDirty = function(form) {\n    var submitElement = form.getEntry(\"submitElement\");\n    submitElement.submitDisable(true);\n}\n\nvar dataMatches = true;\n\n//------------\n//create layout\n//------------\nvar layout = [];\n\ntitle\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Select Metadata File\";\nlayout.push(entry);\n\n//section\nvar taskOnChange = (value,form) => {\n    //run the parent on change\n    onChange(value,form);\n    \n    //change the active panel\n    showPanel(value,form);\n}\n\n//section\nvar DEFAULT_CREATE_OR_UPDATE = \"update\";\nvar createOrUpdate\nif((metaFileInfo)&&(metaFileInfo.createOrUpdate)) {\n    createOrUpdate = metaFileInfo.createOrUpdate;\n}\nelse {\n    createOrUpdate = DEFAULT_CREATE_OR_UPDATE;\n    dataMatches = false;\n}\nentry = {};\nentry.type = \"radioButtonGroup\";\nentry.groupName = \"corg\";\nentry.key = \"createOrUpdate\";\nentry.entries = TASK_NAMES;\nentry.horizontal = true;\nentry.onChange = taskOnChange;\nentry.value = createOrUpdate;\nlayout.push(entry);\n\nvar activePanelKey = getPanelKey(entry.value);\n\n//horizontal rule\nentry = {};\nentry.type = \"htmlDisplay\";\nentry.html = \"<hr>\";\nlayout.push(entry);\n\n//panels\n\n\n//==================\n//create panel\n//==================\nchildFormData = [];\npanelKey = getPanelKey(\"create\");\n\n//create\nentry = {};\nentry.type = \"dropdown\";\nentry.label = \"File Type: \";\nentry.entries = FILE_TYPES;\nentry.key = \"fileType\";\nchildFormData.push(entry);\n\nentry = {};\nentry.type = \"radioButtonGroup\";\nentry.groupName = \"boro\";\nentry.key = \"baseOrOverride\";\nentry.entries = [[\"Base\",\"base\"],[\"Override\",\"override\"]];\nentry.horizontal = true;\nentry.value = \"\";\nchildFormData.push(entry);\n\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Meta File Name: \";\nentry.key = \"name\";\nchildFormData.push(entry);\n\nentry = {};\nentry.type = \"panel\";\nentry.formData = childFormData;\nentry.key = panelKey;\nentry.state = (entry.key == activePanelKey) ? apogeeapp.ui.ConfigurableElement.STATE_NORMAL : apogeeapp.ui.ConfigurableElement.STATE_INACTIVE;\nif((metaFileInfo)&&(metaFileInfo[panelKey])) {\n    entry.value = metaFileInfo[panelKey];\n}\nelse {\n    if(entry.state == apogeeapp.ui.ConfigurableElement.STATE_NORMAL) dataMatches = false;\n}\nentry.onChange = onChange;\nlayout.push(entry);\n\n\n//==================\n//update panel\n//==================\nchildFormData = [];\npanelKey = getPanelKey(\"update\");\n\n//create\nentry = {};\nentry.type = \"dropdown\";\nentry.label = \"Meta File: \";\nentry.entries = metaFileFormEntries;\nentry.key = \"metaFile\";\nchildFormData.push(entry);\n\nentry = {};\nentry.type = \"panel\";\nentry.formData = childFormData;\nentry.key = panelKey;\nentry.state = (entry.key == activePanelKey) ? apogeeapp.ui.ConfigurableElement.STATE_NORMAL : apogeeapp.ui.ConfigurableElement.STATE_INACTIVE;\nif((metaFileInfo)&&(metaFileInfo[panelKey])) {\n    entry.value = metaFileInfo[panelKey];\n}\nelse {\n    if(entry.state == apogeeapp.ui.ConfigurableElement.STATE_NORMAL) dataMatches = false;\n}\nentry.onChange = onChange;\nlayout.push(entry);\n\n///////////////////////////////////////\n\n//horizontal rule\nentry = {};\nentry.type = \"htmlDisplay\";\nentry.html = \"<hr>\";\nlayout.push(entry);\n\n    \n//submit\nentry = {};\nentry.type = \"submit\";\nentry.onSubmit = onSave;\nentry.onCancel = onClear;\nentry.submitLabel = \"Save\";\nentry.cancelLabel = \"Clear\";\nentry.submitDisabled = dataMatches;\nentry.key = \"submitElement\";\nlayout.push(entry);\n\n\nreturn layout;\n","supplementalCode":"const TASK_NAMES = [[\"Create\",\"create\"],[\"Update\",\"update\"]];\n\nconst FILE_TYPES = [[\"Property Rules\",\"propertyRules\"],[\"Theme Rules\",\"themeRules\"],[\"Theme\",\"theme\"],[\"Strings\",\"strings\"],[\"Input Colors\",\"inputColors\"]]\n\nfunction getPanelKey(task) {\n    return task + \"Panel\";\n}\n\n//this shows the given panel and hides the others\nfunction showPanel(selectedTaskName,form) {\n    \n    TASK_NAMES.forEach( scopeEntry => {\n        var scopeName = scopeEntry[1];\n        var panelState = (scopeName == selectedTaskName) ? \n            apogeeapp.ui.ConfigurableElement.STATE_NORMAL : \n            apogeeapp.ui.ConfigurableElement.STATE_INACTIVE;\n        \n        var panelKey = getPanelKey(scopeName);\n        var panel = form.getEntry(panelKey);\n        panel.setState(panelState);\n        \n    });\n    \n}\n\nfunction getMetaFileEntries() {\n    return [1,2,3];\n}\n","description":""}},"metaFileFormEntries":{"name":"metaFileFormEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(metaFileList && metaFileList.data && metaFileList.data.Response) {\n    return metaFileList.data.Response.map(_createFormEntry);\n}   \nelse {\n    return null;\n}","supplementalCode":"function _createFormEntry(record) {\n    var entry = [];\n    entry.push(_getRecordName(record));\n    entry.push(record.Id);\n    \n    return entry;\n}\n\nfunction _getRecordName(record) {\n    var fileType =  commonData.getFileTypeName(record.Fields.file_type_id);\n    var optionName = record.Fields.name;\n    \n    return fileType + \" (\" + optionName + \")\"\n}","description":""}},"activeMetaFile":{"name":"activeMetaFile","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((metaFileInfo.createOrUpdate == \"update\")&&\n    (metaFileInfo.updatePanel)&&\n    (metaFileFormEntries)&&\n    (metaFileFormEntries.length > 0)) {\n    \n    return metaFileList.data.Response.find( record => record.id == metaFileInfo.updatePanel.metaFileId);\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"metaFileInfo":{"name":"metaFileInfo","type":"apogee.JsonTable","updateData":{"data":{"createOrUpdate":"update","updatePanel":{"metaFile":"24885"}},"description":""}}}},"editMetaFile":{"name":"editMetaFile","type":"apogee.Folder","children":{"selectEntriesControl":{"name":"selectEntriesControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if( (!activeMetaFileEntry) ||\n    (!existingRecipeEntries) ||\n    (!availableFileEntries) ||\n    (!fileSelection)) {\n    return null;\n}\n\nvar data = {};\ndata.initialRecipeEntries = existingRecipeEntries;\ndata.fileEntries = availableFileEntries;\ndata.activeMetaFileEntry = activeMetaFileEntry;\ndata.metaFileCreated = !fileSelection.editExisting;\ndata.metaFileType = metaFileType;\n\ndata.insertionInfoOptions = insertionInfoOptions;\n\nreturn data;","supplementalCode":"","description":""}},"fileTypeEntryList":{"name":"fileTypeEntryList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!sessionKey) return null;\nif(!activeMetaFileEntry)  return null;\n\nvar searchDef = {};\nsearchDef.search = \"file_type_entries\";\nsearchDef.id = activeMetaFileEntry.Fields.file_type_id;\n\n//here we are loading all file entries for the given file type\n//we will filter by context later\n//as an alternative, we could load all contexts specifically\nreturn micemetarDataAccess.getRequestPromise(searchDef,sessionKey);\n\n","supplementalCode":"","description":""}},"insertionInfoOptions":{"name":"insertionInfoOptions","type":"apogee.JsonTable","updateData":{"data":{"themeRules":[{"title":"Priority 0","insertionInfo":{"orderedEntry":0}},{"title":"Priority 1","insertionInfo":{"orderedEntry":1}},{"title":"Priority 2","insertionInfo":{"orderedEntry":2}},{"title":"Priority 3","insertionInfo":{"orderedEntry":3}},{"title":"Priority 4","insertionInfo":{"orderedEntry":4}},{"title":"Priority 5","insertionInfo":{"orderedEntry":5}}],"default":[{"title":"","insertionInfo":null}]},"description":""}},"availableFileEntries":{"name":"availableFileEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((!fileTypeEntryList)||(!fileTypeEntryList.success)) return null;\n\nvar isFileEntry = (record) => (record.Type == \"file_entry\");\n\nvar allowedContextMap = getAllowedContextMap(dependentContexts);\nvar isAllowedContext = record => allowedContextMap[record.Fields.entry_context]\n\n//we will take all entries from the file entry list making sure it is an actual\n//file entry and that it matches the allowed contexts from \"dependentContexts\"\nreturn fileTypeEntryList.data.Records.filter(isFileEntry).filter(isAllowedContext);","supplementalCode":"function getAllowedContextMap(contextList) {\n    var allowedContextMap = {}; \n    dependentContexts.forEach(context => allowedContextMap[context] = true);\n    return allowedContextMap;\n}","description":""}},"fileEntries":{"name":"fileEntries","type":"apogee.JsonTable","updateData":{"data":"","description":""}},"NOTES":{"name":"NOTES","type":"apogee.JsonTable","updateData":{"data":"1) Somewhere, document that we are skipping the parent dependencies\n2) Set the base files automatically in COM\n3) Create a table \"activ recipe entries\" that gets populated when we select\nthe meta file (and cleared otherwise)\n4) the select entries control should update this when we press save.\n5) I think we can get rid of all the junk in \"editMeta\" folder that we no longer use","description":""}}}},"editPostProcess":{"name":"editPostProcess","type":"apogee.Folder","children":{"editResults":{"name":"editResults","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(editMeta.editMetaFile.result.valid) {\n    return editMeta.editMetaFile.result.data;\n}\nelse {\n    return null;\n}\n","supplementalCode":"","description":""}},"createMetaFileEntries":{"name":"createMetaFileEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!editResults) return null;\n\nvar output= [];\n\nif(editResults.metaFileCreated) {\n    output.push(editResults.metaFileEntry);\n}\n\nreturn output;","supplementalCode":"","description":""}},"createRecipeEntries":{"name":"createRecipeEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!editResults) return null;\n\nvar combinedEntries = editResults.combinedEntries;\nvar metaFileId = editResults.metaFileEntry.Id; \n\nvar newRecipeNeeded = (combinedEntry) => ((combinedEntry.recipeEntry === undefined)&&(combinedEntry.selected));\nvar makeRecipeEntry = (combinedEntry) => (createRecipeEntry(combinedEntry,metaFileId));\n\nreturn combinedEntries.filter(newRecipeNeeded).map(makeRecipeEntry);","supplementalCode":"function createRecipeEntry(combinedEntry,metaFileId) {\n    \n    var fileEntry = combinedEntry.fileEntry;\n    var insertionInfo = combinedEntry.insertionInfo;\n    \n    var order = 0;\n    \n    var fields = {};\n    fields.ordr = order;\n    fields.meta_file_id = metaFileId;\n    fields.file_entry_id = fileEntry.Id;\n    fields.insertion_info = insertionInfo;\n    \n    return micemetarDataAccess.createRecord(\"recipe_entry\",fields);\n}","description":""}},"editRecipeEntryPairs":{"name":"editRecipeEntryPairs","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!editResults) return null;\n\nvar combinedEntries = editResults.combinedEntries;\n\nvar editRecipeNeeded = (combinedEntry) => ( \n        (combinedEntry.recipeEntry !== undefined) &&\n        (combinedEntry.selected) &&\n        (insertionInfoChanged(combinedEntry.insertionInfo,combinedEntry.recipeEntry.Fields.insertion_info))\n    );\n\nreturn combinedEntries.filter(editRecipeNeeded).map(getEditRecipePair);","supplementalCode":"function getEditRecipePair(combinedEntry) {\n    var oldRecipeEntry = combinedEntry.recipeEntry;\n    var newRecipeEntry = apogee.util.jsonCopy(oldRecipeEntry);\n    newRecipeEntry.Fields.insertion_info = combinedEntry.insertionInfo;\n    return [oldRecipeEntry,newRecipeEntry];\n}\n\nfunction insertionInfoChanged(info1,info2) {\n    if(!info1) {\n        if(info2) return true;\n        else return false;\n    }\n    else if(!info2) {\n        return true;\n    }\n    else {\n        if(info1.orderedEntry === undefined) throw new Error(\"Expected an 'orderedEntry' field in insertion info!\");\n        \n        return (info1.orderedEntry != info2.orderedEntry);\n    }\n}\n\n           ","description":""}},"deleteRecipeEntries":{"name":"deleteRecipeEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!editResults) return null;\n\nvar combinedEntries = editResults.combinedEntries;\n\nvar deleteRecipeNeeded = (combinedEntry) => ((combinedEntry.recipeEntry !== undefined)&&(!combinedEntry.selected));\nvar getRecipeEntry = (combinedEntry) => (combinedEntry.recipeEntry);\n\nreturn combinedEntries.filter(deleteRecipeNeeded).map(getRecipeEntry);","supplementalCode":"","description":""}},"instructionList":{"name":"instructionList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!editResults) return null;\n\nvar output = [];\n\n//meta file\noutput = output.concat(createMetaFileEntries.map(micemetarDataAccess.createCreateInstruction));\n\n//parent entries\noutput = output.concat(createParentFileEntries.map(micemetarDataAccess.createCreateInstruction));\n\nvar getEditInstruction = (editPair) => (micemetarDataAccess.createUpdateInstruction(editPair[0],editPair[1]));\n\noutput = output.concat(editParentFileEntryPairs.map(getEditInstruction));\n\noutput = output.concat(deleteParentFileEntries.map(micemetarDataAccess.createDeleteInstruction));\n\n//recipe entries\noutput = output.concat(createRecipeEntries.map(micemetarDataAccess.createCreateInstruction));\n\nvar getEditInstruction = (editPair) => (micemetarDataAccess.createUpdateInstruction(editPair[0],editPair[1]));\n\noutput = output.concat(editRecipeEntryPairs.map(getEditInstruction));\n\noutput = output.concat(deleteRecipeEntries.map(micemetarDataAccess.createDeleteInstruction));\n\nreturn output;","supplementalCode":"","description":""}},"createParentFileEntries":{"name":"createParentFileEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!mergedSelections) return null;\n\nvar output = [];\nfor(var idString in mergedSelections) {\n    var entry = mergedSelections[idString];\n    if((entry.record === undefined)&&(entry.selectedRelation !== undefined)) {\n        var metaFileId = parseInt(idString);\n        var parentFileEntry = createParentFileEntry(activeMetaFileEntry.Id,metaFileId,entry.selectedRelation);\n        output.push(parentFileEntry);\n    }\n}\n\nreturn output;","supplementalCode":"function createParentFileEntry(metaFileId,parentFileId,relation) {\n    var order = 0;\n    \n    var fields = {};\n    fields.meta_file_id = metaFileId;\n    fields.parent_file_id = parentFileId;\n    fields.relation = relation;\n    \n    return micemetarDataAccess.createRecord(\"meta_parent_entry\",fields);\n}\n","description":""}},"deleteParentFileEntries":{"name":"deleteParentFileEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!mergedSelections) return null;\n\nvar output = [];\nfor(var idString in mergedSelections) {\n    var entry = mergedSelections[idString];\n    if((entry.record !== undefined)&&(entry.selectedRelation === undefined)) {\n        output.push(entry.record);\n    }\n}\n\nreturn output;\n","supplementalCode":"","description":""}},"editParentFileEntryPairs":{"name":"editParentFileEntryPairs","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!mergedSelections) return null;\n\nvar output = [];\nfor(var idString in mergedSelections) {\n    var entry = mergedSelections[idString];\n    if((entry.record !== undefined)&&(entry.selectedRelation !== undefined)) {\n        //this should never be needed, but weill ad it any way\n        \n        if(entry.record.Fields.relation != entry.selectedRelation) {\n            var newRecord = apogee.util.jsonCopy(entry.record);\n            newRecord.Fields.relation = entry.selectedRelation;\n            output.push([entry.record,newRecord]);   \n        }\n    }\n}\n\nreturn output;","supplementalCode":"","description":""}},"mergedSelections":{"name":"mergedSelections","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(editMeta.selectDependencies.result.valid) {\n    return editMeta.selectDependencies.mergedSelections;\n}\nelse {\n    return null;\n}\n","supplementalCode":"","description":""}}}}}},"micemetarDataAccess":{"name":"micemetarDataAccess","type":"apogee.Folder","children":{"createRecord":{"name":"createRecord","type":"apogee.FunctionTable","updateData":{"argList":["recordType","fieldMap"],"functionBody":"var record = {};\n\nrecord.Id = getId();\nrecord.Type = recordType;\nrecord.Fields = fieldMap;\nrecord.read_perm = READ_PERM;\nrecord.edit_perm = EDIT_PERM;\n\nreturn record;","supplementalCode":"var READ_PERM = 2;\nvar EDIT_PERM = 15;\n\n//this will be illegal at some point\nvar nextId = -1;\n\nfunction getId() {\n    return nextId--;\n}","description":"This method creates a record given the field values and record info \nfrom the data set info. It creates and ID and uses standard permissions."}},"recordsToCreateInstructions":{"name":"recordsToCreateInstructions","type":"apogee.FunctionTable","updateData":{"argList":["recordList"],"functionBody":"var instructions = [];\n\nfor(var i = 0; i < recordList.length; i++) {\n    var createRecord = recordList[i];\n    var instruction = createCreateInstruction(createRecord);\n    instructions.push(instruction);\n}\n\nreturn instructions;","supplementalCode":"","description":"This creates a list of create instructions to go along with a list of records to be created.\n\nThere is the option to assign the ID or to leave it as undefined, in which case\nan automatically incremented ID will be assigned. (For consistency in the data\nset, either all records should be preassigned or all records should be \nautomatically assigned."}},"createCommitBody":{"name":"createCommitBody","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage"],"functionBody":"var commit = {};\nvar actions = [];\n\nif(commitMessage.length === 0) throw new Error(\"Commit message missing!\");\n\ncommit.Name = dataSetInfo.name;\ncommit.Message = commitMessage;\ncommit.Actions = actions;\n\n//single action with commits\nvar action = {};\naction.Title = \"bulk create commit\";\naction.Instr = instructionList;\nactions.push(action);\n\nreturn commit","supplementalCode":"","description":"This creates a body for a commit request, given a list of instructions and a commit message."}},"createRequestOptions":{"name":"createRequestOptions","type":"apogee.FunctionTable","updateData":{"argList":["bodyJson","sessionKey"],"functionBody":"var header = {};\nheader[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\nheader.sessionKey = sessionKey;\nheader[\"proto-version\"] = \"4.0\";\nheader[\"db-version\"] = dataSetInfo.version;\n\nrequestInfo = {};\nrequestInfo.header = header;\nif(bodyJson) {\n    requestInfo.method = \"POST\";\n    requestInfo.body = JSON.stringify(bodyJson);\n}\n\nreturn requestInfo;\n","supplementalCode":"","description":"This creates the requestOptions, suitable for apogee.net.jsonRequest, to go with an type of request to the workingset (micemetarequest) server."}},"host":{"name":"host","type":"apogee.JsonTable","updateData":{"data":"http://eng.micello.com/micemetarws","description":""}},"commitUrl":{"name":"commitUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvalue = host + \"/commit\";\nreturn value;\n\n","supplementalCode":"","description":""}},"requestUrl":{"name":"requestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return host + \"/cannedsearch\";\n\n","supplementalCode":"","description":""}},"dataSetInfo":{"name":"dataSetInfo","type":"apogee.JsonTable","updateData":{"data":{"name":"Micemetar","records":{"com_file_entry":{"foreignList":[],"idField":"com_file_entry_id","name":"com_file_entry","recordClass":"com.micello.micemetar.data.ComFileEntry","fields":[{"fieldClass":"java.lang.Integer","name":"ordr","nullOk":false,"defaultValue":0},{"fieldClass":"com.micello.micemetar.data.ComFile","name":"com_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.MetaFile","name":"meta_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"file_group","nullOk":false,"defaultValue":null}]},"com_file":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"com_file_id","remoteRecord":"com_file_entry","orderField":"ordr","name":"com_file_entry_list"}],"idField":"com_file_id","name":"com_file","recordClass":"com.micello.micemetar.data.ComFile","fields":[{"fieldClass":"java.lang.String","name":"file_context","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"name","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"ref","nullOk":true,"defaultValue":null}]},"meta_parent_entry":{"foreignList":[],"idField":"meta_parent_id","name":"meta_parent_entry","recordClass":"com.micello.micemetar.data.MetaParentEntry","fields":[{"fieldClass":"com.micello.micemetar.data.MetaFile","name":"meta_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.MetaFile","name":"parent_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"relation","nullOk":true,"defaultValue":null}]},"file_entry":{"foreignList":[],"idField":"file_entry_id","name":"file_entry","recordClass":"com.micello.micemetar.data.FileEntry","fields":[{"fieldClass":"java.lang.String","name":"entry_context","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"entry_name","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.FileType","name":"file_type_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"entry_section","nullOk":true,"defaultValue":null},{"fieldClass":"java.lang.String","name":"entry_key","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"option_name","nullOk":false,"defaultValue":null},{"fieldClass":"org.json.JSONObject","name":"entry_data","nullOk":false,"defaultValue":null}]},"file_type":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"file_type_id","remoteRecord":"file_entry","name":"file_entry_list"}],"idField":"file_type_id","name":"file_type","recordClass":"com.micello.micemetar.data.FileType","fields":[{"fieldClass":"java.lang.String","name":"file_type_name","nullOk":true,"defaultValue":null}]},"meta_file":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"meta_file_id","remoteRecord":"recipe_entry","orderField":"ordr","name":"recipe_entry_list"},{"restrictDelete":true,"isUnique":false,"remoteField":"meta_file_id","remoteRecord":"meta_parent_entry","name":"parent_entry_list"}],"idField":"meta_file_id","name":"meta_file","recordClass":"com.micello.micemetar.data.MetaFile","fields":[{"fieldClass":"com.micello.micemetar.data.FileType","name":"file_type_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"file_context","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"name","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"use_type","nullOk":false,"defaultValue":null}]},"recipe_entry":{"foreignList":[],"idField":"recipe_entry_id","name":"recipe_entry","recordClass":"com.micello.micemetar.data.RecipeEntry","fields":[{"fieldClass":"java.lang.Integer","name":"ordr","nullOk":false,"defaultValue":0},{"fieldClass":"com.micello.micemetar.data.MetaFile","name":"meta_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.FileEntry","name":"file_entry_id","nullOk":false,"defaultValue":null},{"fieldClass":"org.json.JSONObject","name":"insertion_info","nullOk":true,"defaultValue":null}]}},"version":"5.0"},"description":""}},"createUpdateInstruction":{"name":"createUpdateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["initialRecord","targetRecord"],"functionBody":"if(initialRecord.Id != targetRecord.Id) {\n    throw new Error(\"Record ID mismatch in create update instruction for target record: \" + getRecordErrString(targetRecord));\n}\n\nif(initialRecord.Type != targetRecord.Type) {\n    throw new Error(\"Inital and target record types do not match. Target record: \" + getRecordErrString(targetRecord));\n}\n\nvar recordsDifferent = false;\n\nvar recordInfo = getRecordInfo(initialRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Update\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = initialRecord.Id;\n\ninstruction.initialReadPerm = initialRecord.read_perm;\ninstruction.initialEditPerm = initialRecord.edit_perm;\n\nif(initialRecord.readPerm != targetRecord.readPerm) {\n    instruction.targetReadPerm = targetRecord.read_perm;\n    recordsDifferent = true;\n}\n\nif(initialRecord.editPerm != targetRecord.editPerm) {\n    instruction.targetEditPerm = targetRecord.edit_perm;\n    recordsDifferent = true;\n}\n\nvar initialData = {};\ninstruction.Initial = initialData;\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    \n    var initialValue;\n    var targetValue;\n    \n    var initialValue = initialRecord.Fields[field.name];\n    var targetValue = targetRecord.Fields[field.name];\n    \n    //validate target values\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(targetRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(targetRecord,field));\n        }\n    }\n    \n    if(!fieldsMatch(initialValue,targetValue,field)) {\n        initialData[field.name] = initialValue;\n        targetData[field.name] = targetValue;\n        recordsDifferent = true;\n    }\n}\n\nif(recordsDifferent) {\n    return instruction;\n}\nelse {\n    return null;\n}\n","supplementalCode":"function fieldsMatch(initialValue,targetValue,fieldInfo) {\n    if(fieldInfo.fieldClass === \"java.lang.String\") {\n        //compare strings with \"==\"\n        return (initialValue == targetValue);\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"java.lang\")) {\n        //compare other basic values with \"===\"\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"com.micello\")) {\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONObject\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONArray\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else {\n        throw new Error(\"unrecognized field type: \" + fieldInfo.fieldClass);\n    }\n}\n\nfunction compareJsonData(a,b) {\n    var an = apogee.util.getNormalizedObjectCopy(a);\n    var bn = apogee.util.getNormalizedObjectCopy(b);\n    var aString = JSON.stringify(an);\n    var bString = JSON.stringify(bn);\n    return aString == bString;\n}\n    ","description":"This function creates an update instruction given an initial and target record. If the records are the same then NULL is returned. (No update is needed.)"}},"createCreateInstruction":{"name":"createCreateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["createRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(createRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Create\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = createRecord.Id;\n\ninstruction.targetReadPerm = createRecord.read_perm;\ninstruction.targetEditPerm = createRecord.edit_perm;\n\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var targetValue;\n    var targetValue = createRecord.Fields[field.name];\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(createRecord,field));\n        }\n    }\n    \n    targetData[field.name] = targetValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getFieldErrString":{"name":"getFieldErrString","type":"apogee.FunctionTable","updateData":{"argList":["record","fieldInfo"],"functionBody":"return getRecordErrString(record) + \" - \" + fieldInfo.name;","supplementalCode":"","description":""}},"getRecordErrString":{"name":"getRecordErrString","type":"apogee.FunctionTable","updateData":{"argList":["record"],"functionBody":"return record.Type + \" \" + record.Id;","supplementalCode":"","description":""}},"createDeleteInstruction":{"name":"createDeleteInstruction","type":"apogee.FunctionTable","updateData":{"argList":["deleteRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(deleteRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Delete\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = deleteRecord.Id;\n\ninstruction.initialReadPerm = deleteRecord.read_perm;\ninstruction.initialEditPerm = deleteRecord.edit_perm;\n\nvar initialData = {};\ninstruction.Initial = initialData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var initialValue = deleteRecord.Fields[field.name];\n    \n    initialData[field.name] = initialValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getRecordInfo":{"name":"getRecordInfo","type":"apogee.FunctionTable","updateData":{"argList":["recordType"],"functionBody":"var recordInfo = dataSetInfo.records[recordType];\n\nif(!recordInfo) {\n    throw new Error(\"Record type not found in getRecordInfo: \" + recordType);\n}\n\nreturn recordInfo;","supplementalCode":"","description":""}},"combinedEntriesToInstructionList":{"name":"combinedEntriesToInstructionList","type":"apogee.FunctionTable","updateData":{"argList":["combinedEntries"],"functionBody":"var output = [];\nfor(var key in combinedEntries) {\n    var entry = combinedEntries[key];\n    var instruction = getInstructionForCombinedEntry(entry);\n    if(instruction) {\n        output.push(instruction);\n    }\n}\n\nreturn output;","supplementalCode":"function getInstructionForCombinedEntry(combinedEntry) {\n    var newEntry = combinedEntry.newEntry;\n    var oldEntry = combinedEntry.oldEntry;\n    \n    if(newEntry) {\n        if(!oldEntry) {\n            console.log(\"Create: \" + newEntry.Id);\n            return createCreateInstruction(newEntry);\n        }\n        else {\n            //this will return null for matching records\n            console.log(\"Update(maybe): \" + newEntry.Id);\n            return createUpdateInstruction(oldEntry,newEntry);\n        }\n    }\n    else if(oldEntry) {\n        console.log(\"Delete: \" + oldEntry.Id);\n        return createDeleteInstruction(oldEntry);\n    }\n    \n    return null;\n}\n\nfunction entriesDifferent(entry1,entry2) {\n    var string1 = JSON.stringify(apogee.util.getNormalizedCopy(entry1));\n    var string2 = JSON.stringify(apogee.util.getNormalizedCopy(entry2));\n    return (string1 == string2);\n}","description":"This function takes a combined entry map of the format:\n\n{\n  \"some-identifier\":{\n    \"oldEntry\":{original record entry, if applicable},\n    \"newEntry\":{new record entry, if applicable}\n  },\n  ...\n}\n\nIt returns an instruction list.\n\n"}},"getCommitPromise":{"name":"getCommitPromise","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage","sessionKey"],"functionBody":"var commitBody = createCommitBody(instructionList,commitMessage);\nvar requestOptions = createRequestOptions(commitBody,sessionKey);\nreturn apogee.net.jsonRequest(commitUrl,requestOptions);","supplementalCode":"","description":""}},"getRequestPromise":{"name":"getRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn apogee.net.jsonRequest(requestUrl,requestOptions);","supplementalCode":"","description":""}},"customRequestUrl":{"name":"customRequestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return host + \"/request\";","supplementalCode":"","description":""}},"getCustomRequestPromise":{"name":"getCustomRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn apogee.net.jsonRequest(customRequestUrl,requestOptions);","supplementalCode":"","description":""}}}}}}},"components":{"type":"apogeeapp.app.FolderComponent","treeState":1,"children":{"tasks":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":37,"y":37}},"treeState":1,"children":{"submit":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":386,"y":24}},"treeState":-1,"children":{"submitControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":377,"height":325},"posInfo":{"x":24,"y":91},"state":0,"viewType":"Output"},"resource":{"html":"<h2>Submit</h2>\n<textarea id=\"submit_messageInput\"></textarea><br>\n<input type=\"button\" id=\"submit_commitButton\" value=\"Commit\"></input>\n<input type=\"button\" id=\"submit_cancelButton\" value=\"Cancel\"></input>","onLoad":"this.submitButton = document.getElementById(\"submit_commitButton\");\nthis.cancelButton = document.getElementById(\"submit_cancelButton\");\nthis.messageInput = document.getElementById(\"submit_messageInput\");\nthis.initialized = true;\n\nvar instance = this;\nthis.submitButton.onclick = function() {\n    instance.onSubmit();\n}\nthis.cancelButton.onclick = function() {\n    instance.onCancel();\n}","constructorAddition":"this.messageInput = null;\nthis.submitButton = null;\nthis.cancelButton = null;\nthis.initialized = false;\n\nthis.onSubmit = function() {\n    \n    if(!this.initialized) {\n        return;\n    }\n    \n    var commitMessage = this.messageInput.value.trim();\n    if((!commitMessage)||(commitMessage.length === 0)) {\n        alert(\"You must enter a commit message!\");\n        return;\n    }\n    this.messageInput.value = \"\";\n    \n    if((!this.instructionList)||(this.instructionList.length === 0)) {\n        alert(\"There is no data to commit.\");\n        return;\n    }\n    \n    var updateInfo = [];\n    updateInfo.push([ \"commitMessage\",commitMessage]);\n    updateInfo.push([\"liveInstructionList\",this.instructionList]);\n    mode.getMessenger().compoundDataUpdate(updateInfo,true);\n}\n\nthis.onCancel = function() {\n    console.log(this.previousTask);\n    taskAppModule.taskCanceled(mode.getMessenger(),[\"submit\",\"submitControl\"],this.previousTask);\n}","setData":"if(!data) return;\n\nthis.instructionList = data.instructionList;\nthis.previousTask = data.previousTask;","css":"#submit_messageInput {\n    height: 200px;\n    width: 300px;\n}"},"destroyOnInactive":false},"commitResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":730,"height":306},"posInfo":{"x":452,"y":276},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"commitMessage":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":271,"height":99},"posInfo":{"x":450,"y":189},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"liveInstructionList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":315,"height":124},"posInfo":{"x":447,"y":234},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"taskResult":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":372,"height":147},"posInfo":{"x":453,"y":335},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"sessionKey":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":552,"height":52},"posInfo":{"x":21,"y":12},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":429,"height":239},"posInfo":{"x":730,"y":119},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"state":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":290,"height":92},"posInfo":{"x":738,"y":74},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"instructionList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":692,"height":683},"posInfo":{"x":447,"y":149},"state":-1,"viewType":"Data"},"dataView":"Colorized"}}},"editMeta":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":194,"y":31}},"tabOpen":true,"treeState":1,"children":{"context":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":585,"height":300},"posInfo":{"x":501,"y":64},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"sessionKey":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":717,"height":408},"posInfo":{"x":890,"y":447},"state":0,"viewType":"Formula"},"dataView":"Colorized"},"fileSelection":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":624,"height":92},"posInfo":{"x":573,"y":215},"state":0,"viewType":"Data"},"dataView":"Colorized"},"metaFileResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":799,"height":324},"posInfo":{"x":36,"y":230},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"activeMetaFileEntry":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":734,"height":346},"posInfo":{"x":34,"y":278},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"metaFileType":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":579,"height":233},"posInfo":{"x":31,"y":422},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"dependentContexts":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":232,"height":79},"posInfo":{"x":499,"y":107},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"existingRecipeEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":769,"height":407},"posInfo":{"x":34,"y":361},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"existingParentEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":831,"height":300},"posInfo":{"x":38,"y":320},"state":-1,"viewType":"Data"},"dataView":"Colorized"}}},"getSessionKey":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":447,"height":400},"posInfo":{"x":48,"y":440},"state":-1,"viewType":"Code"}},"currentTask":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":287,"height":92},"posInfo":{"x":48,"y":240},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"getFileTypeName":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":593,"height":400},"posInfo":{"x":47,"y":496},"state":-1,"viewType":"Code"}},"commonData":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":49,"y":379}},"tabOpen":true,"treeState":-1,"children":{"fileTypeList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":727,"height":325},"posInfo":{"x":130,"y":582},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"fileTypeIdToName":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":722,"height":320},"posInfo":{"x":36,"y":461},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"fileTypeNameToId":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":685,"height":300},"posInfo":{"x":38,"y":412},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"customerInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":689,"height":321},"posInfo":{"x":42,"y":27},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"INACTIVE_LAYOUT":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":379,"y":31},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"DUMMY_DROPDOWN_ENTRY":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":381,"y":77},"state":0,"viewType":"Data"},"dataView":"Colorized"},"GLOBAL_CONTEXT":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":45},"posInfo":{"x":381,"y":126},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"CID_CONTEXT_PREFIX":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":34},"posInfo":{"x":378,"y":177},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"DEFAULT_COM_FILE_NAME":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":736,"y":33},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"DEFAULT_META_FILE_NAME":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":736,"y":77},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"getFileTypeName":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":811,"y":405},"state":0,"viewType":"Code"}}}},"getFileTypeId":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":670,"height":400},"posInfo":{"x":45,"y":539},"state":-1,"viewType":"Code"}},"login":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":1595,"y":330}},"tabOpen":true,"treeState":-1,"children":{"loginUrl":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":465,"height":43},"posInfo":{"x":26,"y":27},"state":-1,"viewType":"Text"}},"sessionResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":697,"height":330},"posInfo":{"x":17,"y":355},"state":0,"viewType":"Data"},"dataView":"Colorized"},"savedUserName":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":284,"height":69},"posInfo":{"x":24,"y":72},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"loginControl":{"type":"apogeeapp.app.DynamicForm","windowState":{"sizeInfo":{"width":323,"height":181},"posInfo":{"x":23,"y":113},"state":0,"viewType":"Output"}},"sessionKey":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":828,"height":46},"posInfo":{"x":789,"y":596},"state":0,"viewType":"Data"},"dataView":"Colorized"},"appendQueryParams":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":845,"height":400},"posInfo":{"x":778,"y":88},"state":0,"viewType":"Code"}}}},"loadContext":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":206,"y":629}},"tabOpen":true,"treeState":-1,"children":{"selectContext":{"type":"apogeeapp.app.DynamicForm","windowState":{"sizeInfo":{"width":526,"height":294},"posInfo":{"x":111,"y":252},"state":0,"viewType":"Output"}},"contextInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":355,"height":156},"posInfo":{"x":586,"y":54},"state":0,"viewType":"Data"},"dataView":"Colorized"},"contexts":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":601,"height":169},"posInfo":{"x":1014,"y":45},"state":0,"viewType":"Data"},"dataView":"Colorized"}}},"selectMetaFile":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":250,"y":558}},"tabOpen":true,"treeState":-1,"children":{"metaFileList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":574,"height":273},"posInfo":{"x":23,"y":47},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"selectMetaFile":{"type":"apogeeapp.app.DynamicForm","windowState":{"sizeInfo":{"width":478,"height":348},"posInfo":{"x":22,"y":158},"state":0,"viewType":"Output"}},"metaFileFormEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":590,"height":439},"posInfo":{"x":24,"y":94},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"activeMetaFile":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":829,"height":422},"posInfo":{"x":976,"y":42},"state":0,"viewType":"Data"},"dataView":"Colorized"},"metaFileInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":631,"y":46},"state":0,"viewType":"Data"},"dataView":"Colorized"}}},"editMetaFile":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":203,"y":755}},"tabOpen":true,"treeState":1,"children":{"selectEntriesControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":862,"height":996},"posInfo":{"x":557,"y":530},"state":0,"viewType":"Model Code"},"resource":{"html":"<table class=\"editMeta_table\">\n    <tr>\n        <td colspan=\"3\">\n            <h2>Edit Metafile</h2>\n        </td>\n    </tr>\n     <tr>\n        <td id=\"editMeta_filterCell\" colspan=\"3\">\n            put filters here...\n        </td>\n    </tr>\n    <tr>\n        <td class=\"editMeta_selectedColumn\">\n            <h3>Selected</h3>\n        </td>\n        <td class=\"editMeta_centerColumn\">&nbsp;</td>\n        <td class=\"editMeta_availableColumn\">\n            <h3>Available</h3>\n        </td>\n    </tr>\n    <tr>\n        <td class=\"editMeta_listCell\">\n            <div id=\"editMeta_parentSelectedCell\" class=\"editMeta_displayDiv\"></div>\n        </td>\n        <td>&nbsp;</td>\n        <td class=\"editMeta_listCell\">\n            <div id=\"editMeta_availableCell\" class=\"editMeta_displayDiv\"></div>\n        </td>\n    </tr>\n    <tr>\n        <td colspan=\"3\">\n            <input type=\"button\" value=\"Commit\" id=\"editMeta_commitButton\">\n            &nbsp;\n            <input type=\"button\" value=\"Reset\" id=\"editMeta_resetButton\">\n            &nbsp;\n            <input type=\"button\" value=\"Cancel\" id=\"editMeta_cancelButton\">\n        </td>\n    </tr>\n</table>\n","css":".editMeta_table {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    border-collapse: collapse;\n}\n.editMeta_selectedColumn {\n    width: 45%;\n}\n.editMeta_centerColumn {\n    width: 5%;\n}\n.editMeta_availableColumn {\n    width: 45%;\n}\n\n\n.editMeta_listCell {\n    vertical-align: top;\n    height: 100%;\n    overflow: hidden;\n}\n.editMeta_displayDiv {\n    height: 100%;\n    overflow: auto; \n    border: 1px solid black;\n    background-color: white;\n}\n\n.editMeta_option_container {\n    border: 1px solid black;\n    overflow: auto; \n}\n.editMeta_optionTitle {\n    border: 1px solid black;\n    background-color: lightgray;\n    height: 20px;\n}\n.editMeta_optionDisplayDiv {\n    height: 400px;\n    border: 1px solid black;\n    background-color: white;\n}\n\n.editMeta_filterContainerClass {\n    display: inline;\n    margin: 5px;\n}\n\n.editMeta_listEntry {\n  border: 1px solid darkgray;\n  padding: 2px;\n}\n.editMeta_entryLabel {\n    font-weight: bold;\n}\n.editMeta_entryDataOpened {\n}\n.editMeta_entryDataClosed {\n  display:none;\n}\n.editMeta_preformatText {\n  border: 1px solid gray;\n  background-color: #e0e0e0;\n  color: blue;\n}","setData":"if(!data) return;\n\n//store the data if we are not ready yet\nif(!this.initialized) {\n    this.cachedData = data;\n    return;\n}\n\n//set data\nthis.combinedEntries = data.combinedEntries;\nthis.fileEntries = data.fileEntries;\nthis.initialRecipeEntries = data.initialRecipeEntries;\nthis.activeMetaFileEntry = data.activeMetaFileEntry;\nthis.metaFileCreated = data.metaFileCreated;\nthis.metaFileType = data.metaFileType;\nthis.insertionInfoOptions = data.insertionInfoOptions;\n\n//create combined entries\nthis.createCombinedEntries(data.initialRecipeEntries,data.fileEntries);\n\n//initialize filters\nthis.initializeFilters();\n\n//load the selection cells on each data load (they change with file type)\nthis.loadSelectedCells();\n\n//load ui\nthis.loadEntries();\n\n\n\n","constructorAddition":"const CELL_ID_PREFIX = \"meta_entry_\";\nconst PREFIX_LENGTH = CELL_ID_PREFIX.length;\n\nconst EXPAND_IMAGE_URL = \"http://eng.micello.com/apogee/resources/expand.png\";\nconst CONTRACT_IMAGE_URL = \"http://eng.micello.com/apogee/resources/contract.png\";\n\nthis.initialized = false;\n\nthis.combinedEntries = null\n\nthis.fileEntries = null;\nthis.initialRecipeEntries = null;\nthis.activeMetaFileEntry = null;\nthis.metaFileCreated = false;\n\nthis.selectedCell = null;\nthis.availableCell = null;\n\nthis.onCommitClicked = function() {\n    var data = {};\n    data.combinedEntries = apogee.util.jsonCopy(this.combinedEntries);\n    data.metaFileEntry = this.activeMetaFileEntry;\n    data.metaFileCreated = this.metaFileCreated;\n    \n    taskAppModule.taskCompleted(mode.getMessenger(),[\"editMeta\",\"editMetaFile\",\"selectEntriesControl\"],[\"submit\",\"submitControl\"],data);\n}\n\nthis.onResetClicked = function() {\n    this.createCombinedEntries(this.initialRecipeEntries,this.fileEntries);\n}\n\nthis.onCancelClicked = function() {\n    taskAppModule.taskCanceled(mode.getMessenger(),[\"editMeta\",\"editMetaFile\",\"selectEntriesControl\"],[\"editMeta\",\"selectDependencies\",\"selectDepForm\"]);\n}\n\n//=====================================\n// Initialize Data Methods\n//=====================================\n\nthis.createCombinedEntries = function(initialRecipeEntries,fileEntries) {\n    \n    var newCombinedEntries = [];\n    \n    var tempMap = {};\n    \n    var addFileEntryToMap = (record) => {\n        var combinedEntry = {}\n        combinedEntry.fileEntry = record;\n        combinedEntry.selected = false;\n        tempMap[record.Id] = combinedEntry;\n        newCombinedEntries.push(combinedEntry);\n    }\n    fileEntries.forEach(addFileEntryToMap);\n\n    var addRecipeEntryToMap = (record) => {\n        var combinedEntry = tempMap[record.Fields.file_entry_id];\n        if(combinedEntry === undefined) {\n            throw new Error(\"file entry not found: fileEntryId=\" + record.Fields.file_entry_id);\n        }\n        combinedEntry.recipeEntry = record;\n        combinedEntry.insertionInfo = record.Fields.insertion_info;\n        combinedEntry.selected = true;\n    }\n    initialRecipeEntries.forEach(addRecipeEntryToMap);\n    \n    this.combinedEntries = newCombinedEntries;\n}\n\n//=====================================\n// Load Methods\n//=====================================\n\nthis.loadEntries = function() {\n    \n    //populate the filter options\n    this.populateFilterOptions();\n    \n    //populate the display cells\n    this.clearSelectedCells();\n    apogeeapp.ui.removeAllChildren(this.availableCell);\n    \n    var addCombinedEntry = (combinedEntry) => {\n        var cellElement = this.createCell(combinedEntry);\n        if(combinedEntry.selected) {\n            selectedCell = this.getSelectedCell(combinedEntry.insertionInfo);\n            selectedCell.appendChild(cellElement);\n        }\n        else {\n            this.availableCell.appendChild(cellElement);\n        }\n    }\n    \n    var filterText = this.freeTextFilterEntry.value;\n    var filterRegEx = new RegExp(filterText, \"i\");\n    var freeTextFilter = combinedEntry => {\n        if(filterText.length > 0) {\n            return (combinedEntry.fileEntry.Fields.entry_name.search(filterRegEx) >= 0);\n        }\n        else {\n            return true;\n        }\n    }\n\n    this.combinedEntries.filter(this.overallDropdownFilter).filter(freeTextFilter).sort(fileEntrySorter).forEach(addCombinedEntry);\n}\n\nfunction fileEntrySorter(combinedEntry1,combinedEntry2) {\n    return combinedEntry1.fileEntry.Fields.entry_name.localeCompare(combinedEntry2.fileEntry.Fields.entry_name);\n}\n\nthis.createCell = function(combinedEntry) {\n    \n    var name = combinedEntry.fileEntry.Fields.entry_name;\n    \n    //=============================\n    //construction of list element\n    //=============================\n    var div = document.createElement(\"div\");\n    div.id = CELL_ID_PREFIX + combinedEntry.fileEntry.Id;\n    div.className = \"editMeta_listEntry\";\n    \n    //draggable interface\n    div.draggable = true;\n    var instance = this;\n    div.ondragstart = (event) => this.onDragStart(event);\n    \n    //content\n    var minMaxButton = document.createElement(\"img\");\n    minMaxButton.src = EXPAND_IMAGE_URL;\n    div.appendChild(minMaxButton);\n    \n    div.appendChild(document.createTextNode(\" \"));\n    var textSpan = document.createElement(\"span\");\n    textSpan.className = \"editMeta_entryLabel\";\n    textSpan.appendChild(document.createTextNode(name));\n    div.appendChild(textSpan);\n    \n    var entryContentDiv = document.createElement(\"div\");\n    entryContentDiv.className = \"editMeta_entryDataClosed\";\n    div.appendChild(entryContentDiv);\n    \n    entryContentDiv.appendChild(document.createTextNode(\"Entry Data: \"));\n    entryContentDiv.appendChild(document.createElement(\"br\"));\n    \n    var preformatDisplay = document.createElement(\"pre\");\n    preformatDisplay.className = \"editMeta_preformatText\";\n    var temp = JSON.stringify(combinedEntry.fileEntry.Fields.entry_data,null,\"  \");\n    temp = temp.replace(/</g,\"&lt;\");\n    temp = temp.replace(/>/g,\"&gt;\");\n    preformatDisplay.innerHTML = temp;\n    entryContentDiv.appendChild(preformatDisplay);\n    \n    //content interaction\n    minMaxButton.onclick = () => {\n        if(minMaxButton.src == EXPAND_IMAGE_URL) {\n            minMaxButton.src = CONTRACT_IMAGE_URL;\n            entryContentDiv.className = \"editMeta_entryDataOpened\";\n        }\n        else {\n            minMaxButton.src = EXPAND_IMAGE_URL;\n            entryContentDiv.className = \"editMeta_entryDataClosed\";\n        }\n    }\n    \n    return div;\n}\n\n//=================================\n// selected cell management\n//=================================\n\nthis.loadSelectedCells = function() {\n    apogeeapp.ui.removeAllChildren(this.parentSelectedCell);\n    this.selectedCells = {};\n    var options = this.getInsertionInfoOptions();\n    \n    var numberOptions = options.length;\n    \n    if(numberOptions > 1) {\n        var selectedTable = document.createElement(\"table\");\n        selectedTable.className = \"editMeta_table\";\n        this.parentSelectedCell.appendChild(selectedTable);\n    \n        var insertUiEntry = (optionInfo,index) => {\n            \n            var row = selectedTable.insertRow(index);\n            var cell = row.insertCell(0);\n            cell.className = \"editMeta_option_container\";\n            \n            //option title\n            var titleDiv = document.createElement(\"div\");\n            titleDiv.className = \"editMeta_optionTitle\";\n            \n            var hideButton = document.createElement(\"img\");\n            hideButton.src = CONTRACT_IMAGE_URL\n            titleDiv.appendChild(hideButton);\n            \n            var showButton = document.createElement(\"img\");\n            showButton.src = EXPAND_IMAGE_URL;\n            showButton.style.display = \"none\";\n            titleDiv.appendChild(showButton);\n            \n            var textElement = document.createElement(\"b\");\n            textElement.innerHTML = optionInfo.title;\n            titleDiv.appendChild(textElement);\n            \n            cell.appendChild(titleDiv);\n            \n            //option body\n            var bodyDiv = document.createElement(\"div\");\n            bodyDiv.className = \"editMeta_optionDisplayDiv\";\n            cell.appendChild(bodyDiv);\n            \n            var insertionInfo = optionInfo.insertionInfo;\n            \n            //events\n            bodyDiv.ondragover = (event) => { this.allowDrop(event); }\n            bodyDiv.ondrop = (event) => { this.onSelectedDrop(event,insertionInfo); }\n            \n            hideButton.onclick = () => this.hideSelectionRow(bodyDiv,hideButton,showButton);\n            showButton.onclick = () => this.showSelectionRow(bodyDiv,hideButton,showButton);\n            \n            var key = this.getSelectionKey(insertionInfo);\n            this.selectedCells[key] = bodyDiv;\n        }\n        \n        options.forEach(insertUiEntry);\n        \n        //clear event handlers from parent\n        this.parentSelectedCell.ondragover = undefined;\n        this.parentSelectedCell.ondrop = undefined;\n    }\n    else {\n        var selectedCell = this.parentSelectedCell;\n        var insertionInfo = options[0].insertionInfo;\n        \n        //events\n        selectedCell.ondragover = (event) => { this.allowDrop(event); }\n        selectedCell.ondrop = (event) => { this.onSelectedDrop(event,insertionInfo); }\n        \n        var key = this.getSelectionKey(insertionInfo);\n        this.selectedCells[key] = selectedCell;\n    }\n}\n\nthis.getSelectedCell = function(insertionInfo) {\n    var key = this.getSelectionKey(insertionInfo);\n    var containerCell = this.selectedCells[key];\n    \n    if(!containerCell) {\n        throw new Error(\"Insertion info not found: \" + JSON.stringify(insertionInfo));\n    }\n    \n    return containerCell;\n}\n\nthis.getSelectionKey = function(insertionInfo) {\n    return insertionInfo != null ? insertionInfo.orderedEntry : \"default\";\n}\n\nthis.clearSelectedCells = function() {\n    for(var key in this.selectedCells) {\n        apogeeapp.ui.removeAllChildren(this.selectedCells[key]);\n    }\n}\n\nthis.getInsertionInfoOptions = function() {\n    var options = this.insertionInfoOptions[this.metaFileType];\n    \n    if(!options) {\n        options = this.insertionInfoOptions[\"default\"];\n    }\n    \n    if(!options) {\n        throw new Error(\"Insertion info options not found!\");\n    }\n    \n    return options;\n}\n\nthis.hideSelectionRow = function(bodyDiv,hideButton,showButton) {\n    bodyDiv.style.display = \"none\";\n    hideButton.style.display = \"none\";\n    showButton.style.display = \"\";\n}\nthis.showSelectionRow = function(bodyDiv,hideButton,showButton) {\n    bodyDiv.style.display = \"\";\n    hideButton.style.display = \"\";\n    showButton.style.display = \"none\";\n}\n//=================================\n// Drag and drop edit methods\n//=================================\n\nthis.onDragStart = function(event) {\n    event.dataTransfer.setData(\"text\",event.target.id);\n}\n\nthis.allowDrop = function(event) {\n    event.preventDefault();\n}\n\nthis.onSelectedDrop = function(event, insertionInfo) {\n    var data = event.dataTransfer.getData(\"text\");\n    var combinedEntry = this.lookupCombinedEntry(data);\n    \n//    if(!combinedEntry.selected) {\n        combinedEntry.selected = true;\n        combinedEntry.insertionInfo = insertionInfo;\n        this.loadEntries();\n//    }\n}\n\nthis.onAvailableDrop = function(event) {\n    var data = event.dataTransfer.getData(\"text\");\n    var combinedEntry = this.lookupCombinedEntry(data);\n    \n    if(combinedEntry.selected) {\n        combinedEntry.selected = false;\n        this.loadEntries();\n    }\n}\n\nthis.lookupCombinedEntry = function(divId) {\n    var fileEntryId = divId.substr(PREFIX_LENGTH);\n\n    var combinedEntry = this.combinedEntries.find( (entry) => (entry.fileEntry.Id == fileEntryId) );\n    if(!combinedEntry) {\n        alert(\"Error: dragged object not found in data\");\n        return null;\n    }\n    \n    return combinedEntry;\n}\n\n//=================================\n// Update methods\n//=================================\n\n//shared functions between ui elements - we need these\n//because for now there is no way to add shared ui code.\n\nvar taskCompleted = function(messenger,currentTask,nextTask,data) {\n    var taskResult = {};\n    taskResult.state = \"SUCCESS\";\n    taskResult.data = data;\n    \n    var updateInfo = [];\n    updateInfo.push([\"taskResults.\" + currentTask,taskResult]);\n    updateInfo.push([\"tasks.activeTask\",nextTask]);\n    messenger.compoundDataUpdate(updateInfo);\n}\n\nvar taskCanceled = function(messenger,currentTask,prevTask) {\n    var clearData = {};\n    clearData.state = \"INCOMPLETE\";\n    \n    var updateInfo = [];\n    updateInfo.push([\"taskResults.\" + currentTask,clearData]);\n    updateInfo.push([\"taskResults.\" + prevTask,clearData]);\n    updateInfo.push([\"tasks.activeTask\",prevTask]);\n    messenger.compoundDataUpdate(updateInfo);\n}\n\n//=================================\n// Filters\n//=================================\n\n/* This initializes the filters */\nthis.initializeFilters = function() {\n\n    //define the filters\n    var baseFilterList = [\n        [\"Section\",(fileEntry) => fileEntry.Fields.entry_section],\n    ];\n    \n    var typeSpecificFilters = this.getTypeSpecificFilters(this.metaFileType);\n    \n    var filterList = typeSpecificFilters ? baseFilterList.concat(typeSpecificFilters) : baseFilterList;\n    \n    //create the working filter struct\n    var createFilterStruct = (filterListEntry) => {\n        var struct = {};\n        struct.filterFunction = filterListEntry[1];\n        struct.title = filterListEntry[0];\n        struct.optionSet = null;\n        struct.selectionActive = false;\n        struct.selection = null;\n        struct.selectElement = null;\n        return struct;\n    }\n    this.filterStructs = filterList.map(createFilterStruct); \n    \n    //create the overrall filter function\n    this.overallDropdownFilter = (combinedEntry) => {\n        var resultOk = true;\n        var fileEntry = combinedEntry.fileEntry;\n\n        var singleFilterPass = (filterStruct) => {\n            if(filterStruct.selectionActive) {\n                 return (filterStruct.filterFunction(fileEntry) == filterStruct.selection);\n            }\n            else {\n                return true;\n            }\n        }\n        \n        return this.filterStructs.every(singleFilterPass);\n    }\n    \n    //create the fiter display elements\n    apogeeapp.ui.removeAllChildren(this.filterCell);\n    var createFilterEntry = (filterStruct) => {\n        this.filterCell.appendChild(this.getFilterElement(filterStruct));\n    }\n    this.filterStructs.forEach(createFilterEntry);\n    \n    //add the free text filter\n    this.filterCell.appendChild(this.createFreeTextFilterElement());\n}\n\n/** This creates a dom element for the filter select */\nthis.getFilterElement = function(filterStruct) {\n    var container = document.createElement(\"div\");\n    container.className = \"editMeta_filterContainerClass\";\n    \n    container.appendChild(document.createTextNode(filterStruct.title));\n    \n    var selectElement = document.createElement(\"select\");\n    filterStruct.selectElement = selectElement;\n    container.appendChild(selectElement);\n    \n    //handler = make selection and reload file entries\n    filterStruct.selectElement.onchange = (event) => {\n        if(selectElement.value == NULL_SELECTION) {\n            filterStruct.selectionActive = false;\n            filterStruct.selection = null;\n        }\n        else {\n            filterStruct.selectionActive = true;\n            filterStruct.selection = selectElement.value;\n        }\n        this.loadEntries();\n    };\n    \n    return container;\n}\n\nvar NULL_SELECTION = \"----\";\n\n/** This creates a dom element for the filter select */\nthis.createFreeTextFilterElement = function() {\n    var container = document.createElement(\"div\");\n    container.className = \"editMeta_filterContainerClass\";\n    \n    container.appendChild(document.createTextNode(\"Free text\"));\n    \n    this.freeTextFilterEntry = document.createElement(\"input\");\n    this.freeTextFilterEntry.type = \"text\";\n    this.freeTextFilterEntry.oninput = () => this.onFilterKeyTyped();\n    container.appendChild(this.freeTextFilterEntry);\n    \n    return container;\n}\n\n\n/** This method populates the options into the filter struct. */\nthis.populateFilterSelect = function(filterStruct) {\n    apogeeapp.ui.removeAllChildren(filterStruct.selectElement);\n    \n    filterStruct.selectElement.add(apogeeapp.ui.createElement(\"option\",{\"text\":NULL_SELECTION}));\n    \n    for(var option in filterStruct.optionSet) {\n        filterStruct.selectElement.add(apogeeapp.ui.createElement(\"option\",{\"text\":option}));\n    }\n    \n    if(filterStruct.selectionActive) {\n        filterStruct.selectElement.value = filterStruct.selection;\n    }\n    else {\n        filterStruct.selectElement.value = NULL_SELECTION;\n    }\n}\n\n/** This method populates the allowed options for each filter in the list. It does this\n * sequentially, meaning the options for later filters depend on the current selection in previous filters. */\nthis.populateFilterOptions = function() {\n    \n    var fileEntryList = this.combinedEntries.map((combinedEntry) => combinedEntry.fileEntry);\n    \n    //the create options function, for use with reduce\n    var createOptionsAndFilterList = (filterStruct) => {\n        \n        \n        //populate filter option set\n        var addToOptionSet = (optionSet,fileEntry) => {\n            var value = filterStruct.filterFunction(fileEntry);\n            optionSet[value] = true;\n            return optionSet;\n        }\n        \n        filterStruct.optionSet = fileEntryList.reduce(addToOptionSet,{});\n        \n        //update selection active = clear it if it was set to something that was not an option\n        if(filterStruct.selectionActive) {\n            if(!filterStruct.optionSet[filterStruct.selection]) {\n                filterStruct.selectionActive = false;\n                filterStruct.selection = null;\n            }\n        }\n        \n        //filter out list for next filter, if selection active\n        fileEntryList = fileEntryList.filter( (fileEntry) => {\n            if(filterStruct.selectionActive) {\n                 return (filterStruct.filterFunction(fileEntry) == filterStruct.selection);\n            }\n            else {\n                return true;\n            }\n        });\n        \n        //populate the ui element for these new options\n        this.populateFilterSelect(filterStruct);\n    }\n    \n    this.filterStructs.forEach(createOptionsAndFilterList)\n}\n\nthis.getTypeSpecificFilters = function(metaFileType) {\n    return TYPE_SPECIFIC_FILTERS[metaFileType];\n}\n\nTYPE_SPECIFIC_FILTERS = {\n    \"propertyRules\":[\n        ],\n    \"themeRules\":[\n        [\"Option\",(fileEntry) => fileEntry.Fields.entry_data.propType]\n        ],\n    \"theme\":[\n        ],\n    \"strings\":[\n        ],\n    \"inputColors\":[\n        ]\n}\n\nconst TEXT_FILTER_DELAY = 250;\n\n//text filter methods\nthis.onFilterKeyTyped = function() {\n    if(this.filterTimer) {\n        clearTimeout(this.filterTimer);\n        this.filterTimer = null;\n    }\n    \n    this.filterTimer = setTimeout(() => this.updateTextFilter(),TEXT_FILTER_DELAY);\n}\n\nthis.updateTextFilter = function() {\n    //clear timer\n    this.filterTimer = null;\n    \n    //reload the entries\n    this.loadEntries();\n}\n","onLoad":"if(!this.initialized) {\n    this.parentSelectedCell = document.getElementById(\"editMeta_parentSelectedCell\");\n    this.selectedCells = null;\n    this.availableCell = document.getElementById(\"editMeta_availableCell\");\n    \n    this.filterCell = document.getElementById(\"editMeta_filterCell\");\n    \n    this.commitButton = document.getElementById(\"editMeta_commitButton\");\n    this.resetButton = document.getElementById(\"editMeta_resetButton\");\n    this.cancelButton = document.getElementById(\"editMeta_cancelButton\");\n    \n    var instance = this;\n    \n    this.commitButton.onclick = () => instance.onCommitClicked();\n    this.resetButton.onclick = () => instance.onResetClicked();\n    this.cancelButton.onclick = () => instance.onCancelClicked();\n    \n    this.availableCell.ondragover = (event) => this.allowDrop(event);\n    this.availableCell.ondrop = (event) => this.onAvailableDrop(event);\n    \n    //finished\n    this.initialized = true;\n    \n    if(this.cachedData !== undefined) {\n        console.log(\"using cached data!\");\n        this.setData(this.cachedData);\n        this.cachedData = undefined;\n    }\n}"},"destroyOnInactive":false},"fileTypeEntryList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":614,"height":428},"posInfo":{"x":63,"y":850},"state":0,"viewType":"Data"},"dataView":"Colorized"},"insertionInfoOptions":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":452,"height":660},"posInfo":{"x":1295,"y":19},"state":0,"viewType":"Data"},"dataView":"Colorized"},"availableFileEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":743,"height":553},"posInfo":{"x":32,"y":988},"state":0,"viewType":"Data"},"dataView":"Colorized"},"fileEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":29,"y":391},"state":0,"viewType":"Data"},"dataView":"Colorized"},"NOTES":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":643,"height":300},"posInfo":{"x":147,"y":39},"state":0,"viewType":"Data"},"dataView":"Text Data"}}},"editPostProcess":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":205,"y":805}},"treeState":-1,"children":{"editResults":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":817,"height":594},"posInfo":{"x":370,"y":229},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"createMetaFileEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":485,"height":216},"posInfo":{"x":809,"y":100},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"createRecipeEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":804,"height":474},"posInfo":{"x":366,"y":70},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"editRecipeEntryPairs":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":938,"height":404},"posInfo":{"x":367,"y":113},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"deleteRecipeEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":948,"height":470},"posInfo":{"x":371,"y":156},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"instructionList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":910,"height":486},"posInfo":{"x":29,"y":276},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"createParentFileEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":937,"height":12},"posInfo":{"x":33,"y":76},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"deleteParentFileEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":948,"height":470},"posInfo":{"x":33,"y":160},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"editParentFileEntryPairs":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":938,"height":466},"posInfo":{"x":32,"y":119},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"mergedSelections":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":471,"height":297},"posInfo":{"x":34,"y":21},"state":-1,"viewType":"Data"},"dataView":"Colorized"}}}}},"micemetarDataAccess":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":168,"y":67}},"treeState":-1,"children":{"createRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":560,"height":321},"posInfo":{"x":33,"y":368},"state":-1,"viewType":"Private"}},"recordsToCreateInstructions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":834,"height":391},"posInfo":{"x":30,"y":472},"state":-1,"viewType":"Code"}},"createCommitBody":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":568,"height":400},"posInfo":{"x":629,"y":225},"state":-1,"viewType":"Code"}},"createRequestOptions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":523,"height":254},"posInfo":{"x":822,"y":379},"state":-1,"viewType":"Code"}},"host":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":353,"height":71},"posInfo":{"x":16,"y":6},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"commitUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":433,"height":107},"posInfo":{"x":14,"y":98},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"requestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":450,"height":68},"posInfo":{"x":14,"y":58},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"dataSetInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":882,"height":611},"posInfo":{"x":317,"y":144},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"createUpdateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":1002,"height":655},"posInfo":{"x":37,"y":247},"state":-1,"viewType":"Code"}},"createCreateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":994,"height":643},"posInfo":{"x":39,"y":209},"state":-1,"viewType":"Code"}},"getFieldErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":512,"height":68},"posInfo":{"x":761,"y":616},"state":-1,"viewType":"Code"}},"getRecordErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":81},"posInfo":{"x":762,"y":664},"state":-1,"viewType":"Code"}},"createDeleteInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":678,"height":540},"posInfo":{"x":36,"y":289},"state":-1,"viewType":"Code"}},"getRecordInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":480,"height":400},"posInfo":{"x":818,"y":427},"state":-1,"viewType":"Code"}},"combinedEntriesToInstructionList":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":721,"height":524},"posInfo":{"x":31,"y":516},"state":-1,"viewType":"Private"}},"getCommitPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":569,"height":109},"posInfo":{"x":316,"y":26},"state":-1,"viewType":"Code"}},"getRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":546,"height":89},"posInfo":{"x":315,"y":67},"state":-1,"viewType":"Code"}},"customRequestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":17,"y":142},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"getCustomRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":668,"height":88},"posInfo":{"x":317,"y":104},"state":-1,"viewType":"Code"}}}}}},"activeTabMember":"Model.tasks.editMetaFile"}