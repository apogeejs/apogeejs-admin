{"fileType":"apogee workspace","jsLinks":["http://localhost:8383/apogee/dev/micello/metadata%20conversion/lib/taskAppModule.js","http://localhost:8383/apogee/dev/micello/metadata%20conversion/lib/configurableForm.js?x=35"],"cssLinks":["http://localhost:8383/apogee/dev/micello/metadata%20conversion/lib/configurableForm.css"],"workspace":{"fileType":"apogee workspace","version":0.2,"data":{"name":"editPropertyRulesEntry","type":"apogee.Folder","children":{"tasks":{"name":"tasks","type":"apogee.Folder","children":{"login":{"name":"login","type":"apogee.Folder","children":{"loginUrl":{"name":"loginUrl","type":"apogee.JsonTable","updateData":{"data":"http://eng.micello.com/TestAuthorization/loginjson","description":""}},"loginControl":{"name":"loginControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return loginUrl;","supplementalCode":"","description":""}},"sessionResponse":{"name":"sessionResponse","type":"apogee.JsonTable","updateData":{"data":{"responseCode":1,"paramTable":[{"urlPattern":"http://eng.micello.com/mfs","params":[["key","S1sshnIV1Rk9EGz32Acrl8aSYsTKYd"]]},{"urlPattern":"http://mfs.micello.com","params":[["key","nS71TmmSmgvwcXlfrGrin38AMLP48B"]]},{"urlPattern":"http://factory-mfs.micello.com","params":[["key","yfZkszbELEy6lxz1sSeUZscJlC41hL"]]},{"urlPattern":"http://mfs-hub-master.micello.com/","params":[["key","pvLuRozg2EZVrpE8nCpCrQT0FOHcLh"]]},{"urlPattern":"http://mfs-us-1.micello.com","params":[["key","nS71TmmSmgvwcXlfrGrin38AMLP48B"]]},{"urlPattern":"http://eng.micello.com/mfs-node","params":[["key","dnSkxyrgxRNtGMUYbhgV8uvdPW1V4U"]]}],"sessionKey":"SESS0f6c4c2238a670b8138b63d9fd03cc22=m2sbo2kc9i5mvrrkklc4kpia20"},"description":""}},"taskResult":{"name":"taskResult","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\nvar sessionKey;\nif(sessionResponse) {\n    if(sessionResponse.responseCode === 1) {\n        data = {};\n        data.sessionKey = sessionResponse.sessionKey;\n        output.data = data;\n        taskAppModule.taskCompleted(apogeeMessenger,[\"login\"],[\"switcher\"],data);\n        return \"SUCCESS\";\n    }\n    else {\n        alert(\"There was an error: \" + JSON.stringify(sessionResponse));\n        return \"ERROR\";\n    }\n}\nelse {\n    return \"INCOMPLETE\";\n}","supplementalCode":"","description":""}},"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":{"valid":true,"data":{"sessionKey":"SESS0f6c4c2238a670b8138b63d9fd03cc22=m2sbo2kc9i5mvrrkklc4kpia20"}},"description":""}},"state":{"name":"state","type":"apogee.JsonTable","updateData":{"data":{"active":true,"previousTask":[]},"description":""}}}},"submit":{"name":"submit","type":"apogee.Folder","children":{"submitControl":{"name":"submitControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var data = {};\ndata.instructionList = instructionList;\ndata.previousTask = state.previousTask;\n\nreturn data;","supplementalCode":"","description":""}},"commitResponse":{"name":"commitResponse","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((!liveInstructionList)||(liveInstructionList.length == 0)) {\n    return null; \n}\n\nreturn micemetarDataAccess.getCommitPromise(liveInstructionList,commitMessage,sessionKey);","supplementalCode":"","description":""}},"commitMessage":{"name":"commitMessage","type":"apogee.JsonTable","updateData":{"data":null,"description":""}},"liveInstructionList":{"name":"liveInstructionList","type":"apogee.JsonTable","updateData":{"data":null,"description":""}},"taskResult":{"name":"taskResult","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var resultValue;\n\nvar taskResult = {};\nif((!liveInstructionList)||(!commitResponse)) {\n    return \"WAITING\";\n}\nelse if(commitResponse.success === true) {\n    data = {};\n    data.commitResponse = commitResponse;\n    taskAppModule.taskCompleted(apogeeMessenger,[\"submit\"],[\"completed\"],data);\n    resultValue = \"SUCCESS\";\n}\nelse {\n    alert(\"Error making commit: \" + commitResponse.msg);\n    resultValue = \"ERROR\";\n}\n\n//for error or success - clear the commit request\nvar updateInfo = [];\nupdateInfo.push([\"liveInstructionList\",null]);\nupdateInfo.push([\"commitMessage\",null]);\napogeeMessenger.compoundDataUpdate(updateInfo);\n    \nreturn resultValue;","supplementalCode":"","description":""}},"sessionKey":{"name":"sessionKey","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return getSessionKey();","supplementalCode":"","description":""}},"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":{"valid":false,"data":null},"description":""}},"state":{"name":"state","type":"apogee.JsonTable","updateData":{"data":{"active":false,"previousTask":null},"description":""}},"instructionList":{"name":"instructionList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!state.active) return null;\n\nvar previousTask = state.previousTask;\nswitch(state.previousTask[1]) {\n    case \"createGeomType\":\n        return editEntry.createGeomType.resultInstructionList;\n        \n    case \"createAddressKey\":\n        return editEntry.createAddressKey.resultInstructionList;\n        \n    case \"createSimpleProperty\":\n        return editEntry.createSimpleProperty.resultInstructionList;\n        \n    case \"createThemeRulesEntry\":\n        return editEntry.createThemeRulesEntry.resultInstructionList;\n        \n    case \"createInputColorEntry\":\n        return editEntry.createInputColorEntry.resultInstructionList;\n        \n    case \"freeFormCreate\":\n        return editEntry.freeFormCreate.resultInstructionList;\n        \n    default:\n        throw new Error(\"Unrecognized edit task: \" + state.previousTask[1]);\n}\n","supplementalCode":"","description":""}}}},"completed":{"name":"completed","type":"apogee.Folder","children":{"resetControl":{"name":"resetControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"","supplementalCode":"","description":""}},"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":{"valid":false,"data":null},"description":""}},"state":{"name":"state","type":"apogee.JsonTable","updateData":{"data":{"active":false,"previousTask":null},"description":""}},"submitResult":{"name":"submitResult","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(submit.result.valid) {\n    return submit.result.data;\n}\nelse {\n    \"<no submission done>\";\n}","supplementalCode":"","description":""}}}},"editEntry":{"name":"editEntry","type":"apogee.Folder","children":{"createGeomType":{"name":"createGeomType","type":"apogee.Folder","children":{"state":{"name":"state","type":"apogee.JsonTable","updateData":{"data":{"active":false,"previousTask":null},"description":""}},"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":{"valid":false,"data":null},"description":""}},"layout":{"name":"layout","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var layout = apogee.util.jsonCopy(layoutTemplate);\n\n//update for selected type\nif(baseEntry) {\n    layout.lines[0].title = \"Create New Geom Type Extending: \" + baseEntry.Fields.entry_name;\n}\n\nreturn layout;","supplementalCode":"","description":""}},"createGeomTypeForm":{"name":"createGeomTypeForm","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var data = {};\n\ndata.layout = layout;\ndata.onSubmit = (formData) => {\n    var validData = validateFormData(formData);\n    \n    if(validData) {\n        taskAppModule.taskCompleted(apogeeMessenger,[\"editEntry\",\"createGeomType\"],[\"submit\"],formData);\n    }\n} \ndata.onCancel = () => {\n    taskAppModule.taskCanceled(apogeeMessenger,[\"editEntry\",\"createGeomType\"],[\"editEntry\",\"selectFileEntry\"]);\n}\n\nreturn data;","supplementalCode":"function validateFormData(formData) {\n    if(!commonData.validateFormStrings(formData,[\"name\",\"featureType\",\"legacyKey\",\"legacyValue\"])) {\n        return false;\n    }\n    \n    if(commonData.doesFileEntryNameExist(formData.name)) {\n        alert(\"There is already a file entry with the name: \" + formData.name);\n        return false;\n    }\n    \n    return true;\n}","description":""}},"baseEntry":{"name":"baseEntry","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((state.active)&&(selectFileEntry.result.valid)) {\n    var selected = selectFileEntry.result.data.selectedFileEntry;\n    \n    if(selected.Fields.file_type_id != getFileTypeId(\"propertyRules\")) {\n        throw new Error(\"Wrong base file type:\" + getFileTypeName(selected.Fields.file_type_id));\n    }\n    \n    if(selected.Fields.entry_section != \"geometry\") {\n        throw new Error(\"Wrong section for base file: \" + selected.Fields.entry_section);\n    }\n    \n    return selected;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"layoutTemplate":{"name":"layoutTemplate","type":"apogee.JsonTable","updateData":{"data":{"lines":[{"type":"title","title":"Create New Geom Type"},{"type":"inputElement","heading":"Unique Name: ","resultKey":"name"},{"type":"inputElement","heading":"Feature Type: ","resultKey":"featureType"},{"type":"inputElement","heading":"Legacy Key: ","resultKey":"legacyKey"},{"type":"inputElement","heading":"Legacy Value: ","resultKey":"legacyValue"},{"type":"inputElement","heading":"Legacy Key 2: ","resultKey":"legacyKey2"},{"type":"inputElement","heading":"Legacy Value 2: ","resultKey":"legacyValue2"},{"type":"invisible","resultKey":"editOption","initial":"createGeomType"},{"type":"submit","submit":"Submit","cancel":"Cancel"}]},"description":""}},"resultInstructionList":{"name":"resultInstructionList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(result.valid) {\n   var fields = createEntryFields(result.data);\n   var record = micemetarDataAccess.createRecord(\"file_entry\",fields);\n   var instruction = micemetarDataAccess.createCreateInstruction(record);\n   return [instruction];\n}\nelse {\n    return null;\n}","supplementalCode":"function createEntryFields(formData) {\n    \n    var name = formData.name;\n    var baseName = baseEntry.Fields.entry_name;\n    \n    //make feature type property\n    var featureTypeProp = {};\n    featureTypeProp.key = \"featureType\";\n    featureTypeProp.value = formData.featureType;\n    featureTypeProp.legacyKey = formData.legacyKey;\n    featureTypeProp.legacyValue = formData.legacyValue;\n    if((formData.legacyKey2)&&(formData.legacyKey2.length > 0)) {\n        featureTypeProp.legacyKey2 = formData.legacyKey2;\n    }\n    if((formData.legacyValue2)&&(formData.legacyValue2.length > 0)) {\n        featureTypeProp.legacyValue2 = formData.legacyValue2;\n    }\n    \n    //make entry data\n    var entryData = {};\n    entryData.name = name;\n    entryData.extends = baseName;\n    entryData.properties = [];\n    entryData.properties.push(featureTypeProp);\n    \n    //make fields\n    var fields = {};\n    fields.entry_name = name;\n    fields.entry_value = name;\n    fields.entry_section = baseEntry.Fields.entry_section;\n    fields.file_type_id = baseEntry.Fields.file_type_id;\n    fields.entry_context = commonData.context;\n    fields.option_name = commonData.PROPERTY_RULES_OPTION_NAME;\n    fields.entry_data = entryData;\n    \n    return fields;\n    \n}","description":""}}}},"selectFileEntry":{"name":"selectFileEntry","type":"apogee.Folder","children":{"selectEntriesControl":{"name":"selectEntriesControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!commonData.availableFileEntries) {\n    return null;\n}\n\nvar data = {};\ndata.availableFileEntries = commonData.availableFileEntries;\ndata.editTask = editTask;\n\nreturn data;","supplementalCode":"","description":""}},"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":{"valid":false,"data":null},"description":""}},"state":{"name":"state","type":"apogee.JsonTable","updateData":{"data":{"active":true,"previousTask":["switcher"]},"description":""}},"editTask":{"name":"editTask","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(switcher.result.valid) {\n    return switcher.result.data.editTask;\n}\nelse {\n    return null;\n}\n","supplementalCode":"","description":""}}}},"createAddressKey":{"name":"createAddressKey","type":"apogee.Folder","children":{"state":{"name":"state","type":"apogee.JsonTable","updateData":{"data":{"active":false,"previousTask":null},"description":""}},"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":{"valid":false,"data":null},"description":""}},"layout":{"name":"layout","type":"apogee.JsonTable","updateData":{"data":{"lines":[{"type":"title","title":"Create Address Key"},{"type":"inputElement","heading":"Address Key: ","resultKey":"addressKey"},{"type":"invisible","resultKey":"editOption","initial":"createAddressKey"},{"type":"submit","submit":"Submit","cancel":"Cancel"}]},"description":""}},"createAddressKeyForm":{"name":"createAddressKeyForm","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var data = {};\n\ndata.layout = layout;\ndata.onSubmit = (formData) => {\n    taskAppModule.taskCompleted(apogeeMessenger,[\"editEntry\",\"createAddressKey\"],[\"submit\"],formData);\n} \ndata.onCancel = () => {\n    taskAppModule.taskCanceled(apogeeMessenger,[\"editEntry\",\"createAddressKey\"],[\"editEntry\",\"selectFileEntry\"]);\n}\n\nreturn data;","supplementalCode":"","description":""}},"resultInstructionList":{"name":"resultInstructionList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(result.valid) {\n   var fields = createEntryFields(result.data);\n   var record = micemetarDataAccess.createRecord(\"file_entry\",fields);\n   var instruction = micemetarDataAccess.createCreateInstruction(record);\n   return [instruction];\n}\nelse {\n    return null;\n}","supplementalCode":"function createEntryFields(formData) {\n    \n    var key = formData.addressKey;\n    var name = \"Address key addition: \" + key;\n    \n    //property\n    var valueProp = {};\n    valueProp.key = \"address keys\";\n    valueProp.action = \"modifies\";\n    valueProp.values = [{\"value\":key}];\n    \n    //make entry data\n    var entryData = {};\n    entryData.name = name;\n    entryData.modifies = \"address keys\";\n    entryData.properties = [];\n    entryData.properties.push(valueProp);\n    \n    //make fields\n    var fields = {};\n    fields.entry_name = name;\n    fields.entry_value = name;\n    fields.entry_section = \"named_entries\";\n    fields.file_type_id = getFileTypeId(\"propertyRules\");\n    fields.entry_context = commonData.context;\n    fields.option_name = commonData.PROPERTY_RULES_OPTION_NAME;\n    fields.entry_data = entryData;\n    \n    return fields;\n    \n}","description":""}}}},"createSimpleProperty":{"name":"createSimpleProperty","type":"apogee.Folder","children":{"state":{"name":"state","type":"apogee.JsonTable","updateData":{"data":{"active":false,"previousTask":null},"description":""}},"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":{"valid":false,"data":null},"description":""}},"createSimplePropertyForm":{"name":"createSimplePropertyForm","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var data = {};\n\ndata.layout = layout;\n\ndata.onSubmit = (formData) => {\n    alert(\"Not implemented!\");\n    //taskAppModule.taskCompleted(apogeeMessenger,[\"editEntry\",\"createSimpleProperty\"],[\"submit\"],formData);\n} \ndata.onCancel = () => {\n    taskAppModule.taskCanceled(apogeeMessenger,[\"editEntry\",\"createSimpleProperty\"],[\"editEntry\",\"selectFileEntry\"]);\n}\n\nreturn data;","supplementalCode":"","description":""}},"selectPropertyTypeForm":{"name":"selectPropertyTypeForm","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var data = {};\n\ndata.layout = selectTypeLayout;\ndata.onSubmit = (formData) => {\n    apogeeMessenger.dataUpdate(\"propertyType\",formData.propertyType);\n} \ndata.onCancel = () => {\n    taskAppModule.taskCanceled(apogeeMessenger,[\"editEntry\",\"createSimpleProperty\"],[\"editEntry\",\"selectFileEntry\"]);\n}\n\nreturn data;","supplementalCode":"","description":""}},"selectTypeLayout":{"name":"selectTypeLayout","type":"apogee.JsonTable","updateData":{"data":{"lines":[{"type":"title","title":"Select Property Type"},{"type":"dropdown","heading":"Property Type: ","entries":["text","boolean","enum"],"resultKey":"propertyType","initial":"text"},{"type":"submit","submit":"Submit","cancel":"Cancel"}]},"description":""}},"propertyType":{"name":"propertyType","type":"apogee.JsonTable","updateData":{"data":"text","description":""}},"textLayout":{"name":"textLayout","type":"apogee.JsonTable","updateData":{"data":{"lines":[{"type":"title","title":"Create Simple Text Property"},{"type":"inputElement","heading":"Key: ","resultKey":"key"},{"type":"checkbox","heading":"Has Lang: ","resultKey":"hasLang"},{"type":"checkbox","heading":"Is Array: ","resultKey":"isArray"},{"type":"invisible","resultKey":"editOption","initial":"createSimpleProperty"},{"type":"invisible","resultKey":"propertyType","initial":"text"},{"type":"submit","submit":"Submit","cancel":"Cancel"}]},"description":""}},"enumLayout":{"name":"enumLayout","type":"apogee.JsonTable","updateData":{"data":{"lines":[{"type":"title","title":"Create Simple Enum Property"},{"type":"inputElement","heading":"Key: ","resultKey":"key"},{"type":"textarea","cols":30,"rows":10,"heading":"Values (comma delimited): ","resultKey":"values"},{"type":"invisible","resultKey":"editOption","initial":"createSimpleProperty"},{"type":"invisible","resultKey":"propertyType","initial":"enum"},{"type":"submit","submit":"Submit","cancel":"Cancel"}]},"description":""}},"booleanLayout":{"name":"booleanLayout","type":"apogee.JsonTable","updateData":{"data":{"lines":[{"type":"title","title":"Create Simple Boolean Property"},{"type":"inputElement","heading":"Key: ","resultKey":"key"},{"type":"invisible","resultKey":"editOption","initial":"createSimpleProperty"},{"type":"invisible","resultKey":"propertyType","initial":"boolean"},{"type":"submit","submit":"Submit","cancel":"Cancel"}]},"description":""}},"layout":{"name":"layout","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var layout;\n\nswitch(propertyType) {\n    case \"text\":\n        layout = textLayout;\n        break;\n        \n    case \"enum\":\n        layout = enumLayout;\n        break;\n        \n    case \"boolean\":\n        layout = booleanLayout;\n        break;\n}\n\nvar layout = apogee.util.jsonCopy(layout);\n\nif(baseEntry) {\nlayout.lines[0].title = layout.lines[0].title + \"Extending: \" + baseEntry.Fields.entry_name; \n}\n\nreturn layout;","supplementalCode":"","description":""}},"baseEntry":{"name":"baseEntry","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((state.active)&&(selectFileEntry.result.valid)) {\n    return selectFileEntry.result.data.selectedFileEntry;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}}}},"freeFormCreate":{"name":"freeFormCreate","type":"apogee.Folder","children":{"state":{"name":"state","type":"apogee.JsonTable","updateData":{"data":{"active":false,"previousTask":null},"description":""}},"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":{"valid":false,"data":null},"description":""}},"layout":{"name":"layout","type":"apogee.JsonTable","updateData":{"data":{"lines":[{"type":"title","title":"Free Form Create"},{"type":"inputElement","heading":"Unique Name: ","resultKey":"entryName"},{"type":"inputElement","heading":"Context: ","resultKey":"context"},{"type":"dropdown","heading":"File Type: ","entries":["Property Rules","Theme Rules","Theme","Strings","Input Colors"],"resultKey":"fileType","initial":"text"},{"type":"inputElement","heading":"Section: ","resultKey":"entrySection"},{"type":"inputElement","heading":"Entry Key: ","resultKey":"entryKey"},{"type":"inputElement","heading":"Option Name: ","resultKey":"optionName"},{"type":"textarea","cols":50,"rows":15,"heading":"Entry Data: ","resultKey":"entryData"},{"type":"invisible","resultKey":"editOption","initial":"freeFormCreate"},{"type":"submit","submit":"Submit","cancel":"Cancel"}]},"description":""}},"freeFormCreateForm":{"name":"freeFormCreateForm","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var data = {};\n\ndata.layout = layout;\ndata.onSubmit = (formData) => {\n    alert(\"Not implemented!\");\n    //taskAppModule.taskCompleted(apogeeMessenger,[\"editEntry\",\"freeFormCreate\"],[\"submit\"],formData);\n} \ndata.onCancel = () => {\n    taskAppModule.taskCanceled(apogeeMessenger,[\"editEntry\",\"freeFormCreate\"],[\"editEntry\",\"selectFileEntry\"]);\n}\n\nreturn data;","supplementalCode":"","description":""}}}},"createInputColorsEntry":{"name":"createInputColorsEntry","type":"apogee.Folder","children":{"state":{"name":"state","type":"apogee.JsonTable","updateData":{"data":{"active":false,"previousTask":null},"description":""}},"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":{"valid":false,"data":null},"description":""}},"layout":{"name":"layout","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var lines;\n\n//heading\nlines = apogee.util.jsonCopy(mainTitleLayoutLines);\n\n//get the path layout\nif(pathLayoutLines) {\n    lines = lines.concat(pathLayoutLines);\n}\n\n//add payload layout\nlines = lines.concat(payloadLayoutLines);\n\n\nif(baseEntry) {\nlines[0].title = lines[0].title + \" for Property Rule: \" + baseEntry.Fields.entry_name; \n}\n\nvar layout = {};\nlayout.lines = lines;\n\nreturn layout;","supplementalCode":"","description":""}},"baseEntry":{"name":"baseEntry","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((state.active)&&(selectFileEntry.result.valid)) {\n    return selectFileEntry.result.data.selectedFileEntry;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"mainTitleLayoutLines":{"name":"mainTitleLayoutLines","type":"apogee.JsonTable","updateData":{"data":[{"type":"title","title":"Create Input Colors Entry "},{"type":"title","title":"Path Info"}],"description":""}},"pathLayoutLines":{"name":"pathLayoutLines","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!baseEntry) return null;\n\nvar refEntrySection = baseEntry.Fields.entry_section;\nvar entryData = baseEntry.Fields.entry_data;\n\nif(refEntrySection == \"geometry\") {\n    return getGeometryPathInfo(entryData);\n}\nelse {\n    throw new Error(\"Unsupported section for input colors: \" + refEntrySection);\n}","supplementalCode":"function getGeometryPathInfo(entryData) {\n    return entryData.properties.map(getGeomPathLayoutLine,index).filter(isNotNull);\n}\n\nfunction isNotNull(entry) {\n    return (entry !== null);\n}\n\nfunction getGeomPathLayoutLine(geomProp,index) {\n    if(geomProp.key == \"featureType\") {\n        return getKeyValueLayoutLine(geomProp.key,geomProp.value,index);\n    }\n    else {\n        switch(geomProp.type) {\n            \n//            case \"text\":\n//                return getKeyLayoutLine(geomProp.key,index);\n// if we include this we need to add a value!\n\n            case \"enum\":\n                return getEnumLayoutLine(geomProp.key,geomProp.values,index);\n                \n            case \"boolean\":\n                return getKeyValueLayoutLine(geomProp.key,\"true\",index);\n                \n            default:\n                //others not supported\n                return null;\n        }\n    }\n}\n\n\n//layout return functions\n\n// function getKeyLayoutLine(key,pathLineNum) {\n//     return {\n// \t\t\t\"type\": \"checkbox\",\n// \t\t\t\"heading\": key,\n// \t\t\t\"resultKey\": \"path\" + pathLineNum\n// \t\t};\n// }\n\nfunction getKeyValueLayoutLine(key,value,pathLineNum) {\n    return {\n\t\t\t\"type\": \"checkbox\",\n\t\t\t\"heading\": key + \":\" + value,\n\t\t\t\"resultKey\": \"path\" + pathLineNum\n\t\t};\n}\n\nfunction getEnumLayoutLine(key,values,pathLineNum) {\n    \n    var simplifyValueEntry = valueEntry => valueEntry.value;\n    var valueList = values.map(simplifyValueEntry);\n    valueList.unshift(DUMMY_DROPDOWN_ENTRY);\n    \n    return {\n\t\t\t\"type\": \"dropdown\",\n\t\t\t\"heading\": key,\n\t\t\t\"entries\": valueList,\n\t\t\t\"resultKey\": \"path\" + pathLineNum\n\t\t};\n}\n\n\n","description":""}},"DUMMY_DROPDOWN_ENTRY":{"name":"DUMMY_DROPDOWN_ENTRY","type":"apogee.JsonTable","updateData":{"data":"---","description":""}},"payloadLayoutLines":{"name":"payloadLayoutLines","type":"apogee.JsonTable","updateData":{"data":[{"type":"title","title":"Input Color Payload"},{"type":"inputElement","heading":"Color: ","resultKey":"color"},{"type":"checkbox","heading":"Is Linear Area: ","resultKey":"isLinearArea"},{"type":"invisible","resultKey":"editOption","initial":"createInputClorsEntry"},{"type":"submit","submit":"Submit","cancel":"Cancel"}],"description":""}},"createInputColorEntryForm":{"name":"createInputColorEntryForm","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var data = {};\n\ndata.layout = layout;\n\ndata.onSubmit = (formData) => {\n    alert(\"Not implemented!\");\n    //taskAppModule.taskCompleted(apogeeMessenger,[\"editEntry\",\"createInputColorsEntry\"],[\"submit\"],formData);\n} \ndata.onCancel = () => {\n    taskAppModule.taskCanceled(apogeeMessenger,[\"editEntry\",\"createInputColorsEntry\"],[\"editEntry\",\"selectFileEntry\"]);\n}\n\nreturn data;","supplementalCode":"","description":""}}}},"createThemeRulesEntry":{"name":"createThemeRulesEntry","type":"apogee.Folder","children":{"state":{"name":"state","type":"apogee.JsonTable","updateData":{"data":{"active":false,"previousTask":null},"description":""}},"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":{"valid":false,"data":null},"description":""}},"selectTypeLayout":{"name":"selectTypeLayout","type":"apogee.JsonTable","updateData":{"data":{"lines":[{"type":"title","title":"Select Section"},{"type":"dropdown","heading":"Section: ","entries":["label","style"],"resultKey":"section","initial":"label"},{"type":"submit","submit":"Submit","cancel":"Cancel"}]},"description":""}},"layout":{"name":"layout","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var lines;\n\n//heading\nlines = apogee.util.jsonCopy(mainTitleLayoutLines);\n\n//get the path layout\nif(pathLayoutLines) {\n    lines = lines.concat(pathLayoutLines);\n}\n\n//add payload layout\nswitch(section) {\n    case \"label\":\n        lines = lines.concat(labelLayoutLines);\n        break;\n        \n    case \"style\":\n        lines = lines.concat(styleLayoutLines);\n        break;\n        \n    default:\n        throw new Error(\"Unknown section: \" + section);\n}\n\nif(baseEntry) {\nlines[0].title = lines[0].title + \" for Property Rule: \" + baseEntry.Fields.entry_name; \n}\n\nvar layout = {};\nlayout.lines = lines;\n\nreturn layout;","supplementalCode":"","description":""}},"baseEntry":{"name":"baseEntry","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((state.active)&&(selectFileEntry.result.valid)) {\n    return selectFileEntry.result.data.selectedFileEntry;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"selectSectionForm":{"name":"selectSectionForm","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var data = {};\n\ndata.layout = selectTypeLayout;\ndata.onSubmit = (formData) => {\n    apogeeMessenger.dataUpdate(\"section\",formData.section);\n} \ndata.onCancel = () => {\n    taskAppModule.taskCanceled(apogeeMessenger,[\"editEntry\",\"createSimpleProperty\"],[\"editEntry\",\"selectFileEntry\"]);\n}\n\nreturn data;","supplementalCode":"","description":""}},"section":{"name":"section","type":"apogee.JsonTable","updateData":{"data":"label","description":""}},"mainTitleLayoutLines":{"name":"mainTitleLayoutLines","type":"apogee.JsonTable","updateData":{"data":[{"type":"title","title":"Create Theme Map Entry "},{"type":"title","title":"Path Info"}],"description":""}},"styleLayoutLines":{"name":"styleLayoutLines","type":"apogee.JsonTable","updateData":{"data":[{"type":"title","title":"Style Payload"},{"type":"inputElement","heading":"Style Name: ","resultKey":"styleName"},{"type":"invisible","resultKey":"editOption","initial":"createThemeMapEntry"},{"type":"invisible","resultKey":"section","initial":"style"},{"type":"submit","submit":"Submit","cancel":"Cancel"}],"description":""}},"labelLayoutLines":{"name":"labelLayoutLines","type":"apogee.JsonTable","updateData":{"data":[{"type":"title","title":"Label Payload"},{"type":"dropdown","heading":"Label Type: ","entries":["None","Text","Icon"],"resultKey":"labelType","initial":"Text"},{"type":"inputElement","heading":"Reference: ","resultKey":"ref"},{"type":"checkbox","heading":"Translate: ","resultKey":"trans"},{"type":"invisible","resultKey":"editOption","initial":"createThemeRulesEntry"},{"type":"invisible","resultKey":"section","initial":"label"},{"type":"submit","submit":"Submit","cancel":"Cancel"}],"description":""}},"pathLayoutLines":{"name":"pathLayoutLines","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!baseEntry) return null;\n\nvar refEntrySection = baseEntry.Fields.entry_section;\nvar entryData = baseEntry.Fields.entry_data;\n\nif(refEntrySection == \"geometry\") {\n    return getGeometryPathInfo(entryData);\n}\nelse if(refEntrySection == \"entity\") {\n    return getEntityPathInfo(entryData);\n}\nelse if(refEntrySection == \"named_entries\") {\n    if((entryData.name == \"address keys\")||(entryData.extends == \"address keys\")) {\n        return getAddressPathInfo(entryData);\n    }\n    else {\n        throw new Error(\"Unsupported named entry for theme rules: \" + entryData.name);\n    }\n}\nelse {\n    throw new Error(\"Unsupported section for theme rules: \" + refEntrySection);\n}","supplementalCode":"function getGeometryPathInfo(entryData) {\n    return entryData.properties.map(getGeomPathLayoutLine,index).filter(isNotNull);\n}\n\nfunction getEntityPathInfo(entryData) {\n    return entryData.properties.map(getEntityPathLayoutLine,index).filter(isNotNull);\n}\n\nfunction getAddressPathInfo(entryData) {\n    return entryData.properties.find(getAddressPathLayoutLine,index).filter(isNotNull);\n}\n\nfunction isNotNull(entry) {\n    return (entry !== null);\n}\n\nfunction getGeomPathLayoutLine(geomProp,index) {\n    if(geomProp.key == \"featureType\") {\n        return getKeyValueLayoutLine(geomProp.key,geomProp.value,index);\n    }\n    else {\n        switch(geomProp.type) {\n            \n            case \"text\":\n                return getKeyLayoutLine(geomProp.key,index);\n                \n            case \"enum\":\n                return getEnumLayoutLine(geomProp.key,geomProp.values,index);\n                \n            case \"boolean\":\n                return getKeyValueLayoutLine(geomProp.key,\"true\",index);\n                \n            default:\n                //others not supported\n                return null;\n        }\n    }\n}\n\n\nfunction getEntityPathLayoutLine(entityProp,index) {\n    switch(entityProp.type) {\n        case \"text\":\n            return getKeyLayoutLine(entityProp.key,index);\n            break;\n            \n        case \"enum\":\n            return getEnumLayoutLine(entityProp.key,entityProp.values,index);\n            break;\n            \n        case \"boolean\":\n            return getKeyValueLayoutLine(entityProp.key,\"true\",index);\n            break;\n            \n        default:\n            //others not supported\n            return null;\n    }\n}\n\nfunction getAddressPathLayoutLine(addressProp,index) {\n    if(addressProp.key == \"address keys\") {\n        return getEnumLayoutLine(addressProp.key,addressProp.values,index);\n    }\n    else {\n        //others not supported\n        return null;\n    }\n}\n\n//layout return functions\n\nfunction getKeyLayoutLine(key,pathLineNum) {\n    return {\n\t\t\t\"type\": \"checkbox\",\n\t\t\t\"heading\": key,\n\t\t\t\"resultKey\": \"path\" + pathLineNum\n\t\t};\n}\n\nfunction getKeyValueLayoutLine(key,value,pathLineNum) {\n    return {\n\t\t\t\"type\": \"checkbox\",\n\t\t\t\"heading\": key + \":\" + value,\n\t\t\t\"resultKey\": \"path\" + pathLineNum\n\t\t};\n}\n\nfunction getEnumLayoutLine(key,values,pathLineNum) {\n    \n    var simplifyValueEntry = valueEntry => valueEntry.value;\n    var valueList = values.map(simplifyValueEntry);\n    valueList.unshift(DUMMY_DROPDOWN_ENTRY);\n    \n    return {\n\t\t\t\"type\": \"dropdown\",\n\t\t\t\"heading\": key,\n\t\t\t\"entries\": valueList,\n\t\t\t\"resultKey\": \"path\" + pathLineNum\n\t\t};\n}\n\n\n","description":""}},"DUMMY_DROPDOWN_ENTRY":{"name":"DUMMY_DROPDOWN_ENTRY","type":"apogee.JsonTable","updateData":{"data":"---","description":""}},"createThemeMapEntryForm":{"name":"createThemeMapEntryForm","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var data = {};\n\ndata.layout = layout;\n\ndata.onSubmit = (formData) => {\n    alert(\"Not implemented!\");\n    //taskAppModule.taskCompleted(apogeeMessenger,[\"editEntry\",\"createThemeRulesEntry\"],[\"submit\"],formData);\n} \ndata.onCancel = () => {\n    taskAppModule.taskCanceled(apogeeMessenger,[\"editEntry\",\"createThemeRulesEntry\"],[\"editEntry\",\"selectFileEntry\"]);\n}\n\nreturn data;","supplementalCode":"","description":""}}}}}},"switcher":{"name":"switcher","type":"apogee.Folder","children":{"selectSequence":{"name":"selectSequence","type":"apogee.JsonTable","updateData":{"data":"","description":""}},"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":{"valid":true,"data":{"editTask":["editEntry","createThemeRulesEntry"]}},"description":""}},"state":{"name":"state","type":"apogee.JsonTable","updateData":{"data":{"active":false,"previousTask":null},"description":""}}}},"getSessionKey":{"name":"getSessionKey","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"if(login.result.valid) {\n    return login.result.data.sessionKey;\n}\nelse {\n    return null;\n}\n","supplementalCode":"","description":""}},"currentTask":{"name":"currentTask","type":"apogee.JsonTable","updateData":{"data":["editEntry","selectFileEntry"],"description":""}},"getFileTypeName":{"name":"getFileTypeName","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeId"],"functionBody":"return commonData.fileTypeIdToName[fileTypeId];","supplementalCode":"","description":""}},"commonData":{"name":"commonData","type":"apogee.Folder","children":{"fileTypeList":{"name":"fileTypeList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!sessionKey) return null;\n\nvar fileTypeSearch = {};\nfileTypeSearch.search = \"file_type_list\";\n\nreturn micemetarDataAccess.getRequestPromise(fileTypeSearch,sessionKey);\n\n","supplementalCode":"","description":""}},"fileTypeIdToName":{"name":"fileTypeIdToName","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!fileTypeList) return null;\n\nvar output = {};\n\nvar addToMap = (record) => {output[record.Id] = record.Fields.file_type_name;}\n\nfileTypeList.data.Response.forEach(addToMap);\n\nreturn output;","supplementalCode":"","description":""}},"fileTypeNameToId":{"name":"fileTypeNameToId","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!fileTypeList) return null;\n\nvar output = {};\n\nvar addToMap = (record) => {output[record.Fields.file_type_name] = record.Id;}\n\nfileTypeList.data.Response.forEach(addToMap);\n\nreturn output;","supplementalCode":"","description":""}},"availableFileEntries":{"name":"availableFileEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((!fileTypeEntryList)||(!fileTypeEntryList.success)) return null;\n\nvar isFileEntry = (record) => (record.Type == \"file_entry\");\nreturn fileTypeEntryList.data.Records.filter(isFileEntry);","supplementalCode":"","description":""}},"fileTypeEntryList":{"name":"fileTypeEntryList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!sessionKey) return null;\n\nvar fileTypeId = getFileTypeId(\"propertyRules\");\n\nvar searchDef = {};\nsearchDef.search = \"file_type_entries\";\nsearchDef.id = fileTypeId;\n\nreturn micemetarDataAccess.getRequestPromise(searchDef,sessionKey);","supplementalCode":"","description":""}},"context":{"name":"context","type":"apogee.JsonTable","updateData":{"data":"public","description":""}},"sessionKey":{"name":"sessionKey","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return getSessionKey();","supplementalCode":"","description":""}},"validateFormStrings":{"name":"validateFormStrings","type":"apogee.FunctionTable","updateData":{"argList":["formData","fieldNames"],"functionBody":" var validateField = (fieldName) => {\n    var fieldValue = formData[fieldName];\n    if((!fieldValue)||(fieldValue.length === 0)) {\n        alert(\"Field must be present: \" + fieldName);\n        return false;\n    }\n    else {\n        return true;\n    }\n}\n \nreturn fieldNames.every(validateField);","supplementalCode":"","description":""}},"doesFileEntryNameExist":{"name":"doesFileEntryNameExist","type":"apogee.FunctionTable","updateData":{"argList":["name"],"functionBody":"return (fileEntryNameLookupTable[name] !== undefined);","supplementalCode":"","description":""}},"doesFileEntryFeatureTypeExist":{"name":"doesFileEntryFeatureTypeExist","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return (featureTypeNameLookupTable[name] !== undefined);","supplementalCode":"","description":""}},"fileEntryNameLookupTable":{"name":"fileEntryNameLookupTable","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nif(availableFileEntries) {\n    var addToMap = record => {output[record.Fields.entry_name] = true;}\n    availableFileEntries.forEach(addToMap);\n}\n\nreturn output;","supplementalCode":"","description":""}},"featureTypeNameLookupTable":{"name":"featureTypeNameLookupTable","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nif(availableFileEntries) {\n    var propertyRulesId = fileTypeNameToId[\"propertyRules\"];\n    \n    var isFeatureTypeProperty = property => (property.key == \"featureType\");\n    \n    var addToMap = record => {\n        if( (record.Fields.file_type_id == propertyRulesId) &&\n            (record.Fields.entry_section == \"geometry\") ) {\n                var featureTypeProperty = record.Fields.entry_data.properties.find(isFeatureTypeProperty);\n                if(featureTypeProperty) {\n                    var featureType = featureTypeProperty.value;\n                    \n                    if(output[featureType] !== undefined) {\n                        console.log(\"repreat feature type: \" + featureType);\n                    }\n                    \n                    output[featureType] = true;\n                }\n            }\n    }\n\n    availableFileEntries.forEach(addToMap);\n}\n\nreturn output;","supplementalCode":"","description":""}},"PROPERTY_RULES_OPTION_NAME":{"name":"PROPERTY_RULES_OPTION_NAME","type":"apogee.JsonTable","updateData":{"data":"Standard","description":""}}}},"getFileTypeId":{"name":"getFileTypeId","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeName"],"functionBody":"return commonData.fileTypeNameToId[fileTypeName];","supplementalCode":"","description":""}}}},"micemetarDataAccess":{"name":"micemetarDataAccess","type":"apogee.Folder","children":{"createRecord":{"name":"createRecord","type":"apogee.FunctionTable","updateData":{"argList":["recordType","fieldMap"],"functionBody":"var record = {};\n\nvar recordInfo = getRecordInfo(recordType);\n\nrecord.Id = getId();\nrecord.Type = recordInfo.name;\nrecord.Fields = fieldMap;\nrecord.read_perm = READ_PERM;\nrecord.edit_perm = EDIT_PERM;\n\nreturn record;","supplementalCode":"var READ_PERM = 2;\nvar EDIT_PERM = 15;\n\nvar nextId = -1;\n\nfunction getId() {\n    return nextId--;\n}","description":"This method creates a record given the field values and record info \nfrom the data set info. It creates and ID and uses standard permissions."}},"recordsToCreateInstructions":{"name":"recordsToCreateInstructions","type":"apogee.FunctionTable","updateData":{"argList":["recordList"],"functionBody":"var instructions = [];\n\nfor(var i = 0; i < recordList.length; i++) {\n    var createRecord = recordList[i];\n    var instruction = createCreateInstruction(createRecord);\n    instructions.push(instruction);\n}\n\nreturn instructions;","supplementalCode":"","description":"This creates a list of create instructions to go along with a list of records to be created.\n\nThere is the option to assign the ID or to leave it as undefined, in which case\nan automatically incremented ID will be assigned. (For consistency in the data\nset, either all records should be preassigned or all records should be \nautomatically assigned."}},"createCommitBody":{"name":"createCommitBody","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage"],"functionBody":"var commit = {};\nvar actions = [];\n\nif(commitMessage.length === 0) throw new Error(\"Commit message missing!\");\n\ncommit.Name = dataSetInfo.name;\ncommit.Message = commitMessage;\ncommit.Actions = actions;\n\n//single action with commits\nvar action = {};\naction.Title = \"bulk create commit\";\naction.Instr = instructionList;\nactions.push(action);\n\nreturn commit","supplementalCode":"","description":"This creates a body for a commit request, given a list of instructions and a commit message."}},"createRequestOptions":{"name":"createRequestOptions","type":"apogee.FunctionTable","updateData":{"argList":["bodyJson","sessionKey"],"functionBody":"var header = {};\nheader[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\nheader.sessionKey = sessionKey;\nheader[\"proto-version\"] = \"4.0\";\nheader[\"db-version\"] = dataSetInfo.version;\n\nrequestInfo = {};\nrequestInfo.header = header;\nif(bodyJson) {\n    requestInfo.method = \"POST\";\n    requestInfo.body = JSON.stringify(bodyJson);\n}\n\nreturn requestInfo;\n","supplementalCode":"","description":"This creates the requestOptions, suitable for apogee.net.jsonRequest, to go with an type of request to the workingset (micemetarequest) server."}},"host":{"name":"host","type":"apogee.JsonTable","updateData":{"data":"http://localhost:8080/micemetarws","description":""}},"commitUrl":{"name":"commitUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvalue = host + \"/commit\";\nreturn value;\n\n","supplementalCode":"","description":""}},"requestUrl":{"name":"requestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvalue = host + \"/cannedsearch\";\nreturn value;\n\n","supplementalCode":"","description":""}},"dataSetInfo":{"name":"dataSetInfo","type":"apogee.JsonTable","updateData":{"data":{"records":{"file_entry_relation":{"idField":"file_entry_rel_id","name":"file_entry_relation","foreignList":[],"fields":[{"defaultValue":null,"name":"file_entry_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileEntry"},{"defaultValue":null,"name":"ref_entry_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileEntry"},{"defaultValue":null,"name":"relation_type","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.FileEntryRelation"},"com_file_entry":{"idField":"com_file_entry_id","name":"com_file_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"com_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.ComFile"},{"defaultValue":null,"name":"meta_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"},{"defaultValue":null,"name":"file_group","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.ComFileEntry"},"file_type":{"idField":"file_type_id","name":"file_type","foreignList":[{"remoteRecord":"file_entry","name":"file_entry_list","isUnique":false,"remoteField":"file_type_id","restrictDelete":true}],"fields":[{"defaultValue":null,"name":"file_type_name","nullOk":true,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.FileType"},"file_entry":{"idField":"file_entry_id","name":"file_entry","foreignList":[{"remoteRecord":"file_entry_relation","name":"file_entry_ref_list","isUnique":false,"remoteField":"file_entry_id","restrictDelete":true}],"fields":[{"defaultValue":null,"name":"entry_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"entry_name","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"file_type_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileType"},{"defaultValue":null,"name":"entry_section","nullOk":true,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"entry_value","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"option_name","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"entry_data","nullOk":false,"fieldClass":"org.json.JSONObject"}],"recordClass":"com.micello.micemetar.data.FileEntry"},"recipe_entry":{"idField":"recipe_entry_id","name":"recipe_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"meta_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"},{"defaultValue":null,"name":"file_entry_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileEntry"},{"defaultValue":null,"name":"insertion_info","nullOk":true,"fieldClass":"org.json.JSONObject"}],"recordClass":"com.micello.micemetar.data.RecipeEntry"},"com_file":{"idField":"com_file_id","name":"com_file","foreignList":[{"remoteRecord":"com_file_entry","name":"com_file_entry_list","isUnique":false,"remoteField":"com_file_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":null,"name":"file_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"name","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"ref","nullOk":true,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.ComFile"},"meta_file":{"idField":"meta_file_id","name":"meta_file","foreignList":[{"remoteRecord":"recipe_entry","name":"recipe_entry_list","isUnique":false,"remoteField":"meta_file_id","restrictDelete":true,"orderField":"ordr"},{"remoteRecord":"meta_ref_entry","name":"base_file_list","isUnique":false,"remoteField":"meta_file_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":null,"name":"file_type_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileType"},{"defaultValue":null,"name":"file_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"name","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.MetaFile"},"meta_ref_entry":{"idField":"meta_ref_entry_id","name":"meta_ref_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"meta_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"},{"defaultValue":null,"name":"base_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"}],"recordClass":"com.micello.micemetar.data.MetaRefEntry"}},"name":"Micemetar","version":"5.0"},"description":""}},"createUpdateInstruction":{"name":"createUpdateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["initialRecord","targetRecord"],"functionBody":"if(initialRecord.Id != targetRecord.Id) {\n    throw new Error(\"Record ID mismatch in create update instruction for target record: \" + getRecordErrString(targetRecord));\n}\n\nif(initialRecord.Type != targetRecord.Type) {\n    throw new Error(\"Inital and target record types do not match. Target record: \" + getRecordErrString(targetRecord));\n}\n\nvar recordsDifferent = false;\n\nvar recordInfo = getRecordInfo(initialRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Update\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = initialRecord.Id;\n\ninstruction.initialReadPerm = initialRecord.read_perm;\ninstruction.initialEditPerm = initialRecord.edit_perm;\n\nif(initialRecord.readPerm != targetRecord.readPerm) {\n    instruction.targetReadPerm = targetRecord.read_perm;\n    recordsDifferent = true;\n}\n\nif(initialRecord.editPerm != targetRecord.editPerm) {\n    instruction.targetEditPerm = targetRecord.edit_perm;\n    recordsDifferent = true;\n}\n\nvar initialData = {};\ninstruction.Initial = initialData;\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    \n    var initialValue;\n    var targetValue;\n    \n    var initialValue = initialRecord.Fields[field.name];\n    var targetValue = targetRecord.Fields[field.name];\n    \n    //validate target values\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecordInfo,createRecord.Id,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(createRecordInfo,createRecord.Id,field));\n        }\n    }\n    \n    if(!fieldsMatch(initialValue,targetValue,field)) {\n        initialData[field.name] = initialValue;\n        targetData[field.name] = targetValue;\n        recordsDifferent = true;\n    }\n}\n\nif(recordsDifferent) {\n    return instruction;\n}\nelse {\n    return null;\n}\n","supplementalCode":"function fieldsMatch(initialValue,targetValue,fieldInfo) {\n    if(fieldInfo.fieldClass === \"java.lang.String\") {\n        //compare strings with \"==\"\n        return (initialValue == targetValue);\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"java.lang\")) {\n        //compare other basic values with \"===\"\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"com.micello\")) {\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONObject\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONArray\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else {\n        throw new Error(\"unrecognized field type: \" + fieldInfo.fieldClass);\n    }\n}\n\nfunction compareJsonData(a,b) {\n    var an = apogee.util.getNormalizedObjectCopy(a);\n    var bn = apogee.util.getNormalizedObjectCopy(b);\n    var aString = JSON.stringify(an);\n    var bString = JSON.stringify(bn);\n    return aString == bString;\n}\n    ","description":"This function creates an update instruction given an initial and target record. If the records are the same then NULL is returned. (No update is needed.)"}},"createCreateInstruction":{"name":"createCreateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["createRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(createRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Create\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = createRecord.Id;\n\ninstruction.targetReadPerm = createRecord.read_perm;\ninstruction.targetEditPerm = createRecord.edit_perm;\n\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var targetValue;\n    var targetValue = createRecord.Fields[field.name];\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(createRecord,field));\n        }\n    }\n    \n    targetData[field.name] = targetValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getFieldErrString":{"name":"getFieldErrString","type":"apogee.FunctionTable","updateData":{"argList":["record","fieldInfo"],"functionBody":"return getRecordErrString(record) + \" - \" + fieldInfo.name;","supplementalCode":"","description":""}},"getRecordErrString":{"name":"getRecordErrString","type":"apogee.FunctionTable","updateData":{"argList":["record"],"functionBody":"return record.Type + \" \" + record.Id;","supplementalCode":"","description":""}},"createDeleteInstruction":{"name":"createDeleteInstruction","type":"apogee.FunctionTable","updateData":{"argList":["deleteRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(deleteRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Delete\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = deleteRecord.Id;\n\ninstruction.initialReadPerm = deleteRecord.read_perm;\ninstruction.initialEditPerm = deleteRecord.edit_perm;\n\nvar initialData = {};\ninstruction.Initial = initialData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var initialValue = deleteRecord.Fields[field.name];\n    \n    initialData[field.name] = initialValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getRecordInfo":{"name":"getRecordInfo","type":"apogee.FunctionTable","updateData":{"argList":["recordType"],"functionBody":"var recordInfo = dataSetInfo.records[recordType];\n\nif(!recordInfo) {\n    throw new Error(\"Record type not found in getRecordInfo: \" + recordType);\n}\n\nreturn recordInfo;","supplementalCode":"","description":""}},"combinedEntriesToInstructionList":{"name":"combinedEntriesToInstructionList","type":"apogee.FunctionTable","updateData":{"argList":["combinedEntries"],"functionBody":"var output = [];\nfor(var key in combinedEntries) {\n    var entry = combinedEntries[key];\n    var instruction = getInstructionForCombinedEntry(entry);\n    if(instruction) {\n        output.push(instruction);\n    }\n}\n\nreturn output;","supplementalCode":"function getInstructionForCombinedEntry(combinedEntry) {\n    var newEntry = combinedEntry.newEntry;\n    var oldEntry = combinedEntry.oldEntry;\n    \n    if(newEntry) {\n        if(!oldEntry) {\n            console.log(\"Create: \" + newEntry.Id);\n            return createCreateInstruction(newEntry);\n        }\n        else {\n            //this will return null for matching records\n            console.log(\"Update(maybe): \" + newEntry.Id);\n            return createUpdateInstruction(oldEntry,newEntry);\n        }\n    }\n    else if(oldEntry) {\n        console.log(\"Delete: \" + oldEntry.Id);\n        return createDeleteInstruction(oldEntry);\n    }\n    \n    return null;\n}\n\nfunction entriesDifferent(entry1,entry2) {\n    var string1 = JSON.stringify(apogee.util.getNormalizedCopy(entry1));\n    var string2 = JSON.stringify(apogee.util.getNormalizedCopy(entry2));\n    return (string1 == string2);\n}","description":"This function takes a combined entry map of the format:\n\n{\n  \"some-identifier\":{\n    \"oldEntry\":{original record entry, if applicable},\n    \"newEntry\":{new record entry, if applicable}\n  },\n  ...\n}\n\nIt returns an instruction list.\n\n"}},"getCommitPromise":{"name":"getCommitPromise","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage","sessionKey"],"functionBody":"var commitBody = createCommitBody(instructionList,commitMessage);\nvar requestOptions = createRequestOptions(commitBody,sessionKey);\nvalue = apogee.net.jsonRequest(commitUrl,requestOptions);\nreturn value;","supplementalCode":"","description":""}},"getRequestPromise":{"name":"getRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nvalue = apogee.net.jsonRequest(requestUrl,requestOptions);\nreturn value;","supplementalCode":"","description":""}},"customRequestUrl":{"name":"customRequestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvalue = host + \"/request\";\nreturn value;","supplementalCode":"","description":""}},"getCustomRequestPromise":{"name":"getCustomRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nvalue = apogee.net.jsonRequest(customRequestUrl,requestOptions);\nreturn value;","supplementalCode":"","description":""}}}}}}},"components":{"tasks":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":37,"y":37}},"children":{"login":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":55,"y":32}},"children":{"loginUrl":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":465,"height":43},"posInfo":{"x":26,"y":27},"state":-1,"viewType":"Text"}},"loginControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":369,"height":87},"posInfo":{"x":319,"y":36},"state":0,"viewType":"Output"},"resource":{"html":"","css":"","setData":"this.loginUrl = data;","constructorAddition":"\n\n//this uses the updated version of test authorization that takes and returns a JSON\nthis.onClick = function() {\n    \n    //on click\n    var bodyJson = {};\n    bodyJson.userName = resource.userInput.value;\n    bodyJson.password = resource.passwordInput.value;\n    \n    //cleaer password field\n    resource.passwordInput.value = \"\";\n    \n    var options = {};\n    options.body = JSON.stringify(bodyJson);\n    options.method = \"POST\";\n    \n    var requestPromise = apogee.net.jsonRequest(this.loginUrl,options);\n    \n    //set the response\n    mode.getMessenger().asynchDataUpdate(\"sessionResponse\",requestPromise);\n}","init":"\nvar label1 = document.createElement(\"label\");\nlabel1.for = \"userInput\";\nlabel1.innerHTML = \"User:\"\nelement.appendChild(label1);\n\nvar input1 = document.createElement(\"input\");\ninput1.id = \"userInput\";\nresource.userInput = input1;\nelement.appendChild(input1);\n\nelement.appendChild(document.createElement(\"br\"));\n\nvar label2 = document.createElement(\"label\");\nlabel2.for = \"passwordInput\";\nlabel2.innerHTML = \"Password:\"\nelement.appendChild(label2);\n\nvar input2 = document.createElement(\"input\");\ninput2.id = \"passwordInput\";\ninput2.type = \"password\";\nresource.passwordInput = input2;\nelement.appendChild(input2);\n\nelement.appendChild(document.createElement(\"br\"));\n\nvar button = document.createElement(\"button\");\nbutton.innerHTML = \"Login\";\nelement.appendChild(button);\n\nvar instance = this;\nbutton.onclick = function() {\n    instance.onClick();\n}\n\n\n"}},"sessionResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":697,"height":93},"posInfo":{"x":24,"y":192},"state":0,"viewType":"Text"}},"taskResult":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":613,"height":319},"posInfo":{"x":620,"y":254},"state":0,"viewType":"Formula"}},"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":463,"height":119},"posInfo":{"x":34,"y":431},"state":0,"viewType":"Text"}},"state":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":290,"height":66},"posInfo":{"x":33,"y":386},"state":-1,"viewType":"Text"}}}},"submit":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":386,"y":24}},"children":{"submitControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":363,"height":238},"posInfo":{"x":31,"y":128},"state":0,"viewType":"Output"},"resource":{"html":"<textarea id=\"submit_messageInput\"></textarea><br>\n<input type=\"button\" id=\"submit_commitButton\" value=\"Commit\"></input>\n<input type=\"button\" id=\"submit_cancelButton\" value=\"Cancel\"></input>","onLoad":"this.submitButton = document.getElementById(\"submit_commitButton\");\nthis.cancelButton = document.getElementById(\"submit_cancelButton\");\nthis.messageInput = document.getElementById(\"submit_messageInput\");\nthis.initialized = true;\n\nvar instance = this;\nthis.submitButton.onclick = function() {\n    instance.onSubmit();\n}\nthis.cancelButton.onclick = function() {\n    instance.onCancel();\n}","constructorAddition":"this.messageInput = null;\nthis.submitButton = null;\nthis.cancelButton = null;\nthis.initialized = false;\n\nthis.onSubmit = function() {\n    \n    if(!this.initialized) {\n        return;\n    }\n    \n    var commitMessage = this.messageInput.value.trim();\n    if((!commitMessage)||(commitMessage.length === 0)) {\n        alert(\"You must enter a commit message!\");\n        return;\n    }\n    this.messageInput.value = \"\";\n    \n    if((!this.instructionList)||(this.instructionList.length === 0)) {\n        alert(\"There is no data to commit.\");\n        return;\n    }\n    \n    var updateInfo = [];\n    updateInfo.push([ \"commitMessage\",commitMessage]);\n    updateInfo.push([\"liveInstructionList\",this.instructionList]);\n    mode.getMessenger().compoundDataUpdate(updateInfo,true);\n}\n\nthis.onCancel = function() {\n    console.log(this.previousTask);\n    taskAppModule.taskCanceled(mode.getMessenger(),[\"submit\"],this.previousTask);\n}","setData":"if(!data) return;\n\nthis.instructionList = data.instructionList;\nthis.previousTask = data.previousTask;","css":"#submit_messageInput {\n    height: 200px;\n    width: 300px;\n}"}},"commitResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":319,"height":123},"posInfo":{"x":693,"y":289},"state":-1,"viewType":"JSON"}},"commitMessage":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":271,"height":99},"posInfo":{"x":690,"y":76},"state":0,"viewType":"Text"}},"liveInstructionList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":315,"height":124},"posInfo":{"x":698,"y":239},"state":-1,"viewType":"JSON"}},"taskResult":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":611,"height":402},"posInfo":{"x":692,"y":337},"state":-1,"viewType":"Formula"}},"sessionKey":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":552,"height":52},"posInfo":{"x":22,"y":12},"state":-1,"viewType":"Formula"}},"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":429,"height":178},"posInfo":{"x":30,"y":579},"state":0,"viewType":"Text"}},"state":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":290,"height":92},"posInfo":{"x":31,"y":444},"state":0,"viewType":"Text"}},"instructionList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":692,"height":683},"posInfo":{"x":441,"y":43},"state":-1,"viewType":"Text"}}}},"completed":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":384,"y":69}},"children":{"resetControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":375,"height":73},"posInfo":{"x":628,"y":22},"state":0,"viewType":"Output"},"resource":{"html":"<input type=\"button\" id=\"completed_reset\" value=\"Reset\"></input>","onLoad":"this.resetButton = document.getElementById(\"completed_reset\");\nthis.initialized = true;\n\nvar instance = this;\nthis.resetButton.onclick = function() {\n    instance.onReset();\n}","constructorAddition":"this.onReset = function() {\n\n    var clearTaskList = [\n        [\"switcher\"],\n        [\"editEntry\",\"selectFileEntry\"],\n        [\"editEntry\",\"createGeomType\"],\n        [\"editEntry\",\"createAddressKey\"],\n        [\"editEntry\",\"createSimpleProperty\"],\n        [\"editEntry\",\"freeFormCreate\"],\n        [\"editEntry\",\"createThemeRulesEntry\"],\n        [\"editEntry\",\"createInputColorsEntry\"],\n        [\"submit\"],\n        [\"completed\"]\n    ];\n    taskAppModule.clearTasksAndRestartFrom(mode.getMessenger(),clearTaskList,[\"switcher\"]);\n}","setData":""}},"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":253,"height":77},"posInfo":{"x":136,"y":66},"state":0,"viewType":"Text"}},"state":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":290,"height":136},"posInfo":{"x":138,"y":223},"state":0,"viewType":"Text"}},"submitResult":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":461,"height":153},"posInfo":{"x":145,"y":403},"state":0,"viewType":"Text"}}}},"editEntry":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":198,"y":122}},"children":{"createGeomType":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":181,"y":161}},"children":{"state":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":613,"y":105},"state":-1,"viewType":"Text"}},"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":391,"height":300},"posInfo":{"x":613,"y":60},"state":-1,"viewType":"Text"}},"layout":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":701,"height":669},"posInfo":{"x":539,"y":259},"state":0,"viewType":"Formula"}},"createGeomTypeForm":{"type":"apogeeapp.app.ConfigurableForm","windowState":{"sizeInfo":{"width":344,"height":372},"posInfo":{"x":76,"y":98},"state":0,"viewType":"Output"}},"baseEntry":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":814,"height":161},"posInfo":{"x":78,"y":44},"state":-1,"viewType":"Text"}},"layoutTemplate":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":415,"height":300},"posInfo":{"x":721,"y":367},"state":0,"viewType":"Text"}},"resultInstructionList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":585,"height":450},"posInfo":{"x":614,"y":208},"state":-1,"viewType":"Formula"}}}},"selectFileEntry":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":183,"y":57}},"children":{"selectEntriesControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":909,"height":663},"posInfo":{"x":252,"y":35},"state":0,"viewType":"Output"},"resource":{"html":"<table class=\"selectFileEntry_table\">\n     <tr>\n        <td id=\"selectFileEntry_filterCell\">\n            filters here\n        </td>\n    </tr>\n    <tr>\n        <td class=\"selectFileEntry_listColumn\">\n            <div id=\"selectFileEntry_availableCell\" class=\"selectFileEntry_displayDiv\"></div>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            <input type=\"button\" value=\"Select\" id=\"selectFileEntry_commitButton\">\n            &nbsp;\n            <input type=\"button\" value=\"Cancel\" id=\"selectFileEntry_cancelButton\">\n        </td>\n    </tr>\n</table>\n","css":".selectFileEntry_table {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    border-collapse: collapse;\n}\n.selectFileEntry_listColumn {\n    vertical-align: top;\n    height: 100%;\n    overflow: hidden;\n}\n.selectFileEntry_displayDiv {\n    height: 100%;\n    overflow: auto; \n    border: 1px solid black;\n}\n\n.selectFileEntry_filterContainerClass {\n    display: inline;\n    margin: 5px;\n}\n\n.selectFileEntry_listEntryElement {\n    border: 1px solid lightgray;\n    padding: 5px;\n}\n.selectFileEntry_listEntryElement_selected {\n    border: 1px solid lightgray;\n    padding: 5px;\n    background-color: yellow;\n}","setData":"if(!data) return;\n\n//store the data if we are not ready yet\nif(!this.initialized) {\n    this.cachedData = data;\n    return;\n}\n\n//set data\nthis.data = data;\n\n//initialize filters\nthis.initializeFilters();\n\n//load ui\nthis.loadEntries();\n\n\n\n","constructorAddition":"this.initialized = false;\n\nthis.fileEntries = null;\nthis.initialRecipeEntries = null;\nthis.activeMetaFileEntry = null;\nthis.metaFileCreated = false;\n\nthis.selectedCell = null;\nthis.availableCell = null;\n\nthis.onCommitClicked = function() {\n    if(!this.selectedFileEntry) {\n        alert(\"No file entry is selected!\");\n        return;\n    }\n    \n    var data = {};\n    data.selectedFileEntry = this.selectedFileEntry;\n    \n    taskAppModule.taskCompleted(mode.getMessenger(),[\"editEntry\",\"selectFileEntry\"],this.data.editTask,data);\n}\n\nthis.onCancelClicked = function() {\n    taskAppModule.taskCanceled(mode.getMessenger(),[\"editEntry\",\"selectFileEntry\"],[\"switcher\"]);\n}\n\n\n//=====================================\n// Load Methods\n//=====================================\n\nthis.loadEntries = function() {\n    \n    this.selectedFileEntry = null;\n    \n    //populate the filter options\n    this.populateFilterOptions();\n    \n    //populate the display cell\n    apogeeapp.ui.removeAllChildren(this.availableCell);\n    \n    var addFileEntry = (fileEntry) => {\n        var cellElement = this.createCell(fileEntry);\n        this.availableCell.appendChild(cellElement);\n    }\n\n    this.data.availableFileEntries.filter(this.overallFilter).forEach(addFileEntry);\n}\n\nthis.createCell = function(fileEntry) {\n    \n    var name = fileEntry.Fields.entry_name + \" - \" + fileEntry.Fields.option_name;\n    \n    var div = document.createElement(\"div\");\n    div.className = \"selectFileEntry_listEntryElement\";\n    var text = document.createTextNode(name);\n    div.appendChild(text);\n    \n    div.onclick = (event) => this.clickCell(fileEntry,div);\n    \n    return div;\n}\n\nthis.clickCell = function(fileEntry,listElement) {\n    \n    if(this.selectedListElement) {\n        this.selectedListElement.className = \"selectFileEntry_listEntryElement\";\n    }\n    \n    this.selectedFileEntry = fileEntry;\n    this.selectedListElement = listElement;\n    if(this.selectedListElement) {\n        this.selectedListElement.className = \"selectFileEntry_listEntryElement_selected\";\n    }\n}\n\n//=================================\n// Update methods\n//=================================\n\n//shared functions between ui elements - we need these\n//because for now there is no way to add shared ui code.\n\nvar taskCompleted = function(messenger,currentTask,nextTask,data) {\n    var taskResult = {};\n    taskResult.state = \"SUCCESS\";\n    taskResult.data = data;\n    \n    var updateInfo = [];\n    updateInfo.push([\"taskResults.\" + currentTask,taskResult]);\n    updateInfo.push([\"tasks.activeTask\",nextTask]);\n    messenger.compoundDataUpdate(updateInfo);\n}\n\nvar taskCanceled = function(messenger,currentTask,prevTask) {\n    var clearData = {};\n    clearData.state = \"INCOMPLETE\";\n    \n    var updateInfo = [];\n    updateInfo.push([\"taskResults.\" + currentTask,clearData]);\n    updateInfo.push([\"taskResults.\" + prevTask,clearData]);\n    updateInfo.push([\"tasks.activeTask\",prevTask]);\n    messenger.compoundDataUpdate(updateInfo);\n}\n\n//=================================\n// Filters\n//=================================\n\n/* This initializes the filters */\nthis.initializeFilters = function() {\n\n    //define the filters\n    var filterList = [\n        [\"Section\",(fileEntry) => fileEntry.Fields.entry_section],\n        [\"Legacy Key\",(fileEntry) => {\n                return fileEntry.Fields.entry_data.properties[0].legacyKey;\n            }\n        ],\n        [\"Legacy Value\",(fileEntry) => {\n                return fileEntry.Fields.entry_data.properties[0].legacyValue;\n            }\n        ],\n        [\"Context\",(fileEntry) => fileEntry.Fields.entry_context],\n        [\"Key\",(fileEntry) => fileEntry.Fields.entry_value],\n        [\"Option\",(fileEntry) => fileEntry.Fields.option_name]\n    ];\n    \n    //create the working filter struct\n    var createFilterStruct = (filterListEntry) => {\n        var struct = {};\n        struct.filterFunction = filterListEntry[1];\n        struct.title = filterListEntry[0];\n        struct.optionSet = null;\n        struct.selectionActive = false;\n        struct.selection = null;\n        struct.selectElement = null;\n        return struct;\n    }\n    this.filterStructs = filterList.map(createFilterStruct); \n    \n    //create the overrall filter function\n    this.overallFilter = (fileEntry) => {\n        var resultOk = true;\n\n        var singleFilterPass = (filterStruct) => {\n            if(filterStruct.selectionActive) {\n                 return (filterStruct.filterFunction(fileEntry) == filterStruct.selection);\n            }\n            else {\n                return true;\n            }\n        }\n        \n        return this.filterStructs.every(singleFilterPass);\n    }\n    \n    //create the fiter display elements\n    apogeeapp.ui.removeAllChildren(this.filterCell);\n    var createFilterEntry = (filterStruct) => {\n        this.filterCell.appendChild(this.getFilterElement(filterStruct));\n    }\n    this.filterStructs.forEach(createFilterEntry);\n}\n\n/** This creates a dom element for the filter select */\nthis.getFilterElement = function(filterStruct) {\n    var container = document.createElement(\"div\");\n    container.className = \"selectFileEntry_filterContainerClass\";\n    \n    container.appendChild(document.createTextNode(filterStruct.title));\n    \n    var selectElement = document.createElement(\"select\");\n    filterStruct.selectElement = selectElement;\n    container.appendChild(selectElement);\n    \n    //handler = make selection and reload file entries\n    filterStruct.selectElement.onchange = (event) => {\n        if(selectElement.value == NULL_SELECTION) {\n            filterStruct.selectionActive = false;\n            filterStruct.selection = null;\n        }\n        else {\n            filterStruct.selectionActive = true;\n            filterStruct.selection = selectElement.value;\n        }\n        this.loadEntries();\n    };\n    \n    return container;\n}\n\nvar NULL_SELECTION = \"----\";\n\n/** This method populates the options into the filter struct. */\nthis.populateFilterSelect = function(filterStruct) {\n    apogeeapp.ui.removeAllChildren(filterStruct.selectElement);\n    \n    filterStruct.selectElement.add(apogeeapp.ui.createElement(\"option\",{\"text\":NULL_SELECTION}));\n    \n    for(var option in filterStruct.optionSet) {\n        filterStruct.selectElement.add(apogeeapp.ui.createElement(\"option\",{\"text\":option}));\n    }\n    \n    if(filterStruct.selectionActive) {\n        filterStruct.selectElement.value = filterStruct.selection;\n    }\n    else {\n        filterStruct.selectElement.value = NULL_SELECTION;\n    }\n}\n\n/** This method populates the allowed options for each filter in the list. It does this\n * sequentially, meaning the options for later filters depend on the current selection in previous filters. */\nthis.populateFilterOptions = function() {\n    \n    var fileEntryList = this.data.availableFileEntries;\n    \n    //the create options function, for use with reduce\n    var createOptionsAndFilterList = (filterStruct) => {\n        \n        \n        //populate filter option set\n        var addToOptionSet = (optionSet,fileEntry) => {\n            var value = filterStruct.filterFunction(fileEntry);\n            optionSet[value] = true;\n            return optionSet;\n        }\n        \n        filterStruct.optionSet = fileEntryList.reduce(addToOptionSet,{});\n        \n        //update selection active = clear it if it was set to something that was not an option\n        if(filterStruct.selectionActive) {\n            if(!filterStruct.optionSet[filterStruct.selection]) {\n                filterStruct.selectionActive = false;\n                filterStruct.selection = null;\n            }\n        }\n        \n        //filter out list for next filter, if selection active\n        fileEntryList = fileEntryList.filter( (fileEntry) => {\n            if(filterStruct.selectionActive) {\n                 return (filterStruct.filterFunction(fileEntry) == filterStruct.selection);\n            }\n            else {\n                return true;\n            }\n        });\n        \n        //populate the ui element for these new options\n        this.populateFilterSelect(filterStruct);\n    }\n    \n    this.filterStructs.forEach(createOptionsAndFilterList)\n}\n\nthis.getTypeSpecificFilters = function(metaFileType) {\n    return TYPE_SPECIFIC_FILTERS[metaFileType];\n}\n","onLoad":"if(!this.initialized) {\n    this.selectedTable = document.getElementById(\"selectFileEntry_selectedTable\");\n    this.selectedCells = null;\n    this.availableCell = document.getElementById(\"selectFileEntry_availableCell\");\n    \n    this.filterCell = document.getElementById(\"selectFileEntry_filterCell\");\n    \n    this.commitButton = document.getElementById(\"selectFileEntry_commitButton\");\n    this.cancelButton = document.getElementById(\"selectFileEntry_cancelButton\");\n    \n    var instance = this;\n    \n    this.commitButton.onclick = () => instance.onCommitClicked();\n    this.cancelButton.onclick = () => instance.onCancelClicked();\n    \n    //finished\n    this.initialized = true;\n    \n    if(this.cachedData !== undefined) {\n        console.log(\"using cached data!\");\n        this.setData(this.cachedData);\n        this.cachedData = undefined;\n    }\n}"}},"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":393,"height":192},"posInfo":{"x":31,"y":98},"state":-1,"viewType":"Text"}},"state":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":290,"height":79},"posInfo":{"x":29,"y":152},"state":-1,"viewType":"Text"}},"editTask":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":624,"height":336},"posInfo":{"x":30,"y":33},"state":-1,"viewType":"Formula"}}}},"createAddressKey":{"type":"apogeeapp.app.FolderComponent","children":{"state":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":73,"y":326},"state":-1,"viewType":"Text"}},"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":391,"height":300},"posInfo":{"x":72,"y":279},"state":-1,"viewType":"Text"}},"layout":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":404,"height":669},"posInfo":{"x":613,"y":162},"state":-1,"viewType":"Text"}},"createAddressKeyForm":{"type":"apogeeapp.app.ConfigurableForm","windowState":{"sizeInfo":{"width":321,"height":134},"posInfo":{"x":137,"y":61},"state":0,"viewType":"Output"}},"resultInstructionList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":670,"height":300},"posInfo":{"x":563,"y":347},"state":-1,"viewType":"JSON"}}}},"createSimpleProperty":{"type":"apogeeapp.app.FolderComponent","children":{"state":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":614,"y":105},"state":-1,"viewType":"Text"}},"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":391,"height":300},"posInfo":{"x":615,"y":159},"state":-1,"viewType":"Text"}},"createSimplePropertyForm":{"type":"apogeeapp.app.ConfigurableForm","windowState":{"sizeInfo":{"width":472,"height":219},"posInfo":{"x":60,"y":240},"state":0,"viewType":"Output"}},"selectPropertyTypeForm":{"type":"apogeeapp.app.ConfigurableForm","windowState":{"sizeInfo":{"width":284,"height":121},"posInfo":{"x":35,"y":32},"state":0,"viewType":"Output"}},"selectTypeLayout":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":520,"height":477},"posInfo":{"x":852,"y":41},"state":-1,"viewType":"Text"}},"propertyType":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":35},"posInfo":{"x":850,"y":85},"state":0,"viewType":"Text"}},"textLayout":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":404,"height":411},"posInfo":{"x":851,"y":199},"state":0,"viewType":"Text"}},"enumLayout":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":491,"height":300},"posInfo":{"x":852,"y":243},"state":-1,"viewType":"Text"}},"booleanLayout":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":409,"height":462},"posInfo":{"x":852,"y":158},"state":-1,"viewType":"Text"}},"layout":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":607,"height":384},"posInfo":{"x":852,"y":310},"state":-1,"viewType":"Formula"}},"baseEntry":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":545,"height":244},"posInfo":{"x":387,"y":45},"state":-1,"viewType":"Text"}}}},"freeFormCreate":{"type":"apogeeapp.app.FolderComponent","children":{"state":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":614,"y":105},"state":-1,"viewType":"Text"}},"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":391,"height":300},"posInfo":{"x":613,"y":60},"state":-1,"viewType":"Text"}},"layout":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":519,"height":343},"posInfo":{"x":615,"y":188},"state":-1,"viewType":"Text"}},"freeFormCreateForm":{"type":"apogeeapp.app.ConfigurableForm","windowState":{"sizeInfo":{"width":486,"height":536},"posInfo":{"x":37,"y":60},"state":0,"viewType":"Output"}}}},"createInputColorsEntry":{"type":"apogeeapp.app.FolderComponent","children":{"state":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":368,"y":47},"state":-1,"viewType":"Text"}},"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":391,"height":300},"posInfo":{"x":368,"y":94},"state":-1,"viewType":"Text"}},"layout":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":770,"height":480},"posInfo":{"x":848,"y":245},"state":-1,"viewType":"Formula"}},"baseEntry":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":704,"height":584},"posInfo":{"x":48,"y":48},"state":-1,"viewType":"JSON"}},"mainTitleLayoutLines":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":438,"height":300},"posInfo":{"x":852,"y":75},"state":-1,"viewType":"Text"}},"pathLayoutLines":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":778,"height":441},"posInfo":{"x":847,"y":185},"state":-1,"viewType":"Formula"}},"DUMMY_DROPDOWN_ENTRY":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":856,"y":389},"state":-1,"viewType":"Text"}},"payloadLayoutLines":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":484,"height":462},"posInfo":{"x":851,"y":128},"state":-1,"viewType":"Text"}},"createInputColorEntryForm":{"type":"apogeeapp.app.ConfigurableForm","windowState":{"sizeInfo":{"width":661,"height":361},"posInfo":{"x":54,"y":187},"state":0,"viewType":"Output"}}}},"createThemeRulesEntry":{"type":"apogeeapp.app.FolderComponent","children":{"state":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":615,"y":105},"state":-1,"viewType":"Text"}},"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":391,"height":300},"posInfo":{"x":615,"y":159},"state":-1,"viewType":"Text"}},"selectTypeLayout":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":520,"height":477},"posInfo":{"x":852,"y":49},"state":-1,"viewType":"Text"}},"layout":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":770,"height":488},"posInfo":{"x":850,"y":336},"state":-1,"viewType":"Formula"}},"baseEntry":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":704,"height":584},"posInfo":{"x":613,"y":50},"state":-1,"viewType":"JSON"}},"selectSectionForm":{"type":"apogeeapp.app.ConfigurableForm","windowState":{"sizeInfo":{"width":286,"height":113},"posInfo":{"x":57,"y":49},"state":0,"viewType":"Output"}},"section":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":35},"posInfo":{"x":60,"y":218},"state":0,"viewType":"Text"}},"mainTitleLayoutLines":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":853,"y":130},"state":-1,"viewType":"Text"}},"styleLayoutLines":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":404,"height":411},"posInfo":{"x":851,"y":232},"state":-1,"viewType":"Text"}},"labelLayoutLines":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":484,"height":462},"posInfo":{"x":852,"y":188},"state":-1,"viewType":"Text"}},"pathLayoutLines":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":778,"height":441},"posInfo":{"x":850,"y":281},"state":-1,"viewType":"Private"}},"DUMMY_DROPDOWN_ENTRY":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":857,"y":477},"state":-1,"viewType":"Text"}},"createThemeMapEntryForm":{"type":"apogeeapp.app.ConfigurableForm","windowState":{"sizeInfo":{"width":526,"height":361},"posInfo":{"x":42,"y":300},"state":0,"viewType":"Output"}}}}}},"switcher":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":60,"y":79}},"children":{"selectSequence":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":470,"height":216},"posInfo":{"x":256,"y":23},"state":0,"viewType":"Output"},"resource":{"html":"Select Edit Type:<br>\n<input type=\"radio\" value=\"geomType\" name=\"switch\" id=\"switch_newGeomType\" checked=\"true\">Create New Geom Type</input><br>\n<input type=\"radio\" value=\"address\" name=\"switch\" id=\"switch_newAddress\" >Create Address Entry</input><br>\n<input type=\"radio\" value=\"simpleProp\" name=\"switch\" id=\"switch_newSimpleProp\">Add Simple Property Override Entry</input><br>\n<input type=\"radio\" value=\"freeCreate\" name=\"switch\" id=\"switch_themeRulesEntry\">Create Theme Rules Entry</input><br>\n<input type=\"radio\" value=\"freeCreate\" name=\"switch\" id=\"switch_inputColorsEntry\">Create Input Colors Entry</input><br>\n<input type=\"radio\" value=\"freeCreate\" name=\"switch\" id=\"switch_freeCreate\">Free Form Create</input><br>\n<br><br>\n<input type=\"button\" value=\"Submit\" id=\"switch_submitButton\"></input>\n<input type=\"button\" value=\"Cancel\" id=\"switch_cancelButton\"></input>","onLoad":"this.radioButtons = [];\nthis.radioButtons.push(document.getElementById(\"switch_newGeomType\"));\nthis.radioButtons.push(document.getElementById(\"switch_newAddress\"));\nthis.radioButtons.push(document.getElementById(\"switch_newSimpleProp\"));\nthis.radioButtons.push(document.getElementById(\"switch_themeRulesEntry\"));\nthis.radioButtons.push(document.getElementById(\"switch_inputColorsEntry\"));\nthis.radioButtons.push(document.getElementById(\"switch_freeCreate\"));\n\nthis.submitButton = document.getElementById(\"switch_submitButton\");\nthis.cancelButton = document.getElementById(\"switch_cancelButton\");\n\nvar instance = this;\nthis.submitButton.onclick = function() {\n    instance.onSubmitClick();\n}\nthis.cancelButton.onclick = function() {\n    instance.onCancelClick();\n}\n\nthis.initialized = true;\n\n","constructorAddition":"\nvar TASK_LOOKUP_TABLE = \n    \n{\n\t\"switch_newGeomType\": [\"editEntry\",\"createGeomType\"],\n\t\"switch_newAddress\": [\"editEntry\",\"createAddressKey\"],\n\t\"switch_newSimpleProp\": [\"editEntry\",\"createSimpleProperty\"],\n\t\"switch_themeRulesEntry\": [\"editEntry\",\"createThemeRulesEntry\"],\n\t\"switch_inputColorsEntry\": [\"editEntry\",\"createInputColorsEntry\"],\n\t\"switch_freeCreate\": [\"editEntry\",\"freeFormCreate\"]\n}\n    \nthis.initialized = false;\n\nthis.onSubmitClick = function() {\n    \n    if(!this.initialized) {\n        alert(\"Error: UI no initailized\");\n        return;\n    }\n    \n    var isChecked = radioButton => (radioButton.checked);\n    \n    var checkedRadio = this.radioButtons.find(isChecked);\n\n    var editTask = TASK_LOOKUP_TABLE[checkedRadio.id];\n    \n    var data = {};\n    data.editTask = editTask;\n    \n    var nextTaskPath;\n    if((checkedRadio.id == \"switch_newAddress\")||(checkedRadio.id == \"switch_freeCreate\")) {\n        //no property rule select for these cases\n        nextTaskPath = editTask;\n    }\n    else {\n        //we need a property rule select here\n        nextTaskPath = [\"editEntry\",\"selectFileEntry\"];\n    }\n    \n    taskAppModule.taskCompleted(mode.getMessenger(),[\"switcher\"],nextTaskPath,data);\n}\n\nthis.onCancelClick = function() {\n    taskAppModule.taskCanceled(mode.getMessenger(),[\"switcher\"],[\"login\"]);\n}\n\n\n\n\n"}},"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":395,"height":241},"posInfo":{"x":29,"y":81},"state":-1,"viewType":"Text"}},"state":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":290,"height":79},"posInfo":{"x":27,"y":36},"state":-1,"viewType":"Text"}}}},"getSessionKey":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":447,"height":400},"posInfo":{"x":47,"y":456},"state":0,"viewType":"Code"}},"currentTask":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":287,"height":92},"posInfo":{"x":15,"y":212},"state":0,"viewType":"Text"}},"getFileTypeName":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":593,"height":400},"posInfo":{"x":47,"y":496},"state":-1,"viewType":"Code"}},"commonData":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":482,"y":496}},"children":{"fileTypeList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":727,"height":325},"posInfo":{"x":35,"y":341},"state":-1,"viewType":"Formula"}},"fileTypeIdToName":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":722,"height":320},"posInfo":{"x":36,"y":461},"state":-1,"viewType":"JSON"}},"fileTypeNameToId":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":685,"height":300},"posInfo":{"x":30,"y":417},"state":-1,"viewType":"JSON"}},"availableFileEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":743,"height":553},"posInfo":{"x":183,"y":9},"state":0,"viewType":"JSON"}},"fileTypeEntryList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":757,"height":361},"posInfo":{"x":22,"y":126},"state":-1,"viewType":"Formula"}},"context":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":178,"height":40},"posInfo":{"x":273,"y":21},"state":-1,"viewType":"Text"}},"sessionKey":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":717,"height":408},"posInfo":{"x":28,"y":23},"state":-1,"viewType":"Formula"}},"validateFormStrings":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":727,"height":400},"posInfo":{"x":541,"y":337},"state":-1,"viewType":"Code"}},"doesFileEntryNameExist":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":631,"height":178},"posInfo":{"x":538,"y":48},"state":-1,"viewType":"Code"}},"doesFileEntryFeatureTypeExist":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":450,"height":300},"posInfo":{"x":537,"y":223},"state":-1,"viewType":"Formula"}},"fileEntryNameLookupTable":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":627,"height":389},"posInfo":{"x":542,"y":83},"state":-1,"viewType":"Text"}},"featureTypeNameLookupTable":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":770,"height":310},"posInfo":{"x":540,"y":271},"state":-1,"viewType":"Text"}},"PROPERTY_RULES_OPTION_NAME":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":386,"height":55},"posInfo":{"x":912,"y":59},"state":-1,"viewType":"Text"}}}},"getFileTypeId":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":670,"height":400},"posInfo":{"x":45,"y":539},"state":-1,"viewType":"Code"}}}},"micemetarDataAccess":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":216,"y":34}},"children":{"createRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":560,"height":321},"posInfo":{"x":32,"y":389},"state":-1,"viewType":"Code"}},"recordsToCreateInstructions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":834,"height":391},"posInfo":{"x":30,"y":472},"state":-1,"viewType":"Code"}},"createCommitBody":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":568,"height":400},"posInfo":{"x":629,"y":225},"state":-1,"viewType":"Code"}},"createRequestOptions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":523,"height":254},"posInfo":{"x":822,"y":379},"state":-1,"viewType":"Code"}},"host":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":353,"height":71},"posInfo":{"x":16,"y":6},"state":-1,"viewType":"Text"}},"commitUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":433,"height":107},"posInfo":{"x":17,"y":91},"state":-1,"viewType":"Formula"}},"requestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":450,"height":68},"posInfo":{"x":16,"y":51},"state":-1,"viewType":"Formula"}},"dataSetInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":882,"height":611},"posInfo":{"x":25,"y":169},"state":-1,"viewType":"JSON"}},"createUpdateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":886,"height":655},"posInfo":{"x":36,"y":248},"state":-1,"viewType":"Code"}},"createCreateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":994,"height":643},"posInfo":{"x":35,"y":209},"state":-1,"viewType":"Code"}},"getFieldErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":512,"height":68},"posInfo":{"x":761,"y":616},"state":-1,"viewType":"Code"}},"getRecordErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":81},"posInfo":{"x":762,"y":664},"state":-1,"viewType":"Code"}},"createDeleteInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":678,"height":540},"posInfo":{"x":36,"y":289},"state":-1,"viewType":"Code"}},"getRecordInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":480,"height":400},"posInfo":{"x":818,"y":427},"state":-1,"viewType":"Code"}},"combinedEntriesToInstructionList":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":721,"height":524},"posInfo":{"x":31,"y":516},"state":-1,"viewType":"Private"}},"getCommitPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":741,"height":400},"posInfo":{"x":374,"y":112},"state":-1,"viewType":"Code"}},"getRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":810,"height":400},"posInfo":{"x":376,"y":30},"state":-1,"viewType":"Code"}},"customRequestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":387,"height":300},"posInfo":{"x":18,"y":128},"state":-1,"viewType":"JSON"}},"getCustomRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":611,"height":400},"posInfo":{"x":376,"y":69},"state":-1,"viewType":"Code"}}}}}}