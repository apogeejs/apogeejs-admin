{"fileType":"apogee workspace","jsLinks":["http://localhost:8383/apogee/dev/micello/metadata%20conversion/lib/taskAppModule.js?x=2"],"cssLinks":[],"workspace":{"fileType":"apogee workspace","version":0.2,"data":{"name":"editMetaFile","type":"apogee.Folder","children":{"taskResults":{"name":"taskResults","type":"apogee.Folder","children":{"submit":{"name":"submit","type":"apogee.JsonTable","updateData":{"data":{"state":"INCOMPLETE"},"description":""}},"editMetaFile":{"name":"editMetaFile","type":"apogee.JsonTable","updateData":{"data":{"state":"INCOMPLETE"},"description":""}},"loadMetaFileRecords":{"name":"loadMetaFileRecords","type":"apogee.JsonTable","updateData":{"data":{"state":"INCOMPLETE"},"description":""}},"login":{"name":"login","type":"apogee.JsonTable","updateData":{"data":{"state":"INCOMPLETE"},"description":""}},"loadContext":{"name":"loadContext","type":"apogee.JsonTable","updateData":{"data":{"state":"INCOMPLETE"},"description":""}},"completed":{"name":"completed","type":"apogee.JsonTable","updateData":{"data":{"state":"INCOMPLETE"},"description":""}}}},"tasks":{"name":"tasks","type":"apogee.Folder","children":{"login":{"name":"login","type":"apogee.Folder","children":{"loginUrl":{"name":"loginUrl","type":"apogee.JsonTable","updateData":{"data":"http://eng.micello.com/TestAuthorization/loginjson","description":""}},"loginControl":{"name":"loginControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return loginUrl;","supplementalCode":"","description":""}},"sessionResponse":{"name":"sessionResponse","type":"apogee.JsonTable","updateData":{"data":{"responseCode":1,"sessionKey":"SESS0f6c4c2238a670b8138b63d9fd03cc22=qm28nsh01vosoosqevd1jm8mf4"},"description":""}},"taskResult":{"name":"taskResult","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\nvar sessionKey;\nif(!sessionResponse) {\n    taskAppModule.clearTasks(apogeeMessenger,[\"login\"]);\n    return \"INCOMPLETE\";\n}\nelse if(sessionResponse.responseCode === 1) {\n    data = {};\n    data.sessionKey = sessionResponse.sessionKey;\n    output.data = data;\n    taskAppModule.taskCompleted(apogeeMessenger,\"login\",taskList,data);\n    return \"SUCCESS\";\n}\nelse {\n    taskAppModule.taskError(apogeeMessenger,\"login\",sessionResponse.message);\n    return \"ERROR\";\n}","supplementalCode":"","description":""}}}},"loadMetaFileRecords":{"name":"loadMetaFileRecords","type":"apogee.Folder","children":{"fileTypeList":{"name":"fileTypeList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!sessionKey) return null;\n\nvar fileTypeSearch = {};\nfileTypeSearch.search = \"file_type_list\";\n\nreturn micemetarDataAccess.getRequestPromise(fileTypeSearch,sessionKey);\n\n","supplementalCode":"","description":""}},"metaFileList":{"name":"metaFileList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!sessionKey) return null;\nif(!context) return null;\n\n\nvar searchDef = {};\nsearchDef.search = \"meta_file_list\";\nsearchDef.file_context = context;\n\nreturn micemetarDataAccess.getRequestPromise(searchDef,sessionKey);\n\n","supplementalCode":"","description":""}},"metaFileSelector":{"name":"metaFileSelector","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nif((fileTypeList)&&(fileTypeList.success)) {\n    var fileTypes = {};\n    output.fileTypes = fileTypes;\n    \n    var loadFileTypeEntry = (record) => { fileTypes[record.Fields.file_type_name] = record.Id };\n\n    var fileTypeRecords = fileTypeList.data.Response;\n    fileTypeRecords.forEach(loadFileTypeEntry);\n}\n\nif((metaFileList)&&(metaFileList.success)) {\n    var metaFiles = {};\n    output.metaFiles = metaFiles;\n    \n    var loadMetaFileEntry = (record) => {\n        var fileTypeName = getFileTypeName(record.Fields.file_type_id);\n        var metaName = record.Fields.name;\n        metaFiles[fileTypeName + \":\" + metaName] = record.Id;\n    }\n    \n    var metaFileRecords = metaFileList.data.Response;\n    metaFileRecords.forEach(loadMetaFileEntry);\n}\n\noutput.currentMetaFileId = metaFileId;\noutput.currentFileTypeId = fileTypeId;\noutput.editExisting = fileSelection ? fileSelection.editExisting : false;\n\noutput.taskList = taskList;\n\nreturn output;","supplementalCode":"","description":""}},"INVALID_ID":{"name":"INVALID_ID","type":"apogee.JsonTable","updateData":{"data":0,"description":""}},"context":{"name":"context","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var data = taskAppModule.loadTaskResultData(taskResults,\"loadContext\");\nif(data) {\n    return data.context;\n}\nelse {\n    return null;\n}\n","supplementalCode":"","description":""}},"sessionKey":{"name":"sessionKey","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var data = taskAppModule.loadTaskResultData(taskResults,\"login\");\nif(data) {\n    return data.sessionKey;\n}\nelse {\n    return null;\n}\n","supplementalCode":"","description":""}},"getFileTypeName":{"name":"getFileTypeName","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeId"],"functionBody":"var isMatch = (record) => record.Id == fileTypeId;\n\nvar fileTypeRecord = fileTypeList.data.Response.find(isMatch);\n\nif(fileTypeRecord) {\n    return fileTypeRecord.Fields.file_type_name;\n}\nelse {\n    throw new Error(\"File type not found: id = \" + fileTypeId);\n}","supplementalCode":"","description":""}}}},"editMetaFile":{"name":"editMetaFile","type":"apogee.Folder","children":{"selectEntriesControl":{"name":"selectEntriesControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if( (!activeMetaFileEntry) ||\n    (!existingRecipeEntries) ||\n    (!availableFileEntries) ||\n    (!fileSelection)) {\n    return null;\n}\n\nvar data = {};\ndata.initialRecipeEntries = existingRecipeEntries;\ndata.fileEntries = availableFileEntries;\ndata.activeMetaFileEntry = activeMetaFileEntry;\ndata.metaFileCreated = !fileSelection.editExisting;\n\ndata.taskList = taskList;\n\nreturn data;","supplementalCode":"","description":""}},"fileTypeEntryList":{"name":"fileTypeEntryList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!sessionKey) return null;\nif(!fileSelection)  return null;\n\nvar fileTypeId;\nif(fileSelection.editExisting) {\n    if(existingMetaFileEntry) {\n        fileTypeId = existingMetaFileEntry.Fields.file_type_id;\n    }\n    else {\n        return null;\n    }\n}\nelse {\n    fileTypeId = fileSelection.fileTypeId;\n}\n\nvar searchDef = {};\nsearchDef.search = \"file_type_entries\";\nsearchDef.id = fileTypeId;\n\nreturn micemetarDataAccess.getRequestPromise(searchDef,sessionKey);\n\n","supplementalCode":"","description":""}},"metaFileResponse":{"name":"metaFileResponse","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!sessionKey) return null;\nif(!fileSelection) return null;\n\n\nif(fileSelection.editExisting) {\n    var searchDef = {};\n    searchDef.search = \"meta_file\";\n    searchDef.id = fileSelection.metaFileId;\n    return micemetarDataAccess.getRequestPromise(searchDef,sessionKey);\n}\nelse {\n    return null;\n}\n\n\n\n\n\n","supplementalCode":"","description":""}},"availableFileEntries":{"name":"availableFileEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((!fileTypeEntryList)||(!fileTypeEntryList.success)) return null;\n\nvar isFileEntry = (record) => (record.Type == \"file_entry\");\nreturn fileTypeEntryList.data.Records.filter(isFileEntry);","supplementalCode":"","description":""}},"existingMetaFileEntry":{"name":"existingMetaFileEntry","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!metaFileResponse) {\n    return null;\n}\n\nif(!metaFileResponse.success) {\n    throw new Error(\"Meta File request error\");\n}\n\nif(metaFileResponse.data.Response.length === 0) {\n    throw new Error(\"Meta file not found\");\n}\n\nreturn metaFileResponse.data.Response[0];","supplementalCode":"","description":""}},"activeMetaFileEntry":{"name":"activeMetaFileEntry","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!fileSelection) return null;\n\nif(fileSelection.editExisting) {\n    if(!metaFileResponse) return null;\n    \n    return existingMetaFileEntry;\n}\nelse {\n    var fields = {};\n    fields.name = fileSelection.metaFileName;\n    fields.file_type_id = fileSelection.fileTypeId;\n    fields.file_context = context;\n\n    var recordInfo =  micemetarDataAccess.getRecordInfo(\"meta_file\");\n    return micemetarDataAccess.createRecord(recordInfo,fields);\n}\n","supplementalCode":"","description":""}},"existingRecipeEntries":{"name":"existingRecipeEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!metaFileResponse) {\n    //empty list\n    return [];\n}\n\nif(!metaFileResponse.success) {\n    throw new Error(\"Error loading meta file records: \" + loadMetaFileRecords.meatFileResponse.msg);\n}\n\nvar isRecipeEntry = (record) => (record.Type == \"recipe_entry\");\n\nreturn metaFileResponse.data.Records.filter(isRecipeEntry);\n","supplementalCode":"","description":""}},"fileSelection":{"name":"fileSelection","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(taskResults.loadMetaFileRecords.state == \"SUCCESS\") {\n    return taskResults.loadMetaFileRecords.data;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"sessionKey":{"name":"sessionKey","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var data = taskAppModule.loadTaskResultData(taskResults,\"login\");\nif(data) {\n    return data.sessionKey;\n}\nelse {\n    return null;\n}\n","supplementalCode":"","description":""}},"context":{"name":"context","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var data = taskAppModule.loadTaskResultData(taskResults,\"loadContext\");\nif(data) {\n    return data.context;\n}\nelse {\n    return null;\n}\n","supplementalCode":"","description":""}}}},"submit":{"name":"submit","type":"apogee.Folder","children":{"submitControl":{"name":"submitControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return instructionList;","supplementalCode":"","description":""}},"instructionList":{"name":"instructionList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!editResults) return null;\n\nvar output = [];\n\noutput = output.concat(createMetaFileEntries.map(micemetarDataAccess.createCreateInstruction));\noutput = output.concat(createRecipeEntries.map(micemetarDataAccess.createCreateInstruction));\n\nvar getEditInstruction = (editPair) => (micemetarDataAccess.createEditInstruction(editPair[0],editPair[1]));\n\noutput = output.concat(editRecipeEntryPairs.map(getEditInstruction));\n\noutput = output.concat(deleteRecipeEntries.map(micemetarDataAccess.createDeleteInstruction));\n\nreturn output;","supplementalCode":"","description":""}},"commitResponse":{"name":"commitResponse","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((!liveInstructionList)||(liveInstructionList.length == 0)) {\n    return null; \n}\n\nreturn micemetarDataAccess.getCommitPromise(liveInstructionList,commitMessage,sessionKey);","supplementalCode":"","description":""}},"commitMessage":{"name":"commitMessage","type":"apogee.JsonTable","updateData":{"data":null,"description":""}},"liveInstructionList":{"name":"liveInstructionList","type":"apogee.JsonTable","updateData":{"data":null,"description":""}},"taskResult":{"name":"taskResult","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var resultValue;\n\nvar taskResult = {};\nif((!liveInstructionList)||(!commitResponse)) {\n    //taskAppModule.clearTasks(apogeeMessenger,[\"submit\"]);\n    return \"WAITING\";\n}\nelse if(commitResponse.success === true) {\n    data = {};\n    data.commitResponse = commitResponse;\n    taskAppModule.taskCompleted(apogeeMessenger,\"submit\",taskList,data);\n    resultValue = \"SUCCESS\";\n}\nelse {\n    alert(\"Error making commit: \" + commitResponse.msg);\n    resultValue = \"ERROR\";\n}\n\n//for error or success - clear the commit request\nvar updateInfo = [];\nupdateInfo.push([\"liveInstructionList\",null]);\nupdateInfo.push([\"commitMessage\",null]);\napogeeMessenger.compoundDataUpdate(updateInfo);\n    \nreturn resultValue;","supplementalCode":"","description":""}},"sessionKey":{"name":"sessionKey","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var data = taskAppModule.loadTaskResultData(taskResults,\"login\");\nif(data) {\n    return data.sessionKey;\n}\nelse {\n    return null;\n}\n","supplementalCode":"","description":""}},"editResults":{"name":"editResults","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return taskAppModule.loadTaskResultData(taskResults,\"editMetaFile\");\n\n","supplementalCode":"","description":""}},"createRecipeEntries":{"name":"createRecipeEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!editResults) return null;\n\nvar combinedEntries = editResults.combinedEntries;\nvar metaFileId = editResults.metaFileEntry.Id; \n\nvar newRecipeNeeded = (combinedEntry) => ((combinedEntry.recipeEntry === undefined)&&(combinedEntry.selected));\nvar makeRecipeEntry = (combinedEntry) => (createRecipeEntry(combinedEntry,metaFileId));\n\nreturn combinedEntries.filter(newRecipeNeeded).map(makeRecipeEntry);","supplementalCode":"function createRecipeEntry(combinedEntry,metaFileId) {\n    \n    var fileEntry = combinedEntry.fileEntry;\n    var insertionInfo = combinedEntry.insertionInfo;\n    \n    var order = 0;\n    \n    var fields = {};\n    fields.ordr = order;\n    fields.meta_file_id = metaFileId;\n    fields.file_entry_id = fileEntry.Id;\n    fields.insertionInfo = insertionInfo;\n    \n    var recipeRecordInfo = micemetarDataAccess.getRecordInfo(\"recipe_entry\");\n    return micemetarDataAccess.createRecord(recipeRecordInfo,fields);\n}","description":""}},"deleteRecipeEntries":{"name":"deleteRecipeEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!editResults) return null;\n\nvar combinedEntries = editResults.combinedEntries;\n\nvar deleteRecipeNeeded = (combinedEntry) => ((combinedEntry.recipeEntry !== undefined)&&(!combinedEntry.selected));\nvar getRecipeEntry = (combinedEntry) => (combinedEntry.recipeEntry);\n\nreturn combinedEntries.filter(deleteRecipeNeeded).map(getRecipeEntry);","supplementalCode":"","description":""}},"editRecipeEntryPairs":{"name":"editRecipeEntryPairs","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!editResults) return null;\n\nvar combinedEntries = editResults.combinedEntries;\n\nvar editRecipeNeeded = (combinedEntry) => ( \n        (combinedEntry.recipeEntry !== undefined) &&\n        (combinedEntry.selected) &&\n        (combinedEntry.insertionInfo != combinedEntry.insertionInfo)\n    );\n\nreturn combinedEntries.filter(editRecipeNeeded).map(getEditRecipePair);","supplementalCode":"function getEditRecipePair(combinedEntry) {\n    var oldRecipeEntry = combinedEntry.recipeEntry;\n    var newRecipeEntry = apogee.util.jsonCopy(oldRecipeEntry);\n    newRecipeEntry.Fields.insertion_info = combinedEntry.insertionInfo;\n    return [oldRecipeEntry,newRecipeEntry];\n}","description":""}},"createMetaFileEntries":{"name":"createMetaFileEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!editResults) return null;\n\nvar output= [];\n\nif(editResults.metaFileCreated) {\n    output.push(editResults.metaFileEntry);\n}\n\nreturn output;","supplementalCode":"","description":""}}}},"loadContext":{"name":"loadContext","type":"apogee.Folder","children":{"contextControl":{"name":"contextControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var data = {};\ndata.taskList = taskList;\n\nreturn data;","supplementalCode":"","description":""}}}},"completed":{"name":"completed","type":"apogee.Folder","children":{"resetControl":{"name":"resetControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var data = {};\ndata.taskList = taskList;\nreturn data;","supplementalCode":"","description":""}}}},"activeTask":{"name":"activeTask","type":"apogee.JsonTable","updateData":{"data":"completed","description":""}},"taskList":{"name":"taskList","type":"apogee.JsonTable","updateData":{"data":["login","loadContext","loadMetaFileRecords","editMetaFile","submit","completed"],"description":""}}}},"micemetarDataAccess":{"name":"micemetarDataAccess","type":"apogee.Folder","children":{"createRecord":{"name":"createRecord","type":"apogee.FunctionTable","updateData":{"argList":["recordInfo","fieldMap"],"functionBody":"var record = {};\n\nrecord.Id = getId();\nrecord.Type = recordInfo.name;\nrecord.Fields = fieldMap;\nrecord.read_perm = READ_PERM;\nrecord.edit_perm = EDIT_PERM;\n\nreturn record;","supplementalCode":"var READ_PERM = 2;\nvar EDIT_PERM = 15;\n\nvar nextId = -1;\n\nfunction getId() {\n    return nextId--;\n}","description":"This method creates a record given the field values and record info \nfrom the data set info. It creates and ID and uses standard permissions."}},"recordsToCreateInstructions":{"name":"recordsToCreateInstructions","type":"apogee.FunctionTable","updateData":{"argList":["recordList"],"functionBody":"var instructions = [];\n\nfor(var i = 0; i < recordList.length; i++) {\n    var createRecord = recordList[i];\n    var instruction = createCreateInstruction(createRecord);\n    instructions.push(instruction);\n}\n\nreturn instructions;","supplementalCode":"","description":"This creates a list of create instructions to go along with a list of records to be created.\n\nThere is the option to assign the ID or to leave it as undefined, in which case\nan automatically incremented ID will be assigned. (For consistency in the data\nset, either all records should be preassigned or all records should be \nautomatically assigned."}},"createCommitBody":{"name":"createCommitBody","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage"],"functionBody":"var commit = {};\nvar actions = [];\n\nif(commitMessage.length === 0) throw new Error(\"Commit message missing!\");\n\ncommit.Name = dataSetInfo.name;\ncommit.Message = commitMessage;\ncommit.Actions = actions;\n\n//single action with commits\nvar action = {};\naction.Title = \"bulk create commit\";\naction.Instr = instructionList;\nactions.push(action);\n\nreturn commit","supplementalCode":"","description":"This creates a body for a commit request, given a list of instructions and a commit message."}},"createRequestOptions":{"name":"createRequestOptions","type":"apogee.FunctionTable","updateData":{"argList":["bodyJson","sessionKey"],"functionBody":"var header = {};\nheader[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\nheader.sessionKey = sessionKey;\nheader[\"proto-version\"] = \"4.0\";\nheader[\"db-version\"] = dataSetInfo.version;\n\nrequestInfo = {};\nrequestInfo.header = header;\nif(bodyJson) {\n    requestInfo.method = \"POST\";\n    requestInfo.body = JSON.stringify(bodyJson);\n}\n\nreturn requestInfo;\n","supplementalCode":"","description":"This creates the requestOptions, suitable for apogee.net.jsonRequest, to go with an type of request to the workingset (micemetarequest) server."}},"host":{"name":"host","type":"apogee.JsonTable","updateData":{"data":"http://localhost:8080/micemetarws","description":""}},"commitUrl":{"name":"commitUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvalue = host + \"/commit\";\nreturn value;\n\n","supplementalCode":"","description":""}},"requestUrl":{"name":"requestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvalue = host + \"/cannedsearch\";\nreturn value;\n\n","supplementalCode":"","description":""}},"dataSetInfo":{"name":"dataSetInfo","type":"apogee.JsonTable","updateData":{"data":{"records":{"file_entry_relation":{"idField":"file_entry_rel_id","name":"file_entry_relation","foreignList":[],"fields":[{"defaultValue":null,"name":"file_entry_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileEntry"},{"defaultValue":null,"name":"ref_entry_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileEntry"},{"defaultValue":null,"name":"relation_type","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.FileEntryRelation"},"com_file_entry":{"idField":"com_file_entry_id","name":"com_file_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"com_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.ComFile"},{"defaultValue":null,"name":"meta_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"},{"defaultValue":null,"name":"file_group","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.ComFileEntry"},"file_type":{"idField":"file_type_id","name":"file_type","foreignList":[{"remoteRecord":"file_entry","name":"file_entry_list","isUnique":false,"remoteField":"file_type_id","restrictDelete":true}],"fields":[{"defaultValue":null,"name":"file_type_name","nullOk":true,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.FileType"},"file_entry":{"idField":"file_entry_id","name":"file_entry","foreignList":[{"remoteRecord":"file_entry_relation","name":"file_entry_ref_list","isUnique":false,"remoteField":"file_entry_id","restrictDelete":true}],"fields":[{"defaultValue":null,"name":"entry_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"entry_name","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"file_type_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileType"},{"defaultValue":null,"name":"entry_section","nullOk":true,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"entry_value","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"option_name","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"entry_data","nullOk":false,"fieldClass":"org.json.JSONObject"}],"recordClass":"com.micello.micemetar.data.FileEntry"},"recipe_entry":{"idField":"recipe_entry_id","name":"recipe_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"meta_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"},{"defaultValue":null,"name":"file_entry_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileEntry"},{"defaultValue":null,"name":"insertion_info","nullOk":true,"fieldClass":"org.json.JSONObject"}],"recordClass":"com.micello.micemetar.data.RecipeEntry"},"com_file":{"idField":"com_file_id","name":"com_file","foreignList":[{"remoteRecord":"com_file_entry","name":"com_file_entry_list","isUnique":false,"remoteField":"com_file_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":null,"name":"file_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"name","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"ref","nullOk":true,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.ComFile"},"meta_file":{"idField":"meta_file_id","name":"meta_file","foreignList":[{"remoteRecord":"recipe_entry","name":"recipe_entry_list","isUnique":false,"remoteField":"meta_file_id","restrictDelete":true,"orderField":"ordr"},{"remoteRecord":"meta_ref_entry","name":"base_file_list","isUnique":false,"remoteField":"meta_file_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":null,"name":"file_type_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileType"},{"defaultValue":null,"name":"file_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"name","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.MetaFile"},"meta_ref_entry":{"idField":"meta_ref_entry_id","name":"meta_ref_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"meta_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"},{"defaultValue":null,"name":"base_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"}],"recordClass":"com.micello.micemetar.data.MetaRefEntry"}},"name":"Micemetar","version":"5.0"},"description":""}},"version":{"name":"version","type":"apogee.JsonTable","updateData":{"data":"1.6","description":""}},"createUpdateInstruction":{"name":"createUpdateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["initialRecord","targetRecord"],"functionBody":"if(initialRecord.Id != targetRecord.Id) {\n    throw new Error(\"Record ID mismatch in create update instruction for target record: \" + getRecordErrString(targetRecord));\n}\n\nif(initialRecord.Type != targetRecord.Type) {\n    throw new Error(\"Inital and target record types do not match. Target record: \" + getRecordErrString(targetRecord));\n}\n\nvar recordsDifferent = false;\n\nvar recordInfo = getRecordInfo(initialRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Update\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = initialRecord.Id;\n\ninstruction.initialReadPerm = initialRecord.read_perm;\ninstruction.initialEditPerm = initialRecord.edit_perm;\n\nif(initialRecord.readPerm != targetRecord.readPerm) {\n    instruction.targetReadPerm = targetRecord.read_perm;\n    recordsDifferent = true;\n}\n\nif(initialRecord.editPerm != targetRecord.editPerm) {\n    instruction.targetEditPerm = targetRecord.edit_perm;\n    recordsDifferent = true;\n}\n\nvar initialData = {};\ninstruction.Initial = initialData;\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    \n    var initialValue;\n    var targetValue;\n    \n    var initialValue = initialRecord.Fields[field.name];\n    var targetValue = targetRecord.Fields[field.name];\n    \n    //validate target values\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecordInfo,createRecord.Id,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(createRecordInfo,createRecord.Id,field));\n        }\n    }\n    \n    if(!fieldsMatch(initialValue,targetValue,field)) {\n        initialData[field.name] = initialValue;\n        targetData[field.name] = targetValue;\n        recordsDifferent = true;\n    }\n}\n\nif(recordsDifferent) {\n    return instruction;\n}\nelse {\n    return null;\n}\n","supplementalCode":"function fieldsMatch(initialValue,targetValue,fieldInfo) {\n    if(fieldInfo.fieldClass === \"java.lang.String\") {\n        //compare strings with \"==\"\n        return (initialValue == targetValue);\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"java.lang\")) {\n        //compare other basic values with \"===\"\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"com.micello\")) {\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONObject\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONArray\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else {\n        throw new Error(\"unrecognized field type: \" + fieldInfo.fieldClass);\n    }\n}\n\nfunction compareJsonData(a,b) {\n    var an = apogee.util.getNormalizedObjectCopy(a);\n    var bn = apogee.util.getNormalizedObjectCopy(b);\n    var aString = JSON.stringify(an);\n    var bString = JSON.stringify(bn);\n    return aString == bString;\n}\n    ","description":"This function creates an update instruction given an initial and target record. If the records are the same then NULL is returned. (No update is needed.)"}},"createCreateInstruction":{"name":"createCreateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["createRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(createRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Create\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = createRecord.Id;\n\ninstruction.targetReadPerm = createRecord.read_perm;\ninstruction.targetEditPerm = createRecord.edit_perm;\n\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var targetValue;\n    var targetValue = createRecord.Fields[field.name];\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(createRecord,field));\n        }\n    }\n    \n    targetData[field.name] = targetValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getFieldErrString":{"name":"getFieldErrString","type":"apogee.FunctionTable","updateData":{"argList":["record","fieldInfo"],"functionBody":"return getRecordErrString(record) + \" - \" + fieldInfo.name;","supplementalCode":"","description":""}},"getRecordErrString":{"name":"getRecordErrString","type":"apogee.FunctionTable","updateData":{"argList":["record"],"functionBody":"return record.Type + \" \" + record.Id;","supplementalCode":"","description":""}},"createDeleteInstruction":{"name":"createDeleteInstruction","type":"apogee.FunctionTable","updateData":{"argList":["deleteRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(deleteRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Delete\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = deleteRecord.Id;\n\ninstruction.initialReadPerm = deleteRecord.read_perm;\ninstruction.initialEditPerm = deleteRecord.edit_perm;\n\nvar initialData = {};\ninstruction.Initial = initialData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var initialValue = deleteRecord.Fields[field.name];\n    \n    initialData[field.name] = initialValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getRecordInfo":{"name":"getRecordInfo","type":"apogee.FunctionTable","updateData":{"argList":["recordType"],"functionBody":"var recordInfo = dataSetInfo.records[recordType];\n\nif(!recordInfo) {\n    throw new Error(\"Record type not found in getRecordInfo: \" + recordType);\n}\n\nreturn recordInfo;","supplementalCode":"","description":""}},"combinedEntriesToInstructionList":{"name":"combinedEntriesToInstructionList","type":"apogee.FunctionTable","updateData":{"argList":["combinedEntries"],"functionBody":"var output = [];\nfor(var key in combinedEntries) {\n    var entry = combinedEntries[key];\n    var instruction = getInstructionForCombinedEntry(entry);\n    if(instruction) {\n        output.push(instruction);\n    }\n}\n\nreturn output;","supplementalCode":"function getInstructionForCombinedEntry(combinedEntry) {\n    var newEntry = combinedEntry.newEntry;\n    var oldEntry = combinedEntry.oldEntry;\n    \n    if(newEntry) {\n        if(!oldEntry) {\n            console.log(\"Create: \" + newEntry.Id);\n            return createCreateInstruction(newEntry);\n        }\n        else {\n            //this will return null for matching records\n            console.log(\"Update(maybe): \" + newEntry.Id);\n            return createUpdateInstruction(oldEntry,newEntry);\n        }\n    }\n    else if(oldEntry) {\n        console.log(\"Delete: \" + oldEntry.Id);\n        return createDeleteInstruction(oldEntry);\n    }\n    \n    return null;\n}\n\nfunction entriesDifferent(entry1,entry2) {\n    var string1 = JSON.stringify(apogee.util.getNormalizedCopy(entry1));\n    var string2 = JSON.stringify(apogee.util.getNormalizedCopy(entry2));\n    return (string1 == string2);\n}","description":"This function takes a combined entry map of the format:\n\n{\n  \"some-identifier\":{\n    \"oldEntry\":{original record entry, if applicable},\n    \"newEntry\":{new record entry, if applicable}\n  },\n  ...\n}\n\nIt returns an instruction list.\n\n"}},"getCommitPromise":{"name":"getCommitPromise","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage","sessionKey"],"functionBody":"var commitBody = createCommitBody(instructionList,commitMessage);\nvar requestOptions = createRequestOptions(commitBody,sessionKey);\nvalue = apogee.net.jsonRequest(commitUrl,requestOptions);\nreturn value;","supplementalCode":"","description":""}},"getRequestPromise":{"name":"getRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nvalue = apogee.net.jsonRequest(requestUrl,requestOptions);\nreturn value;","supplementalCode":"","description":""}}}}}}},"components":{"taskResults":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":34,"y":95}},"children":{"submit":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":558,"height":276},"posInfo":{"x":651,"y":433},"state":0,"viewType":"JSON"}},"editMetaFile":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":620,"height":261},"posInfo":{"x":430,"y":294},"state":0,"viewType":"JSON"}},"loadMetaFileRecords":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":421,"height":217},"posInfo":{"x":69,"y":288},"state":0,"viewType":"JSON"}},"login":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":743,"height":276},"posInfo":{"x":531,"y":31},"state":0,"viewType":"JSON"}},"loadContext":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":335,"height":125},"posInfo":{"x":42,"y":70},"state":0,"viewType":"JSON"}},"completed":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":75,"y":451},"state":0,"viewType":"Text"}}}},"tasks":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":37,"y":37}},"children":{"login":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":79,"y":21}},"children":{"loginUrl":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":463,"height":86},"posInfo":{"x":26,"y":27},"state":0,"viewType":"Text"}},"loginControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":404,"height":129},"posInfo":{"x":24,"y":167},"state":0,"viewType":"Output"},"resource":{"html":"","css":"","setData":"this.loginUrl = data;","constructorAddition":"\n\n//this uses the updated version of test authorization that takes and returns a JSON\nthis.onClick = function() {\n    \n    //on click\n    var bodyJson = {};\n    bodyJson.userName = resource.userInput.value;\n    bodyJson.password = resource.passwordInput.value;\n    \n    //cleaer password field\n    resource.passwordInput.value = \"\";\n    \n    var options = {};\n    options.body = JSON.stringify(bodyJson);\n    options.method = \"POST\";\n    \n    var requestPromise = apogee.net.jsonRequest(this.loginUrl,options);\n    \n    //set the response\n    mode.getMessenger().asynchDataUpdate(\"sessionResponse\",requestPromise);\n}","init":"\nvar label1 = document.createElement(\"label\");\nlabel1.for = \"userInput\";\nlabel1.innerHTML = \"User:\"\nelement.appendChild(label1);\n\nvar input1 = document.createElement(\"input\");\ninput1.id = \"userInput\";\nresource.userInput = input1;\nelement.appendChild(input1);\n\nelement.appendChild(document.createElement(\"br\"));\n\nvar label2 = document.createElement(\"label\");\nlabel2.for = \"passwordInput\";\nlabel2.innerHTML = \"Password:\"\nelement.appendChild(label2);\n\nvar input2 = document.createElement(\"input\");\ninput2.id = \"passwordInput\";\ninput2.type = \"password\";\nresource.passwordInput = input2;\nelement.appendChild(input2);\n\nelement.appendChild(document.createElement(\"br\"));\n\nvar button = document.createElement(\"button\");\nbutton.innerHTML = \"Login\";\nelement.appendChild(button);\n\nvar instance = this;\nbutton.onclick = function() {\n    instance.onClick();\n}\n\n\n"}},"sessionResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":697,"height":121},"posInfo":{"x":469,"y":169},"state":0,"viewType":"JSON"}},"taskResult":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":556,"height":338},"posInfo":{"x":38,"y":352},"state":0,"viewType":"Text"}}}},"loadMetaFileRecords":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":76,"y":136}},"children":{"fileTypeList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":418,"height":325},"posInfo":{"x":243,"y":100},"state":-1,"viewType":"Text"}},"metaFileList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":1003,"height":289},"posInfo":{"x":37,"y":98},"state":-1,"viewType":"Text"}},"metaFileSelector":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":411,"height":171},"posInfo":{"x":50,"y":238},"state":0,"viewType":"Output"},"resource":{"html":"<input type=\"radio\" value=\"create\" name=\"createUpdate\" id=\"load_createRadio\">Create</input>\n<input type=\"radio\" value=\"update\" name=\"createUpdate\" id=\"load_updateRadio\">Update</input>\n<br><br>\n<select id=\"load_metaFileSelect\"></select>\n<select id=\"load_fileTypeSelect\"></select>\n<br><br>\n<div id=\"load_metaFilePanel\">\nMeta File Name: <input type=\"text\" id=\"load_metaFileNameInput\"></input>\n<br><br>\n</div>\n<input type=\"button\" value=\"Submit\" id=\"load_submitButton\"></input>\n<input type=\"button\" value=\"Cancel\" id=\"load_cancelButton\"></input>","onLoad":"this.createRadio = document.getElementById(\"load_createRadio\");\nthis.updateRadio = document.getElementById(\"load_updateRadio\");\nthis.selectMetaFileElement = document.getElementById(\"load_metaFileSelect\");\nthis.selectFileTypeElement = document.getElementById(\"load_fileTypeSelect\");\nthis.metaFilePanel = document.getElementById(\"load_metaFilePanel\");\nthis.metaFileNameInput = document.getElementById(\"load_metaFileNameInput\");\nthis.submitButton = document.getElementById(\"load_submitButton\");\nthis.cancelButton = document.getElementById(\"load_cancelButton\");\n\nvar instance = this;\nthis.submitButton.onclick = function() {\n    instance.onSubmitClick();\n}\nthis.cancelButton.onclick = function() {\n    instance.onCancelClick();\n}\n\nvar onRadioClick = function() {\n    instance.onRadioClick();\n}\n\nthis.createRadio.onclick = onRadioClick;\nthis.updateRadio.onclick = onRadioClick;\n\nthis.initialized = true;","setData":"if(!data) return;\nif(!this.initialized) return;\n\nthis.editExisting = data.editExisting;\n\n//needed to pass to app framework to select next or previous task\nthis.taskList = data.taskList;\n\nvar INVALID_ID = 0;\n\nif(this.selectMetaFileElement) {\n\n    apogeeapp.ui.removeAllChildren(this.selectMetaFileElement);\n    \n    //add a dummy entry\n    var option = document.createElement(\"option\");\n    option.text = \"<none selected>\";\n    \n    option.value = INVALID_ID;\n    if(INVALID_ID == data.currentMetaFileId) option.selected = true;\n    this.selectMetaFileElement.add(option);\n    \n    for(var fileDesc in data.metaFiles) {\n        var id = data.metaFiles[fileDesc];\n        var option = document.createElement(\"option\");\n        option.text = fileDesc;\n        option.value = id;\n        if(id == data.currentMetaFileId) option.selected = true;\n        this.selectMetaFileElement.add(option);\n    }\n}\n\nif(this.selectFileTypeElement) {\n    console.log(\"current id: \" + data.currentFileTypeId);\n\n    apogeeapp.ui.removeAllChildren(this.selectFileTypeElement);\n    \n    //add a dummy entry\n    var option = document.createElement(\"option\");\n    option.text = \"<none selected>\";\n    option.value = INVALID_ID;\n    if(INVALID_ID == data.currentFileTypeId) option.selected = true;\n    console.log(\"adding id: \" + INVALID_ID);\n    \n    this.selectFileTypeElement.add(option);\n    \n    for(var fileDesc in data.fileTypes) {\n        var id = data.fileTypes[fileDesc];\n        var option = document.createElement(\"option\");\n        option.text = fileDesc;\n        option.value = id;\n        if(id == data.currentFileTypeId) option.selected = true;\n        console.log(\"adding id: \" + id);\n        this.selectFileTypeElement.add(option);\n    }\n}\n\nthis.updateUiForCreateUpdate(data.editExisting);\n","constructorAddition":"\nthis.onSubmitClick = function() {\n    \n    var selectElement = this.editExisting ? this.selectMetaFileElement : this.selectFileTypeElement;\n    \n    if(!selectElement) {\n        alert(\"Error; UI not initialized\");\n        return;\n    }\n    \n    if(selectElement.length === 0) {\n        alert(\"Invalid selection!\");\n        return;\n    }\n    \n    var selectedIdString = selectElement.value;\n    if(!isFinite(selectedIdString)) {\n        alert(\"Invalid selection!\");\n        return;\n    }\n    var selectedId = Number(selectedIdString);\n\n    if(!this.editExisting) {\n        var metaFileName = this.metaFileNameInput.value.trim();\n        if((!metaFileName)||(metaFileName.length === 0)) {\n            alert(\"Invalid meta file name!\");\n            return;\n        }\n    }\n    \n    var fileSelection = {};\n    fileSelection.editExisting = this.editExisting;\n    if(this.editExisting) {\n        fileSelection.metaFileId = selectedId;\n    }\n    else {\n        fileSelection.fileTypeId = selectedId;\n        fileSelection.metaFileName = metaFileName;\n    }\n    \n    taskAppModule.taskCompleted(mode.getMessenger(),\"loadMetaFileRecords\",this.taskList,fileSelection);\n}\n\nthis.onCancelClick = function() {\n    taskAppModule.taskCanceled(mode.getMessenger(),\"loadMetaFileRecords\",this.taskList);\n}\n\nthis.onRadioClick = function() {\n    var editExisting = this.updateRadio.checked;\n    this.updateUiForCreateUpdate(editExisting);\n}\n\nthis.updateUiForCreateUpdate = function(editExisting) {\n    this.editExisting = editExisting;\n    \n    if(this.selectFileTypeElement) {\n        this.selectFileTypeElement.style.display = editExisting ? \"none\" : \"\";\n    }\n    if(this.selectMetaFileElement) {\n        this.selectMetaFileElement.style.display = editExisting ? \"\" : \"none\";\n    }\n    if(this.metaFilePanel) {\n        this.metaFilePanel.style.display = editExisting ? \"none\" : \"\";\n    }\n    \n    var createRadioSelected = !editExisting;\n    var updateRadioSelected = editExisting;\n    \n    if((this.createRadio)&&(this.createRadio.checked != createRadioSelected)) {\n        this.createRadio.checked = createRadioSelected;\n    }\n    if((this.updateRadio)&&(this.updateRadio.checked != updateRadioSelected)) {\n        this.updateRadio.checked = updateRadioSelected;\n    }\n}\n\n"}},"INVALID_ID":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":220,"height":70},"posInfo":{"x":1033,"y":27},"state":0,"viewType":"Text"}},"context":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":221,"height":39},"posInfo":{"x":244,"y":33},"state":-1,"viewType":"Text"}},"sessionKey":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":528,"height":40},"posInfo":{"x":29,"y":38},"state":-1,"viewType":"Text"}},"getFileTypeName":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":593,"height":400},"posInfo":{"x":629,"y":91},"state":-1,"viewType":"Code"}}}},"editMetaFile":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":76,"y":184}},"children":{"selectEntriesControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":678,"height":675},"posInfo":{"x":149,"y":37},"state":0,"viewType":"Output"},"resource":{"html":"<table>\n     <tr>\n        <td colspan=\"3\">\n            <input type=\"button\" value=\">> update lists <<\" id=\"edit_updateButton\">\n        </td>\n    </tr>\n    <tr>\n        <td>\n            <h2>Selected</h2>\n        </td>\n        <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>\n        <td>\n            <h2>Available</h2>\n        </td>\n    </tr>\n    <tr>\n        <td class=\"model_listCell\">\n            <div id=\"edit_selectedCell\" class=\"model_displayDiv\"></div>\n        </td>\n        <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>\n        <td class=\"model_listCell\">\n            <div id=\"edit_availableCell\" class=\"model_displayDiv\"></div>\n        </td>\n    </tr>\n    <tr>\n        <td colspan=\"3\">\n            <input type=\"button\" value=\"Commit\" id=\"edit_commitButton\">\n            &nbsp;\n            <input type=\"button\" value=\"Reset\" id=\"edit_resetButton\">\n            &nbsp;\n            <input type=\"button\" value=\"Cancel\" id=\"edit_cancelButton\">\n        </td>\n    </tr>\n</table>\n","css":".model_listCell {\n    vertical-align: top;\n    border: 1px solid black;\n}\n.model_displayDiv {\n    height: 500px;\n    overflow: auto;   \n}","setData":"if(!data) return;\n\nthis.taskList = data.taskList;\n\n//store the data if we are not ready yet\nif(!this.initialized) {\n    this.cachedData = data;\n    return;\n}\n\n//set data\nthis.combinedEntries = data.combinedEntries;\nthis.fileEntries = data.fileEntries;\nthis.initialRecipeEntries = data.initialRecipeEntries;\nthis.activeMetaFileEntry = data.activeMetaFileEntry;\nthis.metaFileCreated = data.metaFileCreated;\n\n//create combined entries\nthis.createCombinedEntries(data.initialRecipeEntries,data.fileEntries);\n\n//load ui\nthis.loadEntries();\n\n\n\n","constructorAddition":"this.initialized = false;\n\nthis.combinedEntries = null\n\nthis.fileEntries = null;\nthis.initialRecipeEntries = null;\nthis.activeMetaFileEntry = null;\nthis.metaFileCreated = false;\n\nthis.selectedCell = null;\nthis.availableCell = null;\n\nthis.entryCellInfos = null;\n\nthis.onUpdateClicked = function() {\n    var count = 0;\n    var toggleCheckedEntry = (entryInfo,index) => {\n        if(entryInfo.checkbox.checked) {\n            entryInfo.combinedEntry.selected = !entryInfo.combinedEntry.selected;\n            count++;\n        }\n    }\n    \n    this.entryCellInfos.forEach(toggleCheckedEntry);\n    \n    if(count > 0) {\n        this.loadEntries();\n    }\n}\n\nthis.onCommitClicked = function() {\n    var data = {};\n    data.combinedEntries = this.combinedEntries;\n    data.metaFileEntry = this.activeMetaFileEntry;\n    data.metaFileCreated = this.metaFileCreated;\n    \n    taskAppModule.taskCompleted(mode.getMessenger(),\"editMetaFile\",this.taskList,data);\n}\n\nthis.onResetClicked = function() {\n    this.createCombinedEntries(this.initialRecipeEntries,this.fileEntries);\n}\n\nthis.onCancelClicked = function() {\n    taskAppModule.taskCanceled(mode.getMessenger(),\"editMetaFile\",this.taskList);\n}\n\n//=====================================\n// Initialize Data Methods\n//=====================================\n\nthis.createCombinedEntries = function(initialRecipeEntries,fileEntries) {\n    \n    var newCombinedEntries = [];\n    \n    var tempMap = {};\n    \n    var addFileEntryToMap = (record) => {\n        var combinedEntry = {}\n        combinedEntry.fileEntry = record;\n        combinedEntry.selected = false;\n        tempMap[record.Id] = combinedEntry;\n        newCombinedEntries.push(combinedEntry);\n    }\n    fileEntries.forEach(addFileEntryToMap);\n\n    var addRecipeEntryToMap = (record) => {\n        var combinedEntry = tempMap[record.Fields.file_entry_id];\n        if(combinedEntry === undefined) {\n            throw new Error(\"file entry not found: fileEntryId=\" + record.Fields.file_entry_id);\n        }\n        combinedEntry.recipeEntry = record;\n        combinedEntry.insertionInfo = record.Fields.insertion_info;\n        combinedEntry.selected = true;\n    }\n    initialRecipeEntries.forEach(addRecipeEntryToMap);\n    \n    this.combinedEntries = newCombinedEntries;\n}\n\n//=====================================\n// Load Methods\n//=====================================\n\nthis.loadEntries = function() {\n    apogeeapp.ui.removeAllChildren(this.selectedCell);\n    apogeeapp.ui.removeAllChildren(this.availableCell);\n    this.entryCellInfos = [];\n    \n    var addCombinedEntry = (combinedEntry) => {\n        var entryCellInfo = this.createCellInfo(combinedEntry);\n        if(combinedEntry.selected) {\n            this.selectedCell.appendChild(entryCellInfo.element);\n        }\n        else {\n            this.availableCell.appendChild(entryCellInfo.element);\n        }\n        this.entryCellInfos.push(entryCellInfo);\n    }\n\n    this.combinedEntries.forEach(addCombinedEntry);\n}\n\nthis.createCellInfo = function(combinedEntry) {\n    \n    var name = combinedEntry.fileEntry.Fields.entry_name + \" - \" + combinedEntry.fileEntry.Fields.option_name;\n    \n    var div = document.createElement(\"div\");\n    \n    var checkbox = document.createElement(\"input\");\n    checkbox.setAttribute(\"type\", \"checkbox\");\n    div.appendChild(checkbox);\n    \n    var text = document.createTextNode(name);\n    div.appendChild(text);\n    \n    //tie the div to the combined entry\n    var entryCellInfo = {};\n    entryCellInfo.combinedEntry = combinedEntry;\n    entryCellInfo.element = div;\n    entryCellInfo.checkbox = checkbox;\n    \n    return entryCellInfo;\n}\n\n//=================================\n// Update methods\n//=================================\n\n//shared functions between ui elements - we need these\n//because for now there is no way to add shared ui code.\n\nvar taskCompleted = function(messenger,currentTask,nextTask,data) {\n    var taskResult = {};\n    taskResult.state = \"SUCCESS\";\n    taskResult.data = data;\n    \n    var updateInfo = [];\n    updateInfo.push([\"taskResults.\" + currentTask,taskResult]);\n    updateInfo.push([\"tasks.activeTask\",nextTask]);\n    messenger.compoundDataUpdate(updateInfo);\n}\n\nvar taskCanceled = function(messenger,currentTask,prevTask) {\n    var clearData = {};\n    clearData.state = \"INCOMPLETE\";\n    \n    var updateInfo = [];\n    updateInfo.push([\"taskResults.\" + currentTask,clearData]);\n    updateInfo.push([\"taskResults.\" + prevTask,clearData]);\n    updateInfo.push([\"tasks.activeTask\",prevTask]);\n    messenger.compoundDataUpdate(updateInfo);\n}\n","onLoad":"if(!this.initiliazed) {\n    this.selectedCell = document.getElementById(\"edit_selectedCell\");\n    this.availableCell = document.getElementById(\"edit_availableCell\");\n    \n    this.updateButton = document.getElementById(\"edit_updateButton\");\n    \n    this.commitButton = document.getElementById(\"edit_commitButton\");\n    this.resetButton = document.getElementById(\"edit_resetButton\");\n    this.cancelButton = document.getElementById(\"edit_cancelButton\");\n    \n    var instance = this;\n    \n    this.updateButton.onclick = function() {\n        instance.onUpdateClicked();\n    }\n    this.commitButton.onclick = function() {\n        instance.onCommitClicked();\n    }\n    this.resetButton.onclick = function() {\n        instance.onResetClicked();\n    }\n    this.cancelButton.onclick = function() {\n        instance.onCancelClicked();\n    }\n    \n    this.initialized = true;\n    \n    if(this.cachedData !== undefined) {\n        console.log(\"using cached data!\");\n        this.setData(this.cachedData);\n        this.cachedData = undefined;\n    }\n}"}},"fileTypeEntryList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":1082,"height":473},"posInfo":{"x":29,"y":143},"state":-1,"viewType":"Text"}},"metaFileResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":799,"height":324},"posInfo":{"x":28,"y":101},"state":-1,"viewType":"Text"}},"availableFileEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":743,"height":320},"posInfo":{"x":37,"y":299},"state":-1,"viewType":"Text"}},"existingMetaFileEntry":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":488,"height":259},"posInfo":{"x":36,"y":215},"state":-1,"viewType":"Text"}},"activeMetaFileEntry":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":734,"height":305},"posInfo":{"x":34,"y":345},"state":-1,"viewType":"Text"}},"existingRecipeEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":592,"height":407},"posInfo":{"x":36,"y":256},"state":-1,"viewType":"Formula"}},"fileSelection":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":542,"height":336},"posInfo":{"x":43,"y":386},"state":-1,"viewType":"Formula"}},"sessionKey":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":553,"height":300},"posInfo":{"x":296,"y":325},"state":0,"viewType":"Formula"}},"context":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":585,"height":300},"posInfo":{"x":237,"y":18},"state":-1,"viewType":"Formula"}}}},"submit":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":72,"y":239}},"children":{"submitControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":377,"height":254},"posInfo":{"x":12,"y":363},"state":0,"viewType":"Output"},"resource":{"html":"<textarea id=\"submit_messageInput\"></textarea><br>\n<input type=\"button\" id=\"submit_commitButton\" value=\"Commit\"></input>\n<input type=\"button\" id=\"submit_cancelButton\" value=\"Cancel\"></input>","onLoad":"this.submitButton = document.getElementById(\"submit_commitButton\");\nthis.cancelButton = document.getElementById(\"submit_cancelButton\");\nthis.messageInput = document.getElementById(\"submit_messageInput\");\nthis.initialized = true;\n\nvar instance = this;\nthis.submitButton.onclick = function() {\n    instance.onSubmit();\n}\nthis.cancelButton.onclick = function() {\n    instance.onCancel();\n}","constructorAddition":"this.messageInput = null;\nthis.submitButton = null;\nthis.cancelButton = null;\nthis.initialized = false;\n\nthis.onSubmit = function() {\n    \n    if(!this.initialized) {\n        return;\n    }\n    \n    var commitMessage = this.messageInput.value.trim();\n    if((!commitMessage)||(commitMessage.length === 0)) {\n        alert(\"You must enter a commit message!\");\n        return;\n    }\n    this.messageInput.value = \"\";\n    \n    if((!this.instructionList)||(this.instructionList.length === 0)) {\n        alert(\"There is no data to commit.\");\n        return;\n    }\n    \n    var updateInfo = [];\n    updateInfo.push([ \"commitMessage\",commitMessage]);\n    updateInfo.push([\"liveInstructionList\",this.instructionList]);\n    mode.getMessenger().compoundDataUpdate(updateInfo,true);\n}\n\nthis.onCancel = function() {\n    mode.getMessenger().dataUpdate(\"taskResults.editMetaFile\",\"\");\n}","setData":"this.instructionList = data;","css":"#submit_messageInput {\n    height: 200px;\n    width: 300px;\n}"}},"instructionList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":910,"height":486},"posInfo":{"x":415,"y":245},"state":-1,"viewType":"Text"}},"commitResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":319,"height":123},"posInfo":{"x":683,"y":418},"state":0,"viewType":"JSON"}},"commitMessage":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":271,"height":99},"posInfo":{"x":707,"y":76},"state":0,"viewType":"Text"}},"liveInstructionList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":315,"height":124},"posInfo":{"x":698,"y":239},"state":0,"viewType":"JSON"}},"taskResult":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":289,"height":119},"posInfo":{"x":681,"y":600},"state":0,"viewType":"Text"}},"sessionKey":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":830,"height":300},"posInfo":{"x":33,"y":24},"state":-1,"viewType":"Formula"}},"editResults":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":681,"height":523},"posInfo":{"x":33,"y":87},"state":-1,"viewType":"Formula"}},"createRecipeEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":804,"height":474},"posInfo":{"x":422,"y":69},"state":-1,"viewType":"Formula"}},"deleteRecipeEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":948,"height":470},"posInfo":{"x":418,"y":171},"state":-1,"viewType":"Formula"}},"editRecipeEntryPairs":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":938,"height":404},"posInfo":{"x":413,"y":121},"state":-1,"viewType":"Formula"}},"createMetaFileEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":485,"height":216},"posInfo":{"x":416,"y":22},"state":-1,"viewType":"Formula"}}}},"loadContext":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":82,"y":74}},"children":{"contextControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":1013,"height":545},"posInfo":{"x":52,"y":47},"state":0,"viewType":"Output"},"resource":{"html":"Context: <input type=\"text\" id=\"context_text\"></input>\n<br><br>\n<input type=\"button\" id=\"context_submit\" value=\"Submit\"></input>\n<input type=\"button\" id=\"context_newlogin\" value=\"New Login\"></input>","onLoad":"this.textInput = document.getElementById(\"context_text\");\nthis.submitButton = document.getElementById(\"context_submit\");\nthis.newLoginButton = document.getElementById(\"context_newlogin\");\nthis.initialized = true;\n\nvar instance = this;\nthis.submitButton.onclick = function() {\n    instance.onSubmit();\n}\nthis.newLoginButton.onclick = function() {\n    instance.onNewLogin();\n}","constructorAddition":"this.textInput = null;\nthis.submitButton = null;\nthis.newLogingButton = null;\nthis.initialized = false;\n\nthis.onSubmit = function() {\n    if(!this.initialized) return;\n    \n    var context = this.textInput.value.trim();\n    if(context.length === 0) {\n        alert(\"Invalid context value.\");\n        return;\n    }\n    \n    var data = {}\n    data.context = context;\n    \n    taskAppModule.taskCompleted(mode.getMessenger(),\"loadContext\",this.taskList,data);\n}\n\nthis.onNewLogin = function() {\n    taskAppModule.taskCanceled(mode.getMessenger(),\"loadContext\",this.taskList);\n}\n\n","setData":"this.taskList = data.taskList;"}}}},"completed":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":74,"y":284}},"children":{"resetControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":343,"height":54},"posInfo":{"x":75,"y":75},"state":0,"viewType":"Output"},"resource":{"html":"\n<input type=\"button\" id=\"completed_reset\" value=\"Reset\"></input>","onLoad":"this.resetButton = document.getElementById(\"completed_reset\");\nthis.initialized = true;\n\nvar instance = this;\nthis.resetButton.onclick = function() {\n    instance.onReset();\n}","constructorAddition":"this.onReset = function() {\n    //clear all\n    taskAppModule.clearTasks(mode.getMessenger(),this.taskList);\n}","setData":"this.taskList = data.taskList;"}}}},"activeTask":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":351,"y":197},"state":0,"viewType":"Text"}},"taskList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":957,"y":48},"state":0,"viewType":"Text"}}}},"micemetarDataAccess":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":216,"y":34}},"children":{"createRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":560,"height":321},"posInfo":{"x":32,"y":389},"state":-1,"viewType":"Code"}},"recordsToCreateInstructions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":834,"height":391},"posInfo":{"x":30,"y":472},"state":-1,"viewType":"Code"}},"createCommitBody":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":568,"height":400},"posInfo":{"x":629,"y":225},"state":-1,"viewType":"Code"}},"createRequestOptions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":523,"height":254},"posInfo":{"x":822,"y":379},"state":-1,"viewType":"Code"}},"host":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":353,"height":71},"posInfo":{"x":16,"y":6},"state":-1,"viewType":"Text"}},"commitUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":433,"height":107},"posInfo":{"x":14,"y":98},"state":-1,"viewType":"Text"}},"requestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":450,"height":68},"posInfo":{"x":14,"y":57},"state":-1,"viewType":"Formula"}},"dataSetInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":882,"height":611},"posInfo":{"x":44,"y":575},"state":0,"viewType":"JSON"}},"version":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":197,"height":91},"posInfo":{"x":523,"y":367},"state":0,"viewType":"Text"}},"createUpdateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":886,"height":655},"posInfo":{"x":36,"y":248},"state":-1,"viewType":"Code"}},"createCreateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":994,"height":643},"posInfo":{"x":35,"y":209},"state":-1,"viewType":"Code"}},"getFieldErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":512,"height":68},"posInfo":{"x":761,"y":616},"state":-1,"viewType":"Code"}},"getRecordErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":81},"posInfo":{"x":762,"y":664},"state":-1,"viewType":"Code"}},"createDeleteInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":678,"height":540},"posInfo":{"x":36,"y":289},"state":-1,"viewType":"Code"}},"getRecordInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":480,"height":400},"posInfo":{"x":818,"y":427},"state":-1,"viewType":"Code"}},"combinedEntriesToInstructionList":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":721,"height":524},"posInfo":{"x":31,"y":516},"state":-1,"viewType":"Private"}},"getCommitPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":741,"height":400},"posInfo":{"x":374,"y":75},"state":-1,"viewType":"Code"}},"getRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":810,"height":400},"posInfo":{"x":376,"y":28},"state":-1,"viewType":"Code"}}}}}}