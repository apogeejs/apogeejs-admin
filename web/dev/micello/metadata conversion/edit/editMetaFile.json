{"fileType":"apogee workspace","jsLinks":["http://eng.micello.com/apogee/javascript/taskAppModule.js","http://eng.micello.com/apogee/javascript/configurableForm.js"],"cssLinks":["http://eng.micello.com/apogee/javascript/configurableForm.css"],"workspace":{"fileType":"apogee workspace","version":0.2,"data":{"name":"editMetaData","type":"apogee.Folder","children":{"tasks":{"name":"tasks","type":"apogee.Folder","children":{"login":{"name":"login","type":"apogee.Folder","children":{"loginUrl":{"name":"loginUrl","type":"apogee.JsonTable","updateData":{"data":"http://eng.micello.com/TestAuthorization/loginjson","description":""}},"loginControl":{"name":"loginControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return loginUrl;","supplementalCode":"","description":""}},"sessionResponse":{"name":"sessionResponse","type":"apogee.JsonTable","updateData":{"data":"","description":""}},"taskResult":{"name":"taskResult","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\nvar sessionKey;\nif(sessionResponse) {\n    if(sessionResponse.responseCode === 1) {\n        data = {};\n        data.sessionKey = sessionResponse.sessionKey;\n        output.data = data;\n        taskAppModule.taskCompleted(apogeeMessenger,[\"login\"],[\"switcher\"],data);\n        return \"SUCCESS\";\n    }\n    else {\n        alert(\"There was an error: \" + JSON.stringify(sessionResponse));\n        return \"ERROR\";\n    }\n}\nelse {\n    return \"INCOMPLETE\";\n}","supplementalCode":"","description":""}},"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":{"valid":false,"data":null},"description":""}},"state":{"name":"state","type":"apogee.JsonTable","updateData":{"data":{"active":true,"previousTask":[]},"description":""}}}},"submit":{"name":"submit","type":"apogee.Folder","children":{"submitControl":{"name":"submitControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var data = {};\ndata.instructionList = instructionList;\ndata.previousTask = state.previousTask;\n\nreturn data;","supplementalCode":"","description":""}},"commitResponse":{"name":"commitResponse","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((!liveInstructionList)||(liveInstructionList.length == 0)) {\n    return null; \n}\n\nreturn micemetarDataAccess.getCommitPromise(liveInstructionList,commitMessage,sessionKey);","supplementalCode":"","description":""}},"commitMessage":{"name":"commitMessage","type":"apogee.JsonTable","updateData":{"data":null,"description":""}},"liveInstructionList":{"name":"liveInstructionList","type":"apogee.JsonTable","updateData":{"data":null,"description":""}},"taskResult":{"name":"taskResult","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var resultValue;\n\nvar taskResult = {};\nif((!liveInstructionList)||(!commitResponse)) {\n    return \"WAITING\";\n}\nelse if(commitResponse.success === true) {\n    data = {};\n    data.commitResponse = commitResponse;\n    taskAppModule.taskCompleted(apogeeMessenger,[\"submit\"],[\"completed\"],data);\n    resultValue = \"SUCCESS\";\n}\nelse {\n    alert(\"Error making commit: \" + commitResponse.msg);\n    resultValue = \"ERROR\";\n}\n\n//for error or success - clear the commit request\nvar updateInfo = [];\nupdateInfo.push([\"liveInstructionList\",null]);\nupdateInfo.push([\"commitMessage\",null]);\napogeeMessenger.compoundDataUpdate(updateInfo);\n    \nreturn resultValue;","supplementalCode":"","description":""}},"sessionKey":{"name":"sessionKey","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return getSessionKey();","supplementalCode":"","description":""}},"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":{"valid":false,"data":null},"description":""}},"state":{"name":"state","type":"apogee.JsonTable","updateData":{"data":{"active":false,"previousTask":null},"description":""}},"instructionList":{"name":"instructionList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!state.active) return null;\n\nvar previousTask;\nswitch(state.previousTask[0]) {\n    case \"editMeta\":\n        if(editMeta.editMetaFile.result.valid) {\n            return editMeta.editPostProcess.instructionList;   \n        }\n        else {\n            return null;\n        }\n        break;\n        \n    case \"editCom\":\n        if(editCom.editComFile.result.valid) {\n            return editCom.editPostProcess.instructionList;   \n        }\n        else {\n            return null;\n        }\n        break;\n        \n    case \"editEntry\":\n        previousTask = editEntry.createInstructionList;\n        break;\n        \n    default:\n        console.log(\"Unknown task: \" + JSON.stringify(state.previousTask));\n        return;\n}\n","supplementalCode":"","description":""}}}},"completed":{"name":"completed","type":"apogee.Folder","children":{"resetControl":{"name":"resetControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return submit.result;","supplementalCode":"","description":""}},"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":{"valid":false,"data":null},"description":""}},"state":{"name":"state","type":"apogee.JsonTable","updateData":{"data":{"active":false,"previousTask":null},"description":""}}}},"editMeta":{"name":"editMeta","type":"apogee.Folder","children":{"editMetaFile":{"name":"editMetaFile","type":"apogee.Folder","children":{"selectEntriesControl":{"name":"selectEntriesControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if( (!activeMetaFileEntry) ||\n    (!existingRecipeEntries) ||\n    (!availableFileEntries) ||\n    (!fileSelection)) {\n    return null;\n}\n\nvar data = {};\ndata.initialRecipeEntries = existingRecipeEntries;\ndata.fileEntries = availableFileEntries;\ndata.activeMetaFileEntry = activeMetaFileEntry;\ndata.metaFileCreated = !fileSelection.editExisting;\ndata.metaFileType = metaFileType;\n\ndata.insertionInfoOptions = insertionInfoOptions;\n\nreturn data;","supplementalCode":"","description":""}},"fileTypeEntryList":{"name":"fileTypeEntryList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!sessionKey) return null;\nif(!fileSelection)  return null;\n\nvar fileTypeId;\nif(fileSelection.editExisting) {\n    if(existingMetaFileEntry) {\n        fileTypeId = existingMetaFileEntry.Fields.file_type_id;\n    }\n    else {\n        return null;\n    }\n}\nelse {\n    fileTypeId = fileSelection.fileTypeId;\n}\n\nvar searchDef = {};\nsearchDef.search = \"file_type_entries\";\nsearchDef.id = fileTypeId;\n\nreturn micemetarDataAccess.getRequestPromise(searchDef,sessionKey);\n\n","supplementalCode":"","description":""}},"metaFileResponse":{"name":"metaFileResponse","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!sessionKey) return null;\nif(!fileSelection) return null;\n\n\nif(fileSelection.editExisting) {\n    var searchDef = {};\n    searchDef.search = \"meta_file_short\";\n    searchDef.id = fileSelection.metaFileId;\n    return micemetarDataAccess.getRequestPromise(searchDef,sessionKey);\n}\nelse {\n    return null;\n}\n\n\n\n\n\n","supplementalCode":"","description":""}},"availableFileEntries":{"name":"availableFileEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((!fileTypeEntryList)||(!fileTypeEntryList.success)) return null;\n\nvar isFileEntry = (record) => (record.Type == \"file_entry\");\nreturn fileTypeEntryList.data.Records.filter(isFileEntry);","supplementalCode":"","description":""}},"existingMetaFileEntry":{"name":"existingMetaFileEntry","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!metaFileResponse) {\n    return null;\n}\n\nif(!metaFileResponse.success) {\n    throw new Error(\"Meta File request error\");\n}\n\nif(metaFileResponse.data.Response.length === 0) {\n    throw new Error(\"Meta file not found\");\n}\n\nreturn metaFileResponse.data.Response[0];","supplementalCode":"","description":""}},"activeMetaFileEntry":{"name":"activeMetaFileEntry","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!fileSelection) return null;\n\nif(fileSelection.editExisting) {\n    if(!metaFileResponse) return null;\n    \n    return existingMetaFileEntry;\n}\nelse {\n    var fields = {};\n    fields.name = fileSelection.metaFileName;\n    fields.file_type_id = fileSelection.fileTypeId;\n    fields.file_context = context;\n\n    return micemetarDataAccess.createRecord(\"meta_file\",fields);\n}\n","supplementalCode":"","description":""}},"existingRecipeEntries":{"name":"existingRecipeEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!metaFileResponse) {\n    //empty list\n    return [];\n}\n\nif(!metaFileResponse.success) {\n    throw new Error(\"Error loading meta file records: \" + loadMetaFileRecords.meatFileResponse.msg);\n}\n\nvar isRecipeEntry = (record) => (record.Type == \"recipe_entry\");\n\nreturn metaFileResponse.data.Records.filter(isRecipeEntry);\n","supplementalCode":"","description":""}},"fileSelection":{"name":"fileSelection","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(selectMetaFile.result.valid) {\n    return selectMetaFile.result.data;\n}\nelse {\n    return null;\n}\n","supplementalCode":"","description":""}},"sessionKey":{"name":"sessionKey","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return getSessionKey();","supplementalCode":"","description":""}},"context":{"name":"context","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return getMetaContext();","supplementalCode":"","description":""}},"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":{"valid":false,"data":null},"description":""}},"state":{"name":"state","type":"apogee.JsonTable","updateData":{"data":{"active":false,"previousTask":null},"description":""}},"insertionInfoOptions":{"name":"insertionInfoOptions","type":"apogee.JsonTable","updateData":{"data":{"themeRules":[{"title":"Priority 0","insertionInfo":{"orderedEntry":0}},{"title":"Priority 1","insertionInfo":{"orderedEntry":1}},{"title":"Priority 2","insertionInfo":{"orderedEntry":2}},{"title":"Priority 3","insertionInfo":{"orderedEntry":3}},{"title":"Priority 4","insertionInfo":{"orderedEntry":4}},{"title":"Priority 5","insertionInfo":{"orderedEntry":5}}],"default":[{"title":"","insertionInfo":null}]},"description":""}},"metaFileType":{"name":"metaFileType","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(activeMetaFileEntry) {\n    return getFileTypeName(activeMetaFileEntry.Fields.file_type_id);\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}}}},"selectMetaFile":{"name":"selectMetaFile","type":"apogee.Folder","children":{"metaFileList":{"name":"metaFileList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!sessionKey) return null;\nif(!context) return null;\n\n\nvar searchDef = {};\nsearchDef.search = \"meta_file_list\";\nsearchDef.file_context = context;\n\nreturn micemetarDataAccess.getRequestPromise(searchDef,sessionKey);\n\n","supplementalCode":"","description":""}},"metaFileSelector":{"name":"metaFileSelector","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nif((commonData.fileTypeList)&&(commonData.fileTypeList.success)) {\n    var fileTypes = {};\n    output.fileTypes = fileTypes;\n    \n    var loadFileTypeEntry = (record) => { fileTypes[record.Fields.file_type_name] = record.Id };\n\n    var fileTypeRecords = commonData.fileTypeList.data.Response;\n    fileTypeRecords.forEach(loadFileTypeEntry);\n}\n\nif((metaFileList)&&(metaFileList.success)) {\n    var metaFiles = {};\n    output.metaFiles = metaFiles;\n    \n    var loadMetaFileEntry = (record) => {\n        var fileTypeName = getFileTypeName(record.Fields.file_type_id);\n        var metaName = record.Fields.name;\n        metaFiles[fileTypeName + \":\" + metaName] = record.Id;\n    }\n    \n    var metaFileRecords = metaFileList.data.Response;\n    metaFileRecords.forEach(loadMetaFileEntry);\n}\n\noutput.currentMetaFileId = metaFileId;\noutput.currentFileTypeId = fileTypeId;\noutput.editExisting = fileSelection ? fileSelection.editExisting : false;\n\noutput.defaultMetaFileName = commonData.DEFAULT_META_FILE_NAME;\n\nreturn output;","supplementalCode":"","description":""}},"context":{"name":"context","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return getMetaContext();\n","supplementalCode":"","description":""}},"sessionKey":{"name":"sessionKey","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return getSessionKey();\n","supplementalCode":"","description":""}},"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":{"valid":false,"data":null},"description":""}},"state":{"name":"state","type":"apogee.JsonTable","updateData":{"data":{"active":false,"previousTask":null},"description":""}}}},"selectMetaContext":{"name":"selectMetaContext","type":"apogee.Folder","children":{"contextControl":{"name":"contextControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"data = {};\ndata.customerList = commonData.customerInfo;\ndata.dummyDropdownEntry = commonData.DUMMY_DROPDOWN_ENTRY;\ndata.cidContextPrefix = commonData.CID_CONTEXT_PREFIX;\ndata.globalContext = commonData.GLOBAL_CONTEXT;\n\n\nreturn data;","supplementalCode":"","description":""}},"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":{"valid":false,"data":null},"description":""}},"state":{"name":"state","type":"apogee.JsonTable","updateData":{"data":{"active":false,"previousTask":null},"description":""}}}},"getMetaContext":{"name":"getMetaContext","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"if(selectMetaContext.result.valid) {\n    return selectMetaContext.result.data.context;\n}\nelse {\n    return null;\n}\n","supplementalCode":"","description":""}},"editPostProcess":{"name":"editPostProcess","type":"apogee.Folder","children":{"editResults":{"name":"editResults","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(editMeta.editMetaFile.result.valid) {\n    return editMeta.editMetaFile.result.data;\n}\nelse {\n    return null;\n}\n","supplementalCode":"","description":""}},"createMetaFileEntries":{"name":"createMetaFileEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!editResults) return null;\n\nvar output= [];\n\nif(editResults.metaFileCreated) {\n    output.push(editResults.metaFileEntry);\n}\n\nreturn output;","supplementalCode":"","description":""}},"createRecipeEntries":{"name":"createRecipeEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!editResults) return null;\n\nvar combinedEntries = editResults.combinedEntries;\nvar metaFileId = editResults.metaFileEntry.Id; \n\nvar newRecipeNeeded = (combinedEntry) => ((combinedEntry.recipeEntry === undefined)&&(combinedEntry.selected));\nvar makeRecipeEntry = (combinedEntry) => (createRecipeEntry(combinedEntry,metaFileId));\n\nreturn combinedEntries.filter(newRecipeNeeded).map(makeRecipeEntry);","supplementalCode":"function createRecipeEntry(combinedEntry,metaFileId) {\n    \n    var fileEntry = combinedEntry.fileEntry;\n    var insertionInfo = combinedEntry.insertionInfo;\n    \n    var order = 0;\n    \n    var fields = {};\n    fields.ordr = order;\n    fields.meta_file_id = metaFileId;\n    fields.file_entry_id = fileEntry.Id;\n    fields.insertion_info = insertionInfo;\n    \n    return micemetarDataAccess.createRecord(\"recipe_entry\",fields);\n}","description":""}},"editRecipeEntryPairs":{"name":"editRecipeEntryPairs","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!editResults) return null;\n\nvar combinedEntries = editResults.combinedEntries;\n\nvar editRecipeNeeded = (combinedEntry) => ( \n        (combinedEntry.recipeEntry !== undefined) &&\n        (combinedEntry.selected) &&\n        (insertionInfoChanged(combinedEntry.insertionInfo,combinedEntry.recipeEntry.Fields.insertion_info))\n    );\n\nreturn combinedEntries.filter(editRecipeNeeded).map(getEditRecipePair);","supplementalCode":"function getEditRecipePair(combinedEntry) {\n    var oldRecipeEntry = combinedEntry.recipeEntry;\n    var newRecipeEntry = apogee.util.jsonCopy(oldRecipeEntry);\n    newRecipeEntry.Fields.insertion_info = combinedEntry.insertionInfo;\n    return [oldRecipeEntry,newRecipeEntry];\n}\n\nfunction insertionInfoChanged(info1,info2) {\n    if(!info1) {\n        if(info2) return true;\n        else return false;\n    }\n    else if(!info2) {\n        return true;\n    }\n    else {\n        if(info1.orderedEntry === undefined) throw new Error(\"Expected an 'orderedEntry' field in insertion info!\");\n        \n        return (info1.orderedEntry != info2.orderedEntry);\n    }\n}\n\n           ","description":""}},"deleteRecipeEntries":{"name":"deleteRecipeEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!editResults) return null;\n\nvar combinedEntries = editResults.combinedEntries;\n\nvar deleteRecipeNeeded = (combinedEntry) => ((combinedEntry.recipeEntry !== undefined)&&(!combinedEntry.selected));\nvar getRecipeEntry = (combinedEntry) => (combinedEntry.recipeEntry);\n\nreturn combinedEntries.filter(deleteRecipeNeeded).map(getRecipeEntry);","supplementalCode":"","description":""}},"instructionList":{"name":"instructionList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!editResults) return null;\n\nvar output = [];\n\noutput = output.concat(createMetaFileEntries.map(micemetarDataAccess.createCreateInstruction));\noutput = output.concat(createRecipeEntries.map(micemetarDataAccess.createCreateInstruction));\n\nvar getEditInstruction = (editPair) => (micemetarDataAccess.createUpdateInstruction(editPair[0],editPair[1]));\n\noutput = output.concat(editRecipeEntryPairs.map(getEditInstruction));\n\noutput = output.concat(deleteRecipeEntries.map(micemetarDataAccess.createDeleteInstruction));\n\nreturn output;","supplementalCode":"","description":""}}}}}},"editCom":{"name":"editCom","type":"apogee.Folder","children":{"selectCid":{"name":"selectCid","type":"apogee.Folder","children":{"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":{"valid":false,"data":null},"description":""}},"state":{"name":"state","type":"apogee.JsonTable","updateData":{"data":{"active":false,"previousTask":null},"description":""}},"selectCidControl":{"name":"selectCidControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var data = {};\n\nif(!state.active) {\n    data.layout = commonData.INACTIVE_LAYOUT;\n}\nelse {\n    data.layout = layout;\n    data.onSubmit = formData => {\n    \n        var cidString = formData.cid.trim();\n        if(cidString.length === 0) {\n            alert(\"Please enter a CID.\");\n            return;\n        }\n        var cid;\n        try {\n            cid = parseInt(cidString);\n        }\n        catch(error) {\n            alert(\"Invalid CID: \" + error.message);\n            return;\n        }\n        \n        if(!cid) {\n            alert(\"Invalid CID - not a number\");\n            return;\n        }\n        \n        var data = {}\n        data.cid = cid;\n        \n        if(formData.customerContext != commonData.DUMMY_DROPDOWN_ENTRY) {\n            data.otherContextStrings = [formData.customerContext];\n        }\n        \n        taskAppModule.taskCompleted(apogeeMessenger,[\"editCom\",\"selectCid\"],[\"editCom\",\"editComFile\"],data);\n    } \n    data.onCancel = () => {\n        taskAppModule.taskCanceled(apogeeMessenger,[\"switcher\"],state.previousTask);\n    }\n}\n    \nreturn data;","supplementalCode":"","description":""}},"baseLayout":{"name":"baseLayout","type":"apogee.JsonTable","updateData":{"data":{"lines":[{"type":"title","title":"Select CID"},{"type":"inputElement","heading":"CID: ","resultKey":"cid"},{"type":"dropdown","heading":"Customer (optional): ","entries":[],"resultKey":"customerContext"},{"type":"submit","submit":"Submit","cancel":"Cancel"}]},"description":""}},"layout":{"name":"layout","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"//get customer list in proper format\nvar getEntry = element => [element.customerName,element.authString];\nvar entries = commonData.customerInfo.map(getEntry);\n\n//add the dummy row\nentries.unshift(commonData.DUMMY_DROPDOWN_ENTRY);\n\n//copy layout\nvar layout = apogee.util.jsonCopy(baseLayout);\n\n//update customer entries\nvar customerElement = layout.lines.find( element => (element.resultKey == \"customerContext\") );\ncustomerElement.entries = entries;\ncustomerElement.initial = commonData.DUMMY_DROPDOWN_ENTRY;\n\nreturn layout;","supplementalCode":"","description":""}}}},"editComFile":{"name":"editComFile","type":"apogee.Folder","children":{"sessionKey":{"name":"sessionKey","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return getSessionKey();","supplementalCode":"","description":""}},"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":{"valid":false,"data":null},"description":""}},"state":{"name":"state","type":"apogee.JsonTable","updateData":{"data":{"active":false,"previousTask":null},"description":""}},"selection":{"name":"selection","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(selectCid.result.valid) {\n    return selectCid.result.data;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"comFileResponse":{"name":"comFileResponse","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!sessionKey) return null;\nif(!selection) return null;\n\nvar cidContext = commonData.CID_CONTEXT_PREFIX + selection.cid;\n\nconsole.log(cidContext);\n\nvar searchDef = {};\nsearchDef.search = \"community_files\";\nsearchDef.file_context = cidContext;\nreturn micemetarDataAccess.getRequestPromise(searchDef,sessionKey);\n\n\n\n\n\n\n\n","supplementalCode":"","description":""}},"metaFileList":{"name":"metaFileList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!sessionKey) return null;\nif(!selection)  return null;\n\nvar cidContext = \"com_\" + selection.cid;\n\n//create context list\nvar contextList = [];\ncontextList.push(\"public\");\ncontextList.push(cidContext);\nif((selection.otherContextStrings)&&(selection.otherContextStrings.length > 0)) {\n    contextList = contextList.concat(selection.otherContextStrings);\n}\n\n//request promise from context\nvar getRequestPromiseFromContext = (context) => {\n    var searchDef = {};\n    searchDef.search = \"meta_file_list\";\n    searchDef.file_context = context;\n    return micemetarDataAccess.getRequestPromise(searchDef,sessionKey);\n}\n\n//create promise list\npromiseList = contextList.map(getRequestPromiseFromContext);\n\n//evaluate promise list\nreturn Promise.all(promiseList);\n","supplementalCode":"","description":""}},"existingComFileEntries":{"name":"existingComFileEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!comFileResponse) {\n    //empty list\n    return [];\n}\n\nif(!comFileResponse.success) {\n    throw new Error(\"Error loading meta file records: \" + comFileResponse.msg);\n}\n\nvar isComFileEntry = (record) => (record.Type == \"com_file_entry\");\n\nreturn comFileResponse.data.Records.filter(isComFileEntry);\n","supplementalCode":"","description":""}},"availableMetaFiles":{"name":"availableMetaFiles","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!metaFileList) return null;\n\nvar output = [];\n\nvar addToOutput = (response) => {output = output.concat(response.data.Response)};\n\nmetaFileList.forEach(addToOutput);\n\nreturn output;","supplementalCode":"","description":""}},"comFile":{"name":"comFile","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!comFileResponse) {\n    return null;\n}\n\nif(!comFileResponse.success) {\n    throw new Error(\"Com File request error: \" + comFileResponse.msg);\n}\n\nif(comFileResponse.data.Response.length > 0) {\n    return comFileResponse.data.Response[0];   \n}\nelse {\n    \n    //meta file code;\n    var fields = {};\n    fields.file_context = commonData.CID_CONTEXT_PREFIX + selection.cid;\n    fields.name = commonData.DEFAULT_COM_FILE_NAME;\n    fields.ref = NEW_COM_FILE_REF;\n\n    return micemetarDataAccess.createRecord(\"com_file\",fields);\n}\n\n","supplementalCode":"","description":""}},"selectMetaFilesControl":{"name":"selectMetaFilesControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if( (!comFile) ||\n    (!existingComFileEntries) ||\n    (!availableMetaFiles)) {\n    return null;\n}\n\nvar data = {};\ndata.initialComFileEntries = existingComFileEntries;\ndata.metaFiles = availableMetaFiles;\ndata.comFile = comFile;\ndata.fileTypeIdToName = commonData.fileTypeIdToName;\ndata.fileTypeNameToId = commonData.fileTypeNameToId;\n\nreturn data;","supplementalCode":"","description":""}},"NEW_COM_FILE_REF":{"name":"NEW_COM_FILE_REF","type":"apogee.JsonTable","updateData":{"data":"legacy","description":""}}}},"editPostProcess":{"name":"editPostProcess","type":"apogee.Folder","children":{"editResults":{"name":"editResults","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(editCom.editComFile.result.valid) {\n    return editCom.editComFile.result.data;\n}\nelse {\n    return null;\n}\n","supplementalCode":"","description":""}},"instructionList":{"name":"instructionList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!editResults) return null;\n\nvar output = [];\n\noutput = output.concat(createComFile.map(micemetarDataAccess.createCreateInstruction));\noutput = output.concat(createComFileEntries.map(micemetarDataAccess.createCreateInstruction));\n\nvar getEditInstruction = (editPair) => (micemetarDataAccess.createUpdateInstruction(editPair[0],editPair[1]));\n\noutput = output.concat(editComFileEntryPairs.map(getEditInstruction));\n\noutput = output.concat(deleteComFileEntries.map(micemetarDataAccess.createDeleteInstruction));\n\nreturn output;","supplementalCode":"","description":""}},"createComFileEntries":{"name":"createComFileEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!editResults) return null;\n\nvar combinedEntries = editResults.combinedEntries;\nvar comFileId = editResults.comFile.Id; \n\nvar newComFileEntryNeeded = (combinedEntry) => ((combinedEntry.comFileEntry === undefined)&&(combinedEntry.selected));\nvar makeComFileEntry = (combinedEntry) => (createComFileEntry(combinedEntry,comFileId));\n\nreturn combinedEntries.filter(newComFileEntryNeeded).map(makeComFileEntry);","supplementalCode":"function createComFileEntry(combinedEntry,comFileId) {\n    \n    var metaFile = combinedEntry.metaFile;\n    var fileGroup = combinedEntry.fileGroup;\n\n    var order = 0;\n    \n    var fields = {};\n    fields.ordr = order;\n    fields.com_file_id = comFileId;\n    fields.meta_file_id = metaFile.Id;\n    fields.file_group = fileGroup;\n    \n    return micemetarDataAccess.createRecord(\"com_file_entry\",fields);\n}\n","description":""}},"editComFileEntryPairs":{"name":"editComFileEntryPairs","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!editResults) return null;\n\nvar combinedEntries = editResults.combinedEntries;\n\nvar editEntryNeeded = (combinedEntry) => ( \n        (combinedEntry.comFileEntry !== undefined) &&\n        (combinedEntry.selected) &&\n        (combinedEntry.fileGroup != combinedEntry.comFileEntry.Fields.file_group)\n    );\n\nreturn combinedEntries.filter(editEntryNeeded).map(getEditEntryPair);","supplementalCode":"function getEditEntryPair(combinedEntry) {\n    var oldComFileEntry = combinedEntry.comFileEntry;\n    var newComFileEntry = apogee.util.jsonCopy(oldComFileEntry);\n    newComFileEntry.Fields.file_group = combinedEntry.fileGroup;\n    return [oldComFileEntry,newComFileEntry];\n}\n","description":""}},"deleteComFileEntries":{"name":"deleteComFileEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!editResults) return null;\n\nvar combinedEntries = editResults.combinedEntries;\n\nvar deleteEntryNeeded = (combinedEntry) => ((combinedEntry.comFileEntry !== undefined)&&(!combinedEntry.selected));\nvar getComFileEntry = (combinedEntry) => (combinedEntry.comFileEntry);\n\nreturn combinedEntries.filter(deleteEntryNeeded).map(getComFileEntry);\n","supplementalCode":"","description":""}},"createComFile":{"name":"createComFile","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!editResults) return null;\n\nvar output= [];\n\nif(editResults.comFile.Id < 0) {\n    output.push(editResults.comFile);\n}\n\nreturn output;","supplementalCode":"","description":""}}}}}},"editEntry":{"name":"editEntry","type":"apogee.Folder","children":{}},"switcher":{"name":"switcher","type":"apogee.Folder","children":{"selectSequence":{"name":"selectSequence","type":"apogee.JsonTable","updateData":{"data":"","description":""}},"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":{"valid":false,"data":null},"description":""}},"state":{"name":"state","type":"apogee.JsonTable","updateData":{"data":{"active":false,"previousTask":null},"description":""}}}},"getSessionKey":{"name":"getSessionKey","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"if(login.result.valid) {\n    return login.result.data.sessionKey;\n}\nelse {\n    return null;\n}\n","supplementalCode":"","description":""}},"currentTask":{"name":"currentTask","type":"apogee.JsonTable","updateData":{"data":["login"],"description":""}},"getFileTypeName":{"name":"getFileTypeName","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeId"],"functionBody":"return commonData.fileTypeIdToName[fileTypeId];","supplementalCode":"","description":""}},"commonData":{"name":"commonData","type":"apogee.Folder","children":{"fileTypeList":{"name":"fileTypeList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var sessionKey = getSessionKey();\nif(!sessionKey) return null;\n\nvar fileTypeSearch = {};\nfileTypeSearch.search = \"file_type_list\";\n\nreturn micemetarDataAccess.getRequestPromise(fileTypeSearch,sessionKey);\n\n","supplementalCode":"","description":""}},"fileTypeIdToName":{"name":"fileTypeIdToName","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!fileTypeList) return null;\n\nvar output = {};\n\nvar addToMap = (record) => {output[record.Id] = record.Fields.file_type_name;}\n\nfileTypeList.data.Response.forEach(addToMap);\n\nreturn output;","supplementalCode":"","description":""}},"fileTypeNameToId":{"name":"fileTypeNameToId","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!fileTypeList) return null;\n\nvar output = {};\n\nvar addToMap = (record) => {output[record.Fields.file_type_name] = record.Id;}\n\nfileTypeList.data.Response.forEach(addToMap);\n\nreturn output;","supplementalCode":"","description":""}},"customerInfo":{"name":"customerInfo","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"const url = \"http://eng.micello.com/apogee/data/customerJson.json\"\nreturn apogee.net.jsonRequest(url);","supplementalCode":"","description":""}},"INACTIVE_LAYOUT":{"name":"INACTIVE_LAYOUT","type":"apogee.JsonTable","updateData":{"data":{"lines":[{"type":"title","title":"inactive"}]},"description":""}},"DUMMY_DROPDOWN_ENTRY":{"name":"DUMMY_DROPDOWN_ENTRY","type":"apogee.JsonTable","updateData":{"data":"---","description":""}},"GLOBAL_CONTEXT":{"name":"GLOBAL_CONTEXT","type":"apogee.JsonTable","updateData":{"data":"public","description":""}},"CID_CONTEXT_PREFIX":{"name":"CID_CONTEXT_PREFIX","type":"apogee.JsonTable","updateData":{"data":"com_","description":""}},"DEFAULT_COM_FILE_NAME":{"name":"DEFAULT_COM_FILE_NAME","type":"apogee.JsonTable","updateData":{"data":"Standard","description":""}},"DEFAULT_META_FILE_NAME":{"name":"DEFAULT_META_FILE_NAME","type":"apogee.JsonTable","updateData":{"data":"Standard","description":""}}}},"getFileTypeId":{"name":"getFileTypeId","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeName"],"functionBody":"return commonData.fileTypeNameToId[fileTypeName];","supplementalCode":"","description":""}}}},"micemetarDataAccess":{"name":"micemetarDataAccess","type":"apogee.Folder","children":{"createRecord":{"name":"createRecord","type":"apogee.FunctionTable","updateData":{"argList":["recordType","fieldMap"],"functionBody":"var record = {};\n\nrecord.Id = getId();\nrecord.Type = recordType;\nrecord.Fields = fieldMap;\nrecord.read_perm = READ_PERM;\nrecord.edit_perm = EDIT_PERM;\n\nreturn record;","supplementalCode":"var READ_PERM = 2;\nvar EDIT_PERM = 15;\n\n//this will be illegal at some point\nvar nextId = -1;\n\nfunction getId() {\n    return nextId--;\n}","description":"This method creates a record given the field values and record info \nfrom the data set info. It creates and ID and uses standard permissions."}},"recordsToCreateInstructions":{"name":"recordsToCreateInstructions","type":"apogee.FunctionTable","updateData":{"argList":["recordList"],"functionBody":"var instructions = [];\n\nfor(var i = 0; i < recordList.length; i++) {\n    var createRecord = recordList[i];\n    var instruction = createCreateInstruction(createRecord);\n    instructions.push(instruction);\n}\n\nreturn instructions;","supplementalCode":"","description":"This creates a list of create instructions to go along with a list of records to be created.\n\nThere is the option to assign the ID or to leave it as undefined, in which case\nan automatically incremented ID will be assigned. (For consistency in the data\nset, either all records should be preassigned or all records should be \nautomatically assigned."}},"createCommitBody":{"name":"createCommitBody","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage"],"functionBody":"var commit = {};\nvar actions = [];\n\nif(commitMessage.length === 0) throw new Error(\"Commit message missing!\");\n\ncommit.Name = dataSetInfo.name;\ncommit.Message = commitMessage;\ncommit.Actions = actions;\n\n//single action with commits\nvar action = {};\naction.Title = \"bulk create commit\";\naction.Instr = instructionList;\nactions.push(action);\n\nreturn commit","supplementalCode":"","description":"This creates a body for a commit request, given a list of instructions and a commit message."}},"createRequestOptions":{"name":"createRequestOptions","type":"apogee.FunctionTable","updateData":{"argList":["bodyJson","sessionKey"],"functionBody":"var header = {};\nheader[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\nheader.sessionKey = sessionKey;\nheader[\"proto-version\"] = \"4.0\";\nheader[\"db-version\"] = dataSetInfo.version;\n\nrequestInfo = {};\nrequestInfo.header = header;\nif(bodyJson) {\n    requestInfo.method = \"POST\";\n    requestInfo.body = JSON.stringify(bodyJson);\n}\n\nreturn requestInfo;\n","supplementalCode":"","description":"This creates the requestOptions, suitable for apogee.net.jsonRequest, to go with an type of request to the workingset (micemetarequest) server."}},"host":{"name":"host","type":"apogee.JsonTable","updateData":{"data":"http://eng.micello.com/micemetarws","description":""}},"commitUrl":{"name":"commitUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvalue = host + \"/commit\";\nreturn value;\n\n","supplementalCode":"","description":""}},"requestUrl":{"name":"requestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return host + \"/cannedsearch\";\n\n","supplementalCode":"","description":""}},"dataSetInfo":{"name":"dataSetInfo","type":"apogee.JsonTable","updateData":{"data":{"records":{"com_file_entry":{"idField":"com_file_entry_id","name":"com_file_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"com_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.ComFile"},{"defaultValue":null,"name":"meta_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"},{"defaultValue":null,"name":"file_group","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.ComFileEntry"},"file_type":{"idField":"file_type_id","name":"file_type","foreignList":[{"remoteRecord":"file_entry","name":"file_entry_list","isUnique":false,"remoteField":"file_type_id","restrictDelete":true}],"fields":[{"defaultValue":null,"name":"file_type_name","nullOk":true,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.FileType"},"file_entry":{"idField":"file_entry_id","name":"file_entry","foreignList":[],"fields":[{"defaultValue":null,"name":"entry_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"entry_name","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"file_type_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileType"},{"defaultValue":null,"name":"entry_section","nullOk":true,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"entry_key","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"option_name","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"entry_data","nullOk":false,"fieldClass":"org.json.JSONObject"}],"recordClass":"com.micello.micemetar.data.FileEntry"},"recipe_entry":{"idField":"recipe_entry_id","name":"recipe_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"meta_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"},{"defaultValue":null,"name":"file_entry_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileEntry"},{"defaultValue":null,"name":"insertion_info","nullOk":true,"fieldClass":"org.json.JSONObject"}],"recordClass":"com.micello.micemetar.data.RecipeEntry"},"com_file":{"idField":"com_file_id","name":"com_file","foreignList":[{"remoteRecord":"com_file_entry","name":"com_file_entry_list","isUnique":false,"remoteField":"com_file_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":null,"name":"file_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"name","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"ref","nullOk":true,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.ComFile"},"meta_file":{"idField":"meta_file_id","name":"meta_file","foreignList":[{"remoteRecord":"recipe_entry","name":"recipe_entry_list","isUnique":false,"remoteField":"meta_file_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":null,"name":"file_type_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileType"},{"defaultValue":null,"name":"file_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"name","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"ref","nullOk":true,"fieldClass":"org.json.JSONObject"}],"recordClass":"com.micello.micemetar.data.MetaFile"}},"name":"Micemetar","version":"5.0"},"description":""}},"createUpdateInstruction":{"name":"createUpdateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["initialRecord","targetRecord"],"functionBody":"if(initialRecord.Id != targetRecord.Id) {\n    throw new Error(\"Record ID mismatch in create update instruction for target record: \" + getRecordErrString(targetRecord));\n}\n\nif(initialRecord.Type != targetRecord.Type) {\n    throw new Error(\"Inital and target record types do not match. Target record: \" + getRecordErrString(targetRecord));\n}\n\nvar recordsDifferent = false;\n\nvar recordInfo = getRecordInfo(initialRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Update\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = initialRecord.Id;\n\ninstruction.initialReadPerm = initialRecord.read_perm;\ninstruction.initialEditPerm = initialRecord.edit_perm;\n\nif(initialRecord.readPerm != targetRecord.readPerm) {\n    instruction.targetReadPerm = targetRecord.read_perm;\n    recordsDifferent = true;\n}\n\nif(initialRecord.editPerm != targetRecord.editPerm) {\n    instruction.targetEditPerm = targetRecord.edit_perm;\n    recordsDifferent = true;\n}\n\nvar initialData = {};\ninstruction.Initial = initialData;\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    \n    var initialValue;\n    var targetValue;\n    \n    var initialValue = initialRecord.Fields[field.name];\n    var targetValue = targetRecord.Fields[field.name];\n    \n    //validate target values\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(targetRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(targetRecord,field));\n        }\n    }\n    \n    if(!fieldsMatch(initialValue,targetValue,field)) {\n        initialData[field.name] = initialValue;\n        targetData[field.name] = targetValue;\n        recordsDifferent = true;\n    }\n}\n\nif(recordsDifferent) {\n    return instruction;\n}\nelse {\n    return null;\n}\n","supplementalCode":"function fieldsMatch(initialValue,targetValue,fieldInfo) {\n    if(fieldInfo.fieldClass === \"java.lang.String\") {\n        //compare strings with \"==\"\n        return (initialValue == targetValue);\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"java.lang\")) {\n        //compare other basic values with \"===\"\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"com.micello\")) {\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONObject\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONArray\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else {\n        throw new Error(\"unrecognized field type: \" + fieldInfo.fieldClass);\n    }\n}\n\nfunction compareJsonData(a,b) {\n    var an = apogee.util.getNormalizedObjectCopy(a);\n    var bn = apogee.util.getNormalizedObjectCopy(b);\n    var aString = JSON.stringify(an);\n    var bString = JSON.stringify(bn);\n    return aString == bString;\n}\n    ","description":"This function creates an update instruction given an initial and target record. If the records are the same then NULL is returned. (No update is needed.)"}},"createCreateInstruction":{"name":"createCreateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["createRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(createRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Create\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = createRecord.Id;\n\ninstruction.targetReadPerm = createRecord.read_perm;\ninstruction.targetEditPerm = createRecord.edit_perm;\n\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var targetValue;\n    var targetValue = createRecord.Fields[field.name];\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(createRecord,field));\n        }\n    }\n    \n    targetData[field.name] = targetValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getFieldErrString":{"name":"getFieldErrString","type":"apogee.FunctionTable","updateData":{"argList":["record","fieldInfo"],"functionBody":"return getRecordErrString(record) + \" - \" + fieldInfo.name;","supplementalCode":"","description":""}},"getRecordErrString":{"name":"getRecordErrString","type":"apogee.FunctionTable","updateData":{"argList":["record"],"functionBody":"return record.Type + \" \" + record.Id;","supplementalCode":"","description":""}},"createDeleteInstruction":{"name":"createDeleteInstruction","type":"apogee.FunctionTable","updateData":{"argList":["deleteRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(deleteRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Delete\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = deleteRecord.Id;\n\ninstruction.initialReadPerm = deleteRecord.read_perm;\ninstruction.initialEditPerm = deleteRecord.edit_perm;\n\nvar initialData = {};\ninstruction.Initial = initialData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var initialValue = deleteRecord.Fields[field.name];\n    \n    initialData[field.name] = initialValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getRecordInfo":{"name":"getRecordInfo","type":"apogee.FunctionTable","updateData":{"argList":["recordType"],"functionBody":"var recordInfo = dataSetInfo.records[recordType];\n\nif(!recordInfo) {\n    throw new Error(\"Record type not found in getRecordInfo: \" + recordType);\n}\n\nreturn recordInfo;","supplementalCode":"","description":""}},"combinedEntriesToInstructionList":{"name":"combinedEntriesToInstructionList","type":"apogee.FunctionTable","updateData":{"argList":["combinedEntries"],"functionBody":"var output = [];\nfor(var key in combinedEntries) {\n    var entry = combinedEntries[key];\n    var instruction = getInstructionForCombinedEntry(entry);\n    if(instruction) {\n        output.push(instruction);\n    }\n}\n\nreturn output;","supplementalCode":"function getInstructionForCombinedEntry(combinedEntry) {\n    var newEntry = combinedEntry.newEntry;\n    var oldEntry = combinedEntry.oldEntry;\n    \n    if(newEntry) {\n        if(!oldEntry) {\n            console.log(\"Create: \" + newEntry.Id);\n            return createCreateInstruction(newEntry);\n        }\n        else {\n            //this will return null for matching records\n            console.log(\"Update(maybe): \" + newEntry.Id);\n            return createUpdateInstruction(oldEntry,newEntry);\n        }\n    }\n    else if(oldEntry) {\n        console.log(\"Delete: \" + oldEntry.Id);\n        return createDeleteInstruction(oldEntry);\n    }\n    \n    return null;\n}\n\nfunction entriesDifferent(entry1,entry2) {\n    var string1 = JSON.stringify(apogee.util.getNormalizedCopy(entry1));\n    var string2 = JSON.stringify(apogee.util.getNormalizedCopy(entry2));\n    return (string1 == string2);\n}","description":"This function takes a combined entry map of the format:\n\n{\n  \"some-identifier\":{\n    \"oldEntry\":{original record entry, if applicable},\n    \"newEntry\":{new record entry, if applicable}\n  },\n  ...\n}\n\nIt returns an instruction list.\n\n"}},"getCommitPromise":{"name":"getCommitPromise","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage","sessionKey"],"functionBody":"var commitBody = createCommitBody(instructionList,commitMessage);\nvar requestOptions = createRequestOptions(commitBody,sessionKey);\nreturn apogee.net.jsonRequest(commitUrl,requestOptions);","supplementalCode":"","description":""}},"getRequestPromise":{"name":"getRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn apogee.net.jsonRequest(requestUrl,requestOptions);","supplementalCode":"","description":""}},"customRequestUrl":{"name":"customRequestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return host + \"/request\";","supplementalCode":"","description":""}},"getCustomRequestPromise":{"name":"getCustomRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn apogee.net.jsonRequest(customRequestUrl,requestOptions);","supplementalCode":"","description":""}}}}}}},"components":{"tasks":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":37,"y":37}},"children":{"login":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":55,"y":32}},"children":{"loginUrl":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":465,"height":43},"posInfo":{"x":26,"y":27},"state":-1,"viewType":"Text"}},"loginControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":369,"height":87},"posInfo":{"x":33,"y":103},"state":0,"viewType":"Output"},"resource":{"html":"","css":"","setData":"this.loginUrl = data;","constructorAddition":"\n\n//this uses the updated version of test authorization that takes and returns a JSON\nthis.onClick = function() {\n    \n    //on click\n    var bodyJson = {};\n    bodyJson.userName = resource.userInput.value;\n    bodyJson.password = resource.passwordInput.value;\n    \n    //cleaer password field\n    resource.passwordInput.value = \"\";\n    \n    var options = {};\n    options.body = JSON.stringify(bodyJson);\n    options.method = \"POST\";\n    \n    var requestPromise = apogee.net.jsonRequest(this.loginUrl,options);\n    \n    //set the response\n    mode.getMessenger().asynchDataUpdate(\"sessionResponse\",requestPromise);\n}","init":"\nvar label1 = document.createElement(\"label\");\nlabel1.for = \"userInput\";\nlabel1.innerHTML = \"User:\"\nelement.appendChild(label1);\n\nvar input1 = document.createElement(\"input\");\ninput1.id = \"userInput\";\nresource.userInput = input1;\nelement.appendChild(input1);\n\nelement.appendChild(document.createElement(\"br\"));\n\nvar label2 = document.createElement(\"label\");\nlabel2.for = \"passwordInput\";\nlabel2.innerHTML = \"Password:\"\nelement.appendChild(label2);\n\nvar input2 = document.createElement(\"input\");\ninput2.id = \"passwordInput\";\ninput2.type = \"password\";\nresource.passwordInput = input2;\nelement.appendChild(input2);\n\nelement.appendChild(document.createElement(\"br\"));\n\nvar button = document.createElement(\"button\");\nbutton.innerHTML = \"Login\";\nelement.appendChild(button);\n\nvar instance = this;\nbutton.onclick = function() {\n    instance.onClick();\n}\n\n\n"}},"sessionResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":697,"height":93},"posInfo":{"x":373,"y":385},"state":-1,"viewType":"Text"}},"taskResult":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":613,"height":319},"posInfo":{"x":320,"y":559},"state":-1,"viewType":"Formula"}},"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":231,"height":119},"posInfo":{"x":36,"y":480},"state":0,"viewType":"Text"}},"state":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":290,"height":66},"posInfo":{"x":31,"y":369},"state":0,"viewType":"Text"}}}},"submit":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":386,"y":24}},"children":{"submitControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":363,"height":253},"posInfo":{"x":26,"y":91},"state":0,"viewType":"Output"},"resource":{"html":"<textarea id=\"submit_messageInput\"></textarea><br>\n<input type=\"button\" id=\"submit_commitButton\" value=\"Commit\"></input>\n<input type=\"button\" id=\"submit_cancelButton\" value=\"Cancel\"></input>","onLoad":"this.submitButton = document.getElementById(\"submit_commitButton\");\nthis.cancelButton = document.getElementById(\"submit_cancelButton\");\nthis.messageInput = document.getElementById(\"submit_messageInput\");\nthis.initialized = true;\n\nvar instance = this;\nthis.submitButton.onclick = function() {\n    instance.onSubmit();\n}\nthis.cancelButton.onclick = function() {\n    instance.onCancel();\n}","constructorAddition":"this.messageInput = null;\nthis.submitButton = null;\nthis.cancelButton = null;\nthis.initialized = false;\n\nthis.onSubmit = function() {\n    \n    if(!this.initialized) {\n        return;\n    }\n    \n    var commitMessage = this.messageInput.value.trim();\n    if((!commitMessage)||(commitMessage.length === 0)) {\n        alert(\"You must enter a commit message!\");\n        return;\n    }\n    this.messageInput.value = \"\";\n    \n    if((!this.instructionList)||(this.instructionList.length === 0)) {\n        alert(\"There is no data to commit.\");\n        return;\n    }\n    \n    var updateInfo = [];\n    updateInfo.push([ \"commitMessage\",commitMessage]);\n    updateInfo.push([\"liveInstructionList\",this.instructionList]);\n    mode.getMessenger().compoundDataUpdate(updateInfo,true);\n}\n\nthis.onCancel = function() {\n    console.log(this.previousTask);\n    taskAppModule.taskCanceled(mode.getMessenger(),[\"submit\"],this.previousTask);\n}","setData":"if(!data) return;\n\nthis.instructionList = data.instructionList;\nthis.previousTask = data.previousTask;","css":"#submit_messageInput {\n    height: 200px;\n    width: 300px;\n}"}},"commitResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":730,"height":306},"posInfo":{"x":452,"y":276},"state":-1,"viewType":"Formula"}},"commitMessage":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":271,"height":99},"posInfo":{"x":450,"y":189},"state":-1,"viewType":"Text"}},"liveInstructionList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":315,"height":124},"posInfo":{"x":447,"y":234},"state":-1,"viewType":"JSON"}},"taskResult":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":611,"height":402},"posInfo":{"x":451,"y":331},"state":-1,"viewType":"Formula"}},"sessionKey":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":552,"height":52},"posInfo":{"x":21,"y":12},"state":-1,"viewType":"Formula"}},"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":429,"height":239},"posInfo":{"x":743,"y":214},"state":0,"viewType":"Text"}},"state":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":290,"height":92},"posInfo":{"x":740,"y":74},"state":0,"viewType":"Text"}},"instructionList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":692,"height":683},"posInfo":{"x":440,"y":40},"state":-1,"viewType":"JSON"}}}},"completed":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":384,"y":69}},"children":{"resetControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":323,"height":82},"posInfo":{"x":41,"y":50},"state":0,"viewType":"Output"},"resource":{"html":"<div id=\"reset_message\"></div>\n<input type=\"button\" id=\"completed_reset\" value=\"Reset\"></input>","onLoad":"this.resetButton = document.getElementById(\"completed_reset\");\nthis.msgLabel = document.getElementById(\"reset_message\");\n\nthis.initialized = true;\n\nvar instance = this;\nthis.resetButton.onclick = function() {\n    instance.onReset();\n}\n\nif(this.cachedData) {\n    this.setData(this.cachedData);\n    this.cachedData = null;\n}","constructorAddition":"this.onReset = function() {\n\n    var clearTaskList = [\n        [\"editMeta\",\"selectMetaContext\"],\n        [\"editMeta\",\"selectMetaFile\"],\n        [\"editMeta\",\"editMetaFile\"],\n        [\"editCom\",\"selectCid\"],\n        [\"editCom\",\"editComFile\"],\n        [\"submit\"],\n        [\"completed\"]\n    ];\n    taskAppModule.clearTasksAndRestartFrom(mode.getMessenger(),clearTaskList,[\"switcher\"]);\n}","setData":"if(!this.initialized) {\n    this.cachedData = data;\n    return;\n}\n\nvar msg;\nif(data.valid) {\n    if(data.data.commitResponse.success) {\n        msg = \"Successful commit!\";\n    }\n    else {\n        msg = \"Commit error: \" + data.data.commitResponse.msg;\n    }\n}\nelse {\n    msg = \"No commit attemped.\"\n}\n\nthis.msgLabel.innerHTML = msg;\n\n\n"}},"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":253,"height":77},"posInfo":{"x":516,"y":35},"state":0,"viewType":"Text"}},"state":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":290,"height":136},"posInfo":{"x":515,"y":169},"state":0,"viewType":"Text"}}}},"editMeta":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":195,"y":73}},"children":{"editMetaFile":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":42,"y":140}},"children":{"selectEntriesControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":1079,"height":736},"posInfo":{"x":109,"y":54},"state":0,"viewType":"Output"},"resource":{"html":"<table class=\"editMeta_table\">\n     <tr>\n        <td id=\"editMeta_filterCell\" colspan=\"3\">\n            put filters here...\n        </td>\n    </tr>\n    <tr>\n        <td class=\"editMeta_selectedColumn\">\n            <h2>Selected</h2>\n        </td>\n        <td class=\"editMeta_centerColumn\">&nbsp;</td>\n        <td class=\"editMeta_availableColumn\">\n            <h2>Available</h2>\n        </td>\n    </tr>\n    <tr>\n        <td class=\"editMeta_listCell\">\n            <table id=\"editMeta_selectedTable\" class=\"editMeta_table\">\n            </table>\n        </td>\n        <td>&nbsp;</td>\n        <td class=\"editMeta_listCell\">\n            <div id=\"editMeta_availableCell\" class=\"editMeta_displayDiv\"></div>\n        </td>\n    </tr>\n    <tr>\n        <td colspan=\"3\">\n            <input type=\"button\" value=\"Commit\" id=\"editMeta_commitButton\">\n            &nbsp;\n            <input type=\"button\" value=\"Reset\" id=\"editMeta_resetButton\">\n            &nbsp;\n            <input type=\"button\" value=\"Cancel\" id=\"editMeta_cancelButton\">\n        </td>\n    </tr>\n</table>\n","css":".editMeta_table {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    border-collapse: collapse;\n}\n.editMeta_selectedColumn {\n    width: 45%;\n}\n.editMeta_centerColumn {\n    width: 5%;\n}\n.editMeta_availableColumn {\n    width: 45%;\n}\n\n\n.editMeta_listCell {\n    vertical-align: top;\n    height: 100%;\n    overflow: hidden;\n}\n.editMeta_displayDiv {\n    height: 100%;\n    overflow: auto; \n    border: 1px solid black;\n}\n\n.editMeta_innerCell_container {\n\twidth: 100%;\n}\n.editMeta_innerCell_title {\n\twidth: 100%;\n}\n.editMeta_innerCell_data {\n\twidth: 100%;\n\theight: 100%;\n}\n\n.editMeta_filterContainerClass {\n    display: inline;\n    margin: 5px;\n}\n\n.editMeta_listEntry {\n  border: 1px solid darkgray;\n  padding: 2px;\n}\n.editMeta_entryLabel {\n    font-weight: bold;\n}\n.editMeta_entryDataOpened {\n}\n.editMeta_entryDataClosed {\n  display:none;\n}\n.editMeta_preformatText {\n  border: 1px solid gray;\n  background-color: #e0e0e0;\n  color: blue;\n}","setData":"if(!data) return;\n\n//store the data if we are not ready yet\nif(!this.initialized) {\n    this.cachedData = data;\n    return;\n}\n\n//set data\nthis.combinedEntries = data.combinedEntries;\nthis.fileEntries = data.fileEntries;\nthis.initialRecipeEntries = data.initialRecipeEntries;\nthis.activeMetaFileEntry = data.activeMetaFileEntry;\nthis.metaFileCreated = data.metaFileCreated;\nthis.metaFileType = data.metaFileType;\nthis.insertionInfoOptions = data.insertionInfoOptions;\n\n//create combined entries\nthis.createCombinedEntries(data.initialRecipeEntries,data.fileEntries);\n\n//initialize filters\nthis.initializeFilters();\n\n//load the selection cells on each data load (they change with file type)\nthis.loadSelectedCells();\n\n//load ui\nthis.loadEntries();\n\n\n\n","constructorAddition":"const CELL_ID_PREFIX = \"meta_entry_\";\nconst PREFIX_LENGTH = CELL_ID_PREFIX.length;\n\nconst EXPAND_IMAGE_URL = \"http://eng.micello.com/apogee/resources/expand.png\";\nconst CONTRACT_IMAGE_URL = \"http://eng.micello.com/apogee/resources/contract.png\";\n\nthis.initialized = false;\n\nthis.combinedEntries = null\n\nthis.fileEntries = null;\nthis.initialRecipeEntries = null;\nthis.activeMetaFileEntry = null;\nthis.metaFileCreated = false;\n\nthis.selectedCell = null;\nthis.availableCell = null;\n\nthis.onCommitClicked = function() {\n    var data = {};\n    data.combinedEntries = apogee.util.jsonCopy(this.combinedEntries);\n    data.metaFileEntry = this.activeMetaFileEntry;\n    data.metaFileCreated = this.metaFileCreated;\n    \n    taskAppModule.taskCompleted(mode.getMessenger(),[\"editMeta\",\"editMetaFile\"],[\"submit\"],data);\n}\n\nthis.onResetClicked = function() {\n    this.createCombinedEntries(this.initialRecipeEntries,this.fileEntries);\n}\n\nthis.onCancelClicked = function() {\n    taskAppModule.taskCanceled(mode.getMessenger(),[\"editMeta\",\"editMetaFile\"],[\"editMeta\",\"selectMetaFile\"]);\n}\n\n//=====================================\n// Initialize Data Methods\n//=====================================\n\nthis.createCombinedEntries = function(initialRecipeEntries,fileEntries) {\n    \n    var newCombinedEntries = [];\n    \n    var tempMap = {};\n    \n    var addFileEntryToMap = (record) => {\n        var combinedEntry = {}\n        combinedEntry.fileEntry = record;\n        combinedEntry.selected = false;\n        tempMap[record.Id] = combinedEntry;\n        newCombinedEntries.push(combinedEntry);\n    }\n    fileEntries.forEach(addFileEntryToMap);\n\n    var addRecipeEntryToMap = (record) => {\n        var combinedEntry = tempMap[record.Fields.file_entry_id];\n        if(combinedEntry === undefined) {\n            throw new Error(\"file entry not found: fileEntryId=\" + record.Fields.file_entry_id);\n        }\n        combinedEntry.recipeEntry = record;\n        combinedEntry.insertionInfo = record.Fields.insertion_info;\n        combinedEntry.selected = true;\n    }\n    initialRecipeEntries.forEach(addRecipeEntryToMap);\n    \n    this.combinedEntries = newCombinedEntries;\n}\n\n//=====================================\n// Load Methods\n//=====================================\n\nthis.loadEntries = function() {\n    \n    //populate the filter options\n    this.populateFilterOptions();\n    \n    //populate the display cells\n    this.clearSelectedCells();\n    apogeeapp.ui.removeAllChildren(this.availableCell);\n    \n    var addCombinedEntry = (combinedEntry) => {\n        var cellElement = this.createCell(combinedEntry);\n        if(combinedEntry.selected) {\n            selectedCell = this.getSelectedCell(combinedEntry.insertionInfo);\n            selectedCell.appendChild(cellElement);\n        }\n        else {\n            this.availableCell.appendChild(cellElement);\n        }\n    }\n    \n    var filterText = this.freeTextFilterEntry.value;\n    var freeTextFilter = combinedEntry => {\n        if(filterText.length > 0) {\n            return (combinedEntry.fileEntry.Fields.entry_name.search(filterText) >= 0);\n        }\n        else {\n            return true;\n        }\n    }\n\n    this.combinedEntries.filter(this.overallDropdownFilter).filter(freeTextFilter).sort(fileEntrySorter).forEach(addCombinedEntry);\n}\n\nfunction fileEntrySorter(combinedEntry1,combinedEntry2) {\n    return combinedEntry1.fileEntry.Fields.entry_name.localeCompare(combinedEntry2.fileEntry.Fields.entry_name);\n}\n\nthis.createCell = function(combinedEntry) {\n    \n    var name = combinedEntry.fileEntry.Fields.entry_name;\n    \n    //=============================\n    //construction of list element\n    //=============================\n    var div = document.createElement(\"div\");\n    div.id = CELL_ID_PREFIX + combinedEntry.fileEntry.Id;\n    div.className = \"editMeta_listEntry\";\n    \n    //draggable interface\n    div.draggable = true;\n    var instance = this;\n    div.ondragstart = (event) => this.onDragStart(event);\n    \n    //content\n    var minMaxButton = document.createElement(\"img\");\n    minMaxButton.src = EXPAND_IMAGE_URL;\n    div.appendChild(minMaxButton);\n    \n    div.appendChild(document.createTextNode(\" \"));\n    var textSpan = document.createElement(\"span\");\n    textSpan.className = \"editMeta_entryLabel\";\n    textSpan.appendChild(document.createTextNode(name));\n    div.appendChild(textSpan);\n    \n    var entryContentDiv = document.createElement(\"div\");\n    entryContentDiv.className = \"editMeta_entryDataClosed\";\n    div.appendChild(entryContentDiv);\n    \n    entryContentDiv.appendChild(document.createTextNode(\"Entry Data: \"));\n    entryContentDiv.appendChild(document.createElement(\"br\"));\n    \n    var preformatDisplay = document.createElement(\"pre\");\n    preformatDisplay.className = \"editMeta_preformatText\";\n    var temp = JSON.stringify(combinedEntry.fileEntry.Fields.entry_data,null,\"  \");\n    temp = temp.replace(/</g,\"&lt;\");\n    temp = temp.replace(/>/g,\"&gt;\");\n    preformatDisplay.innerHTML = temp;\n    entryContentDiv.appendChild(preformatDisplay);\n    \n    //content interaction\n    minMaxButton.onclick = () => {\n        if(minMaxButton.src == EXPAND_IMAGE_URL) {\n            minMaxButton.src = CONTRACT_IMAGE_URL;\n            entryContentDiv.className = \"editMeta_entryDataOpened\";\n        }\n        else {\n            minMaxButton.src = EXPAND_IMAGE_URL;\n            entryContentDiv.className = \"editMeta_entryDataClosed\";\n        }\n    }\n    \n    return div;\n}\n\n//=================================\n// selected cell management\n//=================================\n\nthis.loadSelectedCells = function() {\n    apogeeapp.ui.removeAllChildren(this.selectedTable);\n    this.selectedCells = {};\n    var options = this.getInsertionInfoOptions();\n    \n    var numberOptions = options.length;\n    \n    var insertUiEntry = (optionInfo,index) => {\n        \n        console.log(\"index: \" + index + \"; info: \" + JSON.stringify(optionInfo));\n        \n        var row = this.selectedTable.insertRow(index);\n        var cell = row.insertCell(0);\n        cell.className = \"editMeta_innerCell_container\";\n        \n        var innerTable = document.createElement(\"table\");\n        innerTable.className = \"editMeta_table\";\n        cell.appendChild(innerTable);\n        \n        var bodyInnerRow;\n        \n        var innerRowIndex = 0;\n        if(numberOptions > 1) {\n            var innerRow = innerTable.insertRow(innerRowIndex++);\n            var innerCell = innerRow.insertCell(0);\n            \n            innerCell.className = \"editMeta_innerCell_title\";\n            \n            var hideButton;\n            var showButton;\n            \n            hideButton = document.createElement(\"img\");\n            hideButton.src = CONTRACT_IMAGE_URL\n            hideButton.onclick = () => this.hideSelectionRow(bodyInnerRow,hideButton,showButton);\n            innerCell.appendChild(hideButton);\n            \n            showButton = document.createElement(\"img\");\n            showButton.src = EXPAND_IMAGE_URL;\n            showButton.onclick = () => this.showSelectionRow(bodyInnerRow,hideButton,showButton);\n            showButton.style.display = \"none\";\n            innerCell.appendChild(showButton);\n            \n            \n            var textElement = document.createTextNode(optionInfo.title);\n            innerCell.appendChild(textElement);\n        }\n        \n        var bodyInnerRow = innerTable.insertRow(innerRowIndex++);\n        innerCell = bodyInnerRow.insertCell(0);\n        innerCell.className = \"editMeta_innerCell_data\";\n        \n        var body = document.createElement(\"div\");\n        body.className = \"editMeta_displayDiv\";\n        innerCell.appendChild(body);\n        \n        var insertionInfo = optionInfo.insertionInfo;\n        \n        body.ondragover = (event) => { this.allowDrop(event); }\n        body.ondrop = (event) => { this.onSelectedDrop(event,insertionInfo); }\n        \n        var key = this.getSelectionKey(insertionInfo);\n        this.selectedCells[key] = body;\n    }\n    \n    options.forEach(insertUiEntry);\n}\n\nthis.getSelectedCell = function(insertionInfo) {\n    var key = this.getSelectionKey(insertionInfo);\n    var containerCell = this.selectedCells[key];\n    \n    if(!containerCell) {\n        throw new Error(\"Insertion info not found: \" + JSON.stringify(insertionInfo));\n    }\n    \n    return containerCell;\n}\n\nthis.getSelectionKey = function(insertionInfo) {\n    return insertionInfo != null ? insertionInfo.orderedEntry : \"default\";\n}\n\nthis.clearSelectedCells = function() {\n    for(var key in this.selectedCells) {\n        apogeeapp.ui.removeAllChildren(this.selectedCells[key]);\n    }\n}\n\nthis.getInsertionInfoOptions = function() {\n    var options = this.insertionInfoOptions[this.metaFileType];\n    \n    if(!options) {\n        options = this.insertionInfoOptions[\"default\"];\n    }\n    \n    if(!options) {\n        throw new Error(\"Insertion info options not found!\");\n    }\n    \n    return options;\n}\n\nthis.hideSelectionRow = function(bodyInnerRow,hideButton,showButton) {\n    bodyInnerRow.style.display = \"none\";\n    hideButton.style.display = \"none\";\n    showButton.style.display = \"\";\n}\nthis.showSelectionRow = function(bodyInnerRow,hideButton,showButton) {\n    bodyInnerRow.style.display = \"\";\n    hideButton.style.display = \"\";\n    showButton.style.display = \"none\";\n}\n//=================================\n// Drag and drop edit methods\n//=================================\n\nthis.onDragStart = function(event) {\n    event.dataTransfer.setData(\"text\",event.target.id);\n}\n\nthis.allowDrop = function(event) {\n    event.preventDefault();\n}\n\nthis.onSelectedDrop = function(event, insertionInfo) {\n    var data = event.dataTransfer.getData(\"text\");\n    var combinedEntry = this.lookupCombinedEntry(data);\n    \n//    if(!combinedEntry.selected) {\n        combinedEntry.selected = true;\n        combinedEntry.insertionInfo = insertionInfo;\n        this.loadEntries();\n//    }\n}\n\nthis.onAvailableDrop = function(event) {\n    var data = event.dataTransfer.getData(\"text\");\n    var combinedEntry = this.lookupCombinedEntry(data);\n    \n    if(combinedEntry.selected) {\n        combinedEntry.selected = false;\n        this.loadEntries();\n    }\n}\n\nthis.lookupCombinedEntry = function(divId) {\n    var fileEntryId = divId.substr(PREFIX_LENGTH);\n\n    var combinedEntry = this.combinedEntries.find( (entry) => (entry.fileEntry.Id == fileEntryId) );\n    if(!combinedEntry) {\n        alert(\"Error: dragged object not found in data\");\n        return null;\n    }\n    \n    return combinedEntry;\n}\n\n//=================================\n// Update methods\n//=================================\n\n//shared functions between ui elements - we need these\n//because for now there is no way to add shared ui code.\n\nvar taskCompleted = function(messenger,currentTask,nextTask,data) {\n    var taskResult = {};\n    taskResult.state = \"SUCCESS\";\n    taskResult.data = data;\n    \n    var updateInfo = [];\n    updateInfo.push([\"taskResults.\" + currentTask,taskResult]);\n    updateInfo.push([\"tasks.activeTask\",nextTask]);\n    messenger.compoundDataUpdate(updateInfo);\n}\n\nvar taskCanceled = function(messenger,currentTask,prevTask) {\n    var clearData = {};\n    clearData.state = \"INCOMPLETE\";\n    \n    var updateInfo = [];\n    updateInfo.push([\"taskResults.\" + currentTask,clearData]);\n    updateInfo.push([\"taskResults.\" + prevTask,clearData]);\n    updateInfo.push([\"tasks.activeTask\",prevTask]);\n    messenger.compoundDataUpdate(updateInfo);\n}\n\n//=================================\n// Filters\n//=================================\n\n/* This initializes the filters */\nthis.initializeFilters = function() {\n\n    //define the filters\n    var baseFilterList = [\n        [\"Section\",(fileEntry) => fileEntry.Fields.entry_section],\n    ];\n    \n    var typeSpecificFilters = this.getTypeSpecificFilters(this.metaFileType);\n    \n    var filterList = typeSpecificFilters ? baseFilterList.concat(typeSpecificFilters) : baseFilterList;\n    \n    //create the working filter struct\n    var createFilterStruct = (filterListEntry) => {\n        var struct = {};\n        struct.filterFunction = filterListEntry[1];\n        struct.title = filterListEntry[0];\n        struct.optionSet = null;\n        struct.selectionActive = false;\n        struct.selection = null;\n        struct.selectElement = null;\n        return struct;\n    }\n    this.filterStructs = filterList.map(createFilterStruct); \n    \n    //create the overrall filter function\n    this.overallDropdownFilter = (combinedEntry) => {\n        var resultOk = true;\n        var fileEntry = combinedEntry.fileEntry;\n\n        var singleFilterPass = (filterStruct) => {\n            if(filterStruct.selectionActive) {\n                 return (filterStruct.filterFunction(fileEntry) == filterStruct.selection);\n            }\n            else {\n                return true;\n            }\n        }\n        \n        return this.filterStructs.every(singleFilterPass);\n    }\n    \n    //create the fiter display elements\n    apogeeapp.ui.removeAllChildren(this.filterCell);\n    var createFilterEntry = (filterStruct) => {\n        this.filterCell.appendChild(this.getFilterElement(filterStruct));\n    }\n    this.filterStructs.forEach(createFilterEntry);\n    \n    //add the free text filter\n    this.filterCell.appendChild(this.createFreeTextFilterElement());\n}\n\n/** This creates a dom element for the filter select */\nthis.getFilterElement = function(filterStruct) {\n    var container = document.createElement(\"div\");\n    container.className = \"editMeta_filterContainerClass\";\n    \n    container.appendChild(document.createTextNode(filterStruct.title));\n    \n    var selectElement = document.createElement(\"select\");\n    filterStruct.selectElement = selectElement;\n    container.appendChild(selectElement);\n    \n    //handler = make selection and reload file entries\n    filterStruct.selectElement.onchange = (event) => {\n        if(selectElement.value == NULL_SELECTION) {\n            filterStruct.selectionActive = false;\n            filterStruct.selection = null;\n        }\n        else {\n            filterStruct.selectionActive = true;\n            filterStruct.selection = selectElement.value;\n        }\n        this.loadEntries();\n    };\n    \n    return container;\n}\n\nvar NULL_SELECTION = \"----\";\n\n/** This creates a dom element for the filter select */\nthis.createFreeTextFilterElement = function() {\n    var container = document.createElement(\"div\");\n    container.className = \"editMeta_filterContainerClass\";\n    \n    container.appendChild(document.createTextNode(\"Free text\"));\n    \n    this.freeTextFilterEntry = document.createElement(\"input\");\n    this.freeTextFilterEntry.type = \"text\";\n    this.freeTextFilterEntry.oninput = () => this.onFilterKeyTyped();\n    container.appendChild(this.freeTextFilterEntry);\n    \n    return container;\n}\n\n\n/** This method populates the options into the filter struct. */\nthis.populateFilterSelect = function(filterStruct) {\n    apogeeapp.ui.removeAllChildren(filterStruct.selectElement);\n    \n    filterStruct.selectElement.add(apogeeapp.ui.createElement(\"option\",{\"text\":NULL_SELECTION}));\n    \n    for(var option in filterStruct.optionSet) {\n        filterStruct.selectElement.add(apogeeapp.ui.createElement(\"option\",{\"text\":option}));\n    }\n    \n    if(filterStruct.selectionActive) {\n        filterStruct.selectElement.value = filterStruct.selection;\n    }\n    else {\n        filterStruct.selectElement.value = NULL_SELECTION;\n    }\n}\n\n/** This method populates the allowed options for each filter in the list. It does this\n * sequentially, meaning the options for later filters depend on the current selection in previous filters. */\nthis.populateFilterOptions = function() {\n    \n    var fileEntryList = this.combinedEntries.map((combinedEntry) => combinedEntry.fileEntry);\n    \n    //the create options function, for use with reduce\n    var createOptionsAndFilterList = (filterStruct) => {\n        \n        \n        //populate filter option set\n        var addToOptionSet = (optionSet,fileEntry) => {\n            var value = filterStruct.filterFunction(fileEntry);\n            optionSet[value] = true;\n            return optionSet;\n        }\n        \n        filterStruct.optionSet = fileEntryList.reduce(addToOptionSet,{});\n        \n        //update selection active = clear it if it was set to something that was not an option\n        if(filterStruct.selectionActive) {\n            if(!filterStruct.optionSet[filterStruct.selection]) {\n                filterStruct.selectionActive = false;\n                filterStruct.selection = null;\n            }\n        }\n        \n        //filter out list for next filter, if selection active\n        fileEntryList = fileEntryList.filter( (fileEntry) => {\n            if(filterStruct.selectionActive) {\n                 return (filterStruct.filterFunction(fileEntry) == filterStruct.selection);\n            }\n            else {\n                return true;\n            }\n        });\n        \n        //populate the ui element for these new options\n        this.populateFilterSelect(filterStruct);\n    }\n    \n    this.filterStructs.forEach(createOptionsAndFilterList)\n}\n\nthis.getTypeSpecificFilters = function(metaFileType) {\n    return TYPE_SPECIFIC_FILTERS[metaFileType];\n}\n\nTYPE_SPECIFIC_FILTERS = {\n    \"propertyRules\":[\n        ],\n    \"themeRules\":[\n        [\"Option\",(fileEntry) => fileEntry.Fields.entry_data.propType]\n        ],\n    \"theme\":[\n        ],\n    \"strings\":[\n        ],\n    \"inputColors\":[\n        ]\n}\n\nconst TEXT_FILTER_DELAY = 250;\n\n//text filter methods\nthis.onFilterKeyTyped = function() {\n    if(this.filterTimer) {\n        clearTimeout(this.filterTimer);\n        this.filterTimer = null;\n    }\n    \n    this.filterTimer = setTimeout(() => this.updateTextFilter(),TEXT_FILTER_DELAY);\n}\n\nthis.updateTextFilter = function() {\n    //clear timer\n    this.filterTimer = null;\n    \n    //reload the entries\n    this.loadEntries();\n}\n","onLoad":"if(!this.initialized) {\n    this.selectedTable = document.getElementById(\"editMeta_selectedTable\");\n    this.selectedCells = null;\n    this.availableCell = document.getElementById(\"editMeta_availableCell\");\n    \n    this.filterCell = document.getElementById(\"editMeta_filterCell\");\n    \n    this.commitButton = document.getElementById(\"editMeta_commitButton\");\n    this.resetButton = document.getElementById(\"editMeta_resetButton\");\n    this.cancelButton = document.getElementById(\"editMeta_cancelButton\");\n    \n    var instance = this;\n    \n    this.commitButton.onclick = () => instance.onCommitClicked();\n    this.resetButton.onclick = () => instance.onResetClicked();\n    this.cancelButton.onclick = () => instance.onCancelClicked();\n    \n    this.availableCell.ondragover = (event) => this.allowDrop(event);\n    this.availableCell.ondrop = (event) => this.onAvailableDrop(event);\n    \n    //finished\n    this.initialized = true;\n    \n    if(this.cachedData !== undefined) {\n        console.log(\"using cached data!\");\n        this.setData(this.cachedData);\n        this.cachedData = undefined;\n    }\n}"}},"fileTypeEntryList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":1082,"height":473},"posInfo":{"x":33,"y":106},"state":-1,"viewType":"Formula"}},"metaFileResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":799,"height":324},"posInfo":{"x":28,"y":150},"state":-1,"viewType":"Formula"}},"availableFileEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":743,"height":553},"posInfo":{"x":330,"y":274},"state":-1,"viewType":"JSON"}},"existingMetaFileEntry":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":488,"height":259},"posInfo":{"x":28,"y":264},"state":-1,"viewType":"Formula"}},"activeMetaFileEntry":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":734,"height":305},"posInfo":{"x":32,"y":361},"state":-1,"viewType":"Text"}},"existingRecipeEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":592,"height":407},"posInfo":{"x":329,"y":321},"state":-1,"viewType":"Text"}},"fileSelection":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":624,"height":336},"posInfo":{"x":445,"y":18},"state":-1,"viewType":"Formula"}},"sessionKey":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":717,"height":408},"posInfo":{"x":27,"y":18},"state":-1,"viewType":"Formula"}},"context":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":585,"height":300},"posInfo":{"x":250,"y":16},"state":-1,"viewType":"Formula"}},"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":393,"height":151},"posInfo":{"x":26,"y":611},"state":-1,"viewType":"Text"}},"state":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":290,"height":79},"posInfo":{"x":27,"y":477},"state":-1,"viewType":"Text"}},"insertionInfoOptions":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":452,"height":660},"posInfo":{"x":759,"y":19},"state":-1,"viewType":"JSON"}},"metaFileType":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":579,"height":233},"posInfo":{"x":28,"y":207},"state":-1,"viewType":"Formula"}}}},"selectMetaFile":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":42,"y":92}},"children":{"metaFileList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":393,"height":128},"posInfo":{"x":31,"y":89},"state":-1,"viewType":"Formula"}},"metaFileSelector":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":404,"height":149},"posInfo":{"x":507,"y":19},"state":0,"viewType":"Output"},"resource":{"html":"<input type=\"radio\" value=\"create\" name=\"createUpdate\" id=\"load_createRadio\">Create</input>\n<input type=\"radio\" value=\"update\" name=\"createUpdate\" id=\"load_updateRadio\">Update</input>\n<br><br>\n<select id=\"load_metaFileSelect\"></select>\n<select id=\"load_fileTypeSelect\"></select>\n<br><br>\n<div id=\"load_metaFilePanel\">\nMeta File Name: <input type=\"text\" id=\"load_metaFileNameInput\"></input>\n<br><br>\n</div>\n<input type=\"button\" value=\"Submit\" id=\"load_submitButton\"></input>\n<input type=\"button\" value=\"Cancel\" id=\"load_cancelButton\"></input>","onLoad":"this.createRadio = document.getElementById(\"load_createRadio\");\nthis.updateRadio = document.getElementById(\"load_updateRadio\");\nthis.selectMetaFileElement = document.getElementById(\"load_metaFileSelect\");\nthis.selectFileTypeElement = document.getElementById(\"load_fileTypeSelect\");\nthis.metaFilePanel = document.getElementById(\"load_metaFilePanel\");\nthis.metaFileNameInput = document.getElementById(\"load_metaFileNameInput\");\nthis.submitButton = document.getElementById(\"load_submitButton\");\nthis.cancelButton = document.getElementById(\"load_cancelButton\");\n\nvar instance = this;\nthis.submitButton.onclick = function() {\n    instance.onSubmitClick();\n}\nthis.cancelButton.onclick = function() {\n    instance.onCancelClick();\n}\n\nvar onRadioClick = function() {\n    instance.onRadioClick();\n}\n\nthis.createRadio.onclick = onRadioClick;\nthis.updateRadio.onclick = onRadioClick;\n\nthis.initialized = true;\n\nif(this.cachedData !== null) {\n    this.setData(this.cachedData);\n    this.cachedData = null;\n}","setData":"if(!data) return;\n\nif(!this.initialized) {\n    this.cachedData = data;\n    return;\n}\n\nthis.editExisting = data.editExisting;\n\nvar INVALID_ID = 0;\n\nif(this.selectMetaFileElement) {\n\n    apogeeapp.ui.removeAllChildren(this.selectMetaFileElement);\n    \n    //add a dummy entry\n    var option = document.createElement(\"option\");\n    option.text = \"<none selected>\";\n    \n    option.value = INVALID_ID;\n    if(INVALID_ID == data.currentMetaFileId) option.selected = true;\n    this.selectMetaFileElement.add(option);\n    \n    for(var fileDesc in data.metaFiles) {\n        var id = data.metaFiles[fileDesc];\n        var option = document.createElement(\"option\");\n        option.text = fileDesc;\n        option.value = id;\n        if(id == data.currentMetaFileId) option.selected = true;\n        this.selectMetaFileElement.add(option);\n    }\n}\n\nif(this.selectFileTypeElement) {\n    apogeeapp.ui.removeAllChildren(this.selectFileTypeElement);\n    \n    //add a dummy entry\n    var option = document.createElement(\"option\");\n    option.text = \"<none selected>\";\n    option.value = INVALID_ID;\n    if(INVALID_ID == data.currentFileTypeId) option.selected = true;\n\n    this.selectFileTypeElement.add(option);\n    \n    for(var fileDesc in data.fileTypes) {\n        var id = data.fileTypes[fileDesc];\n        var option = document.createElement(\"option\");\n        option.text = fileDesc;\n        option.value = id;\n        if(id == data.currentFileTypeId) option.selected = true;\n        this.selectFileTypeElement.add(option);\n    }\n}\n\nthis.updateUiForCreateUpdate(data.editExisting);\n\n//set a default name, if that field is empty\nif(this.metaFileNameInput.value.length === 0) {\n    this.metaFileNameInput.value = data.defaultMetaFileName;\n}\n","constructorAddition":"this.data = null;\nthis.cachedData = null;\n\nthis.onSubmitClick = function() {\n    \n    var selectElement = this.editExisting ? this.selectMetaFileElement : this.selectFileTypeElement;\n    \n    if(!selectElement) {\n        alert(\"Error; UI not initialized\");\n        return;\n    }\n    \n    if(selectElement.length === 0) {\n        alert(\"Invalid selection!\");\n        return;\n    }\n    \n    var selectedIdString = selectElement.value;\n    if(!isFinite(selectedIdString)) {\n        alert(\"Invalid selection!\");\n        return;\n    }\n    var selectedId = Number(selectedIdString);\n\n    if(!this.editExisting) {\n        var metaFileName = this.metaFileNameInput.value.trim();\n        if((!metaFileName)||(metaFileName.length === 0)) {\n            alert(\"Invalid meta file name!\");\n            return;\n        }\n    }\n    \n    var fileSelection = {};\n    fileSelection.editExisting = this.editExisting;\n    if(this.editExisting) {\n        fileSelection.metaFileId = selectedId;\n    }\n    else {\n        fileSelection.fileTypeId = selectedId;\n        fileSelection.metaFileName = metaFileName;\n    }\n    \n    taskAppModule.taskCompleted(mode.getMessenger(),[\"editMeta\",\"selectMetaFile\"],[\"editMeta\",\"editMetaFile\"],fileSelection);\n}\n\nthis.onCancelClick = function() {\n    taskAppModule.taskCanceled(mode.getMessenger(),[\"editMeta\",\"selectMetaFile\"],[\"editMeta\",\"selectMetaContext\"]);\n}\n\nthis.onRadioClick = function() {\n    var editExisting = this.updateRadio.checked;\n    this.updateUiForCreateUpdate(editExisting);\n}\n\nthis.updateUiForCreateUpdate = function(editExisting) {\n    this.editExisting = editExisting;\n    \n    if(this.selectFileTypeElement) {\n        this.selectFileTypeElement.style.display = editExisting ? \"none\" : \"\";\n    }\n    if(this.selectMetaFileElement) {\n        this.selectMetaFileElement.style.display = editExisting ? \"\" : \"none\";\n    }\n    if(this.metaFilePanel) {\n        this.metaFilePanel.style.display = editExisting ? \"none\" : \"\";\n    }\n    \n    var createRadioSelected = !editExisting;\n    var updateRadioSelected = editExisting;\n    \n    if((this.createRadio)&&(this.createRadio.checked != createRadioSelected)) {\n        this.createRadio.checked = createRadioSelected;\n    }\n    if((this.updateRadio)&&(this.updateRadio.checked != updateRadioSelected)) {\n        this.updateRadio.checked = updateRadioSelected;\n    }\n}\n\n"}},"context":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":529,"height":319},"posInfo":{"x":257,"y":32},"state":-1,"viewType":"Text"}},"sessionKey":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":723,"height":349},"posInfo":{"x":31,"y":33},"state":-1,"viewType":"Text"}},"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":270,"height":125},"posInfo":{"x":41,"y":330},"state":0,"viewType":"Text"}},"state":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":290,"height":115},"posInfo":{"x":31,"y":156},"state":0,"viewType":"Text"}}}},"selectMetaContext":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":45,"y":48}},"children":{"contextControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":409,"height":171},"posInfo":{"x":46,"y":31},"state":0,"viewType":"Output"},"resource":{"html":"<input type=\"radio\" name=\"contextControl_meta\" id=\"contextControl_cidRadio\">CID: <input type=\"text\" id=\"contextControl_cid\"></input><br>\n<input type=\"radio\" name=\"contextControl_meta\" id=\"contextControl_customerRadio\">Customer: <select id=\"contextControl_customer\"></select><br>\n<input type=\"radio\" name=\"contextControl_meta\" id=\"contextControl_globalRadio\">Global<br>\n<br><br>\n<input type=\"button\" id=\"contextControl_submit\" value=\"Submit\"></input>\n<input type=\"button\" id=\"contextControl_cancel\" value=\"Cancel\"></input>","onLoad":"this.cidRadio = document.getElementById(\"contextControl_cidRadio\");\nthis.customerRadio = document.getElementById(\"contextControl_customerRadio\");\nthis.globalRadio = document.getElementById(\"contextControl_globalRadio\");\nthis.cidInput = document.getElementById(\"contextControl_cid\");\nthis.customerDropdown = document.getElementById(\"contextControl_customer\");\nthis.submitButton = document.getElementById(\"contextControl_submit\");\nthis.cancelButton = document.getElementById(\"contextControl_cancel\");\nthis.initialized = true;\n\nvar instance = this;\nthis.submitButton.onclick = function() {\n    instance.onSubmit();\n}\nthis.cancelButton.onclick = function() {\n    instance.onCancel();\n}\n\nif(this.customerList) this.loadCustomerList();","constructorAddition":"this.textInput = null;\nthis.submitButton = null;\nthis.newLogingButton = null;\nthis.initialized = false;\n\nthis.onSubmit = function() {\n    if(!this.initialized) return;\n    \n    var context;\n    if(this.cidRadio.checked) {\n        var cidString = this.cidInput.value.trim();\n        if(cidString.length === 0) {\n            alert(\"Please enter a CID.\");\n            return;\n        }\n        var cid;\n        try {\n            cid = parseInt(cidString);\n        }\n        catch(error) {\n            alert(\"Invalid CID: \" + error.message);\n            return;\n        }\n        \n        if(!cid) {\n            alert(\"Invalid CID - not a number\");\n            return;\n        }\n        \n        context = this.cidContextPrefix + cid;\n        \n    }\n    else if(this.customerRadio.checked) {\n        context = this.customerDropdown.value;\n        \n        if(context == this.dummyDropdownEntry) {\n            alert(\"Please select a valid customer!\");\n            return;\n        }\n    }\n    else if(this.globalRadio.checked) {\n        context = this.globalContext;\n    }\n    else {\n        alert(\"Please select an input option!\");\n        return;\n    }\n    \n    var data = {}\n    data.context = context;\n    \n    taskAppModule.taskCompleted(mode.getMessenger(),[\"editMeta\",\"selectMetaContext\"],[\"editMeta\",\"selectMetaFile\"],data);\n}\n\nthis.onCancel = function() {\n    taskAppModule.taskCanceled(mode.getMessenger(),[\"editMeta\",\"selectMetaContext\"],[\"switcher\"]);\n}\n\nthis.loadCustomerList = function() {\n    //clear any old entries\n    this.customerDropdown.innerHTML = \"\";\n    \n    //add default entry\n    var entry = document.createElement(\"option\");\n    entry.text = this.dummyDropdownEntry;\n    entry.value = this.dummyDropdownEntry;\n    this.customerDropdown.appendChild(entry);\n    \n    var addEntry = element => {\n        var entry = document.createElement(\"option\");\n        entry.text = element.customerName;\n        entry.value = element.authString;\n        this.customerDropdown.appendChild(entry);\n    }\n    \n    this.customerList.forEach(addEntry);\n    \n    this.customerDropdown.value = this.dummyDropdownEntry;\n}\n\n","setData":"this.customerList = data.customerList;\n//constats\nthis.dummyDropdownEntry = data.dummyDropdownEntry;\nthis.cidContextPrefix = data.cidContextPrefix;\nthis.globalContext = data.globalContext;\nif(this.initialized) {\n    this.loadCustomerList();\n}"}},"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":303,"height":116},"posInfo":{"x":526,"y":216},"state":0,"viewType":"Text"}},"state":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":337,"height":102},"posInfo":{"x":527,"y":58},"state":0,"viewType":"Text"}}}},"getMetaContext":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":339,"y":49},"state":-1,"viewType":"Code"}},"editPostProcess":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":45,"y":8}},"children":{"editResults":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":817,"height":348},"posInfo":{"x":24,"y":32},"state":-1,"viewType":"Text"}},"createMetaFileEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":485,"height":216},"posInfo":{"x":809,"y":100},"state":-1,"viewType":"Formula"}},"createRecipeEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":804,"height":474},"posInfo":{"x":321,"y":228},"state":-1,"viewType":"Text"}},"editRecipeEntryPairs":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":938,"height":404},"posInfo":{"x":293,"y":89},"state":-1,"viewType":"Formula"}},"deleteRecipeEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":948,"height":470},"posInfo":{"x":288,"y":133},"state":-1,"viewType":"Formula"}},"instructionList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":910,"height":486},"posInfo":{"x":112,"y":293},"state":0,"viewType":"JSON"}}}}}},"editCom":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":194,"y":29}},"children":{"selectCid":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":50,"y":50}},"children":{"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":303,"height":116},"posInfo":{"x":538,"y":219},"state":0,"viewType":"Text"}},"state":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":337,"height":102},"posInfo":{"x":527,"y":58},"state":0,"viewType":"Text"}},"selectCidControl":{"type":"apogeeapp.app.ConfigurableForm","windowState":{"sizeInfo":{"width":351,"height":143},"posInfo":{"x":31,"y":59},"state":0,"viewType":"Output"}},"baseLayout":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":534,"height":300},"posInfo":{"x":492,"y":401},"state":-1,"viewType":"Text"}},"layout":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":756,"height":300},"posInfo":{"x":493,"y":444},"state":-1,"viewType":"Formula"}}}},"editComFile":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":50,"y":112}},"children":{"sessionKey":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":717,"height":408},"posInfo":{"x":25,"y":18},"state":-1,"viewType":"Formula"}},"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":235,"height":84},"posInfo":{"x":38,"y":652},"state":-1,"viewType":"Text"}},"state":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":290,"height":83},"posInfo":{"x":43,"y":593},"state":-1,"viewType":"Text"}},"selection":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":585,"height":300},"posInfo":{"x":322,"y":6},"state":-1,"viewType":"Formula"}},"comFileResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":1113,"height":313},"posInfo":{"x":22,"y":321},"state":-1,"viewType":"Formula"}},"metaFileList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":1082,"height":-33},"posInfo":{"x":44,"y":172},"state":-1,"viewType":"JSON"}},"existingComFileEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":780,"height":407},"posInfo":{"x":25,"y":367},"state":-1,"viewType":"Text"}},"availableMetaFiles":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":743,"height":320},"posInfo":{"x":19,"y":278},"state":-1,"viewType":"Formula"}},"comFile":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":688,"height":489},"posInfo":{"x":24,"y":417},"state":-1,"viewType":"Formula"}},"selectMetaFilesControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":970,"height":677},"posInfo":{"x":251,"y":46},"state":0,"viewType":"Output"},"resource":{"html":"<table class=\"editCom_table\">\r\n     <tr>\r\n        <td colspan=\"3\">\r\n        </td>\r\n    </tr>\r\n    <tr>\r\n        <td class=\"editCom_selectedColumn\">\r\n            <h2>Selected</h2>\r\n        </td>\r\n        <td class=\"editCom_centerColumn\">&nbsp;</td>\r\n        <td class=\"editCom_availableColumn\">\r\n            <h2>Available</h2>\r\n        </td>\r\n    </tr>\r\n    <tr>\r\n        <td class=\"editCom_selectedCell\">\r\n            <table class=\"editCom_table\">\r\n                <tr>\r\n                    <td>\r\n                        <h3>Base Files</h3>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td class=\"editCom_baseOuterCell\">\r\n                        <table class=\"editCom_baseTable\">\r\n                            <tr>\r\n                                <td class=\"editCom_baseCell\">\r\n                                    <b>Property Rules</b>\r\n                                    <div id=\"editCom_basePropertyRules\" class =\"editCom_baseEntry\"></div>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td class=\"editCom_baseCell\">\r\n                                    <b>Theme Rules</b>\r\n                                    <div id=\"editCom_baseThemeRules\" class =\"editCom_baseEntry\"></div>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td class=\"editCom_baseCell\">\r\n                                    <b>Theme</b>\r\n                                    <div id=\"editCom_baseTheme\" class =\"editCom_baseEntry\"></div>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td class=\"editCom_baseCell\">\r\n                                    <b>Strings</b>\r\n                                    <div id=\"editCom_baseStrings\" class =\"editCom_baseEntry\"></div>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td class=\"editCom_baseCell\">\r\n                                   <b>Input Colors</b>\r\n                                    <div id=\"editCom_baseInputColors\" class =\"editCom_baseEntry\"></div>\r\n                                </td>\r\n                            </tr>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n                                <tr>\r\n                    <td>\r\n                        <h3>Overide Files</h3>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td class=\"editCom_overrideCell\">\r\n                        <div id=\"editCom_overrides\"  class=\"editCom_overrideList\"></div>\r\n                    </td>\r\n                </tr>\r\n            \r\n            </table>\r\n        </td>\r\n        <td>&nbsp;</td>\r\n        <td class=\"editCom_availableCell\">\r\n            <div id=\"editCom_available\" class=\"editCom_availableList\"></div>\r\n        </td>\r\n    </tr>\r\n    <tr>\r\n        <td colspan=\"3\">\r\n            <input type=\"button\" value=\"Commit\" id=\"editCom_commitButton\">\r\n            &nbsp;\r\n            <input type=\"button\" value=\"Reset\" id=\"editCom_resetButton\">\r\n            &nbsp;\r\n            <input type=\"button\" value=\"Cancel\" id=\"editCom_cancelButton\">\r\n        </td>\r\n    </tr>\r\n</table>\r\n","css":".editCom_table {\n    width: 100%;\n    height: 100%;\n    /*border-collapse: collapse;*/\n}\n.editCom_selectedColumn {\n    width: 45%;\n}\n.editCom_centerColumn {\n    width: 5%;\n}\n.editCom_availableColumn {\n    width: 45%;\n}\n\n.editCom_selectedCell {\n    height: 100%;\n}\n.editCom_availableCell {\n    height: 100%;\n}\n.editCom_overrideCell {\n    height: 100%;\n    width: 100%;\n}\n.editCom_baseOuterCell {\n    width: 100%;   \n}\n.editCom_baseTable {\n    width: 100%;\n    border-collapse: collapse;\n}\n.editCom_baseCell {\n    width: 100%;\n}\n\n.editCom_availableList {\n    height: 100%;\n    /*width: 100%;*/\n    border: 1px solid black;\n    overflow: auto;\n}\n.editCom_overrideList {\n    height: 100%;\n    /*width: 100%;*/ \n    border: 1px solid black;\n    overflow: auto;\n}\n.editCom_baseEntry {\n    min-height: 20px;\n    /*width: 100%;*/\n    border: 1px solid black;\n    overflow: auto;\n}\n\n.editCom_listEntry {\n  border: 1px solid darkgray;\n  padding: 2px;\n}\n.editCom_entryLabel {\n    font-weight: bold;\n}\n","setData":"if(!data) return;\n\n//store the data if we are not ready yet\nif(!this.initialized) {\n    this.cachedData = data;\n    return;\n}\n\n//set data\nthis.metaFiles = data.metaFiles;\nthis.initialComFileEntries = data.initialComFileEntries;\nthis.comFile = data.comFile;\nthis.fileTypeIdToName = data.fileTypeIdToName;\nthis.fileTypeNameToId = data.fileTypeNameToId;\n\n//create combined entries\nthis.createCombinedEntries(data.initialComFileEntries,data.metaFiles);\n\n//load ui\nthis.loadEntries();\n\n\n\n\n","constructorAddition":"const CELL_ID_PREFIX = \"com_entry_\";\nconst PREFIX_LENGTH = CELL_ID_PREFIX.length;\n\n\nthis.initialized = false;\n\nthis.combinedEntries = null\n\nthis.comFile = null;\nthis.initialComFileEntries = null;\nthis.metaFiles = null;\n\nthis.selectedCell = null;\nthis.availableCell = null;\n\nthis.onCommitClicked = function() {\n    var data = {};\n    //make a copy so we can continue to work with our local copy - if the user cancels back here\n    data.combinedEntries = apogee.util.jsonCopy(this.combinedEntries);\n    data.comFile = this.comFile;\n    \n    taskAppModule.taskCompleted(mode.getMessenger(),[\"editCom\",\"editComFile\"],[\"submit\"],data);\n}\n\nthis.onResetClicked = function() {\n    this.createCombinedEntries(this.initialComFileEntries,this.metaFiles);\n}\n\nthis.onCancelClicked = function() {\n    taskAppModule.taskCanceled(mode.getMessenger(),[\"editCom\",\"editComFile\"],[\"editCom\",\"selectCid\"]);\n}\n\n//=====================================\n// Initialize Data Methods\n//=====================================\n\nthis.createCombinedEntries = function(initialComFileEntries,metaFiles) {\n    \n    var newCombinedEntries = [];\n    \n    var tempMap = {};\n    \n    var addMetaFileToMap = (record) => {\n        var combinedEntry = {}\n        combinedEntry.metaFile = record;\n        combinedEntry.selected = false;\n        tempMap[record.Id] = combinedEntry;\n        newCombinedEntries.push(combinedEntry);\n    }\n    metaFiles.forEach(addMetaFileToMap);\n\n    var addComFileEntryToMap = (record) => {\n        var combinedEntry = tempMap[record.Fields.meta_file_id];\n        if(combinedEntry === undefined) {\n            throw new Error(\"file entry not found: fileEntryId=\" + record.Fields.file_entry_id);\n        }\n        combinedEntry.comFileEntry = record;\n        combinedEntry.fileGroup = record.Fields.file_group;\n        combinedEntry.selected = true;\n    }\n    initialComFileEntries.forEach(addComFileEntryToMap);\n    \n    this.combinedEntries = newCombinedEntries;\n}\n\n//=====================================\n// Load Methods\n//=====================================\n\nthis.loadEntries = function() {\n    apogeeapp.ui.removeAllChildren(this.overridesCell);\n    for(var fileType in this.baseCells) {\n        apogeeapp.ui.removeAllChildren(this.baseCells[fileType]);\n    }\n    apogeeapp.ui.removeAllChildren(this.availableCell);\n    \n    var addCombinedEntry = (combinedEntry) => {\n        var cellElement = this.createCell(combinedEntry);\n        if(combinedEntry.selected) {\n            if(combinedEntry.fileGroup == \"base\") {\n                var fileTypeId = combinedEntry.metaFile.Fields.file_type_id;\n                var fileTypeName = this.fileTypeIdToName[fileTypeId];\n                var baseCell = this.baseCells[fileTypeName];\n                baseCell.appendChild(cellElement);\n            }\n            else if(combinedEntry.fileGroup == \"overrides\") {\n                this.overridesCell.appendChild(cellElement);\n            }\n            else {\n            }\n        }\n        else {\n            this.availableCell.appendChild(cellElement);\n        }\n    }\n\n    this.combinedEntries.forEach(addCombinedEntry);\n}\n\nthis.createCell = function(combinedEntry) {\n    \n    var metaFileFields = combinedEntry.metaFile.Fields\n    var name = fileType + \" - \" +  metaFileFields.name + \" - \" + metaFileFields.file_context;\n    \n    var fileType = this.fileTypeIdToName[metaFileFields.file_type_id];\n    \n    var name = fileType + \" - \" +  metaFileFields.name + \" - \" + metaFileFields.file_context;\n    \n    var div = document.createElement(\"div\");\n    div.id = CELL_ID_PREFIX + combinedEntry.metaFile.Id;\n    div.className = \"editCom_listEntry\";\n    \n    //draggable interface\n    div.draggable = true;\n    var instance = this;\n    div.ondragstart = (event) => this.onDragStart(event,fileType);\n    \n    var textSpan = document.createElement(\"span\");\n    textSpan.className = \"editCom_entryLabel\";\n    textSpan.appendChild(document.createTextNode(name));\n    div.appendChild(textSpan);\n    \n    return div;\n}\n\n//=================================\n// Drag and drop edit methods\n//=================================\n\nthis.setCellDragMethods = function(cell,fileType) {\n    cell.ondragover = (event) => this.allowDrop(event,fileType);\n    cell.ondrop = (event) => this.onSelectedDrop(event,\"base\",fileType);\n}\n\nthis.onDragStart = function(event,fileType) {\n    event.dataTransfer.setData(\"id\",event.target.id);\n    event.dataTransfer.setData(\"fileType\",fileType);\n}\n\nthis.allowDrop = function(event,fileType) {\n    //I don't know why this is not working - I put the test in the on drop method. it would be better here.\n    // if(fileType !== undefined) {\n    //     var dragFileType = event.dataTransfer.getData(\"fileType\");\n    //     var destFileType = this.fileTypeNameToId[fileType];\n    //     if(dragFileType == destFileType) {\n    //         event.preventDefault();\n    //     }\n    // }\n    // else {\n        event.preventDefault();\n    // }\n}\n\nthis.onSelectedDrop = function(event,fileGroup,fileType) {\n    var data = event.dataTransfer.getData(\"id\");\n    var combinedEntry = this.lookupCombinedEntry(data);\n    \n    //this is here because I couldn't get it to work in allowDrop\n    if(fileType) {\n       var draggedFileType = event.dataTransfer.getData(\"fileType\",fileType);\n       if(draggedFileType != fileType) {\n           alert(\"Incorrect location for this file type: \" + draggedFileType);\n           return;\n       }\n    }\n    \n    combinedEntry.selected = true;\n    combinedEntry.fileGroup = fileGroup;\n    this.loadEntries();\n\n}\n\nthis.onAvailableDrop = function(event) {\n    var data = event.dataTransfer.getData(\"id\");\n    var combinedEntry = this.lookupCombinedEntry(data);\n    \n    if(combinedEntry.selected) {\n        combinedEntry.selected = false;\n        this.loadEntries();\n    }\n}\n\nthis.lookupCombinedEntry = function(divId) {\n    var metaFileId = divId.substr(PREFIX_LENGTH);\n\n    var combinedEntry = this.combinedEntries.find( (entry) => (entry.metaFile.Id == metaFileId) );\n    if(!combinedEntry) {\n        alert(\"Error: dragged object not found in data\");\n        return null;\n    }\n    \n    return combinedEntry;\n}\n\n//=================================\n// Update methods\n//=================================\n\n//shared functions between ui elements - we need these\n//because for now there is no way to add shared ui code.\n\nvar taskCompleted = function(messenger,currentTask,nextTask,data) {\n    var taskResult = {};\n    taskResult.state = \"SUCCESS\";\n    taskResult.data = data;\n    \n    var updateInfo = [];\n    updateInfo.push([\"taskResults.\" + currentTask,taskResult]);\n    updateInfo.push([\"tasks.activeTask\",nextTask]);\n    messenger.compoundDataUpdate(updateInfo);\n}\n\nvar taskCanceled = function(messenger,currentTask,prevTask) {\n    var clearData = {};\n    clearData.state = \"INCOMPLETE\";\n    \n    var updateInfo = [];\n    updateInfo.push([\"taskResults.\" + currentTask,clearData]);\n    updateInfo.push([\"taskResults.\" + prevTask,clearData]);\n    updateInfo.push([\"tasks.activeTask\",prevTask]);\n    messenger.compoundDataUpdate(updateInfo);\n}\n","onLoad":"if(!this.initialized) {\n    this.overridesCell = document.getElementById(\"editCom_overrides\");\n    this.availableCell = document.getElementById(\"editCom_available\");\n    \n    this.baseCells = {};\n    \n    this.baseCells.propertyRules = document.getElementById(\"editCom_basePropertyRules\");\n    this.baseCells.themeRules = document.getElementById(\"editCom_baseThemeRules\");\n    this.baseCells.theme = document.getElementById(\"editCom_baseTheme\");\n    this.baseCells.strings = document.getElementById(\"editCom_baseStrings\");\n    this.baseCells.inputColors = document.getElementById(\"editCom_baseInputColors\");\n    \n    this.commitButton = document.getElementById(\"editCom_commitButton\");\n    this.resetButton = document.getElementById(\"editCom_resetButton\");\n    this.cancelButton = document.getElementById(\"editCom_cancelButton\");\n    \n    this.commitButton.onclick = () => this.onCommitClicked();\n    this.resetButton.onclick = () => this.onResetClicked();\n    this.cancelButton.onclick = () => this.onCancelClicked();\n    \n    this.overridesCell.ondragover = (event) => this.allowDrop(event);\n    this.overridesCell.ondrop = (event) => this.onSelectedDrop(event,\"overrides\");\n    \n    this.availableCell.ondragover = (event) => this.allowDrop(event);\n    this.availableCell.ondrop = (event) => this.onAvailableDrop(event);\n    \n    for(var fileType in this.baseCells) {\n        var cell = this.baseCells[fileType];\n        this.setCellDragMethods(cell,fileType);\n    }\n    \n    this.initialized = true;\n    \n    if(this.cachedData !== undefined) {\n        this.setData(this.cachedData);\n        this.cachedData = undefined;\n    }\n}"}},"NEW_COM_FILE_REF":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":327,"y":88},"state":-1,"viewType":"Text"}}}},"editPostProcess":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":53,"y":167}},"children":{"editResults":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":817,"height":399},"posInfo":{"x":14,"y":30},"state":-1,"viewType":"JSON"}},"instructionList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":910,"height":642},"posInfo":{"x":23,"y":95},"state":-1,"viewType":"JSON"}},"createComFileEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":937,"height":521},"posInfo":{"x":319,"y":42},"state":-1,"viewType":"Private"}},"editComFileEntryPairs":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":938,"height":466},"posInfo":{"x":323,"y":88},"state":-1,"viewType":"Formula"}},"deleteComFileEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":948,"height":470},"posInfo":{"x":323,"y":136},"state":-1,"viewType":"Text"}},"createComFile":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":485,"height":378},"posInfo":{"x":292,"y":201},"state":-1,"viewType":"Formula"}}}}}},"editEntry":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":198,"y":122}},"children":{}},"switcher":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":60,"y":79}},"children":{"selectSequence":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":398,"height":146},"posInfo":{"x":243,"y":52},"state":0,"viewType":"Output"},"resource":{"html":"Select Edit Type:<br>\n<input type=\"radio\" value=\"meta\" name=\"switch\" id=\"switch_metafile\" checked=\"true\">Meta File</input><br>\n<input type=\"radio\" value=\"com\" name=\"switch\" id=\"switch_comfile\">Com File</input><br>\n<!--<input type=\"radio\" value=\"entry\" name=\"switch\" id=\"switch_fileentry\">File Entry</input><br>-->\n<br><br>\n<input type=\"button\" value=\"Submit\" id=\"switch_submitButton\"></input>\n<input type=\"button\" value=\"Cancel\" id=\"switch_cancelButton\"></input>","onLoad":"this.comRadio = document.getElementById(\"switch_comfile\");\nthis.metaRadio = document.getElementById(\"switch_metafile\");\n//this.entryRadio = document.getElementById(\"switch_fileentry\");\nthis.submitButton = document.getElementById(\"switch_submitButton\");\nthis.cancelButton = document.getElementById(\"switch_cancelButton\");\n\nvar instance = this;\nthis.submitButton.onclick = function() {\n    instance.onSubmitClick();\n}\nthis.cancelButton.onclick = function() {\n    instance.onCancelClick();\n}\n\nthis.initialized = true;\n\n\n","constructorAddition":"\nvar COM_SEQUENCE = 0;\nvar META_SEQUENCE = 1;\nvar ENTRY_SEQUENCE = 2;\nvar SEQUENCE_START_PATH = [\n        [\"editCom\",\"selectCid\"],\n        [\"editMeta\",\"selectMetaContext\"],\n        [\"editEntry\",\"startMetaTBD\"]\n    ];\n    \nthis.initialized = false;\n\nthis.onSubmitClick = function() {\n    \n    if(!this.initialized) {\n        alert(\"Error: UI no initailized\");\n        return;\n    }\n    \n    var sequenceIndex;\n    if(this.comRadio.checked) sequenceIndex = COM_SEQUENCE;\n    else if(this.metaRadio.checked) sequenceIndex = META_SEQUENCE;\n//    else if(this.entryRadio.checked) sequenceIndex = ENTRY_SEQUENCE;\n    else {\n        alert(\"No selection made.\");\n        return;\n    }\n    console.log(\"go to: \" + sequenceIndex +\"; \" + SEQUENCE_START_PATH[sequenceIndex]);\n    \n    taskAppModule.taskCompleted(mode.getMessenger(),[\"switcher\"],SEQUENCE_START_PATH[sequenceIndex],sequenceIndex);\n}\n\nthis.onCancelClick = function() {\n    taskAppModule.taskCanceled(mode.getMessenger(),[\"switcher\"],[\"login\"]);\n}\n\n\n\n\n"}},"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":253,"height":77},"posInfo":{"x":29,"y":81},"state":-1,"viewType":"Text"}},"state":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":290,"height":79},"posInfo":{"x":32,"y":34},"state":-1,"viewType":"Text"}}}},"getSessionKey":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":447,"height":400},"posInfo":{"x":47,"y":456},"state":0,"viewType":"Code"}},"currentTask":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":287,"height":92},"posInfo":{"x":15,"y":212},"state":0,"viewType":"Text"}},"getFileTypeName":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":593,"height":400},"posInfo":{"x":47,"y":496},"state":-1,"viewType":"Code"}},"commonData":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":482,"y":496}},"children":{"fileTypeList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":727,"height":325},"posInfo":{"x":35,"y":355},"state":-1,"viewType":"Formula"}},"fileTypeIdToName":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":722,"height":320},"posInfo":{"x":36,"y":461},"state":-1,"viewType":"JSON"}},"fileTypeNameToId":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":685,"height":300},"posInfo":{"x":35,"y":406},"state":-1,"viewType":"JSON"}},"customerInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":689,"height":321},"posInfo":{"x":42,"y":27},"state":-1,"viewType":"Text"}},"INACTIVE_LAYOUT":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":379,"y":31},"state":-1,"viewType":"Text"}},"DUMMY_DROPDOWN_ENTRY":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":381,"y":77},"state":-1,"viewType":"Text"}},"GLOBAL_CONTEXT":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":45},"posInfo":{"x":381,"y":126},"state":-1,"viewType":"Text"}},"CID_CONTEXT_PREFIX":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":34},"posInfo":{"x":378,"y":177},"state":-1,"viewType":"Text"}},"DEFAULT_COM_FILE_NAME":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":736,"y":33},"state":-1,"viewType":"Text"}},"DEFAULT_META_FILE_NAME":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":736,"y":77},"state":-1,"viewType":"Text"}}}},"getFileTypeId":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":670,"height":400},"posInfo":{"x":45,"y":539},"state":-1,"viewType":"Code"}}}},"micemetarDataAccess":{"type":"apogeeapp.app.FolderComponent","children":{"createRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":560,"height":321},"posInfo":{"x":33,"y":368},"state":-1,"viewType":"Private"}},"recordsToCreateInstructions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":834,"height":391},"posInfo":{"x":30,"y":472},"state":-1,"viewType":"Code"}},"createCommitBody":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":568,"height":400},"posInfo":{"x":629,"y":225},"state":-1,"viewType":"Code"}},"createRequestOptions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":523,"height":254},"posInfo":{"x":822,"y":379},"state":-1,"viewType":"Code"}},"host":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":353,"height":71},"posInfo":{"x":16,"y":6},"state":-1,"viewType":"Text"}},"commitUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":433,"height":107},"posInfo":{"x":14,"y":98},"state":-1,"viewType":"Text"}},"requestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":450,"height":68},"posInfo":{"x":14,"y":58},"state":-1,"viewType":"Formula"}},"dataSetInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":882,"height":611},"posInfo":{"x":317,"y":144},"state":-1,"viewType":"Text"}},"createUpdateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":1002,"height":655},"posInfo":{"x":37,"y":247},"state":-1,"viewType":"Code"}},"createCreateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":994,"height":643},"posInfo":{"x":39,"y":209},"state":-1,"viewType":"Code"}},"getFieldErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":512,"height":68},"posInfo":{"x":761,"y":616},"state":-1,"viewType":"Code"}},"getRecordErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":81},"posInfo":{"x":762,"y":664},"state":-1,"viewType":"Code"}},"createDeleteInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":678,"height":540},"posInfo":{"x":36,"y":289},"state":-1,"viewType":"Code"}},"getRecordInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":480,"height":400},"posInfo":{"x":818,"y":427},"state":-1,"viewType":"Code"}},"combinedEntriesToInstructionList":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":721,"height":524},"posInfo":{"x":31,"y":516},"state":-1,"viewType":"Private"}},"getCommitPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":569,"height":109},"posInfo":{"x":316,"y":26},"state":-1,"viewType":"Code"}},"getRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":546,"height":89},"posInfo":{"x":315,"y":67},"state":-1,"viewType":"Code"}},"customRequestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":17,"y":142},"state":-1,"viewType":"Formula"}},"getCustomRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":668,"height":88},"posInfo":{"x":317,"y":104},"state":-1,"viewType":"Code"}}}}}}