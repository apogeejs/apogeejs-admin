{"fileType":"apogee workspace","jsLinks":["http://localhost:8383/apogee/dev/micello/metadata%20conversion/lib/taskAppModule.js","http://localhost:8383/apogee/dev/micello/metadata%20conversion/lib/configurableForm.js"],"cssLinks":["http://localhost:8383/apogee/dev/micello/metadata%20conversion/lib/configurableForm.css"],"workspace":{"fileType":"apogee workspace","version":0.2,"data":{"name":"creatFileEntry","type":"apogee.Folder","children":{"tasks":{"name":"tasks","type":"apogee.Folder","children":{"login":{"name":"login","type":"apogee.Folder","children":{"loginUrl":{"name":"loginUrl","type":"apogee.JsonTable","updateData":{"data":"http://eng.micello.com/TestAuthorization/loginjson","description":""}},"loginControl":{"name":"loginControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return loginUrl;","supplementalCode":"","description":""}},"sessionResponse":{"name":"sessionResponse","type":"apogee.JsonTable","updateData":{"data":{"responseCode":1,"paramTable":[{"urlPattern":"http://eng.micello.com/mfs","params":[["key","S1sshnIV1Rk9EGz32Acrl8aSYsTKYd"]]},{"urlPattern":"http://mfs.micello.com","params":[["key","nS71TmmSmgvwcXlfrGrin38AMLP48B"]]},{"urlPattern":"http://factory-mfs.micello.com","params":[["key","yfZkszbELEy6lxz1sSeUZscJlC41hL"]]},{"urlPattern":"http://mfs-hub-master.micello.com/","params":[["key","pvLuRozg2EZVrpE8nCpCrQT0FOHcLh"]]},{"urlPattern":"http://mfs-us-1.micello.com","params":[["key","nS71TmmSmgvwcXlfrGrin38AMLP48B"]]},{"urlPattern":"http://eng.micello.com/mfs-node","params":[["key","dnSkxyrgxRNtGMUYbhgV8uvdPW1V4U"]]}],"sessionKey":"SESS0f6c4c2238a670b8138b63d9fd03cc22=hqfnvkkuoj4f8r56g43le1i3i5"},"description":""}},"taskResult":{"name":"taskResult","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\nvar sessionKey;\nif(sessionResponse) {\n    if(sessionResponse.responseCode === 1) {\n        data = {};\n        data.sessionKey = sessionResponse.sessionKey;\n        output.data = data;\n        taskAppModule.taskCompleted(apogeeMessenger,[\"login\"],[\"switcher\"],data);\n        return \"SUCCESS\";\n    }\n    else {\n        alert(\"There was an error: \" + JSON.stringify(sessionResponse));\n        return \"ERROR\";\n    }\n}\nelse {\n    return \"INCOMPLETE\";\n}","supplementalCode":"","description":""}},"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":{"valid":true,"data":{"sessionKey":"SESS0f6c4c2238a670b8138b63d9fd03cc22=hqfnvkkuoj4f8r56g43le1i3i5"}},"description":""}},"state":{"name":"state","type":"apogee.JsonTable","updateData":{"data":{"active":true,"previousTask":[]},"description":""}}}},"submit":{"name":"submit","type":"apogee.Folder","children":{"submitControl":{"name":"submitControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var data = {};\ndata.instructionList = instructionList;\ndata.previousTask = state.previousTask;\n\nreturn data;","supplementalCode":"","description":""}},"commitResponse":{"name":"commitResponse","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((!liveInstructionList)||(liveInstructionList.length == 0)) {\n    return null; \n}\n\nreturn micemetarDataAccess.getCommitPromise(liveInstructionList,commitMessage,sessionKey);","supplementalCode":"","description":""}},"commitMessage":{"name":"commitMessage","type":"apogee.JsonTable","updateData":{"data":null,"description":""}},"liveInstructionList":{"name":"liveInstructionList","type":"apogee.JsonTable","updateData":{"data":null,"description":""}},"taskResult":{"name":"taskResult","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var resultValue;\n\nvar taskResult = {};\nif((!liveInstructionList)||(!commitResponse)) {\n    return \"WAITING\";\n}\nelse if(commitResponse.success === true) {\n    data = {};\n    data.commitResponse = commitResponse;\n    taskAppModule.taskCompleted(apogeeMessenger,[\"submit\"],[\"completed\"],data);\n    resultValue = \"SUCCESS\";\n}\nelse {\n    alert(\"Error making commit: \" + commitResponse.msg);\n    resultValue = \"ERROR\";\n}\n\n//for error or success - clear the commit request\nvar updateInfo = [];\nupdateInfo.push([\"liveInstructionList\",null]);\nupdateInfo.push([\"commitMessage\",null]);\napogeeMessenger.compoundDataUpdate(updateInfo);\n    \nreturn resultValue;","supplementalCode":"","description":""}},"sessionKey":{"name":"sessionKey","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return getSessionKey();","supplementalCode":"","description":""}},"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":{"valid":false,"data":null},"description":""}},"state":{"name":"state","type":"apogee.JsonTable","updateData":{"data":{"active":false,"previousTask":null},"description":""}},"instructionList":{"name":"instructionList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((!state.active)&&(!editResults)) return null;\n\nvar instructions = [];\n\nif(editResults.createRecords) {\n    var createInstructions = micemetarDataAccess.recordsToCreateInstructions(editResults.createRecords);\n    return createInstructions;\n}\nelse {\n    alert(\"need to add other things besides create!\");\n    return null;\n}\n","supplementalCode":"","description":""}},"editResults":{"name":"editResults","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!state.active) return null;\n\nreturn admin.editResults;","supplementalCode":"","description":""}}}},"completed":{"name":"completed","type":"apogee.Folder","children":{"resetControl":{"name":"resetControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"","supplementalCode":"","description":""}},"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":{"valid":false,"data":null},"description":""}},"state":{"name":"state","type":"apogee.JsonTable","updateData":{"data":{"active":false,"previousTask":null},"description":""}},"submitResult":{"name":"submitResult","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(submit.result.valid) {\n    return submit.result.data;\n}\nelse {\n    \"<no submission done>\";\n}","supplementalCode":"","description":""}}}},"switcher":{"name":"switcher","type":"apogee.Folder","children":{"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":{"valid":false,"data":null},"description":""}},"state":{"name":"state","type":"apogee.JsonTable","updateData":{"data":{"active":true,"previousTask":["login"]},"description":""}},"selectEditType":{"name":"selectEditType","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var data = {};\n\ndata.layout = layout;\ndata.onSubmit = (formData) => {\n    var selection = formData.editTask;\n    if(!selection) {\n        alert(\"A selection must be made\");\n        return;\n    }\n    \n    var editTaskInfo = admin.editOptions.find( editTaskInfo => editTaskInfo.optionName == selection);\n    var nextTask = [editTaskInfo.taskSequence[0]];\n    \n    taskAppModule.taskCompleted(apogeeMessenger,[\"switcher\"],nextTask,editTaskInfo);\n}\ndata.onCancel = () => {\n    taskAppModule.taskCanceled(apogeeMessenger,[\"editEntry\",\"createSimpleProperty\"],[\"editEntry\",\"selectFileEntry\"]);\n}\n\nreturn data;","supplementalCode":"","description":""}},"layout":{"name":"layout","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"\nvar lines = [];\n//add title line\nlines.push({\"type\": \"title\",\"title\": \"Select Edit Task\"});\n\n//add radio buttons\nvar radioLine = {\"type\": \"radioButton\", /*\"heading\": \"Select Edit Task\",*/ \"resultKey\": \"editTask\"}\nvar getRadioEntries = editTaskInfo => [editTaskInfo.optionTitle,editTaskInfo.optionName];\nradioLine.entries = admin.editOptions.map(getRadioEntries);\nlines.push(radioLine);\n\n//add select lin\nlines.push({\"type\": \"submit\",\"submit\": \"OK\",\"cancel\": \"Cancel\"});\n\nreturn {\"lines\":lines};\n","supplementalCode":"","description":""}}}},"getSessionKey":{"name":"getSessionKey","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"if(login.result.valid) {\n    return login.result.data.sessionKey;\n}\nelse {\n    return null;\n}\n","supplementalCode":"","description":""}},"currentTask":{"name":"currentTask","type":"apogee.JsonTable","updateData":{"data":["switcher"],"description":""}},"commonData":{"name":"commonData","type":"apogee.Folder","children":{"fileTypeList":{"name":"fileTypeList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!sessionKey) return null;\n\nvar fileTypeSearch = {};\nfileTypeSearch.search = \"file_type_list\";\n\nreturn micemetarDataAccess.getRequestPromise(fileTypeSearch,sessionKey);\n\n","supplementalCode":"","description":""}},"fileTypeIdToName":{"name":"fileTypeIdToName","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!fileTypeList) return null;\n\nvar output = {};\n\nvar addToMap = (record) => {output[record.Id] = record.Fields.file_type_name;}\n\nfileTypeList.data.Response.forEach(addToMap);\n\nreturn output;","supplementalCode":"","description":""}},"fileTypeNameToId":{"name":"fileTypeNameToId","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!fileTypeList) return null;\n\nvar output = {};\n\nvar addToMap = (record) => {output[record.Fields.file_type_name] = record.Id;}\n\nfileTypeList.data.Response.forEach(addToMap);\n\nreturn output;","supplementalCode":"","description":""}},"availableFileEntries":{"name":"availableFileEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return fileEntryList.data.Response;","supplementalCode":"","description":""}},"context":{"name":"context","type":"apogee.JsonTable","updateData":{"data":"public","description":""}},"sessionKey":{"name":"sessionKey","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return getSessionKey();","supplementalCode":"","description":""}},"validateFormStrings":{"name":"validateFormStrings","type":"apogee.FunctionTable","updateData":{"argList":["formData","fieldNames"],"functionBody":" var validateField = (fieldName) => {\n    var fieldValue = formData[fieldName];\n    if((!fieldValue)||(fieldValue.length === 0)) {\n        alert(\"Field must be present: \" + fieldName);\n        return false;\n    }\n    else {\n        return true;\n    }\n}\n \nreturn fieldNames.every(validateField);","supplementalCode":"","description":""}},"doesFileEntryNameExist":{"name":"doesFileEntryNameExist","type":"apogee.FunctionTable","updateData":{"argList":["name"],"functionBody":"return (fileEntryNameLookupTable[name] !== undefined);","supplementalCode":"","description":""}},"doesFileEntryFeatureTypeExist":{"name":"doesFileEntryFeatureTypeExist","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return (featureTypeNameLookupTable[name] !== undefined);","supplementalCode":"","description":""}},"fileEntryNameLookupTable":{"name":"fileEntryNameLookupTable","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nif(availableFileEntries) {\n    var addToMap = record => {output[record.Fields.entry_name] = true;}\n    availableFileEntries.forEach(addToMap);\n}\n\nreturn output;","supplementalCode":"","description":""}},"featureTypeNameLookupTable":{"name":"featureTypeNameLookupTable","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nif(availableFileEntries) {\n    var propertyRulesId = fileTypeNameToId[\"propertyRules\"];\n    \n    var isFeatureTypeProperty = property => (property.key == \"featureType\");\n    \n    var addToMap = record => {\n        if( (record.Fields.file_type_id == propertyRulesId) &&\n            (record.Fields.entry_section == \"geometry\") ) {\n                var featureTypeProperty = record.Fields.entry_data.properties.find(isFeatureTypeProperty);\n                if(featureTypeProperty) {\n                    var featureType = featureTypeProperty.value;\n                    \n                    if(output[featureType] !== undefined) {\n                        console.log(\"repreat feature type: \" + featureType);\n                    }\n                    \n                    output[featureType] = true;\n                }\n            }\n    }\n\n    availableFileEntries.forEach(addToMap);\n}\n\nreturn output;","supplementalCode":"","description":""}},"PROPERTY_RULES_OPTION_NAME":{"name":"PROPERTY_RULES_OPTION_NAME","type":"apogee.JsonTable","updateData":{"data":"Standard","description":""}},"getFileTypeId":{"name":"getFileTypeId","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeName"],"functionBody":"return commonData.fileTypeNameToId[fileTypeName];","supplementalCode":"","description":""}},"getFileTypeName":{"name":"getFileTypeName","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeId"],"functionBody":"return commonData.fileTypeIdToName[fileTypeId];","supplementalCode":"","description":""}},"getMatchingFileEntries":{"name":"getMatchingFileEntries","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeId","section","entryKey"],"functionBody":"\nvar isMatch = record => (record.Fields.file_type_id == fileTypeId) &&\n    (record.Fields.entry_section == section) &&\n    (record.Fields.entry_key == entryKey);\n\nreturn availableFileEntries.filter(isMatch);","supplementalCode":"","description":""}},"COMMON_CONTEXT":{"name":"COMMON_CONTEXT","type":"apogee.JsonTable","updateData":{"data":"Standard","description":""}},"fileEntryList":{"name":"fileEntryList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!sessionKey) return null;\n\n// var fileTypeId = getFileTypeId(\"propertyRules\");\n\n// var searchDef = {};\n// searchDef.search = \"file_type_entries\";\n// searchDef.id = fileTypeId;\n\n// return micemetarDataAccess.getRequestPromise(searchDef,sessionKey);\n\n var searchDef = {\n \t\"searchType\": \"table\",\n \t\"search\": {\n \t\t\"record\": \"file_entry\"\n \t}\n};\n\nreturn micemetarDataAccess.getCustomRequestPromise(searchDef,sessionKey);","supplementalCode":"","description":""}},"propertyRulesEntries":{"name":"propertyRulesEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var propertyRulesTypeId = getFileTypeId(\"propertyRules\");\n\nreturn availableFileEntries.filter( record => (record.Fields.file_type_id == propertyRulesTypeId) );","supplementalCode":"","description":""}},"getMatchingFileEntryByName":{"name":"getMatchingFileEntryByName","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeId","section","entryName"],"functionBody":"\nvar isMatch = record => (record.Fields.file_type_id == fileTypeId) &&\n    (record.Fields.entry_section == section) &&\n    (record.Fields.entry_name == entryName);\n\nreturn availableFileEntries.find(isMatch);","supplementalCode":"","description":""}}}},"admin":{"name":"admin","type":"apogee.Folder","children":{"editOptions":{"name":"editOptions","type":"apogee.JsonTable","updateData":{"data":[{"optionName":"createGeomType","optionTitle":"Create New Geom Type","taskSequence":["selectFileEntry","selectKey","reviewExisting","enterPayload"],"baseFileEntryType":"propertyRules","baseFileEntrySection":"geometry","createdFileEntryType":"propertyRules"},{"optionName":"createAddressKey","optionTitle":"Create New Address Key","taskSequence":["selectKey","reviewExisting","enterPayload"],"createdFileEntryType":"propertyRules"},{"optionName":"addChildProperty","optionTitle":"Add Child Property Value","taskSequence":["selectFileEntry","selectKey","reviewExisting","enterPayload"],"baseFileEntryType":"propertyRules","createdFileEntryType":"propertyRules"},{"optionName":"createThemeRule","optionTitle":"Create Theme Rules Entry","taskSequence":["selectFileEntry","selectKey","reviewExisting","enterPayload"],"baseFileEntryType":"propertyRules","createdFileEntryType":"themeRules"},{"optionName":"createThemeEntry","optionTitle":"Create New Theme Entry","taskSequence":["selectKey","reviewExisting","enterPayload"],"createdFileEntryType":"theme"},{"optionName":"createInputColor","optionTitle":"Create New Input Color","taskSequence":["selectFileEntry","selectKey","reviewExisting","enterPayload"],"baseFileEntryType":"propertyRules","createdFileEntryType":"inputColors"},{"optionName":"createStringsEntry","optionTitle":"Create New Strings Entry","taskSequence":["selectKey","reviewExisting","enterPayload"],"createdFileEntryType":"strings"}],"description":""}},"tasks":{"name":"tasks","type":"apogee.JsonTable","updateData":{"data":["selectFileEntry","selectKey","reviewExisting","enterPayload"],"description":""}},"enterPayloadLayouts":{"name":"enterPayloadLayouts","type":"apogee.Folder","children":{"createGeomType_editResults":{"name":"createGeomType_editResults","type":"apogee.FunctionTable","updateData":{"argList":["dummyFormData"],"functionBody":"if((!baseEntry)||(!initialInfo)||(!optionName)) {\n    return {\"error\":true,\"message\":\"Error: key and option name not set. It is possible the sequnce was done out of order.\"};\n}\n\nvar output = {};\n\nvar fields = createEntryFields(baseEntry,initialInfo,optionName,formData);\noutput.createRecords = [micemetarDataAccess.createRecord(\"file_entry\",fields)];\nreturn output;\n\n\n","supplementalCode":"function createEntryFields(baseEntry,initalInfo,optionName,formData) {\n    \n    var key = initialInfo.key;\n    var name = key + \" (\" + optionName + \")\"; \n    var baseName = baseEntry.Fields.entry_name;\n    \n    //make feature type property\n    var featureTypeProp = {};\n    featureTypeProp.key = \"featureType\";\n    featureTypeProp.value = initialInfo.featureType;\n    featureTypeProp.legacyKey = initialInfo.legacyKey;\n    featureTypeProp.legacyValue = initialInfo.legacyValue;\n    \n    //make entry data\n    var entryData = {};\n    entryData.name = name;\n    entryData.extends = baseName;\n    entryData.properties = [];\n    entryData.properties.push(featureTypeProp);\n    \n    //make fields\n    var fields = {};\n    fields.entry_name = name;\n    fields.entry_key = key;\n    fields.entry_section = initialInfo.section;\n    fields.file_type_id = initialInfo.fileTypeId;\n    fields.entry_context = commonData.COMMON_CONTEXT;\n    fields.option_name = optionName;\n    fields.entry_data = entryData;\n    \n    return fields;\n    \n}","description":""}},"createGeomType_payloadLayout":{"name":"createGeomType_payloadLayout","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"var layout = apogee.util.jsonCopy(createGeomType_payloadLayoutData);\n\nif(initialInfo) {\n    layout.lines[0].title += initialInfo.key;\n}\n\nreturn layout;\n","supplementalCode":"","description":""}},"createGeomType_payloadLayoutData":{"name":"createGeomType_payloadLayoutData","type":"apogee.JsonTable","updateData":{"data":{"lines":[{"type":"title","title":"Create New Geom Type: Press enter to continue "},{"type":"submit","submit":"Submit","cancel":"Cancel"}]},"description":""}},"addChildProperty_payloadLayout":{"name":"addChildProperty_payloadLayout","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return createChildProperty_payloadLayoutData;","supplementalCode":"","description":""}},"createInputColor_payloadLayout":{"name":"createInputColor_payloadLayout","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return createInputColor_payloadLayoutData;","supplementalCode":"","description":""}},"createThemeEntry_payloadLayout":{"name":"createThemeEntry_payloadLayout","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"var layout = {};\nlayout.lines = createThemeEntry_payloadLayoutData[initialInfo.section];\n\nreturn layout;","supplementalCode":"","description":""}},"createThemeRule_payloadLayout":{"name":"createThemeRule_payloadLayout","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"var layout = {};\nlayout.lines = createThemeRule_payloadLayoutData[initialInfo.section];\n\nreturn layout;","supplementalCode":"","description":""}},"addChildProperty_editResults":{"name":"addChildProperty_editResults","type":"apogee.FunctionTable","updateData":{"argList":["formData"],"functionBody":"if((!baseEntry)||(!initialInfo)||(!optionName)) {\n    return {\"error\":true,\"message\":\"Error: key and option name not set. It is possible the sequnce was done out of order.\"};\n}\n\nvar output = {};\n\nvar fields = createEntryFields(baseEntry,initialInfo,optionName,formData);\noutput.createRecords = [micemetarDataAccess.createRecord(\"file_entry\",fields)];\nreturn output;","supplementalCode":"function createEntryFields(baseEntry,initalInfo,optionName,formData) {\n    \n    var key = initialInfo.key;\n    var name = key + \" (\" + optionName + \")\"; \n    \n    //make feature type property\n    var childProp = {};\n    childProp.key = initialInfo.childKey;\n    childProp.action = \"modifies\";\n    childProp.values = [{\"value\":initialInfo.childValue}];\n    \n    //make entry data\n    var entryData = {};\n    entryData.name = name;\n    entryData.modifies = baseEntry.Fields.entry_name;\n    entryData.properties = [];\n    entryData.properties.push(childProp);\n    \n    //make fields\n    var fields = {};\n    fields.entry_name = name;\n    fields.entry_key = key;\n    fields.entry_section = initialInfo.section;\n    fields.file_type_id = initialInfo.fileTypeId;\n    fields.entry_context = commonData.COMMON_CONTEXT;\n    fields.option_name = optionName;\n    fields.entry_data = entryData;\n    \n    return fields;\n    \n}","description":""}},"createThemeRule_editResults":{"name":"createThemeRule_editResults","type":"apogee.FunctionTable","updateData":{"argList":["formData"],"functionBody":"if((!baseEntry)||(!initialInfo)||(!optionName)) {\n    return {\"error\":true,\"message\":\"Error: key and option name not set. It is possible the sequnce was done out of order.\"};\n}\n\nvar output = {};\n\nvar fields = createEntryFields(baseEntry,initialInfo,optionName,formData);\noutput.createRecords = [micemetarDataAccess.createRecord(\"file_entry\",fields)];\nreturn output;","supplementalCode":"function createEntryFields(baseEntry,initalInfo,optionName,formData) {\n    \n    var key = initialInfo.key;\n    var name = key + \" \" + initialInfo.section + \" (\" + optionName + \")\"; \n    \n    //make entry data\n    var entryData = {};\n    entryData.legacyPath = initialInfo.path;\n    entryData.payload = {};\n    if(initialInfo.section == \"label\") {\n        var labelType = formData.labelType;\n        var ref = formData.ref;\n        var trans = formData.trans;\n        \n        entryData.payload.lt = labelType;\n        entryData.payload.r = ref;  \n        if(trans) entryData.payload.trans = true;\n    }\n    else if(initialInfo.section == \"style\") {\n        var styleName = formData.styleName;\n        \n        entryData.payload.n = styleName;\n    }\n    else {\n        throw new Error(\"Unrecognized section: \" + initialInfo.section);\n    }\n    \n    //make fields\n    var fields = {};\n    fields.entry_name = name;\n    fields.entry_key = key;\n    fields.entry_section = initialInfo.section;\n    fields.file_type_id = initialInfo.fileTypeId;\n    fields.entry_context = commonData.COMMON_CONTEXT;\n    fields.option_name = optionName;\n    fields.entry_data = entryData;\n    \n    return fields;\n    \n}","description":""}},"createThemeEntry_editResults":{"name":"createThemeEntry_editResults","type":"apogee.FunctionTable","updateData":{"argList":["formData"],"functionBody":"if((!initialInfo)||(!optionName)) {\n    return {\"error\":true,\"message\":\"Error: key and option name not set. It is possible the sequnce was done out of order.\"};\n}\n\nvar output = {};\n\nvar fields = createEntryFields(baseEntry,initialInfo,optionName,formData);\noutput.createRecords = [micemetarDataAccess.createRecord(\"file_entry\",fields)];\nreturn output;","supplementalCode":"function createEntryFields(baseEntry,initalInfo,optionName,formData) {\n    \n    var key = initialInfo.key;\n    var name = key + \" \" + themeSectionToName[initialInfo.section] + \" (\" + optionName + \")\"; \n    \n    //make entry data\n    var entryData = {};\n    entryData.payload = {};\n    if(initialInfo.section == \"style\") {\n        if(validString(formData.m)) entryData.payload.m = formData.m;\n        if(validString(formData.o)) entryData.payload.o = formData.o;\n        if(validString(formData.w)) entryData.payload.w = parseFloat(formData.w);\n        if(validString(formData.l)) entryData.payload.l = formData.l;\n        if(validString(formData.zmin)) entryData.payload.zmin = parseFloat(formData.zmin);\n    }\n    else if(initialInfo.section == \"icon\") {\n        entryData.payload.lt = formData.lt;\n        entryData.payload.ar = formData.ar;\n        entryData.payload.url = formData.url;\n    }\n    else if(initialInfo.section == \"labelStyle\") {\n        if(validString(formData.font)) entryData.payload.font = formData.font;\n        if(validString(formData.fill)) entryData.payload.fill = formData.fill;\n        if(validString(formData.outline)) entryData.payload.outline = formData.outline;\n        if(validString(formData.outlineWidth)) entryData.payload.outlineWidth = parseFloat(formData.outlineWidth);\n        if(validString(formData.minFont)) entryData.payload.minFont = parseFloat(formData.minFont);\n        if(validString(formData.maxFont)) entryData.payload.maxFont = parseFloat(formData.maxFont);\n        if(validString(formData.caps)) entryData.payload.caps = formData.caps;\n        if(validString(formData.zmin)) entryData.payload.zmin = parseFloat(formData.zmin);\n    }\n    else if(initialInfo.section == \"marker\") {\n        entryData.payload.src = formData.src;\n        entryData.payload.ox = parseFloat(formData.ox);\n        entryData.payload.oy = parseFloat(formData.oy);\n    }\n    else {\n        throw new Error(\"Unrecognized section: \" + initialInfo.section);\n    }\n    \n    //make fields\n    var fields = {};\n    fields.entry_name = name;\n    fields.entry_key = key;\n    fields.entry_section = initialInfo.section;\n    fields.file_type_id = initialInfo.fileTypeId;\n    fields.entry_context = commonData.COMMON_CONTEXT;\n    fields.option_name = optionName;\n    fields.entry_data = entryData;\n    \n    return fields;\n    \n}","description":""}},"createInputColor_editResults":{"name":"createInputColor_editResults","type":"apogee.FunctionTable","updateData":{"argList":["formData"],"functionBody":"if((!baseEntry)||(!initialInfo)||(!optionName)) {\n    return {\"error\":true,\"message\":\"Error: key and option name not set. It is possible the sequnce was done out of order.\"};\n}\n\nvar output = {};\n\nvar fields = createEntryFields(baseEntry,initialInfo,optionName,formData);\noutput.createRecords = [micemetarDataAccess.createRecord(\"file_entry\",fields)];\nreturn output;","supplementalCode":"function createEntryFields(baseEntry,initalInfo,optionName,formData) {\n    \n    var key = initialInfo.key;\n    var name = key + \" (\" + optionName + \")\"; \n    \n    //make entry data\n    var entryData = {};\n    entryData.legacyProps = createPropsEntry(initialInfo.path);\n    if(initialInfo.section == \"inputMap\") {\n        entryData.color = formData.color;\n        if(formData.doLinearArea) entryData.doLinearArea = true;  \n    }\n    else {\n        throw new Error(\"Unrecognized section: \" + initialInfo.section);\n    }\n    \n    //make fields\n    var fields = {};\n    fields.entry_name = name;\n    fields.entry_key = key;\n    fields.entry_section = initialInfo.section;\n    fields.file_type_id = initialInfo.fileTypeId;\n    fields.entry_context = commonData.COMMON_CONTEXT;\n    fields.option_name = optionName;\n    fields.entry_data = entryData;\n    \n    return fields;\n    \n}\n\nfunction createPropsEntry(pathArray) {\n    var output = {};\n    pathArray.forEach( entry => output[entry[0]] = entry[1]);\n    return output;\n}","description":""}},"createInputColor_payloadLayoutData":{"name":"createInputColor_payloadLayoutData","type":"apogee.JsonTable","updateData":{"data":{"lines":[{"type":"title","title":"Input Color Payload"},{"type":"inputElement","heading":"Color: ","resultKey":"color"},{"type":"checkbox","heading":"Do Linear Area: ","resultKey":"doLinearArea"},{"type":"invisible","resultKey":"editOption","initial":"createInputClorsEntry"},{"type":"submit","submit":"Submit","cancel":"Cancel"}]},"description":""}},"createThemeEntry_payloadLayoutData":{"name":"createThemeEntry_payloadLayoutData","type":"apogee.JsonTable","updateData":{"data":{"style":[{"type":"title","title":"Style Payload"},{"type":"inputElement","heading":"Main Color Name: ","resultKey":"m"},{"type":"inputElement","heading":"Outline Color: ","resultKey":"o"},{"type":"inputElement","heading":"Outline Width: ","resultKey":"w"},{"type":"inputElement","heading":"Label Style Name: ","resultKey":"l"},{"type":"inputElement","heading":"Z Min: ","resultKey":"zmin"},{"type":"submit","submit":"Submit","cancel":"Cancel"}],"icon":[{"type":"title","title":"Icon Payload"},{"type":"dropdown","heading":"Label Type: ","entries":[["None",0],["Text",1],["Icon",2],["Image",3]],"resultKey":"lt"},{"type":"inputElement","heading":"Display Name Reference: ","resultKey":"ar"},{"type":"inputElement","heading":"Icon Url: ","resultKey":"url"},{"type":"submit","submit":"Submit","cancel":"Cancel"}],"labelStyle":[{"type":"title","title":"Style Payload"},{"type":"inputElement","heading":"Font: ","resultKey":"font"},{"type":"inputElement","heading":"Fill Color: ","resultKey":"fill"},{"type":"inputElement","heading":"Outline Color: ","resultKey":"outline"},{"type":"inputElement","heading":"Outline Width: ","resultKey":"outlineWidth"},{"type":"inputElement","heading":"Min Font Size: ","resultKey":"minFont"},{"type":"inputElement","heading":"Max Font Size: ","resultKey":"maxFont"},{"type":"checkbox","heading":"Caps: ","resultKey":"caps"},{"type":"inputElement","heading":"Z Min: ","resultKey":"zmin"},{"type":"submit","submit":"Submit","cancel":"Cancel"}],"marker":[{"type":"title","title":"Style Payload"},{"type":"inputElement","heading":"Marker URL: ","resultKey":"src"},{"type":"inputElement","heading":"Offset X: ","resultKey":"ox"},{"type":"inputElement","heading":"Offset Y: ","resultKey":"oy"},{"type":"submit","submit":"Submit","cancel":"Cancel"}]},"description":""}},"addChildProperty_payloadLayoutData":{"name":"addChildProperty_payloadLayoutData","type":"apogee.JsonTable","updateData":{"data":{"lines":[{"type":"title","title":"Create Child Property: Press submit to continue"},{"type":"submit","submit":"Submit","cancel":"Cancel"}]},"description":""}},"createThemeRule_payloadLayoutData":{"name":"createThemeRule_payloadLayoutData","type":"apogee.JsonTable","updateData":{"data":{"style":[{"type":"title","title":"Style Payload"},{"type":"inputElement","heading":"Style Name: ","resultKey":"styleName"},{"type":"submit","submit":"Submit","cancel":"Cancel"}],"label":[{"type":"title","title":"Label Payload"},{"type":"dropdown","heading":"Label Type: ","entries":["None","Text","Icon"],"resultKey":"labelType","initial":"Text"},{"type":"inputElement","heading":"Reference: ","resultKey":"ref"},{"type":"checkbox","heading":"Translate: ","resultKey":"trans"},{"type":"invisible","resultKey":"editOption","initial":"createThemeRulesEntry"},{"type":"invisible","resultKey":"section","initial":"label"},{"type":"submit","submit":"Submit","cancel":"Cancel"}]},"description":""}},"createStringsEntry_payloadLayout":{"name":"createStringsEntry_payloadLayout","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return createStringsEntry_payloadLayoutData;","supplementalCode":"","description":""}},"createStringsEntry_editResults":{"name":"createStringsEntry_editResults","type":"apogee.FunctionTable","updateData":{"argList":["formData"],"functionBody":"if((!initialInfo)||(!optionName)) {\n    return {\"error\":true,\"message\":\"Error: key and option name not set. It is possible the sequnce was done out of order.\"};\n}\n\nvar output = {};\n\nvar fields = createEntryFields(baseEntry,initialInfo,optionName,formData);\noutput.createRecords = [micemetarDataAccess.createRecord(\"file_entry\",fields)];\nreturn output;","supplementalCode":"function createEntryFields(baseEntry,initalInfo,optionName,formData) {\n    \n    var key = initialInfo.key;\n    var name = key + \" \" + initialInfo.toUpperCase() + \" (\" + optionName + \")\"; \n    \n    //make entry data\n    var entryData = {};\n    entryData.translation = formData.translation;\n    \n    //make fields\n    var fields = {};\n    fields.entry_name = name;\n    fields.entry_key = key;\n    fields.entry_section = initialInfo.section;\n    fields.file_type_id = initialInfo.fileTypeId;\n    fields.entry_context = commonData.COMMON_CONTEXT;\n    fields.option_name = optionName;\n    fields.entry_data = entryData;\n    \n    return fields;\n    \n}","description":""}},"createStringsEntry_payloadLayoutData":{"name":"createStringsEntry_payloadLayoutData","type":"apogee.JsonTable","updateData":{"data":{"lines":[{"type":"title","title":"Create Strings Entry: "},{"type":"inputElement","heading":"Translation: ","resultKey":"translation"},{"type":"submit","submit":"Submit","cancel":"Cancel"}]},"description":""}},"validString":{"name":"validString","type":"apogee.FunctionTable","updateData":{"argList":["formResult"],"functionBody":"if(!formResult) return false;\nif(formResult.length === 0) return false;\nreturn true;","supplementalCode":"","description":""}},"createAddressKey_editResults":{"name":"createAddressKey_editResults","type":"apogee.FunctionTable","updateData":{"argList":["dummyFormData"],"functionBody":"if((!initialInfo)||(!optionName)) {\n    return {\"error\":true,\"message\":\"Error: key and option name not set. It is possible the sequnce was done out of order.\"};\n}\n\nvar output = {};\n\nvar fields = createEntryFields(baseEntry,initialInfo,optionName,dummyFormData);\noutput.createRecords = [micemetarDataAccess.createRecord(\"file_entry\",fields)];\nreturn output;\n\n\n","supplementalCode":"function createEntryFields(baseEntry,initalInfo,optionName,formData) {\n    \n    var key = initialInfo.key;\n    var name = key + \" (\" + optionName + \")\"; \n    \n    //make feature type property\n    var addressProp = {};\n    addressProp.key = \"address keys\";\n    addressProp.action = \"modifies\";\n    addressProp.values = [{\"value\":initialInfo.addressKey}];\n    \n    //make entry data\n    var entryData = {};\n    entryData.name = name;\n    entryData.modifies = \"address keys\";\n    entryData.properties = [];\n    entryData.properties.push(addressProp);\n    \n    //make fields\n    var fields = {};\n    fields.entry_name = name;\n    fields.entry_key = key;\n    fields.entry_section = initialInfo.section;\n    fields.file_type_id = initialInfo.fileTypeId;\n    fields.entry_context = commonData.COMMON_CONTEXT;\n    fields.option_name = optionName;\n    fields.entry_data = entryData;\n    \n    return fields;\n    \n}","description":""}},"createAddressKey_payloadLayoutData":{"name":"createAddressKey_payloadLayoutData","type":"apogee.JsonTable","updateData":{"data":{"lines":[{"type":"title","title":"Create Address Key: Press submit to continue"},{"type":"submit","submit":"Submit","cancel":"Cancel"}]},"description":""}},"createAddressKey_payloadLayout":{"name":"createAddressKey_payloadLayout","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return createAddressKey_payloadLayoutData;","supplementalCode":"","description":""}},"themeSectionToName":{"name":"themeSectionToName","type":"apogee.JsonTable","updateData":{"data":{"style":"Style","icon":"Icon","labelStyle":"Label Style","marker":"Marker"},"description":""}}}},"editTask":{"name":"editTask","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(switcher.result.valid) {\n    return switcher.result.data;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"getSelectKeyLayout":{"name":"getSelectKeyLayout","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"if(!editTask) {\n    return INACTIVE_LAYOUT;\n}\nvar editTaskName = editTask.optionName;\n\nreturn selectKeyLayouts[editTaskName + \"_keyLayout\"]();","supplementalCode":"","description":""}},"getEnterPayloadLayout":{"name":"getEnterPayloadLayout","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"if(!editTask) {\n    return INACTIVE_LAYOUT;\n}\nvar editTaskName = editTask.optionName;\n\nreturn enterPayloadLayouts[editTaskName + \"_payloadLayout\"]();","supplementalCode":"","description":""}},"getNextTask":{"name":"getNextTask","type":"apogee.FunctionTable","updateData":{"argList":["currentTask"],"functionBody":"if(!editTask) {\n    throw new Error(\"Edit task sequnece not selected.\");\n}\n\nvar currentTaskIndex = editTask.taskSequence.indexOf(currentTask);\n\nif(currentTaskIndex < 0) {\n    throw new Error(\"Task no on current sequence: \" + currentTask);\n}\n\nif(currentTaskIndex < editTask.taskSequence.length-1) {\n    return editTask.taskSequence[currentTaskIndex+1];\n}\nelse {\n    return SUBMIT_TASK_NAME;\n}","supplementalCode":"","description":""}},"getInitialFileEntryData":{"name":"getInitialFileEntryData","type":"apogee.FunctionTable","updateData":{"argList":["formData"],"functionBody":"if(!editTask) {\n    return {\"error\":true,\"message\":\"Edit task not set!\"};\n}\nvar editTaskName = editTask.optionName;\n\nreturn selectKeyLayouts[editTaskName + \"_initialInfo\"](formData);","supplementalCode":"","description":""}},"SUBMIT_TASK_NAME":{"name":"SUBMIT_TASK_NAME","type":"apogee.JsonTable","updateData":{"data":"submit","description":""}},"INACTIVE_LAYOUT":{"name":"INACTIVE_LAYOUT","type":"apogee.JsonTable","updateData":{"data":{"lines":[{"type":"title","title":"inactive"}]},"description":""}},"baseEntry":{"name":"baseEntry","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(selectFileEntry.result.valid) {\n    return selectFileEntry.result.data.selectedFileEntry;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"initialInfo":{"name":"initialInfo","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(selectKey.result.valid) {\n    return selectKey.result.data;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"getMatchingExistingEntries":{"name":"getMatchingExistingEntries","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"if(!initialInfo) return [];\n\nreturn commonData.getMatchingFileEntries(initialInfo.fileTypeId,\n        initialInfo.section,\n        initialInfo.key);","supplementalCode":"","description":""}},"editResults":{"name":"editResults","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(enterPayload.result.valid) {\n    return enterPayload.result.data;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"createEditResults":{"name":"createEditResults","type":"apogee.FunctionTable","updateData":{"argList":["formData"],"functionBody":"if(!editTask) {\n    return {\"error\":true,\"message\":\"Edit task not set!\"};\n}\nvar editTaskName = editTask.optionName;\n\nreturn enterPayloadLayouts[editTaskName + \"_editResults\"](formData);","supplementalCode":"","description":""}},"optionName":{"name":"optionName","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(reviewExisting.result.valid) {\n    return reviewExisting.result.data.optionName;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"selectKeyLayouts":{"name":"selectKeyLayouts","type":"apogee.Folder","children":{"createGeomType_keyLayoutData":{"name":"createGeomType_keyLayoutData","type":"apogee.JsonTable","updateData":{"data":{"lines":[{"type":"title","title":"Create New Geom Type"},{"type":"inputElement","heading":"Feature Type: ","resultKey":"featureType"},{"type":"inputElement","heading":"Legacy Key: ","resultKey":"legacyKey"},{"type":"inputElement","heading":"Legacy Value: ","resultKey":"legacyValue"},{"type":"submit","submit":"Submit","cancel":"Cancel"}]},"description":""}},"createGeomType_keyLayout":{"name":"createGeomType_keyLayout","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return createGeomType_keyLayoutData;","supplementalCode":"","description":""}},"createGeomType_initialInfo":{"name":"createGeomType_initialInfo","type":"apogee.FunctionTable","updateData":{"argList":["formData"],"functionBody":"var initialInfo = {};\n\ninitialInfo.fileTypeId = commonData.getFileTypeId(\"propertyRules\");\ninitialInfo.section = \"geometry\";\ninitialInfo.key = formData.legacyKey + \":\" + formData.legacyValue;\ninitialInfo.featureType = formData.featureType;\ninitialInfo.legacyKey = formData.legacyKey;\ninitialInfo.legacyValue = formData.legacyValue;\n\nreturn initialInfo;","supplementalCode":"","description":""}},"createAddressKey_keyLayout":{"name":"createAddressKey_keyLayout","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return createAddressKey_keyLayoutData;","supplementalCode":"","description":""}},"addChildProperty_keyLayout":{"name":"addChildProperty_keyLayout","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"if(!baseEntry) return INACTIVE_LAYOUT;\n\nvar enumOptions = getEnumOptions(baseEntry);\n\nvar layout = apogee.util.jsonCopy(addChildProperty_keyLayoutData);\nvar dropdownEntry = layout.lines[1];\ndropdownEntry.entries = enumOptions;\n\nreturn layout;","supplementalCode":"function getEnumOptions(baseEntry) {\n    var properties = baseEntry.Fields.entry_data.properties;\n    \n    var enumProperties = properties.filter(prop => (prop.type == \"enum\") );\n    \n    return enumProperties.map(prop => prop.key);\n}","description":""}},"createThemeRule_keyLayout":{"name":"createThemeRule_keyLayout","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"if(!baseEntry) return INACTIVE_LAYOUT;\n\nvar pathLayoutLines = getPathLayoutLines(baseEntry);\n\nvar layout = {};\nvar layoutLines = createThemeRule_keyLayoutData.headLayoutLines.concat(pathLayoutLines);\nlayoutLines.push(createThemeRule_keyLayoutData.submitLayoutLine);\nlayout.lines = layoutLines;\n\nreturn layout;","supplementalCode":"","description":""}},"createThemeEntry_keyLayout":{"name":"createThemeEntry_keyLayout","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return createThemeEntry_keyLayoutData;","supplementalCode":"","description":""}},"createInputColor_keyLayout":{"name":"createInputColor_keyLayout","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"if(!baseEntry) return INACTIVE_LAYOUT;\n\nvar pathLayoutLines = getPathLayoutLines(baseEntry);\n\nvar layout = {};\nvar layoutLines = createInputColor_keyLayoutData.headLayoutLines.concat(pathLayoutLines);\nlayoutLines.push(createInputColor_keyLayoutData.submitLayoutLine);\nlayout.lines = layoutLines;\n\nreturn layout;","supplementalCode":"","description":""}},"createAddressKey_keyLayoutData":{"name":"createAddressKey_keyLayoutData","type":"apogee.JsonTable","updateData":{"data":{"lines":[{"type":"title","title":"Create Address Key"},{"type":"inputElement","heading":"Address Key: ","resultKey":"addressKey"},{"type":"submit","submit":"Submit","cancel":"Cancel"}]},"description":""}},"addChildProperty_keyLayoutData":{"name":"addChildProperty_keyLayoutData","type":"apogee.JsonTable","updateData":{"data":{"lines":[{"type":"title","title":"Create New Property Option"},{"type":"dropdown","heading":"Key: ","entries":[],"resultKey":"childKey","initial":"label"},{"type":"inputElement","heading":"New Value Option: ","resultKey":"childValue"},{"type":"submit","submit":"Submit","cancel":"Cancel"}]},"description":""}},"createThemeRule_keyLayoutData":{"name":"createThemeRule_keyLayoutData","type":"apogee.JsonTable","updateData":{"data":{"headLayoutLines":[{"type":"title","title":"Create New Theme Rule"},{"type":"dropdown","heading":"Section: ","entries":["label","style"],"resultKey":"section","initial":"label"}],"submitLayoutLine":{"type":"submit","submit":"Submit","cancel":"Cancel"}},"description":""}},"createThemeEntry_keyLayoutData":{"name":"createThemeEntry_keyLayoutData","type":"apogee.JsonTable","updateData":{"data":{"lines":[{"type":"title","title":"Create New Theme Entry"},{"type":"dropdown","heading":"Section: ","entries":["style","icon","labelStyle","marker"],"resultKey":"section","initial":"label"},{"type":"inputElement","heading":"Name: ","resultKey":"name"},{"type":"submit","submit":"Submit","cancel":"Cancel"}]},"description":""}},"createInputColor_keyLayoutData":{"name":"createInputColor_keyLayoutData","type":"apogee.JsonTable","updateData":{"data":{"headLayoutLines":[{"type":"title","title":"Create New Input Color"}],"submitLayoutLine":{"type":"submit","submit":"Submit","cancel":"Cancel"}},"description":""}},"createAddressKey_initialInfo":{"name":"createAddressKey_initialInfo","type":"apogee.FunctionTable","updateData":{"argList":["formData"],"functionBody":"var initialInfo = {};\n\ninitialInfo.fileTypeId = commonData.getFileTypeId(\"propertyRules\");\ninitialInfo.section = \"named_entries\";\ninitialInfo.key = \"address keys insert: \" + formData.addressKey;\ninitialInfo.addressKey = formData.addressKey;\n\nreturn initialInfo;","supplementalCode":"","description":""}},"addChildProperty_initialInfo":{"name":"addChildProperty_initialInfo","type":"apogee.FunctionTable","updateData":{"argList":["formData"],"functionBody":"var initialInfo = {};\n\ninitialInfo.fileTypeId = commonData.getFileTypeId(\"propertyRules\");\ninitialInfo.section = baseEntry.Fields.entry_section;\ninitialInfo.key = baseEntry.Fields.entry_name + \" insert \" + formData.childKey + \":\" + formData.childValue;\n\ninitialInfo.childKey = formData.childKey;\ninitialInfo.childValue = formData.childValue;\n\nreturn initialInfo;","supplementalCode":"","description":""}},"createThemeRule_initialInfo":{"name":"createThemeRule_initialInfo","type":"apogee.FunctionTable","updateData":{"argList":["formData"],"functionBody":"var initialInfo = {};\n\ninitialInfo.fileTypeId = commonData.getFileTypeId(\"themeRules\");\ninitialInfo.section = formData.section;\ninitialInfo.path = getPathFromFormResponse(formData);\ninitialInfo.key = formData.propType + \" \" + getKeyFromPath(initialInfo.path);\n\nreturn initialInfo;","supplementalCode":"","description":""}},"createThemeEntry_initialInfo":{"name":"createThemeEntry_initialInfo","type":"apogee.FunctionTable","updateData":{"argList":["formData"],"functionBody":"var initialInfo = {};\n\ninitialInfo.fileTypeId = commonData.getFileTypeId(\"theme\");\ninitialInfo.section = formData.section;\ninitialInfo.key = formData.name;\n\nreturn initialInfo;","supplementalCode":"","description":""}},"createInputColor_initialInfo":{"name":"createInputColor_initialInfo","type":"apogee.FunctionTable","updateData":{"argList":["formData"],"functionBody":"var initialInfo = {};\n\ninitialInfo.fileTypeId = commonData.getFileTypeId(\"inputColors\");\ninitialInfo.section = \"inputMap\";\ninitialInfo.path = getPathFromFormResponse(formData);\ninitialInfo.key = getKeyFromPath(initialInfo.path);\n\nreturn initialInfo;","supplementalCode":"","description":""}},"getPathLayoutLines":{"name":"getPathLayoutLines","type":"apogee.FunctionTable","updateData":{"argList":["propertyRulesEntry"],"functionBody":"var refEntrySection = propertyRulesEntry.Fields.entry_section;\n\nvar compiledEntryData = getCompiledEntryData(propertyRulesEntry);\n\nif(refEntrySection == \"geometry\") {\n    return getGeometryPathInfo(compiledEntryData);\n}\nelse if(refEntrySection == \"entity\") {\n    return getEntityPathInfo(compiledEntryData);\n}\nelse if(refEntrySection == \"named_entries\") {\n    if(entryData.name == \"address keys\") {\n        return getAddressPathInfo(compiledEntryData);\n    }\n    else {\n        throw new Error(\"Unsupported named entry for path layout: \" + entryData.name);\n    }\n}\nelse {\n    throw new Error(\"Unsupported section for path layout: \" + refEntrySection);\n}","supplementalCode":"function getGeometryPathInfo(entryData) {\n    var recreateStruct = {};\n    \n    var lines = entryData.properties.map(\n        (geomProp,index) => getGeomPathLayoutLine(geomProp,index,recreateStruct))\n        .filter(isNotNull);\n        \n    appendInvisibleTypeLine(lines,\"geometry\");\n        \n    appendRecreateData(lines,recreateStruct);\n    return lines;\n}\n\nfunction getEntityPathInfo(entryData) {\n    var recreateStruct = {};\n    \n    lines = entryData.properties.map(\n        (entityProp,index) => getEntityPathLayoutLine(entityProp,index,recreateStruct))\n        .filter(isNotNull);\n        \n    appendInvisibleTypeLine(lines,\"entity\");\n        \n    appendRecreateData(lines,recreateStruct);\n    return lines;\n}\n\nfunction getAddressPathInfo(entryData) {\n    var recreateStruct = {};\n    \n    lines = entryData.properties.find(\n        (addressProp,index) => getAddressPathLayoutLine(addressProp,index,recreateStruct))\n        .filter(isNotNull);\n        \n    appendInvisibleTypeLine(lines,\"address\");\n        \n    appendRecreateData(lines,recreateStruct);\n    return lines;\n}\n\nfunction isNotNull(entry) {\n    return (entry !== null);\n}\n\nfunction getGeomPathLayoutLine(geomProp,index,recreateStruct) {\n    if(geomProp.key == \"featureType\") {\n        return getKeyValueLayoutLine(geomProp.legacyKey,geomProp.legacyValue,index,recreateStruct,true);\n    }\n    else {\n        switch(geomProp.type) {\n            \n            case \"text\":\n                return getKeyLayoutLine(geomProp.key,index,recreateStruct,false);\n                \n            case \"enum\":\n                return getEnumLayoutLine(geomProp.key,geomProp.values,index,recreateStruct);\n                \n            case \"boolean\":\n                return getKeyValueLayoutLine(geomProp.key,\"true\",index,recreateStruct,false);\n                \n            default:\n                //others not supported\n                return null;\n        }\n    }\n}\n\n\nfunction getEntityPathLayoutLine(entityProp,index,recreateStruct) {\n    switch(entityProp.type) {\n        case \"text\":\n            return getKeyLayoutLine(entityProp.key,index,recreateStruct,false);\n            \n        case \"enum\":\n            return getEnumLayoutLine(entityProp.key,entityProp.values,index,recreateStruct);\n            \n        case \"boolean\":\n            return getKeyValueLayoutLine(entityProp.key,\"true\",index,recreateStruct,false);\n            \n        default:\n            //others not supported\n            return null;\n    }\n}\n\nfunction getAddressPathLayoutLine(addressProp,index,recreateStruct) {\n    if(addressProp.key == \"address keys\") {\n        return getEnumLayoutLine(addressProp.key,addressProp.values,index,recreateStruct);\n    }\n    else {\n        //others not supported\n        return null;\n    }\n}\n\n//layout return functions\n\nfunction getKeyLayoutLine(key,pathLineNum,recreateStruct,initialChecked) {\n    \n    var resultKey = \"path\" + pathLineNum;\n    recreateStruct[resultKey] = {\"type\":\"boolean\",\"pathEntry\":[key]};\n    \n    return {\n\t\t\t\"type\": \"checkbox\",\n\t\t\t\"heading\": key,\n\t\t\t\"resultKey\": resultKey,\n\t\t\t\"initial\": initialChecked\n\t\t};\n}\n\nfunction getKeyValueLayoutLine(key,value,pathLineNum,recreateStruct,initialChecked) {\n    \n    var resultKey = \"path\" + pathLineNum;\n    recreateStruct[resultKey] = {\"type\":\"boolean\",\"pathEntry\":[key,value]};\n    \n    return {\n\t\t\t\"type\": \"checkbox\",\n\t\t\t\"heading\": key + \":\" + value,\n\t\t\t\"resultKey\": \"path\" + pathLineNum,\n\t\t\t\"initial\": initialChecked\n\t\t};\n}\n\nfunction getEnumLayoutLine(key,values,pathLineNum,recreateStruct) {\n    \n    var resultKey = \"path\" + pathLineNum;\n    recreateStruct[resultKey] = {\"type\":\"enum\",\"pathEntry\":[key,null]};\n    \n    var simplifyValueEntry = valueEntry => valueEntry.value;\n    var valueList = values.map(simplifyValueEntry);\n    valueList.unshift(DUMMY_DROPDOWN_ENTRY);\n    \n    return {\n\t\t\t\"type\": \"dropdown\",\n\t\t\t\"heading\": key,\n\t\t\t\"entries\": valueList,\n\t\t\t\"resultKey\": \"path\" + pathLineNum,\n\t\t\t\"initial\": null\n\t\t};\n}\n\nfunction appendRecreateData(lines,recreateStruct) {\n    var line = {\n\t\t\t\"type\": \"invisible\",\n\t\t\t\"resultKey\": \"recreateStruct\",\n\t\t\t\"initial\": recreateStruct\n\t\t};\n\tlines.push(line);\n}\n\nfunction appendInvisibleTypeLine(lines,type) {\n    var line = {\n\t\t\t\"type\": \"invisible\",\n\t\t\t\"resultKey\": \"propType\",\n\t\t\t\"initial\": type\n\t\t};\n\tlines.push(line);\n}\n\n\n","description":""}},"createStringsEntry_keyLayout":{"name":"createStringsEntry_keyLayout","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return createStringsEntry_keyLayoutData;","supplementalCode":"","description":""}},"createStringsEntry_initialInfo":{"name":"createStringsEntry_initialInfo","type":"apogee.FunctionTable","updateData":{"argList":["formData"],"functionBody":"var initialInfo = {};\n\ninitialInfo.fileTypeId = commonData.getFileTypeId(\"strings\");\ninitialInfo.section = formData.lang;\ninitialInfo.key = formData.lookupKey;\n\nreturn initialInfo;","supplementalCode":"","description":""}},"createStringsEntry_keyLayoutData":{"name":"createStringsEntry_keyLayoutData","type":"apogee.JsonTable","updateData":{"data":{"lines":[{"type":"title","title":"Create Strings Entry"},{"type":"dropdown","heading":"Lang: ","entries":["en","ja","zh","de","fr","es","it","ar","da","he","hi","id","ko","nl","pt","ro","sv","ru","tr","gu","pl","cs","sk","th"],"resultKey":"lang","initial":"en"},{"type":"inputElement","heading":"Lookup Key: ","resultKey":"lookupKey"},{"type":"submit","submit":"Submit","cancel":"Cancel"}]},"description":""}},"getPathFromFormResponse":{"name":"getPathFromFormResponse","type":"apogee.FunctionTable","updateData":{"argList":["formData"],"functionBody":"var recreateStruct = formData.recreateStruct;\n\nvar path = [];\nfor(var key in recreateStruct) {\n    var recreateEntry = recreateStruct[key];\n    var formResult = formData[key];\n    if(recreateEntry.type == \"boolean\") {\n        if(formResult === true) {\n            path.push(recreateEntry.pathEntry);\n        }\n    }\n    else if(recreateEntry.type == \"enum\") {\n        if(formResult != DUMMY_DROPDOWN_ENTRY) {\n            //enum result - add selection\n            newPathEntry = [];\n            newPathEntry[0] = recreateEntry.pathEntry[0];\n            newPathEntry[1] = formResult;\n            path.push(newPathEntry);\n        }\n    }\n    else {\n        throw new Error(\"Unknown error: Form path entry type not recognized: \" + recreateEntry.type);\n    }\n}\n\n//validate the path \n//our current algorithm does not enforce that there is a \"key only\" path entry\n//in the middle of the path.\n//for example: [[facility,bathroom],[name],[gender,female]]\n//This is illegal. If we create this throw an error, saying the code needs to be fixed.\nvar index = path.findIndex( pathEntry => (pathEntry.length < 2) );\nif((index >= 0)&&(index != path.length-1)) {\n    throw new Error(\"Illegal path - code needs to be updated to support this case!\");\n}\n\nreturn path;","supplementalCode":"function readPathSegment(name,formData) {\n    var value = formData[name];\n    if((value == \"\")||(!value)) {\n        return null;\n    }\n    if(value === true) {\n        /* need to redo this */\n    }\n    else {\n        /* need to redo this */\n    }\n    return \"DUMMY\";\n}","description":""}},"getKeyFromPath":{"name":"getKeyFromPath","type":"apogee.FunctionTable","updateData":{"argList":["path"],"functionBody":"var step1 = path.map(entry => {\n    if(entry.length == 2) {\n        return entry[0] + \":\" + entry[1];\n    }\n    else if(entry.length == 1) {\n        return entry[0];\n    }\n    else {\n        throw new Error(\"Bad path entry - not length 1 or 2: \" + JSON.stringify(entry));\n    }\n});\n\nreturn step1.join(\"; \");","supplementalCode":"","description":""}},"getCompiledEntryData":{"name":"getCompiledEntryData","type":"apogee.FunctionTable","updateData":{"argList":["propertyRulesEntry"],"functionBody":"var ancestry = getAncestryEntryData(propertyRulesEntry,[]);\n\n//console.log( ancestry.map(record => record.Fields.entry_name));\nvar compileEntries = (compiledEntry,entry) => {\n    if(entry.extends) {\n        return processExtendsEntry(entry,compiledEntry);\n    }\n    else if(entry.modifies) {\n        return processModifiesEntry(entry,compiledEntry);\n    }\n    else if(entry.deletes) {\n        //this shouldn't happen\n        throw new Error(\"Not handling deletes here!\");\n    }\n    else {\n        //this is the base entry\n        return entry;\n    }\n}\nreturn ancestry.reduce(compileEntries);\n","supplementalCode":"function getAncestryEntryData(propertyRulesEntry,initialAncestry) {\n    var entryData = propertyRulesEntry.Fields.entry_data;\n    var parentName;\n    if(entryData.extends) parentName = entryData.extends;\n    else if(entryData.modifies) parentName = entryData.modifies;\n    \n    var fileTypeId = propertyRulesEntry.Fields.file_type_id;\n    \n    if(parentName) {\n        var parentEntry = commonData.getMatchingFileEntryByName(\n            propertyRulesEntry.Fields.file_type_id,\n            propertyRulesEntry.Fields.entry_section,\n            parentName);\n            \n        ancestry = getAncestryEntryData(parentEntry,initialAncestry);\n    }\n    else {\n        ancestry = initialAncestry;\n    }\n    \n    ancestry.push(entryData);\n    \n    return ancestry;\n}\n\n//------------------------------------------------------------\n\n\n/** This executes an extend entry */\nfunction processExtendsEntry(extendsEntry,extendedEntry) {\n    \n    //make the new entry\n    var newEntry = apogee.util.jsonCopy(extendedEntry);\n    //set name\n    newEntry.name = extendsEntry.name;\n    //set parent\n    if(newEntry.parent) {\n        newEntry.parent.push(extendedEntry.name)\n    }\n    else {\n        newEntry.parent = [extendedEntry.name];\n    }\n    \n    //do any modification\n    doEntryModify(extendsEntry,newEntry);\n    \n    return newEntry;\n}\n\n/** This executes a modify entry. */\nfunction processModifiesEntry(modifyEntry,originalEntry) {\n\n    var modifiedEntry = apogee.util.jsonCopy(originalEntry);\n    \n    //do any modification\n    doEntryModify(modifyEntry,modifiedEntry);\n    \n    return modifiedEntry;\n}\n\n/** This implements a modify on the given entry - called from both modify and extend. */\nfunction doEntryModify(modifyingEntry,entryToModify) {\n    for(var field in modifyingEntry) {\n        //don't update these\n        if((field == \"name\")||(field == \"extends\")||(field == \"modifies\")) continue;\n        \n        if(field == \"properties\") {\n            //update the properties\n            modifyPropertyList(modifyingEntry.properties,entryToModify.properties);\n        }\n        else {\n            //update other fields\n            entryToModify[field] = modifyingInstructions[field];\n        }\n    }\n}\n\n\n/** This method takes a modifying list of properties and acts them on a list of base properties.*/\nfunction modifyPropertyList(modifyingList,listToModify) {\n    //act each modifying property\n    modifyingList.forEach(modifyInstruction => modifyPropertyFromList(modifyInstruction,listToModify))\n}\n\n/** This acts a single modify property on a list of properties. */\nfunction modifyPropertyFromList(modifyInstruction,propertiesToModify) {\n    \n    var matchKey = property => (modifyInstruction.key == property.key);\n    \n    var indexToModify = propertiesToModify.findIndex(matchKey);\n    \n    //create\n    if(modifyInstruction.action === undefined) {\n        //create\n        if(indexToModify >= 0) {\n            throw new Error(\"Property found when it shouldn't be: \" + modifyInstruction.key);\n        }\n        \n        propertiesToModify.push(modifyInstruction);\n        return;\n    }\n    else {\n        //modify,replace,delete\n        if(indexToModify < 0) {\n            throw new Error(\"Property not found: \" + modifyInstruction.key);\n        }\n        \n    \n        switch(modifyInstruction.action) {\n            case \"modifies\":\n                modifyProperty(modifyInstruction,propertiesToModify[indexToModify]);\n                break;\n                \n            case \"replaces\":\n                propertiesToModify[indexToModify] = modifyInstruction;\n                break;\n                \n            case \"delete\":\n                propertiesToModify.splice(indexToModify,1);\n                break;\n                \n            default:\n                throw new Error(\"UNknown instruction: \" + modifyInstruction.action);\n        }\n    }\n    \n}\n\n/** This implements modify on a single property. */\nfunction modifyProperty(instruction,property) {\n    for(var field in instruction) {\n        //don't change these\n        if((field == \"key\")||(field == \"action\")) continue;\n        \n        //special cases\n        if((instruction.type == \"enum\")&&(field == \"values\")) {\n            modifyEnum(instruction[field],property[field]);\n        }\n        else if(instruction.type == \"conditional\") {\n            if(field == \"cases\") {\n                throw new Error(\"Modifying conditional cases not supported!\");\n            }\n            else if(field == \"default\") {\n                throw new Error(\"Modifying conditional default not supported!\");\n            }\n        }\n        else if((instruction.type == \"multikey\")&&(field == \"options\")) {\n            modifyPropertyList(instruction[field],property[field]);\n        }\n        else {\n            //standard case\n            property[field] = instruction[field];\n        }\n    } \n}\n\n/** This does the modify instruction for an enm type property. */\nfunction modifyEnum(modifyingValueList,valueListToModify) {\n    //only \"add\" supported for now in enum\n    var addToBase = (valueEntry) => valueListToModify(valueEntry);\n    modifyingValueList.forEach(addToBase);\n}","description":""}}}},"DUMMY_DROPDOWN_ENTRY":{"name":"DUMMY_DROPDOWN_ENTRY","type":"apogee.JsonTable","updateData":{"data":"---","description":""}}}},"selectFileEntry":{"name":"selectFileEntry","type":"apogee.Folder","children":{"selectEntriesControl":{"name":"selectEntriesControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((!state.active)||(!commonData.availableFileEntries)) {\n    return null;\n}\n\nvar data = {};\ndata.availableFileEntries = commonData.propertyRulesEntries;\ndata.nextTaskPath = [admin.getNextTask(\"selectFileEntry\")];\ndata.previousTaskPath = state ? state.previousTask : \"\";\n\nreturn data;","supplementalCode":"","description":""}},"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":{"valid":false,"data":null},"description":""}},"state":{"name":"state","type":"apogee.JsonTable","updateData":{"data":{"active":false,"previousTask":null},"description":""}}}},"selectKey":{"name":"selectKey","type":"apogee.Folder","children":{"state":{"name":"state","type":"apogee.JsonTable","updateData":{"data":{"active":false,"previousTask":null},"description":""}},"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":{"valid":false,"data":null},"description":""}},"selectKeyInfoForm":{"name":"selectKeyInfoForm","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!state.active) return admin.INACTIVE_LAYOUT;\n\nvar data = {};\n\ndata.layout = admin.getSelectKeyLayout();\ndata.onSubmit = formData => {\n\n    var initialFileEntryData = admin.getInitialFileEntryData(formData);\n    \n    if(initialFileEntryData.error) {\n        alert(initialFileEntryData.message);\n        return;\n    }\n    else {\n        var nextTask = admin.getNextTask(\"selectKey\");\n        taskAppModule.taskCompleted(apogeeMessenger,[\"selectKey\"],[nextTask],initialFileEntryData);\n    }\n} \ndata.onCancel = () => {\n    taskAppModule.taskCanceled(apogeeMessenger,[\"selectKey\"],state.previousTask);\n}\n\nreturn data;","supplementalCode":"","description":""}}}},"reviewExisting":{"name":"reviewExisting","type":"apogee.Folder","children":{"state":{"name":"state","type":"apogee.JsonTable","updateData":{"data":{"active":false,"previousTask":null},"description":""}},"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":{"valid":false,"data":null},"description":""}},"matchExistingEntries":{"name":"matchExistingEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return admin.getMatchingExistingEntries();","supplementalCode":"","description":""}},"layoutTemplate":{"name":"layoutTemplate","type":"apogee.JsonTable","updateData":{"data":{"lines":[{"type":"title","title":"Review Existing Entries"},{"type":"title","title":"(we need to fill this in!)"},{"type":"dropdown","heading":"Existing Option Names: ","entries":[],"resultKey":"selectedExistingOptionNames"},{"type":"inputElement","heading":"Option Name: ","resultKey":"optionName"},{"type":"submit","submit":"Continue","cancel":"Cancel"}]},"description":""}},"layout":{"name":"layout","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var newLayout = apogee.util.jsonCopy(layoutTemplate);\n\nvar existingOptionsContainer = newLayout.lines.find(entry => entry.type == \"dropdown\");\n\nexistingOptionsContainer.entries = existingOptions;\n\nreturn newLayout;","supplementalCode":"","description":""}},"reviewForm":{"name":"reviewForm","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var data = {};\n\ndata.layout = layout;\ndata.onSubmit = (formData) => {\n    var valid = validateData(formData);\n    \n    if(!valid) {\n        //error message given in validate data\n        return;\n    }\n    else {\n        var nextTask = admin.getNextTask(\"reviewExisting\");\n        taskAppModule.taskCompleted(apogeeMessenger,[\"reviewExisting\"],[nextTask],formData);\n    }\n} \ndata.onCancel = () => {\n    taskAppModule.taskCanceled(apogeeMessenger,[\"reviewExisting\"],state.previousTask);\n}\n\nreturn data;","supplementalCode":"function validateData(formData) {\n    if((!formData.optionName)||(formData.optionName.length === 0)) {\n        alert(\"The option name must be entered\");\n        return false;\n    }\n    \n    if(existingOptions.indexOf(formData.optionName) >= 0) {\n        alert(\"The given option name already exists: \" + formData.optionName);\n        return false;\n    }\n    \n    return true;\n}","description":""}},"existingOptions":{"name":"existingOptions","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var getOptionNames = (record) => record.Fields.option_name;\n\nreturn matchExistingEntries.map(getOptionNames);\n\n","supplementalCode":"","description":""}}}},"enterPayload":{"name":"enterPayload","type":"apogee.Folder","children":{"state":{"name":"state","type":"apogee.JsonTable","updateData":{"data":{"active":false,"previousTask":null},"description":""}},"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":{"valid":false,"data":null},"description":""}},"enterPayloadForm":{"name":"enterPayloadForm","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!state.active) return admin.INACTIVE_LAYOUT;\n\nvar data = {};\n\ndata.layout = admin.getEnterPayloadLayout();\ndata.onSubmit = formData => {\n    var editResults = admin.createEditResults(formData);\n    \n    if(editResults.error) {\n        alert(editResults.message);\n        return;\n    }\n    else {\n        var nextTask = admin.getNextTask(\"enterPayload\");\n        taskAppModule.taskCompleted(apogeeMessenger,[\"enterPayload\"],[nextTask],editResults);\n    }\n} \ndata.onCancel = () => {\n    taskAppModule.taskCanceled(apogeeMessenger,[\"enterPayload\"],state.previousTask);\n}\n\nreturn data;","supplementalCode":"","description":""}}}}}},"micemetarDataAccess":{"name":"micemetarDataAccess","type":"apogee.Folder","children":{"createRecord":{"name":"createRecord","type":"apogee.FunctionTable","updateData":{"argList":["recordType","fieldMap"],"functionBody":"var record = {};\n\nrecord.Id = getId();\nrecord.Type = recordType;\nrecord.Fields = fieldMap;\nrecord.read_perm = READ_PERM;\nrecord.edit_perm = EDIT_PERM;\n\nreturn record;","supplementalCode":"var READ_PERM = 2;\nvar EDIT_PERM = 15;\n\n//this will be illegal at some point\nvar nextId = -1;\n\nfunction getId() {\n    return nextId--;\n}","description":"This method creates a record given the field values and record info \nfrom the data set info. It creates and ID and uses standard permissions."}},"recordsToCreateInstructions":{"name":"recordsToCreateInstructions","type":"apogee.FunctionTable","updateData":{"argList":["recordList"],"functionBody":"var instructions = [];\n\nfor(var i = 0; i < recordList.length; i++) {\n    var createRecord = recordList[i];\n    var instruction = createCreateInstruction(createRecord);\n    instructions.push(instruction);\n}\n\nreturn instructions;","supplementalCode":"","description":"This creates a list of create instructions to go along with a list of records to be created.\n\nThere is the option to assign the ID or to leave it as undefined, in which case\nan automatically incremented ID will be assigned. (For consistency in the data\nset, either all records should be preassigned or all records should be \nautomatically assigned."}},"createCommitBody":{"name":"createCommitBody","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage"],"functionBody":"var commit = {};\nvar actions = [];\n\nif(commitMessage.length === 0) throw new Error(\"Commit message missing!\");\n\ncommit.Name = dataSetInfo.name;\ncommit.Message = commitMessage;\ncommit.Actions = actions;\n\n//single action with commits\nvar action = {};\naction.Title = \"bulk create commit\";\naction.Instr = instructionList;\nactions.push(action);\n\nreturn commit","supplementalCode":"","description":"This creates a body for a commit request, given a list of instructions and a commit message."}},"createRequestOptions":{"name":"createRequestOptions","type":"apogee.FunctionTable","updateData":{"argList":["bodyJson","sessionKey"],"functionBody":"var header = {};\nheader[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\nheader.sessionKey = sessionKey;\nheader[\"proto-version\"] = \"4.0\";\nheader[\"db-version\"] = dataSetInfo.version;\n\nrequestInfo = {};\nrequestInfo.header = header;\nif(bodyJson) {\n    requestInfo.method = \"POST\";\n    requestInfo.body = JSON.stringify(bodyJson);\n}\n\nreturn requestInfo;\n","supplementalCode":"","description":"This creates the requestOptions, suitable for apogee.net.jsonRequest, to go with an type of request to the workingset (micemetarequest) server."}},"host":{"name":"host","type":"apogee.JsonTable","updateData":{"data":"http://localhost:8080/micemetarws","description":""}},"commitUrl":{"name":"commitUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvalue = host + \"/commit\";\nreturn value;\n\n","supplementalCode":"","description":""}},"requestUrl":{"name":"requestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return host + \"/cannedsearch\";\n\n","supplementalCode":"","description":""}},"dataSetInfo":{"name":"dataSetInfo","type":"apogee.JsonTable","updateData":{"data":{"records":{"com_file_entry":{"idField":"com_file_entry_id","name":"com_file_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"com_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.ComFile"},{"defaultValue":null,"name":"meta_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"},{"defaultValue":null,"name":"file_group","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.ComFileEntry"},"file_type":{"idField":"file_type_id","name":"file_type","foreignList":[{"remoteRecord":"file_entry","name":"file_entry_list","isUnique":false,"remoteField":"file_type_id","restrictDelete":true}],"fields":[{"defaultValue":null,"name":"file_type_name","nullOk":true,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.FileType"},"file_entry":{"idField":"file_entry_id","name":"file_entry","foreignList":[],"fields":[{"defaultValue":null,"name":"entry_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"entry_name","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"file_type_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileType"},{"defaultValue":null,"name":"entry_section","nullOk":true,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"entry_key","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"option_name","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"entry_data","nullOk":false,"fieldClass":"org.json.JSONObject"}],"recordClass":"com.micello.micemetar.data.FileEntry"},"recipe_entry":{"idField":"recipe_entry_id","name":"recipe_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"meta_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"},{"defaultValue":null,"name":"file_entry_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileEntry"},{"defaultValue":null,"name":"insertion_info","nullOk":true,"fieldClass":"org.json.JSONObject"}],"recordClass":"com.micello.micemetar.data.RecipeEntry"},"com_file":{"idField":"com_file_id","name":"com_file","foreignList":[{"remoteRecord":"com_file_entry","name":"com_file_entry_list","isUnique":false,"remoteField":"com_file_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":null,"name":"file_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"name","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"ref","nullOk":true,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.ComFile"},"meta_file":{"idField":"meta_file_id","name":"meta_file","foreignList":[{"remoteRecord":"recipe_entry","name":"recipe_entry_list","isUnique":false,"remoteField":"meta_file_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":null,"name":"file_type_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileType"},{"defaultValue":null,"name":"file_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"name","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"ref","nullOk":true,"fieldClass":"org.json.JSONObject"}],"recordClass":"com.micello.micemetar.data.MetaFile"}},"name":"Micemetar","version":"5.0"},"description":""}},"createUpdateInstruction":{"name":"createUpdateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["initialRecord","targetRecord"],"functionBody":"if(initialRecord.Id != targetRecord.Id) {\n    throw new Error(\"Record ID mismatch in create update instruction for target record: \" + getRecordErrString(targetRecord));\n}\n\nif(initialRecord.Type != targetRecord.Type) {\n    throw new Error(\"Inital and target record types do not match. Target record: \" + getRecordErrString(targetRecord));\n}\n\nvar recordsDifferent = false;\n\nvar recordInfo = getRecordInfo(initialRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Update\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = initialRecord.Id;\n\ninstruction.initialReadPerm = initialRecord.read_perm;\ninstruction.initialEditPerm = initialRecord.edit_perm;\n\nif(initialRecord.readPerm != targetRecord.readPerm) {\n    instruction.targetReadPerm = targetRecord.read_perm;\n    recordsDifferent = true;\n}\n\nif(initialRecord.editPerm != targetRecord.editPerm) {\n    instruction.targetEditPerm = targetRecord.edit_perm;\n    recordsDifferent = true;\n}\n\nvar initialData = {};\ninstruction.Initial = initialData;\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    \n    var initialValue;\n    var targetValue;\n    \n    var initialValue = initialRecord.Fields[field.name];\n    var targetValue = targetRecord.Fields[field.name];\n    \n    //validate target values\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(targetRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(targetRecord,field));\n        }\n    }\n    \n    if(!fieldsMatch(initialValue,targetValue,field)) {\n        initialData[field.name] = initialValue;\n        targetData[field.name] = targetValue;\n        recordsDifferent = true;\n    }\n}\n\nif(recordsDifferent) {\n    return instruction;\n}\nelse {\n    return null;\n}\n","supplementalCode":"function fieldsMatch(initialValue,targetValue,fieldInfo) {\n    if(fieldInfo.fieldClass === \"java.lang.String\") {\n        //compare strings with \"==\"\n        return (initialValue == targetValue);\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"java.lang\")) {\n        //compare other basic values with \"===\"\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"com.micello\")) {\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONObject\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONArray\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else {\n        throw new Error(\"unrecognized field type: \" + fieldInfo.fieldClass);\n    }\n}\n\nfunction compareJsonData(a,b) {\n    var an = apogee.util.getNormalizedObjectCopy(a);\n    var bn = apogee.util.getNormalizedObjectCopy(b);\n    var aString = JSON.stringify(an);\n    var bString = JSON.stringify(bn);\n    return aString == bString;\n}\n    ","description":"This function creates an update instruction given an initial and target record. If the records are the same then NULL is returned. (No update is needed.)"}},"createCreateInstruction":{"name":"createCreateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["createRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(createRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Create\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = createRecord.Id;\n\ninstruction.targetReadPerm = createRecord.read_perm;\ninstruction.targetEditPerm = createRecord.edit_perm;\n\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var targetValue;\n    var targetValue = createRecord.Fields[field.name];\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(createRecord,field));\n        }\n    }\n    \n    targetData[field.name] = targetValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getFieldErrString":{"name":"getFieldErrString","type":"apogee.FunctionTable","updateData":{"argList":["record","fieldInfo"],"functionBody":"return getRecordErrString(record) + \" - \" + fieldInfo.name;","supplementalCode":"","description":""}},"getRecordErrString":{"name":"getRecordErrString","type":"apogee.FunctionTable","updateData":{"argList":["record"],"functionBody":"return record.Type + \" \" + record.Id;","supplementalCode":"","description":""}},"createDeleteInstruction":{"name":"createDeleteInstruction","type":"apogee.FunctionTable","updateData":{"argList":["deleteRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(deleteRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Delete\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = deleteRecord.Id;\n\ninstruction.initialReadPerm = deleteRecord.read_perm;\ninstruction.initialEditPerm = deleteRecord.edit_perm;\n\nvar initialData = {};\ninstruction.Initial = initialData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var initialValue = deleteRecord.Fields[field.name];\n    \n    initialData[field.name] = initialValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getRecordInfo":{"name":"getRecordInfo","type":"apogee.FunctionTable","updateData":{"argList":["recordType"],"functionBody":"var recordInfo = dataSetInfo.records[recordType];\n\nif(!recordInfo) {\n    throw new Error(\"Record type not found in getRecordInfo: \" + recordType);\n}\n\nreturn recordInfo;","supplementalCode":"","description":""}},"combinedEntriesToInstructionList":{"name":"combinedEntriesToInstructionList","type":"apogee.FunctionTable","updateData":{"argList":["combinedEntries"],"functionBody":"var output = [];\nfor(var key in combinedEntries) {\n    var entry = combinedEntries[key];\n    var instruction = getInstructionForCombinedEntry(entry);\n    if(instruction) {\n        output.push(instruction);\n    }\n}\n\nreturn output;","supplementalCode":"function getInstructionForCombinedEntry(combinedEntry) {\n    var newEntry = combinedEntry.newEntry;\n    var oldEntry = combinedEntry.oldEntry;\n    \n    if(newEntry) {\n        if(!oldEntry) {\n            console.log(\"Create: \" + newEntry.Id);\n            return createCreateInstruction(newEntry);\n        }\n        else {\n            //this will return null for matching records\n            console.log(\"Update(maybe): \" + newEntry.Id);\n            return createUpdateInstruction(oldEntry,newEntry);\n        }\n    }\n    else if(oldEntry) {\n        console.log(\"Delete: \" + oldEntry.Id);\n        return createDeleteInstruction(oldEntry);\n    }\n    \n    return null;\n}\n\nfunction entriesDifferent(entry1,entry2) {\n    var string1 = JSON.stringify(apogee.util.getNormalizedCopy(entry1));\n    var string2 = JSON.stringify(apogee.util.getNormalizedCopy(entry2));\n    return (string1 == string2);\n}","description":"This function takes a combined entry map of the format:\n\n{\n  \"some-identifier\":{\n    \"oldEntry\":{original record entry, if applicable},\n    \"newEntry\":{new record entry, if applicable}\n  },\n  ...\n}\n\nIt returns an instruction list.\n\n"}},"getCommitPromise":{"name":"getCommitPromise","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage","sessionKey"],"functionBody":"var commitBody = createCommitBody(instructionList,commitMessage);\nvar requestOptions = createRequestOptions(commitBody,sessionKey);\nreturn apogee.net.jsonRequest(commitUrl,requestOptions);","supplementalCode":"","description":""}},"getRequestPromise":{"name":"getRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn apogee.net.jsonRequest(requestUrl,requestOptions);","supplementalCode":"","description":""}},"customRequestUrl":{"name":"customRequestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return host + \"/request\";","supplementalCode":"","description":""}},"getCustomRequestPromise":{"name":"getCustomRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn apogee.net.jsonRequest(customRequestUrl,requestOptions);","supplementalCode":"","description":""}}}}}}},"components":{"tasks":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":37,"y":37}},"children":{"login":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":55,"y":32}},"children":{"loginUrl":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":465,"height":43},"posInfo":{"x":26,"y":27},"state":-1,"viewType":"Text"}},"loginControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":369,"height":87},"posInfo":{"x":319,"y":36},"state":0,"viewType":"Output"},"resource":{"html":"","css":"","setData":"this.loginUrl = data;","constructorAddition":"\n\n//this uses the updated version of test authorization that takes and returns a JSON\nthis.onClick = function() {\n    \n    //on click\n    var bodyJson = {};\n    bodyJson.userName = resource.userInput.value;\n    bodyJson.password = resource.passwordInput.value;\n    \n    //cleaer password field\n    resource.passwordInput.value = \"\";\n    \n    var options = {};\n    options.body = JSON.stringify(bodyJson);\n    options.method = \"POST\";\n    \n    var requestPromise = apogee.net.jsonRequest(this.loginUrl,options);\n    \n    //set the response\n    mode.getMessenger().asynchDataUpdate(\"sessionResponse\",requestPromise);\n}","init":"\nvar label1 = document.createElement(\"label\");\nlabel1.for = \"userInput\";\nlabel1.innerHTML = \"User:\"\nelement.appendChild(label1);\n\nvar input1 = document.createElement(\"input\");\ninput1.id = \"userInput\";\nresource.userInput = input1;\nelement.appendChild(input1);\n\nelement.appendChild(document.createElement(\"br\"));\n\nvar label2 = document.createElement(\"label\");\nlabel2.for = \"passwordInput\";\nlabel2.innerHTML = \"Password:\"\nelement.appendChild(label2);\n\nvar input2 = document.createElement(\"input\");\ninput2.id = \"passwordInput\";\ninput2.type = \"password\";\nresource.passwordInput = input2;\nelement.appendChild(input2);\n\nelement.appendChild(document.createElement(\"br\"));\n\nvar button = document.createElement(\"button\");\nbutton.innerHTML = \"Login\";\nelement.appendChild(button);\n\nvar instance = this;\nbutton.onclick = function() {\n    instance.onClick();\n}\n\n\n"}},"sessionResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":697,"height":93},"posInfo":{"x":24,"y":192},"state":0,"viewType":"Text"}},"taskResult":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":613,"height":319},"posInfo":{"x":621,"y":390},"state":-1,"viewType":"Formula"}},"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":463,"height":119},"posInfo":{"x":34,"y":431},"state":0,"viewType":"Text"}},"state":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":290,"height":66},"posInfo":{"x":33,"y":386},"state":-1,"viewType":"Text"}}}},"submit":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":386,"y":24}},"children":{"submitControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":355,"height":238},"posInfo":{"x":13,"y":95},"state":0,"viewType":"Output"},"resource":{"html":"<textarea id=\"submit_messageInput\"></textarea><br>\n<input type=\"button\" id=\"submit_commitButton\" value=\"Commit\"></input>\n<input type=\"button\" id=\"submit_cancelButton\" value=\"Cancel\"></input>","onLoad":"this.submitButton = document.getElementById(\"submit_commitButton\");\nthis.cancelButton = document.getElementById(\"submit_cancelButton\");\nthis.messageInput = document.getElementById(\"submit_messageInput\");\nthis.initialized = true;\n\nvar instance = this;\nthis.submitButton.onclick = function() {\n    instance.onSubmit();\n}\nthis.cancelButton.onclick = function() {\n    instance.onCancel();\n}","constructorAddition":"this.messageInput = null;\nthis.submitButton = null;\nthis.cancelButton = null;\nthis.initialized = false;\n\nthis.onSubmit = function() {\n    \n    if(!this.initialized) {\n        return;\n    }\n    \n    var commitMessage = this.messageInput.value.trim();\n    if((!commitMessage)||(commitMessage.length === 0)) {\n        alert(\"You must enter a commit message!\");\n        return;\n    }\n    this.messageInput.value = \"\";\n    \n    if((!this.instructionList)||(this.instructionList.length === 0)) {\n        alert(\"There is no data to commit.\");\n        return;\n    }\n    \n    var updateInfo = [];\n    updateInfo.push([ \"commitMessage\",commitMessage]);\n    updateInfo.push([\"liveInstructionList\",this.instructionList]);\n    mode.getMessenger().compoundDataUpdate(updateInfo,true);\n}\n\nthis.onCancel = function() {\n    console.log(this.previousTask);\n    taskAppModule.taskCanceled(mode.getMessenger(),[\"submit\"],this.previousTask);\n}","setData":"if(!data) return;\n\nthis.instructionList = data.instructionList;\nthis.previousTask = data.previousTask;","css":"#submit_messageInput {\n    height: 200px;\n    width: 300px;\n}"}},"commitResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":319,"height":123},"posInfo":{"x":251,"y":612},"state":-1,"viewType":"JSON"}},"commitMessage":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":271,"height":99},"posInfo":{"x":252,"y":427},"state":0,"viewType":"Text"}},"liveInstructionList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":315,"height":124},"posInfo":{"x":251,"y":571},"state":-1,"viewType":"JSON"}},"taskResult":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":611,"height":402},"posInfo":{"x":252,"y":654},"state":-1,"viewType":"Formula"}},"sessionKey":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":552,"height":52},"posInfo":{"x":22,"y":12},"state":-1,"viewType":"Formula"}},"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":429,"height":178},"posInfo":{"x":30,"y":579},"state":-1,"viewType":"Text"}},"state":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":290,"height":92},"posInfo":{"x":31,"y":444},"state":-1,"viewType":"Text"}},"instructionList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":777,"height":683},"posInfo":{"x":534,"y":100},"state":-1,"viewType":"Text"}},"editResults":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":653,"height":464},"posInfo":{"x":574,"y":165},"state":0,"viewType":"Text"}}}},"completed":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":384,"y":69}},"children":{"resetControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":636,"height":310},"posInfo":{"x":628,"y":21},"state":0,"viewType":"Output"},"resource":{"html":"<input type=\"button\" id=\"completed_reset\" value=\"Reset\"></input>","onLoad":"this.resetButton = document.getElementById(\"completed_reset\");\nthis.initialized = true;\n\nvar instance = this;\nthis.resetButton.onclick = function() {\n    instance.onReset();\n}","constructorAddition":"this.onReset = function() {\n    \n    var clearTaskList = [\n        [\"switcher\"],\n        [\"selectFileEntry\"],\n        [\"selectKey\"],\n        [\"reviewExisting\"],\n        [\"enterPayload\"],\n        [\"submit\"],\n        [\"completed\"]\n    ];\n    taskAppModule.clearTasksAndRestartFrom(mode.getMessenger(),clearTaskList,[\"switcher\"]);\n}","setData":""}},"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":253,"height":77},"posInfo":{"x":136,"y":66},"state":0,"viewType":"Text"}},"state":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":290,"height":136},"posInfo":{"x":138,"y":223},"state":0,"viewType":"Text"}},"submitResult":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":461,"height":153},"posInfo":{"x":145,"y":403},"state":0,"viewType":"Text"}}}},"switcher":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":60,"y":79}},"children":{"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":395,"height":241},"posInfo":{"x":28,"y":79},"state":0,"viewType":"Text"}},"state":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":290,"height":79},"posInfo":{"x":27,"y":36},"state":-1,"viewType":"Text"}},"selectEditType":{"type":"apogeeapp.app.ConfigurableForm","windowState":{"sizeInfo":{"width":714,"height":311},"posInfo":{"x":486,"y":85},"state":0,"viewType":"Output"}},"layout":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":898,"height":509},"posInfo":{"x":73,"y":367},"state":-1,"viewType":"JSON"}}}},"getSessionKey":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":447,"height":400},"posInfo":{"x":47,"y":456},"state":0,"viewType":"Code"}},"currentTask":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":287,"height":92},"posInfo":{"x":15,"y":212},"state":0,"viewType":"Text"}},"commonData":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":482,"y":496}},"children":{"fileTypeList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":727,"height":325},"posInfo":{"x":53,"y":346},"state":-1,"viewType":"Text"}},"fileTypeIdToName":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":722,"height":320},"posInfo":{"x":51,"y":428},"state":-1,"viewType":"JSON"}},"fileTypeNameToId":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":685,"height":300},"posInfo":{"x":454,"y":440},"state":0,"viewType":"JSON"}},"availableFileEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":743,"height":553},"posInfo":{"x":182,"y":63},"state":-1,"viewType":"Text"}},"context":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":178,"height":40},"posInfo":{"x":273,"y":34},"state":-1,"viewType":"Text"}},"sessionKey":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":717,"height":408},"posInfo":{"x":30,"y":37},"state":-1,"viewType":"Formula"}},"validateFormStrings":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":727,"height":400},"posInfo":{"x":21,"y":685},"state":-1,"viewType":"Code"}},"doesFileEntryNameExist":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":631,"height":178},"posInfo":{"x":544,"y":36},"state":-1,"viewType":"Code"}},"doesFileEntryFeatureTypeExist":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":450,"height":300},"posInfo":{"x":607,"y":150},"state":-1,"viewType":"Formula"}},"fileEntryNameLookupTable":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":627,"height":389},"posInfo":{"x":542,"y":83},"state":-1,"viewType":"Text"}},"featureTypeNameLookupTable":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":770,"height":310},"posInfo":{"x":615,"y":198},"state":-1,"viewType":"Text"}},"PROPERTY_RULES_OPTION_NAME":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":386,"height":55},"posInfo":{"x":912,"y":59},"state":-1,"viewType":"Text"}},"getFileTypeId":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":670,"height":400},"posInfo":{"x":49,"y":508},"state":-1,"viewType":"Code"}},"getFileTypeName":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":593,"height":400},"posInfo":{"x":50,"y":468},"state":-1,"viewType":"Code"}},"getMatchingFileEntries":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":566,"height":303},"posInfo":{"x":549,"y":314},"state":-1,"viewType":"Code"}},"COMMON_CONTEXT":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":47},"posInfo":{"x":986,"y":118},"state":0,"viewType":"Text"}},"fileEntryList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":757,"height":361},"posInfo":{"x":34,"y":143},"state":-1,"viewType":"Text"}},"propertyRulesEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":884,"height":300},"posInfo":{"x":18,"y":239},"state":-1,"viewType":"Formula"}},"getMatchingFileEntryByName":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":524,"height":400},"posInfo":{"x":551,"y":363},"state":-1,"viewType":"Code"}}}},"admin":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":25,"y":25}},"children":{"editOptions":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":600,"height":650},"posInfo":{"x":143,"y":60},"state":-1,"viewType":"JSON"}},"tasks":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":286,"height":110},"posInfo":{"x":462,"y":37},"state":0,"viewType":"JSON"}},"enterPayloadLayouts":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":791,"y":419}},"children":{"createGeomType_editResults":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":754,"height":598},"posInfo":{"x":107,"y":62},"state":-1,"viewType":"Private"}},"createGeomType_payloadLayout":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":667,"height":400},"posInfo":{"x":110,"y":16},"state":-1,"viewType":"Code"}},"createGeomType_payloadLayoutData":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":600,"height":607},"posInfo":{"x":480,"y":18},"state":-1,"viewType":"Text"}},"addChildProperty_payloadLayout":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":106,"y":215},"state":-1,"viewType":"Code"}},"createInputColor_payloadLayout":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":117,"y":569},"state":-1,"viewType":"Code"}},"createThemeEntry_payloadLayout":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":571,"height":400},"posInfo":{"x":116,"y":441},"state":-1,"viewType":"Code"}},"createThemeRule_payloadLayout":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":572,"height":400},"posInfo":{"x":110,"y":319},"state":-1,"viewType":"Private"}},"addChildProperty_editResults":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":660,"height":400},"posInfo":{"x":103,"y":255},"state":-1,"viewType":"Private"}},"createThemeRule_editResults":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":756,"height":528},"posInfo":{"x":105,"y":365},"state":-1,"viewType":"Private"}},"createThemeEntry_editResults":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":890,"height":577},"posInfo":{"x":117,"y":484},"state":-1,"viewType":"Private"}},"createInputColor_editResults":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":668,"height":564},"posInfo":{"x":112,"y":609},"state":-1,"viewType":"Private"}},"createInputColor_payloadLayoutData":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":415,"height":429},"posInfo":{"x":466,"y":569},"state":-1,"viewType":"Text"}},"createThemeEntry_payloadLayoutData":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":459,"height":665},"posInfo":{"x":464,"y":445},"state":-1,"viewType":"JSON"}},"addChildProperty_payloadLayoutData":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":392,"height":300},"posInfo":{"x":479,"y":212},"state":-1,"viewType":"Text"}},"createThemeRule_payloadLayoutData":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":438,"height":547},"posInfo":{"x":482,"y":319},"state":-1,"viewType":"JSON"}},"createStringsEntry_payloadLayout":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":106,"y":683},"state":-1,"viewType":"Code"}},"createStringsEntry_editResults":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":739,"height":578},"posInfo":{"x":105,"y":722},"state":-1,"viewType":"Private"}},"createStringsEntry_payloadLayoutData":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":601,"height":535},"posInfo":{"x":473,"y":683},"state":-1,"viewType":"Text"}},"validString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":904,"y":60},"state":-1,"viewType":"Code"}},"createAddressKey_editResults":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":904,"height":400},"posInfo":{"x":105,"y":156},"state":-1,"viewType":"Private"}},"createAddressKey_payloadLayoutData":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":641,"height":525},"posInfo":{"x":480,"y":109},"state":-1,"viewType":"Text"}},"createAddressKey_payloadLayout":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":108,"y":118},"state":-1,"viewType":"Code"}},"themeSectionToName":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":905,"y":123},"state":-1,"viewType":"Text"}}}},"editTask":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":385,"height":299},"posInfo":{"x":74,"y":422},"state":-1,"viewType":"Formula"}},"getSelectKeyLayout":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":463,"height":400},"posInfo":{"x":977,"y":238},"state":-1,"viewType":"Code"}},"getEnterPayloadLayout":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":506,"height":400},"posInfo":{"x":978,"y":417},"state":-1,"viewType":"Code"}},"getNextTask":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":589,"height":400},"posInfo":{"x":351,"y":414},"state":-1,"viewType":"Code"}},"getInitialFileEntryData":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":483,"height":400},"posInfo":{"x":976,"y":281},"state":-1,"viewType":"Code"}},"SUBMIT_TASK_NAME":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":1013,"y":51},"state":-1,"viewType":"Text"}},"INACTIVE_LAYOUT":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":612,"height":491},"posInfo":{"x":1013,"y":104},"state":-1,"viewType":"Text"}},"baseEntry":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":496,"height":256},"posInfo":{"x":76,"y":464},"state":-1,"viewType":"Formula"}},"initialInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":456,"height":300},"posInfo":{"x":77,"y":506},"state":-1,"viewType":"JSON"}},"getMatchingExistingEntries":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":631,"height":327},"posInfo":{"x":976,"y":347},"state":-1,"viewType":"Code"}},"editResults":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":77,"y":593},"state":-1,"viewType":"JSON"}},"createEditResults":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":540,"height":149},"posInfo":{"x":978,"y":463},"state":-1,"viewType":"Code"}},"optionName":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":460,"height":300},"posInfo":{"x":79,"y":548},"state":-1,"viewType":"Text"}},"selectKeyLayouts":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":790,"y":352}},"children":{"createGeomType_keyLayoutData":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":677,"height":494},"posInfo":{"x":100,"y":103},"state":-1,"viewType":"JSON"}},"createGeomType_keyLayout":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":448,"height":30},"posInfo":{"x":98,"y":15},"state":-1,"viewType":"Code"}},"createGeomType_initialInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":517,"height":144},"posInfo":{"x":101,"y":58},"state":-1,"viewType":"Code"}},"createAddressKey_keyLayout":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":95,"y":200},"state":-1,"viewType":"Code"}},"addChildProperty_keyLayout":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":641,"height":400},"posInfo":{"x":94,"y":350},"state":-1,"viewType":"Code"}},"createThemeRule_keyLayout":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":681,"height":400},"posInfo":{"x":501,"y":16},"state":-1,"viewType":"Code"}},"createThemeEntry_keyLayout":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":501,"y":196},"state":-1,"viewType":"Code"}},"createInputColor_keyLayout":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":505,"height":198},"posInfo":{"x":907,"y":21},"state":-1,"viewType":"Code"}},"createAddressKey_keyLayoutData":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":435,"height":300},"posInfo":{"x":88,"y":284},"state":-1,"viewType":"Text"}},"addChildProperty_keyLayoutData":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":457,"height":300},"posInfo":{"x":92,"y":440},"state":-1,"viewType":"Text"}},"createThemeRule_keyLayoutData":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":438,"height":300},"posInfo":{"x":504,"y":97},"state":-1,"viewType":"JSON"}},"createThemeEntry_keyLayoutData":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":380,"height":300},"posInfo":{"x":498,"y":284},"state":-1,"viewType":"Text"}},"createInputColor_keyLayoutData":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":372,"height":300},"posInfo":{"x":907,"y":101},"state":-1,"viewType":"Text"}},"createAddressKey_initialInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":662,"height":400},"posInfo":{"x":90,"y":241},"state":-1,"viewType":"Code"}},"addChildProperty_initialInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":908,"height":400},"posInfo":{"x":87,"y":396},"state":-1,"viewType":"Code"}},"createThemeRule_initialInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":775,"height":400},"posInfo":{"x":502,"y":54},"state":-1,"viewType":"Code"}},"createThemeEntry_initialInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":658,"height":396},"posInfo":{"x":495,"y":242},"state":-1,"viewType":"Code"}},"createInputColor_initialInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":466,"height":400},"posInfo":{"x":905,"y":62},"state":-1,"viewType":"Code"}},"getPathLayoutLines":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":695,"height":590},"posInfo":{"x":96,"y":571},"state":-1,"viewType":"Private"}},"createStringsEntry_keyLayout":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":910,"y":201},"state":-1,"viewType":"Code"}},"createStringsEntry_initialInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":522,"height":400},"posInfo":{"x":918,"y":247},"state":-1,"viewType":"Code"}},"createStringsEntry_keyLayoutData":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":430,"height":300},"posInfo":{"x":914,"y":289},"state":-1,"viewType":"Text"}},"getPathFromFormResponse":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":766,"height":400},"posInfo":{"x":91,"y":619},"state":-1,"viewType":"Code"}},"getKeyFromPath":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":657,"height":400},"posInfo":{"x":475,"y":621},"state":-1,"viewType":"Code"}},"getCompiledEntryData":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":613,"height":656},"posInfo":{"x":477,"y":573},"state":-1,"viewType":"Private"}}}},"DUMMY_DROPDOWN_ENTRY":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":1005,"y":168},"state":-1,"viewType":"Text"}}}},"selectFileEntry":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":183,"y":57}},"children":{"selectEntriesControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":909,"height":663},"posInfo":{"x":231,"y":20},"state":0,"viewType":"Output"},"resource":{"html":"<table class=\"selectFileEntry_table\">\n     <tr>\n        <td id=\"selectFileEntry_filterCell\">\n            filters here\n        </td>\n    </tr>\n    <tr>\n        <td class=\"selectFileEntry_listColumn\">\n            <div id=\"selectFileEntry_availableCell\" class=\"selectFileEntry_displayDiv\"></div>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            <input type=\"button\" value=\"Select\" id=\"selectFileEntry_commitButton\">\n            &nbsp;\n            <input type=\"button\" value=\"Cancel\" id=\"selectFileEntry_cancelButton\">\n        </td>\n    </tr>\n</table>\n","css":".selectFileEntry_table {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    border-collapse: collapse;\n}\n.selectFileEntry_listColumn {\n    vertical-align: top;\n    height: 100%;\n    overflow: hidden;\n}\n.selectFileEntry_displayDiv {\n    height: 100%;\n    overflow: auto; \n    border: 1px solid black;\n}\n\n.selectFileEntry_filterContainerClass {\n    display: inline;\n    margin: 5px;\n}\n\n.selectFileEntry_listEntryElement {\n    border: 1px solid lightgray;\n    padding: 5px;\n}\n.selectFileEntry_listEntryElement_selected {\n    border: 1px solid lightgray;\n    padding: 5px;\n    background-color: yellow;\n}","setData":"if(!data) return;\n\n//store the data if we are not ready yet\nif(!this.initialized) {\n    this.cachedData = data;\n    return;\n}\n\n//set data\nthis.data = data;\n\n//initialize filters\nthis.initializeFilters();\n\n//load ui\nthis.loadEntries();\n\n\n\n","constructorAddition":"this.initialized = false;\n\nthis.fileEntries = null;\nthis.initialRecipeEntries = null;\nthis.activeMetaFileEntry = null;\nthis.metaFileCreated = false;\n\nthis.selectedCell = null;\nthis.availableCell = null;\n\nthis.onCommitClicked = function() {\n    if(!this.selectedFileEntry) {\n        alert(\"No file entry is selected!\");\n        return;\n    }\n    \n    var data = {};\n    data.selectedFileEntry = this.selectedFileEntry;\n    \n    taskAppModule.taskCompleted(mode.getMessenger(),[\"selectFileEntry\"],this.data.nextTaskPath,data);\n}\n\nthis.onCancelClicked = function() {\n    taskAppModule.taskCanceled(mode.getMessenger(),[\"selectFileEntry\"],this.data.previousTaskPath);\n}\n\n\n//=====================================\n// Load Methods\n//=====================================\n\nthis.loadEntries = function() {\n    \n    this.selectedFileEntry = null;\n    \n    //populate the filter options\n    this.populateFilterOptions();\n    \n    //populate the display cell\n    apogeeapp.ui.removeAllChildren(this.availableCell);\n    \n    var addFileEntry = (fileEntry) => {\n        var cellElement = this.createCell(fileEntry);\n        this.availableCell.appendChild(cellElement);\n    }\n\n    this.data.availableFileEntries.filter(this.overallFilter).forEach(addFileEntry);\n}\n\nthis.createCell = function(fileEntry) {\n    \n    var name = fileEntry.Fields.entry_name + \" - \" + fileEntry.Fields.option_name;\n    \n    var div = document.createElement(\"div\");\n    div.className = \"selectFileEntry_listEntryElement\";\n    var text = document.createTextNode(name);\n    div.appendChild(text);\n    \n    div.onclick = (event) => this.clickCell(fileEntry,div);\n    \n    return div;\n}\n\nthis.clickCell = function(fileEntry,listElement) {\n    \n    if(this.selectedListElement) {\n        this.selectedListElement.className = \"selectFileEntry_listEntryElement\";\n    }\n    \n    this.selectedFileEntry = fileEntry;\n    this.selectedListElement = listElement;\n    if(this.selectedListElement) {\n        this.selectedListElement.className = \"selectFileEntry_listEntryElement_selected\";\n    }\n}\n\n//=================================\n// Update methods\n//=================================\n\n//shared functions between ui elements - we need these\n//because for now there is no way to add shared ui code.\n\nvar taskCompleted = function(messenger,currentTask,nextTask,data) {\n    var taskResult = {};\n    taskResult.state = \"SUCCESS\";\n    taskResult.data = data;\n    \n    var updateInfo = [];\n    updateInfo.push([\"taskResults.\" + currentTask,taskResult]);\n    updateInfo.push([\"tasks.activeTask\",nextTask]);\n    messenger.compoundDataUpdate(updateInfo);\n}\n\nvar taskCanceled = function(messenger,currentTask,prevTask) {\n    var clearData = {};\n    clearData.state = \"INCOMPLETE\";\n    \n    var updateInfo = [];\n    updateInfo.push([\"taskResults.\" + currentTask,clearData]);\n    updateInfo.push([\"taskResults.\" + prevTask,clearData]);\n    updateInfo.push([\"tasks.activeTask\",prevTask]);\n    messenger.compoundDataUpdate(updateInfo);\n}\n\n//=================================\n// Filters\n//=================================\n\n/* This initializes the filters */\nthis.initializeFilters = function() {\n\n    //define the filters\n    var filterList = [\n        [\"Section\",(fileEntry) => fileEntry.Fields.entry_section],\n        [\"Legacy Key\",(fileEntry) => {\n                return fileEntry.Fields.entry_data.properties[0].legacyKey;\n            }\n        ],\n        [\"Legacy Value\",(fileEntry) => {\n                return fileEntry.Fields.entry_data.properties[0].legacyValue;\n            }\n        ],\n        [\"Context\",(fileEntry) => fileEntry.Fields.entry_context],\n        [\"Key\",(fileEntry) => fileEntry.Fields.entry_key],\n        [\"Option\",(fileEntry) => fileEntry.Fields.option_name]\n    ];\n    \n    //create the working filter struct\n    var createFilterStruct = (filterListEntry) => {\n        var struct = {};\n        struct.filterFunction = filterListEntry[1];\n        struct.title = filterListEntry[0];\n        struct.optionSet = null;\n        struct.selectionActive = false;\n        struct.selection = null;\n        struct.selectElement = null;\n        return struct;\n    }\n    this.filterStructs = filterList.map(createFilterStruct); \n    \n    //create the overrall filter function\n    this.overallFilter = (fileEntry) => {\n        var resultOk = true;\n\n        var singleFilterPass = (filterStruct) => {\n            if(filterStruct.selectionActive) {\n                 return (filterStruct.filterFunction(fileEntry) == filterStruct.selection);\n            }\n            else {\n                return true;\n            }\n        }\n        \n        return this.filterStructs.every(singleFilterPass);\n    }\n    \n    //create the fiter display elements\n    apogeeapp.ui.removeAllChildren(this.filterCell);\n    var createFilterEntry = (filterStruct) => {\n        this.filterCell.appendChild(this.getFilterElement(filterStruct));\n    }\n    this.filterStructs.forEach(createFilterEntry);\n}\n\n/** This creates a dom element for the filter select */\nthis.getFilterElement = function(filterStruct) {\n    var container = document.createElement(\"div\");\n    container.className = \"selectFileEntry_filterContainerClass\";\n    \n    container.appendChild(document.createTextNode(filterStruct.title));\n    \n    var selectElement = document.createElement(\"select\");\n    filterStruct.selectElement = selectElement;\n    container.appendChild(selectElement);\n    \n    //handler = make selection and reload file entries\n    filterStruct.selectElement.onchange = (event) => {\n        if(selectElement.value == NULL_SELECTION) {\n            filterStruct.selectionActive = false;\n            filterStruct.selection = null;\n        }\n        else {\n            filterStruct.selectionActive = true;\n            filterStruct.selection = selectElement.value;\n        }\n        this.loadEntries();\n    };\n    \n    return container;\n}\n\nvar NULL_SELECTION = \"----\";\n\n/** This method populates the options into the filter struct. */\nthis.populateFilterSelect = function(filterStruct) {\n    apogeeapp.ui.removeAllChildren(filterStruct.selectElement);\n    \n    filterStruct.selectElement.add(apogeeapp.ui.createElement(\"option\",{\"text\":NULL_SELECTION}));\n    \n    for(var option in filterStruct.optionSet) {\n        filterStruct.selectElement.add(apogeeapp.ui.createElement(\"option\",{\"text\":option}));\n    }\n    \n    if(filterStruct.selectionActive) {\n        filterStruct.selectElement.value = filterStruct.selection;\n    }\n    else {\n        filterStruct.selectElement.value = NULL_SELECTION;\n    }\n}\n\n/** This method populates the allowed options for each filter in the list. It does this\n * sequentially, meaning the options for later filters depend on the current selection in previous filters. */\nthis.populateFilterOptions = function() {\n    \n    var fileEntryList = this.data.availableFileEntries;\n    \n    //the create options function, for use with reduce\n    var createOptionsAndFilterList = (filterStruct) => {\n        \n        \n        //populate filter option set\n        var addToOptionSet = (optionSet,fileEntry) => {\n            var value = filterStruct.filterFunction(fileEntry);\n            optionSet[value] = true;\n            return optionSet;\n        }\n        \n        filterStruct.optionSet = fileEntryList.reduce(addToOptionSet,{});\n        \n        //update selection active = clear it if it was set to something that was not an option\n        if(filterStruct.selectionActive) {\n            if(!filterStruct.optionSet[filterStruct.selection]) {\n                filterStruct.selectionActive = false;\n                filterStruct.selection = null;\n            }\n        }\n        \n        //filter out list for next filter, if selection active\n        fileEntryList = fileEntryList.filter( (fileEntry) => {\n            if(filterStruct.selectionActive) {\n                 return (filterStruct.filterFunction(fileEntry) == filterStruct.selection);\n            }\n            else {\n                return true;\n            }\n        });\n        \n        //populate the ui element for these new options\n        this.populateFilterSelect(filterStruct);\n    }\n    \n    this.filterStructs.forEach(createOptionsAndFilterList)\n}\n\nthis.getTypeSpecificFilters = function(metaFileType) {\n    return TYPE_SPECIFIC_FILTERS[metaFileType];\n}\n","onLoad":"if(!this.initialized) {\n    this.selectedTable = document.getElementById(\"selectFileEntry_selectedTable\");\n    this.selectedCells = null;\n    this.availableCell = document.getElementById(\"selectFileEntry_availableCell\");\n    \n    this.filterCell = document.getElementById(\"selectFileEntry_filterCell\");\n    \n    this.commitButton = document.getElementById(\"selectFileEntry_commitButton\");\n    this.cancelButton = document.getElementById(\"selectFileEntry_cancelButton\");\n    \n    var instance = this;\n    \n    this.commitButton.onclick = () => instance.onCommitClicked();\n    this.cancelButton.onclick = () => instance.onCancelClicked();\n    \n    //finished\n    this.initialized = true;\n    \n    if(this.cachedData !== undefined) {\n        console.log(\"using cached data!\");\n        this.setData(this.cachedData);\n        this.cachedData = undefined;\n    }\n}"}},"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":550,"height":498},"posInfo":{"x":12,"y":160},"state":-1,"viewType":"Text"}},"state":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":290,"height":79},"posInfo":{"x":20,"y":109},"state":-1,"viewType":"Text"}}}},"selectKey":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":181,"y":161}},"children":{"state":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":632,"y":13},"state":0,"viewType":"Text"}},"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":633,"height":300},"posInfo":{"x":0,"y":4},"state":0,"viewType":"Text"}},"selectKeyInfoForm":{"type":"apogeeapp.app.ConfigurableForm","windowState":{"sizeInfo":{"width":712,"height":317},"posInfo":{"x":171,"y":355},"state":0,"viewType":"Output"}}}},"reviewExisting":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":25,"y":25}},"children":{"state":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":658,"y":36},"state":-1,"viewType":"Text"}},"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":391,"height":300},"posInfo":{"x":885,"y":203},"state":0,"viewType":"Text"}},"matchExistingEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":404,"height":353},"posInfo":{"x":62,"y":35},"state":-1,"viewType":"JSON"}},"layoutTemplate":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":519,"height":343},"posInfo":{"x":663,"y":135},"state":-1,"viewType":"Text"}},"layout":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":567,"height":0},"posInfo":{"x":659,"y":186},"state":-1,"viewType":"Formula"}},"reviewForm":{"type":"apogeeapp.app.ConfigurableForm","windowState":{"sizeInfo":{"width":780,"height":292},"posInfo":{"x":82,"y":264},"state":0,"viewType":"Output"}},"existingOptions":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":59,"y":88},"state":-1,"viewType":"JSON"}}}},"enterPayload":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":50,"y":50}},"children":{"state":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":526,"y":60},"state":-1,"viewType":"Text"}},"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":504,"height":556},"posInfo":{"x":824,"y":48},"state":0,"viewType":"Text"}},"enterPayloadForm":{"type":"apogeeapp.app.ConfigurableForm","windowState":{"sizeInfo":{"width":774,"height":458},"posInfo":{"x":32,"y":147},"state":0,"viewType":"Output"}}}}}},"micemetarDataAccess":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":25,"y":25}},"children":{"createRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":560,"height":321},"posInfo":{"x":33,"y":368},"state":-1,"viewType":"Private"}},"recordsToCreateInstructions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":834,"height":391},"posInfo":{"x":30,"y":472},"state":-1,"viewType":"Code"}},"createCommitBody":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":568,"height":400},"posInfo":{"x":629,"y":225},"state":-1,"viewType":"Code"}},"createRequestOptions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":523,"height":254},"posInfo":{"x":822,"y":379},"state":-1,"viewType":"Code"}},"host":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":353,"height":71},"posInfo":{"x":16,"y":6},"state":-1,"viewType":"Text"}},"commitUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":433,"height":107},"posInfo":{"x":14,"y":98},"state":-1,"viewType":"Text"}},"requestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":450,"height":68},"posInfo":{"x":14,"y":58},"state":-1,"viewType":"Formula"}},"dataSetInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":882,"height":611},"posInfo":{"x":317,"y":144},"state":-1,"viewType":"Text"}},"createUpdateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":1002,"height":655},"posInfo":{"x":37,"y":247},"state":-1,"viewType":"Code"}},"createCreateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":994,"height":643},"posInfo":{"x":39,"y":209},"state":-1,"viewType":"Code"}},"getFieldErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":512,"height":68},"posInfo":{"x":761,"y":616},"state":-1,"viewType":"Code"}},"getRecordErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":81},"posInfo":{"x":762,"y":664},"state":-1,"viewType":"Code"}},"createDeleteInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":678,"height":540},"posInfo":{"x":36,"y":289},"state":-1,"viewType":"Code"}},"getRecordInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":480,"height":400},"posInfo":{"x":818,"y":427},"state":-1,"viewType":"Code"}},"combinedEntriesToInstructionList":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":721,"height":524},"posInfo":{"x":31,"y":516},"state":-1,"viewType":"Private"}},"getCommitPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":569,"height":109},"posInfo":{"x":316,"y":26},"state":-1,"viewType":"Code"}},"getRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":546,"height":89},"posInfo":{"x":315,"y":67},"state":-1,"viewType":"Code"}},"customRequestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":17,"y":142},"state":-1,"viewType":"Formula"}},"getCustomRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":668,"height":88},"posInfo":{"x":317,"y":104},"state":-1,"viewType":"Code"}}}}}}