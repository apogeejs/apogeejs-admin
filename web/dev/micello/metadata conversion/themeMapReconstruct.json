{"fileType":"apogee workspace","jsLinks":[],"cssLinks":[],"workspace":{"fileType":"apogee workspace","version":0.2,"data":{"name":"themeMapReconstruct","type":"apogee.Folder","children":{"getPathString":{"name":"getPathString","type":"apogee.FunctionTable","updateData":{"argList":["path"],"functionBody":"return path.join(\"|\");","supplementalCode":"","description":""}},"getEntryFromPriorityEntry":{"name":"getEntryFromPriorityEntry","type":"apogee.FunctionTable","updateData":{"argList":["priorityEntry","path"],"functionBody":"//priority entry is in the same format as a value entry\nvar valueEntry = priorityEntry;\n\nif(path.length === 0) return valueEntry;\n\nvar index = 0;\nreturn getEntryFromValue(valueEntry,path,0);","supplementalCode":"\n//this is one of two recursive functions to get an entry from a path\nfunction getEntryFromValue(valueEntry,path,currentIndex) {\n    var keyList = valueEntry.ks;\n    \n    if(!keyList) return null;\n    \n    var keyEntry;\n    var keyToken = path[currentIndex];\n    for(var i = 0; i < keyList.length; i++) {\n        keyEntry = keyList[i];\n        if(keyToken == getKeyToken(keyEntry)) {\n            if(currentIndex == path.length-1) {\n                return keyEntry;\n            }\n            else {\n                return getEntryFromKeyEntry(keyEntry,path,currentIndex + 1);\n            }\n        }\n    }\n    \n    //not found\n    return null;\n}\n\nfunction getKeyToken(keyEntry) {\n    if(keyEntry.ek) {\n        return \"ek\" + \":\" + keyEntry.ek;\n    }\n    if(keyEntry.gk) {\n        return \"gk\" + \":\" + keyEntry.gk;\n    }\n    if(keyEntry.ak) {\n        return \"ak\" + \":\" + keyEntry.ak;\n    }\n    else {\n        throw new Error(\"Key not found for key entry.\");\n    }\n}\n\n//this is one of two recursive functions to get an entry from a path\nfunction getEntryFromKeyEntry(keyEntry,path,currentIndex) {\n    var values = keyEntry.v;\n    if(!values) return null;\n    \n    var value = path[currentIndex];\n    var valueEntry = values[value];\n    \n    if(valueEntry) {\n        if(currentIndex == path.length-1) {\n            return valueEntry;\n        }\n        else {\n            return getEntryFromValue(valueEntry,path,currentIndex + 1);\n        }\n    }\n    else {\n        return null;\n    }\n\n}","description":""}},"themeMap":{"name":"themeMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvar outputStruct = {};\noutputStruct.ft = \"ThemeMap\"\noutputStruct.nm = getName();\noutputStruct.label = [];\noutputStruct.style = [];\n\nif(selectedEntries.label) {\n    loadTree(selectedEntries.label,outputStruct.label);\n}\nif(selectedEntries.style) {\n    loadTree(selectedEntries.style,outputStruct.style);\n}\n\nvalue = outputStruct;\nreturn value;\n\n","supplementalCode":"function getName() {\n    return loadMetaFileRecords.metaFileResponse.data.Response[0].Fields.name;\n}\n\nfunction loadTree(inputThemeMapTableTree,outputTreeMapTree) {\n\n    for(var priorityString in inputThemeMapTableTree) {\n        var priority = parseInt(priorityString);\n        var priorityMap = inputThemeMapTableTree[priorityString];\n        \n        var outPriorityEntry = getPriorityTree(outputTreeMapTree,priority);\n        for(var entryTag in priorityMap) {\n            var entry = priorityMap[entryTag];\n            addThemeMapEntryToPriorityEntry(entry,outPriorityEntry);\n        }\n    }\n}\n\nfunction getPriorityTree(outputPriorityList,priority) {\n    var entry;\n    for(var i = 0; i < outputPriorityList.length; i++) {\n        entry = outputPriorityList[i];\n        if(entry.priority == priority) {\n            return entry;\n        }\n        else if(entry.priority > priority) {\n            //add at this index\n            entry = createPriorityEntry(priority);\n            outputPriorityList.splice(i,0,entry);\n            return entry;\n        }\n    }\n    \n    //add at end\n    entry = createPriorityEntry(priority);\n    outputPriorityList.push(entry);\n    return entry;\n}\n\nfunction createPriorityEntry(priority) {\n    entry = {};\n    entry.priority = priority;\n    entry.ks = [];\n    return entry;\n}\n\n//this method adds an entry to a tree\nfunction addThemeMapEntryToPriorityEntry(themeMapTableEntry,priorityEntry) {\n    if(themeMapTableEntry.type == \"root\") {\n        //this is the default entry for the priority\n        //(there should be only one, and only for last priority)\n        addToRootEntry(themeMapTableEntry,priorityEntry);\n    }\n    else {\n        var themeMapEntry = createThemeMapEntry(themeMapTableEntry);\n    \n        //place in tree\n        var parentPath = themeMapTableEntry.parentPath;\n        var parentThemeMapEntry = getEntryFromPriorityEntry(priorityEntry,parentPath,currentIndex);\n        if(parentThemeMapEntry) {\n            addToParentEntry(themeMapEntry,themeMapTableEntry,parentThemeMapEntry);\n        }\n        else {\n            throw new Error(\"parent entry not found: \" + getPathString(parentPath));\n        }\n    }\n}\n\n//This creates a preset entry for the give input entry\nfunction createThemeMapEntry(entry) {\n    var themeMapEntry = {};\n\n    //copy key\n    if(entry.type == \"value\") {\n        //no other fields\n    }\n    else if(entry.type == \"key\") {\n        //there should be one of these three\n        themeMapEntry[entry.keyType] = entry.k;\n    }\n    else {\n        throw new Error(\"Unknown theme map entry type: \" + entry.type);\n    }\n    \n    //copy payload\n    if(entry.payload) {\n        for(var payloadKey in entry.payload) {\n            themeMapEntry[payloadKey] = entry.payload[payloadKey];\n        }\n    }\n    \n    return themeMapEntry;\n}\n\n\n//this adds a child entry to a parent\nfunction addToParentEntry(themeMapEntry,themeMapTableEntry,parentThemeMapEntry) {\n    if(themeMapTableEntry.type == \"key\") {\n        insertKey(themeMapEntry,parentThemeMapEntry);\n    }\n    else if(themeMapTableEntry.type == \"value\") {\n        //assume it is a key if it is not a value - maybe I shouldn't do this\n        insertValue(themeMapTableEntry.v,themeMapEntry,parentThemeMapEntry);\n    }\n    else {\n        throw new Error(\"Unknown theme map entry type: \" + themeMapTableEntry.type);\n    }\n}\n\n//this adds data to the root entry\nfunction addToRootEntry(themeMapTableEntry,rootEntry) {\n    //copy payload\n    if(themeMapTableEntry.payload) {\n        for(var payloadKey in themeMapTableEntry.payload) {\n            rootEntry[payloadKey] = themeMapTableEntry.payload[payloadKey];\n        }\n    }\n    \n}\n\n//This adds a child key to a parent value\nfunction insertKey(themeMapEntry,parentThemeMapEntry) {\n    var keys = parentThemeMapEntry.ks;\n    if(!keys) {\n        keys = [];\n        parentThemeMapEntry.ks = keys;\n    }\n    if(!keyInList(themeMapEntry,keys)) {\n        keys.push(themeMapEntry);\n    }\n}\n\n//This function tests if a key entry is in a list\nfunction keyInList(themeMapEntry,entryList) {\n    var matchFunction = function(entry) {\n        return ((themeMapEntry.ek == entry.ek)&&\n            (themeMapEntry.gk == entry.gk)&&\n            (themeMapEntry.ak == entry.ak));\n    }\n    var index = entryList.findIndex(matchFunction);\n    return (index >= 0);\n}\n\n//this adds a child value to a parent key\nfunction insertValue(value,themeMapEntry,parentThemeMapEntry) {\n    var values = parentThemeMapEntry.v;\n    if(!values) {\n        values = {};\n        parentThemeMapEntry.v = values;\n    }\n    if(!valueInMap(value,values)) {\n        values[value] = themeMapEntry;\n    }\n}\n\n//This function tests if a value is in a map\nfunction valueInMap(value,entryMap) {\n    return (entryMap[value] !== undefined);\n}\n","description":""}},"micemetarecipeDataAccess":{"name":"micemetarecipeDataAccess","type":"apogee.Folder","children":{"createRecord":{"name":"createRecord","type":"apogee.FunctionTable","updateData":{"argList":["recordInfo","fieldMap"],"functionBody":"var record = {};\n\nrecord.Id = getId();\nrecord.Type = recordInfo.name;\nrecord.Fields = fieldMap;\nrecord.readPerm = READ_PERM;\nrecord.editPerm = EDIT_PERM;\n\nreturn record;","supplementalCode":"var READ_PERM = 2;\nvar EDIT_PERM = 15;\n\nvar nextId = -1;\n\nfunction getId() {\n    return nextId--;\n}","description":"This method creates a record given the field values and record info \nfrom the data set info. It creates and ID and uses standard permissions."}},"recordsToCreateInstructions":{"name":"recordsToCreateInstructions","type":"apogee.FunctionTable","updateData":{"argList":["recordList"],"functionBody":"var instructions = [];\n\nfor(var i = 0; i < recordList.length; i++) {\n    var createRecord = recordList[i];\n    var instruction = createCreateInstruction(createRecord);\n    instructions.push(instruction);\n}\n\nreturn instructions;","supplementalCode":"","description":"This creates a list of create instructions to go along with a list of records to be created.\n\nThere is the option to assign the ID or to leave it as undefined, in which case\nan automatically incremented ID will be assigned. (For consistency in the data\nset, either all records should be preassigned or all records should be \nautomatically assigned."}},"createCommitBody":{"name":"createCommitBody","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage"],"functionBody":"var commit = {};\nvar actions = [];\n\nif(commitMessage.length === 0) throw new Error(\"Commit message missing!\");\n\ncommit.Name = dataSetInfo.name;\ncommit.Message = commitMessage;\ncommit.Actions = actions;\n\n//single action with commits\nvar action = {};\naction.Title = \"bulk create commit\";\naction.Instr = instructionList;\nactions.push(action);\n\nreturn commit","supplementalCode":"","description":"This creates a body for a commit request, given a list of instructions and a commit message."}},"createRequestOptions":{"name":"createRequestOptions","type":"apogee.FunctionTable","updateData":{"argList":["bodyJson"],"functionBody":"var header = {};\nheader[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\nheader.sessionKey = sessionKey;\nheader[\"proto-version\"] = \"4.0\";\nheader[\"db-version\"] = dataSetInfo.version;\n\nrequestInfo = {};\nrequestInfo.header = header;\nrequestInfo.method = \"POST\";\nrequestInfo.body = JSON.stringify(bodyJson);\n\nreturn requestInfo;\n","supplementalCode":"","description":"This creates the requestOptions, suitable for apogee.net.jsonRequest, to go with an type of request to the workingset (micemetarequest) server."}},"sessionKey":{"name":"sessionKey","type":"apogee.JsonTable","updateData":{"data":"SESS0f6c4c2238a670b8138b63d9fd03cc22=n8p78e4sa2rndi6tv4kj1uv022","description":""}},"host":{"name":"host","type":"apogee.JsonTable","updateData":{"data":"http://localhost:8080/micemetarecipews","description":""}},"commitUrl":{"name":"commitUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvalue = host + \"/commit\";\nreturn value;\n\n","supplementalCode":"","description":""}},"requestUrl":{"name":"requestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvalue = host + \"/cannedsearch\";\nreturn value;\n\n","supplementalCode":"","description":""}},"dataSetInfo":{"name":"dataSetInfo","type":"apogee.JsonTable","updateData":{"data":{"records":{"file_entry_type":{"idField":"file_entry_type_id","name":"file_entry_type","foreignList":[{"remoteRecord":"file_entry","name":"file_entry_list","isUnique":false,"remoteField":"file_entry_type_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"file_type_id","nullOk":false,"fieldClass":"com.micello.micemetarecipe.data.FileType"},{"defaultValue":null,"name":"section","nullOk":true,"fieldClass":"org.json.JSONArray"},{"defaultValue":null,"name":"key_string","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"name","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetarecipe.data.FileEntryType"},"com_file_entry":{"idField":"com_file_entry_id","name":"com_file_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"com_file_id","nullOk":false,"fieldClass":"com.micello.micemetarecipe.data.ComFile"},{"defaultValue":null,"name":"meta_file_id","nullOk":false,"fieldClass":"com.micello.micemetarecipe.data.MetaFile"},{"defaultValue":null,"name":"file_group","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetarecipe.data.ComFileEntry"},"file_type":{"idField":"file_type_id","name":"file_type","foreignList":[{"remoteRecord":"file_entry_type","name":"file_entry_type_list","isUnique":false,"remoteField":"file_type_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":null,"name":"file_type_name","nullOk":true,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetarecipe.data.FileType"},"file_entry":{"idField":"file_entry_id","name":"file_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"file_entry_type_id","nullOk":false,"fieldClass":"com.micello.micemetarecipe.data.FileEntryType"},{"defaultValue":null,"name":"entry_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"option_name","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"entry_data","nullOk":false,"fieldClass":"org.json.JSONObject"}],"recordClass":"com.micello.micemetarecipe.data.FileEntry"},"recipe_entry":{"idField":"recipe_entry_id","name":"recipe_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"meta_file_id","nullOk":false,"fieldClass":"com.micello.micemetarecipe.data.MetaFile"},{"defaultValue":null,"name":"file_entry_id","nullOk":false,"fieldClass":"com.micello.micemetarecipe.data.FileEntry"},{"defaultValue":null,"name":"insertion_info","nullOk":true,"fieldClass":"org.json.JSONObject"}],"recordClass":"com.micello.micemetarecipe.data.RecipeEntry"},"com_file":{"idField":"com_file_id","name":"com_file","foreignList":[{"remoteRecord":"com_file_entry","name":"com_file_entry_list","isUnique":false,"remoteField":"com_file_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":null,"name":"file_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"name","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetarecipe.data.ComFile"},"meta_file":{"idField":"meta_file_id","name":"meta_file","foreignList":[{"remoteRecord":"recipe_entry","name":"recipe_entry_list","isUnique":false,"remoteField":"meta_file_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":null,"name":"file_type_id","nullOk":false,"fieldClass":"com.micello.micemetarecipe.data.FileType"},{"defaultValue":null,"name":"file_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"name","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetarecipe.data.MetaFile"}},"name":"Micemetarecipe","version":"5.0"},"description":""}},"version":{"name":"version","type":"apogee.JsonTable","updateData":{"data":"1.1","description":""}},"releaseNotes":{"name":"releaseNotes","type":"apogee.JsonTable","updateData":{"data":"","description":"1.2\n---\nFixed bug in create delete instruction\n\n1.1\n---\nAdded additional functions\n\n1.0\n---\ninitial release"}},"depedencies":{"name":"depedencies","type":"apogee.JsonTable","updateData":{"data":"none","description":""}},"createUpdateInstruction":{"name":"createUpdateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["initialRecord","targetRecord"],"functionBody":"if(initialRecord.id != targetRecord.ID) {\n    throw new Error(\"Record ID mismatch in create update instruction for target record: \" + getRecordErrorMessage(targetRecord));\n}\n\nif(initialRecord.Type != targetRecord.Type) {\n    throw new Error(\"Inital and target record types do not match. Target record: \" + getRecordErrorMessage(targetRecord));\n}\n\nvar recordInfo = getRecordInfo(initialRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Update\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = initialRecord.Id;\n\ninstruction.initialReadPerm = initialRecord.read_perm;\ninstruction.initialEditPerm = initialRecord.edit_perm;\n\nif(initialRecord.readPerm != targetRecord.readPerm) {\n    instruction.targetReadPerm = targetRecord.read_perm;\n}\n\nif(initialRecord.editPerm != targetRecord.editPerm) {\n    instruction.targetEditPerm = targetRecord.edit_perm;\n}\n\nvar initialData = {};\ninstruction.Initial = initialData;\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    \n    var initialValue;\n    var targetValue;\n    \n    var initialValue = initialRecord.Fields[field.name];\n    var targetValue = targetRecord.Fields[field.name];\n    \n    //validate target values\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecordInfo,createRecord.Id,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(createRecordInfo,createRecord.Id,field));\n        }\n    }\n    \n    if(!fieldsMatch(initialValue,targetValue,field)) {\n        initialData[field.name] = initialValue;\n        targetData[field.name] = targetValue;\n    }\n}\n\nreturn instruction;\n","supplementalCode":"function fieldsMatch(initialValue,targetValue,fieldInfo) {\n    if(fieldInfo.fieldClass === \"java.lang.String\") {\n        //compare strings with \"==\"\n        return (initialValue == targetValue);\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"java.lang\")) {\n        //compare other basic values with \"===\"\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"com.micello\")) {\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONObject\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONArray\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else {\n        throw new Error(\"unrecognized field type: \" + fieldInfo.fieldClass);\n    }\n}\n\nfunction compareJsonData(a,b) {\n    var an = apogee.util.getNormalizedObjectCopy(a);\n    var bn = apogee.util.getNormalizedObjectCopy(b);\n    var aString = JSON.stringify(an);\n    var bString = JSON.stringify(bn);\n    return aString == bString;\n}\n    ","description":""}},"createCreateInstruction":{"name":"createCreateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["createRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(createRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Create\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = createRecord.Id;\n\ninstruction.targetReadPerm = createRecord.readPerm;\ninstruction.targetEditPerm = createRecord.editPerm;\n\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var targetValue;\n    var targetValue = createRecord.Fields[field.name];\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(record,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(record,field));\n        }\n    }\n    \n    targetData[field.name] = targetValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getFieldErrString":{"name":"getFieldErrString","type":"apogee.FunctionTable","updateData":{"argList":["record","fieldInfo"],"functionBody":"return getRecordErrString(record) + \" - \" + fieldInfo.name;","supplementalCode":"","description":""}},"getRecordErrString":{"name":"getRecordErrString","type":"apogee.FunctionTable","updateData":{"argList":["record"],"functionBody":"return record.Type + \" \" + record.Id;","supplementalCode":"","description":""}},"createDeleteInstruction":{"name":"createDeleteInstruction","type":"apogee.FunctionTable","updateData":{"argList":["deleteRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(deleteRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Delete\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = deleteRecord.Id;\n\ninstruction.initialReadPerm = deleteRecord.read_perm;\ninstruction.initialEditPerm = deleteRecord.edit_perm;\n\nvar initialData = {};\ninstruction.Initial = initialData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var initialValue = deleteRecord.Fields[field.name];\n    \n    initialData[field.name] = initialValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getRecordInfo":{"name":"getRecordInfo","type":"apogee.FunctionTable","updateData":{"argList":["recordType"],"functionBody":"var recordInfo = dataSetInfo.records[recordType];\n\nif(!recordInfo) {\n    throw new Error(\"Record type not found in getRecordInfo: \" + recordType);\n}\n\nreturn recordInfo;","supplementalCode":"","description":""}}}},"loadMetaFileRecords":{"name":"loadMetaFileRecords","type":"apogee.Folder","children":{"fileTypeSearch":{"name":"fileTypeSearch","type":"apogee.JsonTable","updateData":{"data":{"search":"file_type_list"},"description":""}},"metaFileSearch":{"name":"metaFileSearch","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvar searchDef = {};\nsearchDef.search = \"meta_file\";\nsearchDef.id = metaFileId;\nreturn searchDef;\nreturn value;\n\n","supplementalCode":"","description":""}},"fileTypeList":{"name":"fileTypeList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvar requestOptions = micemetarecipeDataAccess.createRequestOptions(fileTypeSearch);\nvalue = apogee.net.jsonRequest(micemetarecipeDataAccess.requestUrl,requestOptions);\nreturn value;\n\n","supplementalCode":"","description":""}},"fileTypeEntrySearch":{"name":"fileTypeEntrySearch","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvar searchDef = {};\nsearchDef.search = \"file_type_entries\";\nsearchDef.id = fileTypeId;\nreturn searchDef;\nreturn value;\n\n","supplementalCode":"","description":""}},"fileTypeEntryList":{"name":"fileTypeEntryList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvar requestOptions = micemetarecipeDataAccess.createRequestOptions(fileTypeEntrySearch);\nvalue = apogee.net.jsonRequest(micemetarecipeDataAccess.requestUrl,requestOptions);\nreturn value;\n\n","supplementalCode":"","description":""}},"recordStore":{"name":"recordStore","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvar map = {};\n\naddSearchResponse(fileTypeList,map);\naddSearchResponse(fileTypeEntryList,map);\naddSearchResponse(metaFileSearch,map);\naddSearchResponse(metaFileResponse,map);\n\nreturn map;\nreturn value;\n\n","supplementalCode":"function addSearchResponse(searchResponse,outputMap) {\n    if((!searchResponse)||(!searchResponse.success)||(!searchResponse.data)) {\n        return \"\";\n    }\n    \n    var searchResponseData = searchResponse.data;\n    \n    if(searchResponseData.Response) {\n        addRecordList(searchResponseData.Response,outputMap);\n    }\n    if(searchResponseData.Records) {\n        addRecordList(searchResponseData.Records,outputMap);\n    }\n    \n}\n\nfunction addRecordList(recordList,outputMap) {\n    for(var i = 0; i < recordList.length; i++) {\n        var record = recordList[i];\n        \n        var typeSection = outputMap[record.Type];\n        if(!typeSection) {\n            typeSection = {};\n            outputMap[record.Type] = typeSection;\n        }\n        \n        //if there is already a record, just overwrite it. They should be the same.\n        typeSection[record.Id] = record;\n    }\n}","description":""}},"metaFileEntryList":{"name":"metaFileEntryList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var entryRecordList = [];\n\nvar recipeEntries = recordStore.recipe_entry;\n\nfor(var key in recipeEntries) {\n    var entryRecord = recipeEntries[key];\n    if(entryRecord.Fields.meta_file_id == metaFileId) {\n        var fileEntryRecord = getRecord(\"file_entry\",entryRecord.Fields.file_entry_id);\n        var entryData = createMetaFileEntry(\n                fileEntryRecord,\n                entryRecord.Fields.insertion_info,\n                entryRecord.Fields.ordr\n            );\n        entryRecordList.push(entryData); \n    }\n}\n\nreturn entryRecordList;\n\n","supplementalCode":"","description":""}},"context":{"name":"context","type":"apogee.JsonTable","updateData":{"data":"public","description":""}},"metaFileId":{"name":"metaFileId","type":"apogee.JsonTable","updateData":{"data":2,"description":""}},"fileTypeId":{"name":"fileTypeId","type":"apogee.JsonTable","updateData":{"data":2,"description":""}},"metaFileListSearch":{"name":"metaFileListSearch","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvar searchDef = {};\nsearchDef.search = \"meta_file_list\";\nsearchDef.file_context = context;\nreturn searchDef;\nreturn value;\n\n","supplementalCode":"","description":""}},"metaFileResponse":{"name":"metaFileResponse","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nif(metaFileId === 0) {\n    return undefined;\n}\n\nvar requestOptions = micemetarecipeDataAccess.createRequestOptions(metaFileSearch);\nvalue = apogee.net.jsonRequest(micemetarecipeDataAccess.requestUrl,requestOptions);\nreturn value;\n\n","supplementalCode":"","description":""}},"metaFileList":{"name":"metaFileList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nif(context === 0) {\n    return undefined;\n}\n\nvar requestOptions = micemetarecipeDataAccess.createRequestOptions(metaFileListSearch);\nvalue = apogee.net.jsonRequest(micemetarecipeDataAccess.requestUrl,requestOptions);\nreturn value;\n\n","supplementalCode":"","description":""}},"getRecord":{"name":"getRecord","type":"apogee.FunctionTable","updateData":{"argList":["recordType","recordId"],"functionBody":"typeSection = recordStore[recordType];\nif(!typeSection) {\n    throw new Error(\"Type not found!\");\n}\n\nreturn typeSection[recordId];\n","supplementalCode":"","description":""}},"fileTypeIds":{"name":"fileTypeIds","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvar output = {};\n\nvar fileTypeRecords = fileTypeList.data.Response;\nfor(var i = 0; i < fileTypeRecords.length; i++) {\n    var record = fileTypeRecords[i];\n    output[record.Fields.file_type_name] = record.Id;\n}\n\nreturn output;\nreturn value;\n\n","supplementalCode":"","description":""}},"metaFileIds":{"name":"metaFileIds","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvar output = {};\n\nvar metaFileRecords = metaFileList.data.Response;\nfor(var i = 0; i < metaFileRecords.length; i++) {\n    var record = metaFileRecords[i];\n    var fileTypeRecord = getRecord(\"file_type\",record.Fields.file_type_id);\n    var fileType = fileTypeRecord.Fields.file_type_name;\n    var metaName = record.Fields.name;\n    output[fileType + \":\" + metaName] = record.Id;\n}\n\nreturn output;\nreturn value;\n\n","supplementalCode":"","description":""}},"version":{"name":"version","type":"apogee.JsonTable","updateData":{"data":"1.2","description":""}},"dependencies":{"name":"dependencies","type":"apogee.JsonTable","updateData":{"data":"- micemetarecipeDataAccess - in root folder","description":""}},"releaseNotes":{"name":"releaseNotes","type":"apogee.JsonTable","updateData":{"data":"1.1: Added ID to output entry list\n1.0: initial release","description":""}},"createMetaFileEntry":{"name":"createMetaFileEntry","type":"apogee.FunctionTable","updateData":{"argList":["fileEntryRecord","insertionInfo","ordr"],"functionBody":"\nvar fileEntryTypeRecord = getRecord(\"file_entry_type\",fileEntryRecord.Fields.file_entry_type_id);\n\nvar entryData = {};\nentryData.fileEntryId = fileEntryRecord.Id;\nentryData.section = fileEntryTypeRecord.Fields.section;\nentryData.name = fileEntryTypeRecord.Fields.name;\nentryData.keyString = fileEntryTypeRecord.Fields.key_string;\nentryData.entry = fileEntryRecord.Fields.entry_data;\nentryData.insertionInfo = insertionInfo;\nentryData.order = ordr;\n\nreturn entryData;","supplementalCode":"","description":""}}}},"selectedEntries":{"name":"selectedEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\noutput.label = {};\noutput.style = {};\n\nvar inputEntries = loadMetaFileRecords.metaFileEntryList;\nfor(var i = 0; i < inputEntries.length; i++) {\n    var entryInfo = inputEntries[i];\n    \n    var section = entryInfo.section[0];\n    var priority = entryInfo.insertionInfo.priority;\n    var keyString = entryInfo.keyString;\n    var entry = entryInfo.entry;\n    \n    var sectionTable = output[section];\n    \n    var priorityTable = sectionTable[priority];\n    if(priorityTable === undefined) {\n        priorityTable = {};\n        sectionTable[priority] = priorityTable;\n    }\n    priorityTable[keyString] = entry;\n}\n\nreturn output;","supplementalCode":"","description":""}}}}},"components":{"getPathString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":1010,"y":103},"state":-1,"viewType":"Code"}},"getEntryFromPriorityEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":645,"height":592},"posInfo":{"x":1004,"y":164},"state":-1,"viewType":"Private"}},"themeMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":761,"height":729},"posInfo":{"x":203,"y":88},"state":0,"viewType":"Text"}},"micemetarecipeDataAccess":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":395,"y":21}},"children":{"createRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":560,"height":321},"posInfo":{"x":23,"y":221},"state":-1,"viewType":"Notes"}},"recordsToCreateInstructions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":834,"height":391},"posInfo":{"x":29,"y":506},"state":-1,"viewType":"Code"}},"createCommitBody":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":32,"y":603},"state":-1,"viewType":"Notes"}},"createRequestOptions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":523,"height":254},"posInfo":{"x":34,"y":650},"state":-1,"viewType":"Notes"}},"sessionKey":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":504,"height":91},"posInfo":{"x":14,"y":111},"state":0,"viewType":"Text"}},"host":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":353,"height":71},"posInfo":{"x":14,"y":15},"state":0,"viewType":"Text"}},"commitUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":433,"height":51},"posInfo":{"x":568,"y":65},"state":-1,"viewType":"Text"}},"requestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":450,"height":68},"posInfo":{"x":569,"y":12},"state":-1,"viewType":"Text"}},"dataSetInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":665,"height":611},"posInfo":{"x":569,"y":129},"state":0,"viewType":"Text"}},"version":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":197,"height":91},"posInfo":{"x":708,"y":226},"state":0,"viewType":"Text"}},"releaseNotes":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":412,"height":156},"posInfo":{"x":708,"y":342},"state":0,"viewType":"Notes"}},"depedencies":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":253,"height":102},"posInfo":{"x":706,"y":527},"state":0,"viewType":"Text"}},"createUpdateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":821,"height":496},"posInfo":{"x":21,"y":364},"state":-1,"viewType":"Private"}},"createCreateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":994,"height":643},"posInfo":{"x":21,"y":314},"state":-1,"viewType":"Code"}},"getFieldErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":512,"height":68},"posInfo":{"x":867,"y":91},"state":-1,"viewType":"Code"}},"getRecordErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":81},"posInfo":{"x":866,"y":142},"state":-1,"viewType":"Code"}},"createDeleteInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":678,"height":540},"posInfo":{"x":22,"y":413},"state":-1,"viewType":"Code"}},"getRecordInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":861,"y":45},"state":-1,"viewType":"Code"}}}},"loadMetaFileRecords":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":622,"y":17}},"children":{"fileTypeSearch":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":297,"height":82},"posInfo":{"x":55,"y":25},"state":-1,"viewType":"Text"}},"metaFileSearch":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":334,"height":117},"posInfo":{"x":903,"y":16},"state":-1,"viewType":"Text"}},"fileTypeList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":447,"height":106},"posInfo":{"x":66,"y":77},"state":-1,"viewType":"Text"}},"fileTypeEntrySearch":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":347,"height":110},"posInfo":{"x":306,"y":25},"state":-1,"viewType":"Text"}},"fileTypeEntryList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":637,"height":480},"posInfo":{"x":147,"y":752},"state":0,"viewType":"JSON"}},"recordStore":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":739,"height":542},"posInfo":{"x":724,"y":382},"state":-1,"viewType":"Text"}},"metaFileEntryList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":561,"height":395},"posInfo":{"x":27,"y":566},"state":0,"viewType":"Text"}},"context":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":218,"height":89},"posInfo":{"x":1203,"y":20},"state":0,"viewType":"Text"}},"metaFileId":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":227,"height":89},"posInfo":{"x":1210,"y":261},"state":0,"viewType":"Text"}},"fileTypeId":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":229,"height":97},"posInfo":{"x":1206,"y":144},"state":0,"viewType":"Text"}},"metaFileListSearch":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":323,"height":98},"posInfo":{"x":604,"y":15},"state":-1,"viewType":"Text"}},"metaFileResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":495,"height":704},"posInfo":{"x":604,"y":257},"state":0,"viewType":"Text"}},"metaFileList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":647,"height":300},"posInfo":{"x":616,"y":70},"state":-1,"viewType":"Formula"}},"getRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":33},"posInfo":{"x":722,"y":435},"state":-1,"viewType":"Code"}},"fileTypeIds":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":413,"height":174},"posInfo":{"x":58,"y":141},"state":0,"viewType":"Text"}},"metaFileIds":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":365,"height":209},"posInfo":{"x":559,"y":121},"state":0,"viewType":"Text"}},"version":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":218,"height":73},"posInfo":{"x":1118,"y":390},"state":0,"viewType":"Text"}},"dependencies":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":395,"height":93},"posInfo":{"x":1092,"y":568},"state":0,"viewType":"Text"}},"releaseNotes":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":239,"height":91},"posInfo":{"x":1092,"y":462},"state":0,"viewType":"Text"}},"createMetaFileEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":727,"height":257},"posInfo":{"x":631,"y":701},"state":-1,"viewType":"Code"}}}},"selectedEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":422,"height":368},"posInfo":{"x":42,"y":264},"state":0,"viewType":"JSON"}}}}