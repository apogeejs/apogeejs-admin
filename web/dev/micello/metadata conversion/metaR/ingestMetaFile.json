{"fileType":"apogee workspace","jsLinks":[],"cssLinks":[],"workspace":{"fileType":"apogee workspace","version":0.2,"data":{"name":"ingestMetaFile","type":"apogee.Folder","children":{"login":{"name":"login","type":"apogee.Folder","children":{"loginUrl":{"name":"loginUrl","type":"apogee.JsonTable","updateData":{"data":"http://localhost:8080/TestAuthorization/loginjson","description":""}},"loginControl":{"name":"loginControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return loginUrl;","supplementalCode":"","description":""}},"sessionResponse":{"name":"sessionResponse","type":"apogee.JsonTable","updateData":{"data":{"sessionKey":"SESS0f6c4c2238a670b8138b63d9fd03cc22=u05t0bjfth6se89hs9be8mgro5","responseCode":1},"description":""}},"sessionKey":{"name":"sessionKey","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!sessionResponse) return \"\";\n\nif(sessionResponse.responseCode === 1) {\n    return sessionResponse.sessionKey;\n}\nelse {\n    throw new Error(\"Login error: \" + sessionResponse.message);\n}","supplementalCode":"","description":""}}}},"data":{"name":"data","type":"apogee.Folder","children":{"searchDef":{"name":"searchDef","type":"apogee.JsonTable","updateData":{"data":{"searchType":"table","search":{"record":"file_type"},"cascade":[{"record":"file_type","field":"file_entry_list"}]},"description":""}},"rawRecordMap":{"name":"rawRecordMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\naddToOutput(fileEntryDownload.data.Response,output);\naddToOutput(fileEntryDownload.data.Records,output);\n\nreturn output;","supplementalCode":"function addToOutput(list,output) {\n    for(var i = 0; i < list.length; i++) {\n        var record = list[i];\n\n        var typeMap = output[record.Type];\n        if(!typeMap) {\n            typeMap = {};\n            output[record.Type] = typeMap;\n        }\n        \n        typeMap[record.Id] = record;\n    }\n}","description":""}},"getRawRecord":{"name":"getRawRecord","type":"apogee.FunctionTable","updateData":{"argList":["metaFileType","id"],"functionBody":"return rawRecordMap[metaFileType][id];","supplementalCode":"","description":""}},"fileEntryDownload":{"name":"fileEntryDownload","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return micemetarDataAccess.getCustomRequestPromise(searchDef,login.sessionKey);\n","supplementalCode":"","description":""}},"fileTypeMap":{"name":"fileTypeMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nvar byName = {};\nvar byId = {}\n\nvar fileTypeRecordList = fileEntryDownload.data.Response;\nfor(var i = 0; i < fileTypeRecordList.length; i++) {\n    var record = fileTypeRecordList[i];\n    byName[record.Fields.file_type_name] = record.Id;\n    byId[record.Id] = record.Fields.file_type_name;\n}\n\noutput.byName = byName;\noutput.byId = byId;\n\nreturn output;","supplementalCode":"","description":""}},"getFileTypeId":{"name":"getFileTypeId","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeName"],"functionBody":"return fileTypeMap.byName[fileTypeName];","supplementalCode":"","description":""}},"getFileTypeName":{"name":"getFileTypeName","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeId"],"functionBody":"return fileTypeMap.byId[fileTypeId];","supplementalCode":"","description":""}},"getEntryString":{"name":"getEntryString","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeId","section","entryValue"],"functionBody":"if((section === null)||(section === undefined)) section = \"\";\nreturn fileTypeId + \":\" + section + \":\" + entryValue;","supplementalCode":"","description":""}},"getEntryStringFromRecord":{"name":"getEntryStringFromRecord","type":"apogee.FunctionTable","updateData":{"argList":["fileEntryRecord"],"functionBody":"\nvar fileTypeId = fileEntryRecord.Fields.file_type_id;\nvar section = fileEntryRecord.Fields.entry_section;\nvar entryValue = fileEntryRecord.Fields.entry_value;\n\nreturn getEntryString(fileTypeId,section,entryValue);","supplementalCode":"function getFileTypeFromRecord(record) {\n    var fileTypeId = record.Fields.file_type_id;\n    var fileTypeRecord = getRawRecord(\"file_type\",fileTypeId);\n    return fileTypeRecord.Fields.file_type_name;\n}","description":""}},"fileEntryMap":{"name":"fileEntryMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nvar fileEntryDownloadList = fileEntryDownload.data.Records;\nfor(var i = 0; i < fileEntryDownloadList.length; i++) {\n    var record = fileEntryDownloadList[i];\n    if(record.Type == \"file_entry\") {\n        var lookupKey = getEntryStringFromRecord(record);\n        var entryList = output[lookupKey];\n        if(!entryList) {\n            entryList = [];\n            output[lookupKey] = entryList;\n        }\n        \n        refString = getNormalizedString(record.Fields.entry_data);\n        var recordEntry = {\n            \"fileEntry\":record,\n            \"refString\": refString\n        };\n        entryList.push(recordEntry);\n    }\n}\n\nreturn output;","supplementalCode":"","description":""}},"getEntryListFromRefString":{"name":"getEntryListFromRefString","type":"apogee.FunctionTable","updateData":{"argList":["lookupString"],"functionBody":"return fileEntryMap[lookupString];","supplementalCode":"","description":""}},"getNormalizedString":{"name":"getNormalizedString","type":"apogee.FunctionTable","updateData":{"argList":["entryData"],"functionBody":"var normalized = apogee.util.getNormalizedCopy(entryData);\nreturn JSON.stringify(normalized);","supplementalCode":"","description":""}}}},"micemetarDataAccess":{"name":"micemetarDataAccess","type":"apogee.Folder","children":{"createRecord":{"name":"createRecord","type":"apogee.FunctionTable","updateData":{"argList":["recordType","fieldMap"],"functionBody":"var record = {};\n\nrecord.Id = getId();\nrecord.Type = recordType;\nrecord.Fields = fieldMap;\nrecord.read_perm = READ_PERM;\nrecord.edit_perm = EDIT_PERM;\n\nreturn record;","supplementalCode":"var READ_PERM = 2;\nvar EDIT_PERM = 15;\n\nvar nextId = -1;\n\nfunction getId() {\n    return nextId--;\n}","description":"This method creates a record given the field values and record info \nfrom the data set info. It creates and ID and uses standard permissions."}},"recordsToCreateInstructions":{"name":"recordsToCreateInstructions","type":"apogee.FunctionTable","updateData":{"argList":["recordList"],"functionBody":"var instructions = [];\n\nfor(var i = 0; i < recordList.length; i++) {\n    var createRecord = recordList[i];\n    var instruction = createCreateInstruction(createRecord);\n    instructions.push(instruction);\n}\n\nreturn instructions;","supplementalCode":"","description":"This creates a list of create instructions to go along with a list of records to be created.\n\nThere is the option to assign the ID or to leave it as undefined, in which case\nan automatically incremented ID will be assigned. (For consistency in the data\nset, either all records should be preassigned or all records should be \nautomatically assigned."}},"createCommitBody":{"name":"createCommitBody","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage"],"functionBody":"var commit = {};\nvar actions = [];\n\nif(commitMessage.length === 0) throw new Error(\"Commit message missing!\");\n\ncommit.Name = dataSetInfo.name;\ncommit.Message = commitMessage;\ncommit.Actions = actions;\n\n//single action with commits\nvar action = {};\naction.Title = \"bulk create commit\";\naction.Instr = instructionList;\nactions.push(action);\n\nreturn commit","supplementalCode":"","description":"This creates a body for a commit request, given a list of instructions and a commit message."}},"createRequestOptions":{"name":"createRequestOptions","type":"apogee.FunctionTable","updateData":{"argList":["bodyJson","sessionKey"],"functionBody":"var header = {};\nheader[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\nheader.sessionKey = sessionKey;\nheader[\"proto-version\"] = \"4.0\";\nheader[\"db-version\"] = dataSetInfo.version;\n\nrequestInfo = {};\nrequestInfo.header = header;\nif(bodyJson) {\n    requestInfo.method = \"POST\";\n    requestInfo.body = JSON.stringify(bodyJson);\n}\n\nreturn requestInfo;\n","supplementalCode":"","description":"This creates the requestOptions, suitable for apogee.net.jsonRequest, to go with an type of request to the workingset (micemetarequest) server."}},"host":{"name":"host","type":"apogee.JsonTable","updateData":{"data":"http://localhost:8080/micemetarws","description":""}},"commitUrl":{"name":"commitUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvalue = host + \"/commit\";\nreturn value;\n\n","supplementalCode":"","description":""}},"requestUrl":{"name":"requestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return host + \"/cannedsearch\";\n\n","supplementalCode":"","description":""}},"dataSetInfo":{"name":"dataSetInfo","type":"apogee.JsonTable","updateData":{"data":{"records":{"file_entry_relation":{"idField":"file_entry_rel_id","name":"file_entry_relation","foreignList":[],"fields":[{"defaultValue":null,"name":"file_entry_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileEntry"},{"defaultValue":null,"name":"ref_entry_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileEntry"},{"defaultValue":null,"name":"relation_type","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.FileEntryRelation"},"com_file_entry":{"idField":"com_file_entry_id","name":"com_file_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"com_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.ComFile"},{"defaultValue":null,"name":"meta_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"},{"defaultValue":null,"name":"file_group","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.ComFileEntry"},"file_type":{"idField":"file_type_id","name":"file_type","foreignList":[{"remoteRecord":"file_entry","name":"file_entry_list","isUnique":false,"remoteField":"file_type_id","restrictDelete":true}],"fields":[{"defaultValue":null,"name":"file_type_name","nullOk":true,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.FileType"},"file_entry":{"idField":"file_entry_id","name":"file_entry","foreignList":[{"remoteRecord":"file_entry_relation","name":"file_entry_ref_list","isUnique":false,"remoteField":"file_entry_id","restrictDelete":true}],"fields":[{"defaultValue":null,"name":"entry_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"entry_name","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"file_type_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileType"},{"defaultValue":null,"name":"entry_section","nullOk":true,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"entry_value","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"option_name","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"entry_data","nullOk":false,"fieldClass":"org.json.JSONObject"}],"recordClass":"com.micello.micemetar.data.FileEntry"},"recipe_entry":{"idField":"recipe_entry_id","name":"recipe_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"meta_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"},{"defaultValue":null,"name":"file_entry_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileEntry"},{"defaultValue":null,"name":"insertion_info","nullOk":true,"fieldClass":"org.json.JSONObject"}],"recordClass":"com.micello.micemetar.data.RecipeEntry"},"com_file":{"idField":"com_file_id","name":"com_file","foreignList":[{"remoteRecord":"com_file_entry","name":"com_file_entry_list","isUnique":false,"remoteField":"com_file_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":null,"name":"file_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"name","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"ref","nullOk":true,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.ComFile"},"meta_file":{"idField":"meta_file_id","name":"meta_file","foreignList":[{"remoteRecord":"recipe_entry","name":"recipe_entry_list","isUnique":false,"remoteField":"meta_file_id","restrictDelete":true,"orderField":"ordr"},{"remoteRecord":"meta_ref_entry","name":"base_file_list","isUnique":false,"remoteField":"meta_file_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":null,"name":"file_type_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileType"},{"defaultValue":null,"name":"file_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"name","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.MetaFile"},"meta_ref_entry":{"idField":"meta_ref_entry_id","name":"meta_ref_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"meta_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"},{"defaultValue":null,"name":"base_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"}],"recordClass":"com.micello.micemetar.data.MetaRefEntry"}},"name":"Micemetar","version":"5.0"},"description":""}},"createUpdateInstruction":{"name":"createUpdateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["initialRecord","targetRecord"],"functionBody":"if(initialRecord.Id != targetRecord.Id) {\n    throw new Error(\"Record ID mismatch in create update instruction for target record: \" + getRecordErrString(targetRecord));\n}\n\nif(initialRecord.Type != targetRecord.Type) {\n    throw new Error(\"Inital and target record types do not match. Target record: \" + getRecordErrString(targetRecord));\n}\n\nvar recordsDifferent = false;\n\nvar recordInfo = getRecordInfo(initialRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Update\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = initialRecord.Id;\n\ninstruction.initialReadPerm = initialRecord.read_perm;\ninstruction.initialEditPerm = initialRecord.edit_perm;\n\nif(initialRecord.readPerm != targetRecord.readPerm) {\n    instruction.targetReadPerm = targetRecord.read_perm;\n    recordsDifferent = true;\n}\n\nif(initialRecord.editPerm != targetRecord.editPerm) {\n    instruction.targetEditPerm = targetRecord.edit_perm;\n    recordsDifferent = true;\n}\n\nvar initialData = {};\ninstruction.Initial = initialData;\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    \n    var initialValue;\n    var targetValue;\n    \n    var initialValue = initialRecord.Fields[field.name];\n    var targetValue = targetRecord.Fields[field.name];\n    \n    //validate target values\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecordInfo,createRecord.Id,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(createRecordInfo,createRecord.Id,field));\n        }\n    }\n    \n    if(!fieldsMatch(initialValue,targetValue,field)) {\n        initialData[field.name] = initialValue;\n        targetData[field.name] = targetValue;\n        recordsDifferent = true;\n    }\n}\n\nif(recordsDifferent) {\n    return instruction;\n}\nelse {\n    return null;\n}\n","supplementalCode":"function fieldsMatch(initialValue,targetValue,fieldInfo) {\n    if(fieldInfo.fieldClass === \"java.lang.String\") {\n        //compare strings with \"==\"\n        return (initialValue == targetValue);\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"java.lang\")) {\n        //compare other basic values with \"===\"\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"com.micello\")) {\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONObject\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONArray\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else {\n        throw new Error(\"unrecognized field type: \" + fieldInfo.fieldClass);\n    }\n}\n\nfunction compareJsonData(a,b) {\n    var an = apogee.util.getNormalizedObjectCopy(a);\n    var bn = apogee.util.getNormalizedObjectCopy(b);\n    var aString = JSON.stringify(an);\n    var bString = JSON.stringify(bn);\n    return aString == bString;\n}\n    ","description":"This function creates an update instruction given an initial and target record. If the records are the same then NULL is returned. (No update is needed.)"}},"createCreateInstruction":{"name":"createCreateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["createRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(createRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Create\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = createRecord.Id;\n\ninstruction.targetReadPerm = createRecord.read_perm;\ninstruction.targetEditPerm = createRecord.edit_perm;\n\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var targetValue;\n    var targetValue = createRecord.Fields[field.name];\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(createRecord,field));\n        }\n    }\n    \n    targetData[field.name] = targetValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getFieldErrString":{"name":"getFieldErrString","type":"apogee.FunctionTable","updateData":{"argList":["record","fieldInfo"],"functionBody":"return getRecordErrString(record) + \" - \" + fieldInfo.name;","supplementalCode":"","description":""}},"getRecordErrString":{"name":"getRecordErrString","type":"apogee.FunctionTable","updateData":{"argList":["record"],"functionBody":"return record.Type + \" \" + record.Id;","supplementalCode":"","description":""}},"createDeleteInstruction":{"name":"createDeleteInstruction","type":"apogee.FunctionTable","updateData":{"argList":["deleteRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(deleteRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Delete\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = deleteRecord.Id;\n\ninstruction.initialReadPerm = deleteRecord.read_perm;\ninstruction.initialEditPerm = deleteRecord.edit_perm;\n\nvar initialData = {};\ninstruction.Initial = initialData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var initialValue = deleteRecord.Fields[field.name];\n    \n    initialData[field.name] = initialValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getRecordInfo":{"name":"getRecordInfo","type":"apogee.FunctionTable","updateData":{"argList":["recordType"],"functionBody":"var recordInfo = dataSetInfo.records[recordType];\n\nif(!recordInfo) {\n    throw new Error(\"Record type not found in getRecordInfo: \" + recordType);\n}\n\nreturn recordInfo;","supplementalCode":"","description":""}},"combinedEntriesToInstructionList":{"name":"combinedEntriesToInstructionList","type":"apogee.FunctionTable","updateData":{"argList":["combinedEntries"],"functionBody":"var output = [];\nfor(var key in combinedEntries) {\n    var entry = combinedEntries[key];\n    var instruction = getInstructionForCombinedEntry(entry);\n    if(instruction) {\n        output.push(instruction);\n    }\n}\n\nreturn output;","supplementalCode":"function getInstructionForCombinedEntry(combinedEntry) {\n    var newEntry = combinedEntry.newEntry;\n    var oldEntry = combinedEntry.oldEntry;\n    \n    if(newEntry) {\n        if(!oldEntry) {\n            console.log(\"Create: \" + newEntry.Id);\n            return createCreateInstruction(newEntry);\n        }\n        else {\n            //this will return null for matching records\n            console.log(\"Update(maybe): \" + newEntry.Id);\n            return createUpdateInstruction(oldEntry,newEntry);\n        }\n    }\n    else if(oldEntry) {\n        console.log(\"Delete: \" + oldEntry.Id);\n        return createDeleteInstruction(oldEntry);\n    }\n    \n    return null;\n}\n\nfunction entriesDifferent(entry1,entry2) {\n    var string1 = JSON.stringify(apogee.util.getNormalizedCopy(entry1));\n    var string2 = JSON.stringify(apogee.util.getNormalizedCopy(entry2));\n    return (string1 == string2);\n}","description":"This function takes a combined entry map of the format:\n\n{\n  \"some-identifier\":{\n    \"oldEntry\":{original record entry, if applicable},\n    \"newEntry\":{new record entry, if applicable}\n  },\n  ...\n}\n\nIt returns an instruction list.\n\n"}},"getCommitPromise":{"name":"getCommitPromise","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage","sessionKey"],"functionBody":"var commitBody = createCommitBody(instructionList,commitMessage);\nvar requestOptions = createRequestOptions(commitBody,sessionKey);\nreturn apogee.net.jsonRequest(commitUrl,requestOptions);","supplementalCode":"","description":""}},"getRequestPromise":{"name":"getRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn apogee.net.jsonRequest(requestUrl,requestOptions);","supplementalCode":"","description":""}},"customRequestUrl":{"name":"customRequestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return host + \"/request\";","supplementalCode":"","description":""}},"getCustomRequestPromise":{"name":"getCustomRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn apogee.net.jsonRequest(customRequestUrl,requestOptions);","supplementalCode":"","description":""}}}},"inputCreate":{"name":"inputCreate","type":"apogee.Folder","children":{"fileType":{"name":"fileType","type":"apogee.JsonTable","updateData":{"data":"themeRules","description":""}},"inputFile":{"name":"inputFile","type":"apogee.JsonTable","updateData":{"data":{"ft":"ThemeMap","v":0,"label":[{"priority":0,"ks":[{"ek":"$image_url","lt":3,"r":"<value>"},{"ek":"$icon","lt":2,"r":"<value>"}]},{"priority":1,"ks":[{"ek":"$label_text","lt":1,"r":"<value>"},{"ek":"short name","lt":1,"r":"<value>"},{"ek":"name","lt":1,"r":"<value>"}]},{"priority":3,"ks":[{"gk":"$image_url","lt":3,"r":"<value>"},{"gk":"$icon","lt":2,"r":"<value>"},{"gk":"$label_text","lt":1,"r":"<value>"},{"gk":"short name","lt":1,"r":"<value>"},{"gk":"name","lt":1,"r":"<value>"},{"gk":"area","v":{"baggage claim":{"lt":2,"r":"Baggage Claim"},"copy/print":{"lt":2,"r":"Copy/Print"},"immigration and customs":{"lt":2,"r":"Immigration and Customs"},"meeting point":{"lt":2,"r":"Meeting Point"},"passport control":{"lt":2,"r":"Passport Control"},"pet relief area":{"lt":2,"r":"Pet Relief Area"},"rest area":{"lt":2,"r":"Rest Area"},"security section":{"lt":2,"r":"Security Section"},"smoke":{"lt":2,"r":"Smoke"}}},{"gk":"equipment","v":{"cash register":{"lt":2,"r":"Cash Register"}},"lt":2,"r":"object"},{"gk":"facility","v":{"bathroom":{"ks":[{"gk":"gender","v":{"female":{"lt":2,"r":"Bathroom W","ks":[{"gk":"disabled access","lt":2,"r":"Bathroom W DA"}]},"male":{"lt":2,"r":"Bathroom M","ks":[{"gk":"disabled access","lt":2,"r":"Bathroom M DA"}]},"family":{"lt":2,"r":"Bathroom Fam","ks":[{"gk":"disabled access","lt":2,"r":"Bathroom Fam DA"}]}}},{"gk":"disabled access","lt":2,"r":"Bathroom DA"}],"lt":2,"r":"Bathroom"},"elevator":{"lt":2,"r":"Elevator"},"elevator bank":{"lt":2,"r":"Elevator"},"escalator":{"lt":2,"r":"Escalator"},"ramp":{"ks":[{"gk":"disabled access","lt":2,"r":"Wheelchair Ramp"}]},"stairs":{"lt":2,"r":"Stairs"},"stairwell":{"lt":2,"r":"Stairs"},"moving walkway":{"lt":2,"r":"Moving Walkway"}}},{"gk":"fixture","v":{"baggage claim":{"lt":2,"r":"Baggage Claim"},"ramp":{"ks":[{"gk":"disabled access","lt":2,"r":"Wheelchair Ramp"}]}}},{"gk":"furnishing","v":{"seat":{"ks":[{"gk":"disabled access","lt":2,"r":"Disabled Access"}]}}},{"gk":"marker","v":{"disabled access":{"lt":2,"r":"Disabled Access"}}},{"gk":"recreation","v":{"playground":{"lt":2,"r":"Playground"}}},{"gk":"safety","v":{"defibrillator":{"lt":2,"r":"Defibrillator"},"emergency exit":{"lt":2,"r":"Emergency Exit"},"eyewash":{"lt":2,"r":"Eyewash"},"fire extinguisher":{"lt":2,"r":"Fire Extinguisher"},"fire pull":{"lt":2,"r":"Fire Pull"},"fire hose":{"lt":2,"r":"Fire Hose"},"first aid":{"lt":2,"r":"First Aid"}},"lt":2,"r":"object"},{"gk":"service","v":{"atm":{"ks":[{"gk":"currency","v":{"general":{"lt":2,"r":"ATM:General"},"dollar":{"lt":2,"r":"ATM"},"yen":{"lt":2,"r":"ATM:Yen"}}}],"lt":2,"r":"ATM"},"bike rack":{"lt":2,"r":"Bike Rack"},"changing station":{"lt":2,"r":"Changing Station"},"flight monitor":{"lt":2,"r":"Flight Monitor"},"luggage cart":{"lt":2,"r":"Luggage Cart"},"locker":{"lt":2,"r":"Locker"},"mail":{"lt":2,"r":"Mail"},"massage chair":{"lt":2,"r":"Massage Chair"},"power":{"lt":2,"r":"Power"},"santa":{"lt":2,"r":"Santa"},"showers":{"lt":2,"r":"Shower"},"stroller":{"lt":2,"r":"Stroller"},"telephone":{"lt":2,"r":"Telephone"},"tv":{"lt":2,"r":"TV"},"valet parking":{"lt":2,"r":"Valet Parking"},"paid parking":{"lt":2,"r":"Paid Parking"},"vending machine":{"lt":2,"r":"Vending Machine"},"wifi":{"lt":2,"r":"Wifi"}},"lt":2,"r":"object"},{"gk":"sign","v":{"stop sign":{"lt":2,"r":"Stop Sign"},"yield sign":{"lt":2,"r":"Yield Sign"}},"lt":2,"r":"object"},{"gk":"signal","v":{"traffic light":{"lt":2,"r":"Traffic Light"}},"lt":2,"r":"object"},{"gk":"traffic","v":{"parking lot":{"ks":[{"gk":"paid","v":{"true":{"lt":2,"r":"Paid Parking"}}}]},"parking spot":{"ks":[{"gk":"disabled access","lt":2,"r":"Disabled Access"}]}}},{"gk":"transit","v":{"bus":{"lt":2,"r":"Bus"},"ground transportation":{"lt":2,"r":"Ground Transportation"},"taxi":{"lt":2,"r":"Taxi"},"train":{"lt":2,"r":"Train"}}},{"gk":"class","v":{"car rental":{"lt":2,"r":"Car Rental"},"cocktails":{"lt":2,"r":"Cocktails"},"coffee":{"lt":2,"r":"Coffee"},"fitness center":{"lt":2,"r":"Fitness Center"},"food and drink":{"lt":2,"r":"Food and Drink"},"gym":{"lt":2,"r":"Gym"},"money changer":{"lt":2,"r":"Money Changer"},"movie theater":{"lt":2,"r":"Movie Theater"},"restaurant":{"lt":2,"r":"Restaurant"},"shoe shine":{"lt":2,"r":"Shoe Shine"},"ticketing, check-in":{"lt":2,"r":"Ticketing, Check-in"},"transit hotel":{"lt":2,"r":"Transit Hotel"}}},{"gk":"use","v":{"lost and found":{"lt":2,"r":"Lost and Found"},"meditation room":{"lt":2,"r":"Meditation Room"},"cafeteria":{"lt":2,"r":"Cafeteria"},"information":{"lt":2,"r":"Information"},"customer service":{"lt":2,"r":"Customer Service"},"medical":{"lt":2,"r":"Medical"},"police/security":{"lt":2,"r":"Police/Security"}}},{"gk":"changing station","lt":2,"r":"Changing Station"}]}],"style":[{"priority":1,"ks":[{"ek":"$style","n":"<value>"}]},{"priority":3,"ks":[{"gk":"$style","n":"<value>"},{"gk":"surface","v":{"grass":{"n":"Grass"},"sand":{"n":"Earth"},"ice":{"n":"Ice"}}},{"gk":"area","v":{"aisle":{"n":"Aisle"},"baggage claim":{"n":"Section"},"parcel":{"n":"Parcel"},"section":{"n":"Section"}},"n":"Area"},{"gk":"barrier","v":{"fence":{"n":"Obstruction"},"gate":{"n":"Gate"},"obstruction":{"n":"Obstruction"},"railing":{"n":"Obstruction"}},"n":"Obstruction"},{"gk":"facility","v":{"bathroom":{"n":"Room"},"column":{"n":"Wall"},"door":{"n":"Door"},"doorway":{"n":"Hallway"},"opening":{"n":"Opening"},"elevator":{"n":"Level Change"},"elevator bank":{"n":"Level Change"},"escalator":{"n":"Level Change"},"hallway":{"n":"Hallway"},"hallway intersection":{"n":"Hallway"},"hall area":{"n":"Hallway"},"inaccessible space":{"n":"Inaccessible Space"},"floor opening":{"n":"Open Obstruction"},"landing":{"n":"Landing"},"moving walkway":{"n":"Moving Walkway"},"patio":{"n":"Patio"},"porch":{"n":"Porch"},"platform":{"n":"Platform"},"ramp":{"n":"Ramp"},"room":{"n":"Room"},"stairs":{"n":"Level Change"},"stairway":{"n":"Level Change"},"stairwell":{"n":"Level Change"},"step":{"n":"Step"},"stage":{"n":"Stage","deprecated":true},"unit":{"ks":[{"gk":"class","v":{"money changer":{"n":"Service"},"shoe shine":{"n":"Service"}}},{"gk":"use","v":{"medical":{"n":"Service"},"police/security":{"n":"Service"}}}],"n":"Unit"},"wall":{"n":"Wall"},"window":{"n":"Window"},"window opening":{"n":"Wall"},"element":{"n":"Object"},"area":{"n":"Area"},"detail":{"n":"Object"}}},{"gk":"fixture","v":{"baggage carousel":{"n":"Baggage Claim"},"bin":{"n":"Bin"},"booth":{"n":"Booth"},"checkout":{"n":"Checkout"},"countertop":{"n":"Countertop"},"cubicle":{"n":"Cubicle"},"kiosk":{"n":"Kiosk"},"partition":{"n":"Partition"},"ramp":{"n":"Ramp"},"shelf":{"n":"Shelf"},"stage":{"n":"Stage"},"stall":{"n":"Stall"}},"n":"Object"},{"gk":"furnishing","v":{"chair":{"n":"Chair"},"table":{"n":"Table"},"desk":{"n":"Desk"},"shelf":{"n":"Shelf"},"bin":{"n":"Bin"}},"n":"Object"},{"gk":"equipment","n":"Object"},{"gk":"marker","v":{"entrance":{"n":"Entrance"},"large text":{"n":"Large Text"},"true":{"n":"Marker"},"small text":{"n":"Small Text"},"traffic marker":{"n":"Traffic Marker"},"disabled access":{"n":"Service"},"parking":{"n":"Parking"}}},{"gk":"meta","v":{"coordinates":{"n":"Meta-Coordinates"},"source":{"n":"Meta-Source"},"guide":{"n":"Meta-Guide"},"level outline":{"n":"Meta-Level-Outline"},"ground intersect":{"n":"Meta-Ground-Intersect"}}},{"gk":"object","v":{"invalid":{"n":"INVALID"},"unknown":{"n":"Unknown"}},"n":"Object"},{"gk":"recreation","v":{"athletic field":{"n":"Area"},"playground":{"n":"Area"}},"n":"Area"},{"gk":"safety","v":{"defibrillator":{"n":"Service"}},"n":"Object"},{"gk":"service","v":{"flight monitor":{"n":"Object"},"changing station":{"n":"Object"}},"n":"Service"},{"gk":"sign","n":"Object"},{"gk":"signal","n":"Object"},{"gk":"structure","v":{"building":{"n":"Building"},"parking structure":{"n":"Parking Structure"},"subbuilding":{"n":"Subbuilding"},"tent":{"n":"Tent"}},"n":"Building"},{"gk":"traffic","v":{"crosswalk":{"n":"Area"},"parking lot":{"n":"Parking Lot"},"parking spot":{"n":"Parking Spot"},"railway":{"n":"Railway"},"railway tie":{"n":"Railway"},"railway rail":{"n":"Railway"},"road":{"n":"Road"},"road intersection":{"n":"Road"},"walkway":{"ks":[{"gk":"covered","v":{"true":{"n":"Covered Walkway"}}}],"n":"Walkway"},"walkway intersection":{"ks":[{"gk":"covered","v":{"true":{"n":"Covered Walkway"}}}],"n":"Walkway"}}},{"gk":"transit","v":{"railway":{"deprecated":true,"n":"Railway"},"railway tie":{"deprecated":true,"n":"Railway"},"railway rail":{"deprecated":true,"n":"Railway"}},"n":"Service"},{"gk":"vegetation","v":{"grass":{"n":"Grass"},"greenery":{"n":"Greenery"},"garden":{"n":"Garden"},"tree":{"n":"Tree"},"earth":{"n":"Earth"}}},{"gk":"vehicle","v":{"airplane":{"n":"Airplane"}}},{"gk":"water","n":"Water"}],"n":"Object"}]},"description":""}},"fileTypeId":{"name":"fileTypeId","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return data.getFileTypeId(fileType);","supplementalCode":"","description":""}},"createSettings":{"name":"createSettings","type":"apogee.JsonTable","updateData":{"data":{"fileName":"Standard","fileContext":"public","entryContext":"public","entryOptionName":"Standard"},"description":""}},"preliminaryEntryList":{"name":"preliminaryEntryList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return readPreliminaryEntries[fileType](inputFile);","supplementalCode":"","description":""}},"readPreliminaryEntries":{"name":"readPreliminaryEntries","type":"apogee.Folder","children":{"theme":{"name":"theme","type":"apogee.FunctionTable","updateData":{"argList":["metaFile"],"functionBody":"var output = [];\n\nvar iurl = metaFile.iurl;\n\nfor(var sectionTag in themeSectionMap) {\n    var section = metaFile[sectionTag];\n    var sectionValue = themeSectionMap[sectionTag];\n    var nameSuffix = themeNameSuffixMap[sectionTag];\n    if(section) {\n        for(var key in section) {\n            var data = section[key];\n            \n            if((iurl)&&(sectionTag == \"i\")) {\n                data = getIconData(data,iurl);\n            }\n            \n            var entry = {};\n            entry.entry_section = sectionValue;\n            entry.entry_value = key;\n            entry.entry_data = data;\n            entry.entry_name = key + nameSuffix;\n            output.push(entry);\n        }\n    }\n}\n\nreturn output;","supplementalCode":"function getIconData(data,iurl) {\n    var outData = apogee.util.deepJsonCopy(data);\n    if(data.rurl) {\n        outData.url = iurl + data.rurl;\n        delete outData.rurl;\n    }\n    return outData;\n}","description":""}},"themeSectionMap":{"name":"themeSectionMap","type":"apogee.JsonTable","updateData":{"data":{"s":"style","m":"marker","i":"icon","l":"labelStyle"},"description":""}},"strings":{"name":"strings","type":"apogee.FunctionTable","updateData":{"argList":["metaFile"],"functionBody":"var output = [];\n\nfor(var key in metaFile.translations) {\n    var inEntry = metaFile.translations[key];\n    \n    for(var lang in inEntry) {\n        var translation = inEntry[lang];\n        \n        var name = key + \" (\" + lang.toUpperCase() + \")\";\n        \n        var outEntry = {};\n        outEntry.entry_section = lang;\n        outEntry.entry_value = key;\n        outEntry.entry_data = {\"trans\":translation};\n        outEntry.entry_name = name;\n        output.push(outEntry);\n    }\n}\n\nreturn output;","supplementalCode":"","description":""}},"inputColors":{"name":"inputColors","type":"apogee.FunctionTable","updateData":{"argList":["metaFile"],"functionBody":"var output = [];\n\nfor(var color in metaFile) {\n    var inEntry = metaFile[color];\n    \n    entryData = {};\n    entryData.props = inEntry.props;\n    if(inEntry.doLinearArea) {\n        entryData.doLinearArea = true;\n    }\n    \n    var name = createName(inEntry.props);\n    \n    // var objectRef = getPresetsObjectRef(inEntry.props);\n    // var relation = {};\n    // relation.type = \"prop source\";\n    // relation.objectRef = objectRef;\n    \n        \n    var outEntry = {};\n    outEntry.fileType = \"inputColors\";\n    outEntry.entry_section = null;\n    outEntry.entry_value = color;\n    outEntry.entry_data = entryData;\n    outEntry.entry_name = name;\n//    outEntry.relations = [relation];\n    output.push(outEntry);\n}\n\nreturn output;","supplementalCode":"function getPresetsObjectRef(props) {\n    //I am assuming these are in order and that they give a single object\n    var objectRef = {};\n    objectRef.file = \"presets\";\n    objectRef.section = [\"property_trees\",\"geometry\"];\n    \n    var path = [\"geom_type\"]; //assume they are all under geom type\n    for(var key in props) {\n        path.push(key);\n        path.push(props[key]);\n    }\n    objectRef.path = path;\n    \n    return objectRef;\n}\n\nfunction createName(props) {\n    var name = \"\";\n    for(var key in props) {\n        if(name.length > 0) name += \":\";\n        name += key + \":\" + props[key];\n    }\n    name += \" Input Color\";\n    return name;\n}\n","description":""}},"presetOverrides":{"name":"presetOverrides","type":"apogee.FunctionTable","updateData":{"argList":["metaFile"],"functionBody":"var output = [];\n\nvar propTreeEntries = metaFile.entries;\nfor(var i = 0; i < propTreeEntries.length; i++) {\n    var inEntry = propTreeEntries[i];\n    var outEntry = getPropTreeEntry(inEntry);\n    output.push(outEntry);\n}\n\nvar namedKeyEntries = metaFile.named_keys;\nfor(var namedKey in namedKeyEntries) {\n    var inEntry = namedKeyEntries[namedKey];\n    var outEntry = getNamedKeyEntry(inEntry);\n    output.push(outEntry);\n}\n\nreturn output;","supplementalCode":"function getPropTreeEntry(inEntry) {\n    //make sure \"entry\" field is empty\n    if(!isEmpty(inEntry.entry)) {\n        throw new Error(\"Non empty child entry: \" + inEntry.value);\n    }\n    \n    outEntry = {};\n    outEntry.fileType = \"propertyRules\";\n    outEntry.section = inEntry.tree;\n    outEntry.parent_path = getPropsParentPath(inEntry);\n    outEntry.entry_type = inEntry.type;\n    outEntry.entry_value = inEntry.value;\n    outEntry.name = getPropName(inEntry);\n    outEntry.entry_data = {};\n    return outEntry;\n}\n\n\nfunction getNamedKeyEntry(inEntry) {\n    //make sure \"entry\" field is empty\n    if(!isEmpty(inEntry.entry)) {\n        throw new Error(\"Non empty child entry: \" + inEntry.value);\n    }\n    \n    if(inEntry.type == \"key\") {\n        throw new Error(\"Entry type key in named keys. Not supported. \");\n    }\n    \n    outEntry = {};\n    outEntry.fileType = \"propertyRules\";\n    outEntry.section = \"named_entries\";\n    outEntry.parent_path = getNamedKeyParentPath(inEntry);\n    outEntry.entry_type = inEntry.type;\n    outEntry.entry_value = inEntry.value;\n    outEntry.name = getNamedKeyName(inEntry);\n    outEntry.entry_data = {};\n    return outEntry;\n}\n\nfunction getPropName(inEntry) {\n    var fullPath = inEntry.path.concat([inEntry.value]);\n    return fullPath.join(\":\") + \" \" + capitalizeFirstLetter(inEntry.tree) + \" Entry\";\n}\n\n\nfunction getPropsParentPath(inEntry) {\n    var path = inEntry.path;\n    \n    //we assume no new object places directly under \"geom_type\", wince that wasn't supported\n    //in the old format\n    if(inEntry.path.length > 0) {\n        var leadProp = inEntry.path[0];\n        if(isGeomTypeChild(leadProp)) {\n            var pathStart = [\"geom_type\"];\n            path = pathStart.concat(path);\n        }\n    }\n    \n    return path;\n}\n\nfunction getPathPrefix(treeName) {\n    return presetPathPrefixes[treeName];\n}\n\nfunction getNamedKeyName(inEntry) {\n    return inEntry.name + \":\" + inEntry.value + \" Named Key Entry\";\n}\n\nfunction getNamedKeyParentPath(inEntry) {\n   return inEntry.path;\n}\n\n\nfunction isEmpty(object) {\n    for(var key in object) {\n        return false;\n    }\n    return true;\n}\n\n","description":""}},"presetPathPrefixes":{"name":"presetPathPrefixes","type":"apogee.JsonTable","updateData":{"data":{"communityMap":"cmk","communityEntity":"cek","drawing":"dk","level":"lk","geometry":"gk","entity":"ek","chain":"ck","node":"nk","link":"lnk","address":"ak"},"description":""}},"stringsObjectRefMap":{"name":"stringsObjectRefMap","type":"apogee.JsonTable","updateData":{"data":{"com_type":{"file":"presets","section":["property_trees","community_map"],"path":["com_type"]},"country":{"file":"presets","section":["named_groups","post address"],"path":["country"]},"state":{"file":"presets","section":["named_groups","post address"],"path":["country","US","state"]},"province":{"file":"presets","section":["named_groups","post address"],"path":["country","CA","province"]},"prefecture":{"file":"presets","section":["named_groups","post address"],"path":["country","JP","prefecture"]},"territory":{"file":"presets","section":["named_groups","post address"],"path":["country","AU","territory"]},"icon":{"file":"theme","section":["icon"],"path":[]},"lang":{"file":"presets","section":["named_keys","lang"],"path":["lang"]},"map_type":{"file":"presets","section":["property_trees","drawing"],"path":["map_type"]}},"description":""}},"themeNameSuffixMap":{"name":"themeNameSuffixMap","type":"apogee.JsonTable","updateData":{"data":{"s":" Style","m":" Marker","i":" Icon","l":" Label Style"},"description":""}},"geomTypeCludgeMap":{"name":"geomTypeCludgeMap","type":"apogee.JsonTable","updateData":{"data":{"area":true,"barrier":true,"equipment":true,"facility":true,"fixture":true,"furnishing":true,"marker":true,"meta":true,"object":true,"recreation":true,"safety":true,"service":true,"sign":true,"signal":true,"structure":true,"traffic":true,"transit":true,"vegetation":true,"vehicle":true,"water":true},"description":""}},"isGeomTypeChild":{"name":"isGeomTypeChild","type":"apogee.FunctionTable","updateData":{"argList":["key"],"functionBody":"return geomTypeCludgeMap[key];","supplementalCode":"","description":""}},"capitalizeFirstLetter":{"name":"capitalizeFirstLetter","type":"apogee.FunctionTable","updateData":{"argList":["word"],"functionBody":"return word.substr(0,1).toUpperCase() + word.substr(1);","supplementalCode":"","description":""}},"presetSectionFromKeyType":{"name":"presetSectionFromKeyType","type":"apogee.JsonTable","updateData":{"data":{"gk":"geometry","ek":"entity","ak":"named_entries"},"description":""}},"getPresetSectionFromKeyType":{"name":"getPresetSectionFromKeyType","type":"apogee.FunctionTable","updateData":{"argList":["keyType"],"functionBody":"return presetSectionFromKeyType[keyType];","supplementalCode":"","description":""}},"oldThemeMap":{"name":"oldThemeMap","type":"apogee.FunctionTable","updateData":{"argList":["metaFile"],"functionBody":"var output = [];\n\nvar labelSectionValue = \"label\";\nvar labelSection = metaFile.label;\naddEntries(labelSectionValue,labelSection,getLabelEntryData,getLabelRelations,output);\n\nvar styleSectionValue = \"style\";\nvar styleSection = metaFile.style;\naddEntries(styleSectionValue,styleSection,getStyleEntryData,getStyleRelations,output);\n\nreturn output;","supplementalCode":"function addEntries(sectionValue,section,getEntryData,getEntryRelations,output) {\n    \n    var prioritySection;\n    var priority;\n    var fixedData;\n    \n    for(var i = 0; i < section.length; i++) {\n        prioritySection = section[i];\n        priority = prioritySection.priority;\n        \n        fixedData = {};\n        fixedData.getEntryData = getEntryData;\n        fixedData.getEntryRelations = getEntryRelations;\n        fixedData.sectionValue = sectionValue;\n        fixedData.insertionInfo = {\"priority\":priority};\n        \n        //create the parent ref\n        var parentPath = [];\n        \n        var keyList = prioritySection.ks;\n        if(keyList) {\n            addEntriesFromKeyList(keyList,parentPath,fixedData,output);\n        }\n    }\n    \n    //on the last priority section, check for a default\n    var entryData = getEntryData(prioritySection);\n    var entryRelations = getEntryRelations(prioritySection,[]);\n    \n    if(entryData) {\n        addDefaultEntry(entryData,entryRelations,fixedData,output);\n    }\n    \n}\n\nfunction addEntriesFromKeyList(keyList,parentPath,fixedData,output) {\n    for(var i = 0; i < keyList.length; i++) {\n        var inEntry = keyList[i];\n        addKeyEntry(inEntry,parentPath,fixedData,output);\n    }\n}\n\nfunction addKeyEntry(inEntry,parentPath,fixedData,output) {\n    \n    //get the key type\n    var key;\n    var keyType;\n    if(inEntry.gk !== undefined) {\n        keyType = \"gk\";\n        keyTypeName = \"Geometry\";\n        key = inEntry.gk;\n    } \n    else if(inEntry.ek !== undefined) {\n        keyType = \"ek\";\n        keyTypeName = \"Entity\";\n        key = inEntry.ek;\n    } \n    else if(inEntry.ak !== undefined) {\n        keyType = \"ak\";\n        keyTypeName = \"Address\";\n        key = inEntry.ak;\n    } \n    \n    if(parentPath.length == 0) {\n        parentPath.push(keyType);\n    }\n    else {\n        if(parentPath[0] != keyType) {\n            //this is OK, we just don't support it for now.\n            throw new Error(\"child key type does not match parent key type - not supported in translation tool!\");\n        }\n    }\n    \n    //update the path for the children\n    var localObjectPath = parentPath.concat([key]);\n    \n    var entryData = fixedData.getEntryData(inEntry);\n    var relations = fixedData.getEntryRelations(inEntry,localObjectPath);\n    \n    var sectionName = fixedData.sectionValue[0];\n    var name = getKeyName(localObjectPath,keyTypeName,sectionName);\n    \n    //note - entry data may be null\n    var outEntry = {};\n    outEntry.fileType = \"themeMap\";\n    outEntry.insertionInfo = fixedData.insertionInfo;\n    outEntry.section = fixedData.sectionValue;\n    outEntry.parent_path = parentPath;\n    outEntry.entry_type = keyType;\n    outEntry.entry_value = key;\n    outEntry.name = name;\n    outEntry.entry_data = entryData;\n    if(relations) {\n        outEntry.relations = relations;\n    }\n    output.push(outEntry);\n    \n    //do the children!\n    var valueMap = inEntry.v;\n    if(valueMap) {\n        addEntriesFromValueMap(keyTypeName,valueMap,localObjectPath,fixedData,output);\n    }\n}\n\nfunction addEntriesFromValueMap(keyTypeName,valueMap,parentPath,fixedData,output) {\n for(var value in valueMap) {\n        var inEntry = valueMap[value];\n        addValueEntry(keyTypeName,value,inEntry,parentPath,fixedData,output);\n    }\n}\n\nfunction addValueEntry(keyTypeName,value,inEntry,parentPath,fixedData,output) {\n\n    //update the path for the children\n    var localObjectPath = parentPath.concat([value]);\n    \n    var entryData = fixedData.getEntryData(inEntry);\n    var relations = fixedData.getEntryRelations(inEntry,localObjectPath);\n    \n    var sectionName = fixedData.sectionValue[0];\n    var name = getValueName(localObjectPath,keyTypeName,sectionName);\n    \n    //note = entry data may be null\n    var outEntry = {};\n    outEntry.fileType = \"themeMap\";\n    outEntry.insertionInfo = fixedData.insertionInfo;\n    outEntry.section = fixedData.sectionValue;\n    outEntry.parent_path = parentPath;\n    outEntry.entry_type = \"value\";\n    outEntry.entry_value = value;\n    outEntry.name = name;\n    outEntry.entry_data = entryData;\n    if(relations) {\n        outEntry.relations = relations;\n    }\n    output.push(outEntry);\n    \n    //do the children!\n    var keyList = inEntry.ks;\n    if(keyList) {\n        addEntriesFromKeyList(keyList,localObjectPath,fixedData,output);\n    }\n}\n\n\nfunction addDefaultEntry(entryData,entryRelations,fixedData,output) {\n    \n    //I am assuming style\n    var sectionName = fixedData.sectionValue[0];\n    if(sectionName != \"style\") throw new Error(\"Only stule default entry is supported in translator!\");\n    \n    \n    var name = \"Default Style: \" + entryData.n;\n    \n    var outEntry = {};\n    outEntry.fileType = \"themeMap\";\n    outEntry.insertionInfo = fixedData.insertionInfo;\n    outEntry.section = fixedData.sectionValue;\n    outEntry.entry_type = \"default\";\n    outEntry.entry_value = \"default\";\n    outEntry.name = name;\n    outEntry.entry_data = entryData;\n    if(entryRelations) outEntry.relations = entryRelations;\n    output.push(outEntry);\n}\n\nfunction getLabelEntryData(inEntry) {\n    var data = {};\n    var hasData = false;\n    if(inEntry.r !== undefined) {\n        data.r = inEntry.r;\n        hasData = true;\n    }\n    if(inEntry.lt !== undefined) {\n        data.lt = inEntry.lt;\n        hasData = true;\n    }\n    if(inEntry.trans !== undefined) {\n        data.trans = inEntry.trans;\n        hasData = true;\n    }\n    if(hasData) return data;    \n    else return null;\n}\nfunction getLabelRelations(inEntry,objectPath) {\n    var relations = [];\n    \n    var presetRelation = getPresetRelation(objectPath);\n    if(presetRelation) {\n        relations.push(presetRelation);\n    }\n    \n    if((inEntry.lt == 2)&&(inEntry.r != \"<value>\")) {\n        //icon label\n        var iconName = inEntry.r;\n        var objectRef = {};\n        objectRef.file = \"theme\";\n        objectRef.section = [\"icon\"];\n        objectRef.path = [iconName];\n        \n        var relation = {};\n        relation.objectRef = objectRef;\n        relation.type = \"icon source\";\n    }\n    \n    if(relations.length > 0) {\n        return relations;\n    }\n    else {\n        return null;\n    }\n}\nfunction getStyleEntryData(inEntry) {\n    if(inEntry.n) {\n        var data = {};\n        data.n = inEntry.n;\n        return data;\n    }\n}\nfunction getStyleRelations(inEntry,objectPath) {\n    var relations = [];\n    \n    var presetRelation = getPresetRelation(objectPath);\n    if(presetRelation) {\n        relations.push(presetRelation);\n    }\n    \n    if(inEntry.n) {\n        var styleName = inEntry.n;\n        var objectRef = {};\n        objectRef.file = \"theme\";\n        objectRef.section = [\"style\"];\n        objectRef.path = [styleName];\n        \n        var relation = {};\n        relation.objectRef = objectRef;\n        relation.type = \"style source\";\n        relations.push(relation);\n    }\n    \n    if(relations.length > 0) {\n        return relations;\n    }\n    else {\n        return null;\n    }\n}\n\nfunction getPresetRelation(themeMapPath) {\n    \n    //special case for default entry\n    if(themeMapPath.length === 0) return null;\n    \n    var section;\n    var keyType;\n    var presetPath = [];\n    for(var i = 0; i < themeMapPath.length; i++) {\n        var token = themeMapPath[i];\n        if(i == 0) {\n            keyType = token;\n            \n            //get the tree\n            section = getPresetSectionFromKeyType(keyType);\n        }\n        else {\n            if((i == 1)&&(keyType == \"gk\")) {\n                if(isGeomTypeChild(token)) {\n                    presetPath.push(\"geom_type\");\n                }\n            }\n            \n            presetPath.push(token);\n        }\n    }\n    \n    var objectRef = {};\n    objectRef.file = \"presets\";\n    objectRef.section = section;\n    objectRef.path = presetPath;\n    \n    var relation = {};\n    relation.objectRef = objectRef;\n    relation.type = \"preset source\";\n    \n    return relation;\n}\n\n\nfunction getKeyName(objectPath,keyTypeName,sectionName) {\n    var tailPath = apogee.util.deepJsonCopy(objectPath);\n    tailPath.shift();\n    return tailPath.join(\":\") + \" \" + keyTypeName + \" Key \" + capitalizeFirstLetter(sectionName); \n}\n\nfunction getValueName(objectPath,keyTypeName,sectionName) {\n    var tailPath = apogee.util.deepJsonCopy(objectPath);\n    tailPath.shift();\n    return tailPath.join(\":\") + \" \" + keyTypeName + \" \" + capitalizeFirstLetter(sectionName);\n}","description":""}},"themeMapPayloadEntries":{"name":"themeMapPayloadEntries","type":"apogee.JsonTable","updateData":{"data":{"lt":true,"r":true,"trans":true,"n":"true"},"description":""}},"themeRules":{"name":"themeRules","type":"apogee.FunctionTable","updateData":{"argList":["metaFile"],"functionBody":"var output = [];\n\nprocessSection(output,\"label\",metaFile.label);\nprocessSection(output,\"style\",metaFile.style);\n\nreturn output;","supplementalCode":"//============================\n// Main File Processing Methods\n//=============================\nfunction processSection(output,sectionName,sectionEntry) {\n    if(!sectionEntry) return;\n    \n    var path = [];\n    \n    for(var ip = 0; ip < sectionEntry.length; ip++) {\n        var priorityEntry = sectionEntry[ip];\n        var priority = priorityEntry.priority;\n        \n        //get a default rule (should only be on lowest priority)\n        var payload = getPayload(priorityEntry);\n        if(payload) {\n            var outEntry = createEntry(section,priority,path,payload);\n            output.push(outEntry);\n        }\n        \n        var keyList = priorityEntry.ks;\n        processKeyList(output,sectionName,priority,path,keyList);\n    }\n}\n\nfunction processKeyList(output,section,priority,parentPath,keyList) {\n    for(var i = 0; i < keyList.length; i++) {\n        var keyEntry = keyList[i];\n        processKeyEntry(output,section,priority,parentPath,keyEntry);\n    }\n}\n\nfunction processKeyEntry(output,section,priority,parentPath,keyEntry) {\n    var keyType;\n    if(keyEntry.gk !== undefined) {\n        keyType = \"gk\";\n    }\n    else if(keyEntry.ek !== undefined) {\n        keyType = \"ek\";\n    }\n    else if(keyEntry.ak !== undefined) {\n        keyType = \"ak\";\n    }\n    var keyValue = keyEntry[keyType];\n    \n    var path = addKeyToParentPath(parentPath,keyType,keyValue);\n    \n    //this does style and label\n    var payload = getPayload(keyEntry);\n    if(payload) {\n        var outEntry = createEntry(section,priority,path,payload);\n        output.push(outEntry);\n    }\n    \n    if(keyEntry.v) {\n        processValueMap(output,section,priority,path,keyEntry.v);\n    }\n    \n}\n\nfunction processValueMap(output,section,priority,parentPath,valueSet) {\n    for(var value in valueSet) {\n        var valueEntry = valueSet[value];\n        processValueEntry(output,section,priority,parentPath,value,valueEntry);\n    }\n}\n\nfunction processValueEntry(output,section,priority,parentPath,value,valueEntry) {\n    var path = addValueToParentPath(parentPath,value);\n    \n    //this does style and label\n    var payload = getPayload(valueEntry);\n    if(payload) {\n        var outEntry = createEntry(section,priority,path,payload);\n        output.push(outEntry);\n    }\n    \n    if(valueEntry.ks) {\n        processKeyList(output,section,priority,path,valueEntry.ks);\n    }\n}\n\n//============================\n// helpers\n//=============================\nfunction addKeyToParentPath(parentPath,keyType,keyValue) {\n    //creates a new instance (does not modify parentPath)\n    return parentPath.concat([[keyType,keyValue]]);\n}\n\nfunction addValueToParentPath(parentPath,value) {\n    var pathCopy = apogee.util.deepJsonCopy(parentPath);\n    var lastKeyValue = pathCopy[pathCopy.length-1];\n    if(lastKeyValue.length !== 2) {\n        //sanity check\n        throw new Error(\"expecting a path element with a key and no path\");\n    }\n    lastKeyValue.push(value);\n    return pathCopy;\n}\n\n//converts a path to a string\nfunction pathToKeyString(path) {\n    //get the component entries\n    var getComps = function(entry) {\n        return entry.join(\":\");\n    }\n    var comps = path.map(getComps);\n    //sort keys - skip this for now!!!\n    //comps.sort();\n    //convert to string\n    return comps.join(\";\");\n}\n\nfunction pathToPropertyList(path) {\n    var toProps = function(total,entry) {\n        var tree = entry[0];\n        var key = entry[1];\n        //empty string for \"any\" value\n        var value = (entry.length == 3) ? entry[2] : \"\";\n        \n        var treeEntry = total[tree];\n        if(treeEntry === undefined) {\n            treeEntry = {};\n            total[tree] = treeEntry;\n        }\n        treeEntry[key] = value;\n        return total;\n    }\n    return path.reduce(toProps,{});\n}\n\n//this gets the payload from a key or value entry from the style or label section\n//returns the payload structure if there is a payload and null if not.\nfunction getPayload(entry) {\n    var payload = {};\n    var hasData = false;\n    for(var key in themeMapPayloadEntries) {\n        if(entry[key] !== undefined) {\n            payload[key] = entry[key];\n            hasData = true;\n        }\n    }\n    \n    return hasData ? payload : null;\n}\n\nfunction createEntry(section,priority,path,payload) {\n    var entryData = {};\n    entryData.properties = pathToPropertyList(path);\n    entryData.payload = payload;\n    \n    var entry = {};\n    entry.entry_section = section;\n    entry.entry_value = pathToKeyString(path);\n    entry.entry_data = entryData;\n    entry.entry_name = entry.entry_value + \" \" + section;\n    entry.insertion_info = {\"priority\":priority};\n\n    return entry;\n}","description":""}}}},"createdRecordsStructure":{"name":"createdRecordsStructure","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nvar metaFile = getMetaFile();\noutput.metaFile = metaFile;\n\nvar entryList = [];\noutput.entryList = entryList;\n\nvar msgList = [];\noutput.messages = msgList;\n\nvar createdFileEntriesStructure = {};\n\nvar inputList = preliminaryEntryList;\nfor(var i = 0; i < inputList.length; i++) {\n    var prelimEntry = inputList[i];\n    \n    //--------------------\n    //lookup the file entry\n    //-------------------\n    \n    var fileEntry = getFileEntry(fileTypeId,prelimEntry,createdFileEntriesStructure,msgList);\n    \n    //-------------------------------------\n    //lookup relations data where needed\n    //maybe this is a check on an existing entry, or maybe only if we new to contruct the entry.\n    //--------------------------------------\n    //var outRelations = getRelations(prelimEntry,fileEntry,msgList);\n    \n    //------------------------\n    //creat the recipe entry\n    //------------------------\n    var recipeEntry = getRecipeEntry(prelimEntry,metaFile,fileEntry,order,msgList);\n    \n    //some out entry object to look at\n    var outEntry = {};\n    outEntry.prelimEntry = prelimEntry;\n    outEntry.fileEntryType = fileEntryType;\n    outEntry.fileEntry = fileEntry;\n    outEntry.recipeEntry = recipeEntry;\n    if(outRelations) outEntry.relations = outRelations;\n    entryList.push(outEntry);\n}\n\nreturn output;","supplementalCode":"/** This method creates a meta file record. */\nfunction getMetaFile() {\n    var metaFields = {};\n    metaFields.file_type_id = fileTypeId;\n    metaFields.file_context = createSettings.fileContext;\n    metaFields.name = createSettings.fileName;\n    \n    return micemetarDataAccess.createRecord(\"meta_file\",metaFields);\n}\n\n/** This looks up a file type entry. If it is not present it creats a new one. */\nfunction getFileEntry(fileTypeId,prelimEntry,createdFileEntriesStructure,msgList) {\n    var fileEntry;\n    \n    var section = prelimEntry.entry_section;\n    var entryValue = prelimEntry.entry_value;\n    \n    var lookupKey = data.getEntryString(fileTypeId,section,entryValue);\n    var fileEntryList = localGetEntryListFromRefString(lookupKey,createdFileEntriesStructure);\n    \n    var inputEntryData = prelimEntry.entry_data;\n    var inputDataEntryRefString = data.getNormalizedString(inputEntryData);\n    if(fileEntryList) {\n        //look for match\n        for(var i = 0; i < fileEntryList.length; i++) {\n            var refEntry = fileEntryList[i];\n            if(inputDataEntryRefString == refEntry.refString) {\n                fileEntry = refEntry.fileEntry;\n                break;\n            }\n        }\n        \n    }\n    \n    if(!fileEntry) {\n        var fields = {};\n        fields.file_type_id = fileTypeId;\n        fields.entry_context = createSettings.entryContext;\n        fields.entry_section = prelimEntry.entry_section;\n        fields.entry_value = prelimEntry.entry_value;\n        fields.entry_name = prelimEntry.entry_name;\n        fields.entry_data = prelimEntry.entry_data;\n        fields.option_name = createSettings.entryOptionName;\n    \n        fileEntry = micemetarDataAccess.createRecord(\"file_entry\",fields);\n        \n        //store this in our created table, for future lookup\n        var entryList = createdFileEntriesStructure[lookupKey];\n        if(!entryList) {\n            entryList = [];\n            createdFileEntriesStructure[lookupKey] = entryList;\n        }\n        entryList.push({\n            \"fileEntry\":fileEntry,\n            \"refString\":inputDataEntryRefString\n        });\n    }\n\n    \n    return fileEntry;\n}\n\nfunction localGetEntryListFromRefString(lookupKey,createdFileEntriesStructure) {\n    var entryList = data.getEntryListFromRefString(lookupKey);\n    if(!entryList) {\n        entryList = createdFileEntriesStructure[lookupKey];\n    }\n    return entryList;\n}\n\n\n\nfunction getRelations(prelimEntry,fileEntry,msgList) {\n    if(prelimEntry.relations) {\n        var outRelations = [];\n        for(var ir = 0; ir < prelimEntry.relations.length; ir++) {\n            var relation = prelimEntry.relations[ir];\n            \n            var objectRef = relation.objectRef;\n            var lookupKey = data.getEntryTypeString(objectRef.file,objectRef.section,objectRef.path);\n            var fileEntryType = data.getEntryTypeFromRefString(lookupKey);\n            \n            if(fileEntryType) {\n                var fields = {};\n                fields.file_entry_id = fileEntry.Id;\n                fields.ref_entry_type_id = fileEntryType.Id;\n                fields.relation_type = relation.type;\n                fields.ordr = order;\n                \n                var outRelation = micemetarDataAccess.createRecord(\"file_entry_relation\",fields);\n                outRelations.push(outRelation);\n            }\n            else {\n                addMessage(\"ERROR: relation object not found: \" + JSON.stringify(relation),msgList);\n            }\n        }\n        return outRelations;\n    }\n    else {\n        return null;\n    }\n}\n\nfunction getRecipeEntry(prelimEntry,metaFileEntry,fileEntry,order) {\n    var fields = {};\n    fields.meta_file_id = metaFileEntry.Id;\n    fields.file_entry_id = fileEntry.Id;\n    fields.insertion_info = prelimEntry.insertionInfo;\n    fields.ordr = order;\n    \n    return micemetarDataAccess.createRecord(\"recipe_entry\",fields);\n}\n\nfunction addMessage(msg,msgList) {\n    msgList.push(msg);\n}","description":""}},"test":{"name":"test","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\noutput.total = 0;\noutput.fileEntries = 0;\noutput.recipeEntries = 0;\noutput.relationEntries = 0;\nfor(var i = 0; i < createdRecordsStructure.entryList.length; i++) {\n    var combinedEntry = createdRecordsStructure.entryList[i];\n    \n    output.total++;\n    if(combinedEntry.fileEntry.Id < 0) {\n        output.fileEntries++;\n    }\n    if(combinedEntry.recipeEntry. Id < 0) {\n        output.recipeEntries++;\n    }\n    // if((combinedEntry.relations)&&(combinedEntry.relations.length > 0)) {\n    //     output.relationEntries++;\n    // }\n}\n\noutput.errors = createdRecordsStructure.messages.length;\n\nreturn output;","supplementalCode":"","description":""}}}},"outputCreate":{"name":"outputCreate","type":"apogee.Folder","children":{"createRecordStructure":{"name":"createRecordStructure","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return inputCreate.createdRecordsStructure;","supplementalCode":"","description":""}},"oldFile":{"name":"oldFile","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return inputCreate.inputFile;","supplementalCode":"","description":""}},"oldNormalized":{"name":"oldNormalized","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return apogee.util.getNormalizedCopy(oldFile);","supplementalCode":"","description":""}},"newNormalized":{"name":"newNormalized","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return apogee.util.getNormalizedCopy(newFile);","supplementalCode":"","description":""}},"newFile":{"name":"newFile","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return reconstructFile(fileType,createRecordStructure);","supplementalCode":"","description":""}},"reconstruct":{"name":"reconstruct","type":"apogee.Folder","children":{"presets":{"name":"presets","type":"apogee.Folder","children":{"processEntry":{"name":"processEntry","type":"apogee.FunctionTable","updateData":{"argList":["output","metaFile","recipeEntry","fileEntry","fileEntryType","workingData"],"functionBody":"//----------------\n//load the section\n//----------------\nvar sectionValue = fileEntryType.Fields.section;\n\nvar majorSection = output[sectionValue[0]];\nif(!majorSection) {\n    majorSection = {};\n    output[sectionValue[0]] = majorSection;\n}\n\nvar minorSection = majorSection[sectionValue[1]];\nif(!minorSection) {\n    minorSection = [];\n    majorSection[sectionValue[1]] = minorSection;\n}\n\n//------------------------\n//create this preset entry\n//------------------------\nvar presetEntry = {};\nvar path;\n\nvar entryData = fileEntry.Fields.entry_data;\n\nvar parentPresetEntry = null;\nvar parentFileEntryTypeId = fileEntryType.Fields.entry_parent_id;\nif(parentFileEntryTypeId) {\n    var parentPresetEntry = getPresetEntry(workingData,sectionValue,parentFileEntryTypeId);\n    if(!parentPresetEntry) {\n        //throw new Error(\"parent entry not found!: \" + JSON.stringify(parentPath));\n        console.log(\"parent entry not found!: \" + JSON.stringify(parentPath));\n        return;\n    }\n}\n\nif(fileEntryType.Fields.entry_type == \"key\") {\n    //add any added entry fields\n    presetEntry.k = fileEntryType.Fields.entry_value;\n    presetEntry.input = entryData.input;\n    if(entryData.desc) presetEntry.desc = entryData.desc;\n    if(entryData.required) presetEntry.required = entryData.required;\n    if(entryData.is_array) presetEntry.is_array = entryData.is_array;\n    if(entryData.has_lang) presetEntry.has_lang = entryData.has_lang;\n    if(entryData.prop) presetEntry.prop = entryData.prop;\n    \n    //add the entry to the parent or the base of the section\n    if(parentPresetEntry) {\n        addKeyToParentPresetEntry(parentPresetEntry,presetEntry);\n    }\n    else {\n        minorSection.push(presetEntry);\n    }\n}\nelse {\n    var value = fileEntryType.Fields.entry_value;\n    \n    //add any added entry fields\n    if(entryData.desc) presetEntry.desc = entryData.desc;\n    \n    //add the entry to the parent\n    addValueToParentPresetEntry(parentPresetEntry,presetEntry,value);\n}\n\nstorePresetEntry(workingData,sectionValue,fileEntryType.Id,presetEntry);\n","supplementalCode":"function getPresetEntry(workingData,section,fileEntryTypeId) {\r\n    return workingData.storedEntries[fileEntryTypeId];\r\n}\r\n\r\n\r\nfunction storePresetEntry(workingData,section,fileEntryTypeId,entry) {\r\n    workingData.storedEntries[fileEntryTypeId] = entry;\r\n}\r\n\r\nfunction addKeyToParentPresetEntry(parentPresetEntry,presetEntry) {\r\n    var keyList = parentPresetEntry.ks;\r\n    if(!keyList) {\r\n        keyList = [];\r\n        parentPresetEntry.ks = keyList;\r\n    }\r\n    keyList.push(presetEntry);\r\n}\r\n\r\nfunction addValueToParentPresetEntry(parentPresetEntry,presetEntry,value) {\r\n    var valueSet = parentPresetEntry.v;\r\n    if(!valueSet) {\r\n        valueSet = {};\r\n        parentPresetEntry.v = valueSet;\r\n    }\r\n    valueSet[value] = presetEntry;\r\n}","description":""}},"postProcessFile":{"name":"postProcessFile","type":"apogee.FunctionTable","updateData":{"argList":["outFile","workingData"],"functionBody":"//we need to convert the named keys to a single object each rather than a list \n//and we should enforce that they only have one entry.\nfor(var namedKey in outFile.named_keys) {\n    var namedKeyEntry = outFile.named_keys[namedKey];\n    if(namedKeyEntry.length > 1) {\n        throw new Error(\"named key has mulitipl entries!\");\n    }\n    outFile.named_keys[namedKey] = namedKeyEntry[0];\n}","supplementalCode":"","description":""}},"initialize":{"name":"initialize","type":"apogee.FunctionTable","updateData":{"argList":["outFile"],"functionBody":"return {\"storedEntries\":{}};","supplementalCode":"","description":""}}}},"theme":{"name":"theme","type":"apogee.Folder","children":{"initialize":{"name":"initialize","type":"apogee.FunctionTable","updateData":{"argList":["outFile"],"functionBody":"outFile.ft = \"thm5\";\n\nreturn {\"iurl\":null};","supplementalCode":"","description":""}},"processEntry":{"name":"processEntry","type":"apogee.FunctionTable","updateData":{"argList":["output","metaFile","recipeEntry","fileEntry","workingData"],"functionBody":" \r\n//load the theme section\r\nvar themeSectionName = fileEntry.Fields.entry_section;\r\nvar themeSectionLabel = sectionMap[themeSectionName];\r\n\r\nvar themeSection = output[themeSectionLabel];\r\nif(themeSection === undefined) {\r\n    themeSection = {};\r\n    output[themeSectionLabel] = themeSection;\r\n}\r\n\r\nvar entryData = fileEntry.Fields.entry_data;\r\n\r\n//update the iurl field\r\nif(themeSectionLabel == \"i\") {\r\n    //we need to pull out the relative url\r\n    var entryIUrl = getUrlBaseFromIconUrl(entryData.url);\r\n    var entryRUrl = getRelativeUrlfromIconUrl(entryData.url);\r\n    if(workingData.iurl === null) {\r\n        workingData.iurl = entryIUrl;\r\n    }\r\n    else {\r\n        if(workingData.iurl != entryIUrl) {\r\n            throw new Error(\"This implementation does not support different base urls for icons. Fix this.\");\r\n        }\r\n    }\r\n    \r\n    entryData = apogee.util.deepJsonCopy(entryData);\r\n    delete entryData.url;\r\n    entryData.rurl = entryRUrl;\r\n}\r\n\r\n//add the entry\r\nvar key = fileEntry.Fields.entry_value;\r\nif(themeSection[key] !== undefined) {\r\n    throw new Error(\"Multiple entries with the given key: \" + key + \", section: \" + themeSectionLabel);\r\n}\r\n\r\nthemeSection[key] = entryData;\r\n","supplementalCode":"function getUrlBaseFromIconUrl(url) {\n    var index = url.lastIndexOf(\"/\");\n    return url.substr(0,index+1);\n}\n\nfunction getRelativeUrlfromIconUrl(url) {\n    var index = url.lastIndexOf(\"/\");\n    return url.substr(index+1);\n}","description":""}},"sectionMap":{"name":"sectionMap","type":"apogee.JsonTable","updateData":{"data":{"icon":"i","style":"s","labelStyle":"l","marker":"m"},"description":""}},"postProcessFile":{"name":"postProcessFile","type":"apogee.FunctionTable","updateData":{"argList":["outFile","workingData"],"functionBody":"if(workingData.iurl !== null) {\r\n    outFile.iurl = workingData.iurl;\r\n}","supplementalCode":"","description":""}}}},"strings":{"name":"strings","type":"apogee.Folder","children":{"processEntry":{"name":"processEntry","type":"apogee.FunctionTable","updateData":{"argList":["output","metaFile","recipeEntry","fileEntry","workingData"],"functionBody":" \r\nvar outputSection = output.translations;\r\n\r\nvar lang = fileEntry.Fields.entry_section;\r\nvar key = fileEntry.Fields.entry_value;\r\nvar displayString = fileEntry.Fields.entry_data.trans;\r\n\r\nvar entry = outputSection[key];\r\nif(entry === undefined) {\r\n    entry = {};\r\n    outputSection[key] = entry\r\n}\r\n\r\nentry[lang] = displayString;\r\n","supplementalCode":"","description":""}},"initialize":{"name":"initialize","type":"apogee.FunctionTable","updateData":{"argList":["output"],"functionBody":"output.translations = {};","supplementalCode":"","description":""}}}},"inputColors":{"name":"inputColors","type":"apogee.Folder","children":{"processEntry":{"name":"processEntry","type":"apogee.FunctionTable","updateData":{"argList":["output","metaFile","recipeEntry","fileEntry","fileEntryType","workingData"],"functionBody":"\nvar color = fileEntry.Fields.entry_value;\nvar payload = fileEntry.Fields.entry_data;\n\nvar entry = output[color];\nif(entry !== undefined) {\n    throw new Exception(\"Repeat color!\")\n}\n\noutput[color] = payload;","supplementalCode":"","description":""}}}},"themeRules":{"name":"themeRules","type":"apogee.Folder","children":{"initialize":{"name":"initialize","type":"apogee.FunctionTable","updateData":{"argList":["output"],"functionBody":"var workingData = {};\nworkingData.storedEntries = {};\nworkingData.sectionMap = {};\n\nreturn workingData;","supplementalCode":"","description":""}},"postProcessFile":{"name":"postProcessFile","type":"apogee.FunctionTable","updateData":{"argList":["outFile","workingData"],"functionBody":"outFile.ft = \"ThemeMap\";\n\nfor(var sectionName in workingData.sectionMap) {\n    var sectionArray = [];\n    outFile[sectionName] = sectionArray;\n    \n    var priorityMap = workingData.sectionMap[sectionName];\n    for(var priorityString in priorityMap) {\n        sectionArray.push(priorityMap[priorityString]);\n    }\n}\n","supplementalCode":"","description":""}},"oldProcessEntry":{"name":"oldProcessEntry","type":"apogee.FunctionTable","updateData":{"argList":["output","metaFile","recipeEntry","fileEntry","fileEntryType","workingData"],"functionBody":"//----------------\n//load the section\n//----------------\nvar priority = recipeEntry.Fields.insertion_info.priority;\nvar sectionName = fileEntryType.Fields.section;\n\nvar workingSection = workingData.sectionMap[sectionName];\nif(!workingSection) {\n    workingSection = {};\n    workingData.sectionMap[sectionName] = workingSection;\n}\n\nvar prioritySection = workingSection[priority];\nif(!prioritySection) {\n    prioritySection = {};\n    prioritySection.priority = priority;\n    prioritySection.ks = [];\n    workingSection[priority] = prioritySection;\n}\n\n//------------------------\n//create this themeMap entry\n//------------------------\n\nvar entryData = fileEntry.Fields.entry_data;\n\nif(fileEntryType.Fields.entry_type == \"default\") {\n    //non theme entry - default entry\n    addPayload(entryData,prioritySection);\n}\nelse {\n    //normal key or value entry\n    var themeMapEntry = {};\n    \n    var parentThemeMapEntry = null;\n    var parentFileEntryTypeId = fileEntryType.Fields.entry_parent_id;\n    if(parentFileEntryTypeId) {\n        var parentThemeMapEntry = getThemeMapEntry(workingData,sectionName,priority,parentFileEntryTypeId);\n        if(!parentThemeMapEntry) {\n            //throw new Error(\"parent entry not found!: \" + sectionName + \":\" + priority + \":\" + parentFileEntryTypeId);\n            console.log(\"parent entry not found!: \" + sectionName + \":\" + priority + \":\" + parentFileEntryTypeId);\n            return;\n        }\n    }\n    \n    if(fileEntryType.Fields.entry_type == \"value\") {\n        //value entry\n        var value = fileEntryType.Fields.entry_value;\n        addValueToParentThemeMapEntry(parentThemeMapEntry,themeMapEntry,value);\n    }\n    else {\n        //key entry\n        \n        //add the key\n        themeMapEntry[fileEntryType.Fields.entry_type] = fileEntryType.Fields.entry_value;\n\n        //add the entry to the parent or the base of the section\n        if(parentThemeMapEntry) {\n            addKeyToParentThemeMapEntry(parentThemeMapEntry,themeMapEntry);\n        }\n        else {\n            prioritySection.ks.push(themeMapEntry);\n        }\n    }\n    \n    addPayload(entryData,themeMapEntry);\n    \n    storeThemeMapEntry(workingData,sectionName,priority,fileEntryType.Id,themeMapEntry);\n}\n","supplementalCode":"function getThemeMapEntry(workingData,sectionName,priority,fileEntryTypeId) {\r\n    var lookupKey = getLookupKey(sectionName,priority,fileEntryTypeId);\r\n    return workingData.storedEntries[lookupKey];\r\n}\r\n\r\nfunction storeThemeMapEntry(workingData,sectionName,priority,fileEntryTypeId,entry) {\r\n    var lookupKey = getLookupKey(sectionName,priority,fileEntryTypeId);\r\n    workingData.storedEntries[lookupKey] = entry;\r\n}\r\n\r\nfunction getLookupKey(sectionName,priority,fileEntryTypeId) {\r\n    return sectionName + \"|\" + priority + \"|\" + fileEntryTypeId;\r\n}\r\n\r\nfunction addKeyToParentThemeMapEntry(parentThemeMapEntry,themeMapEntry) {\r\n    var keyList = parentThemeMapEntry.ks;\r\n    if(!keyList) {\r\n        keyList = [];\r\n        parentThemeMapEntry.ks = keyList;\r\n    }\r\n    keyList.push(themeMapEntry);\r\n}\r\n\r\nfunction addValueToParentThemeMapEntry(parentThemeMapEntry,themeMapEntry,value) {\r\n    var valueSet = parentThemeMapEntry.v;\r\n    if(!valueSet) {\r\n        valueSet = {};\r\n        parentThemeMapEntry.v = valueSet;\r\n    }\r\n    valueSet[value] = themeMapEntry;\r\n}\r\n\r\nfunction addPayload(entryData,themeMapEntry) {\r\n    for(var key in entryData) {\r\n        themeMapEntry[key] = entryData[key];\r\n    }\r\n}","description":""}},"processEntry":{"name":"processEntry","type":"apogee.FunctionTable","updateData":{"argList":["output","metaFile","recipeEntry","fileEntry","fileEntryType","workingData"],"functionBody":"","supplementalCode":"","description":""}}}}}},"fileType":{"name":"fileType","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((!createRecordStructure)||(!createRecordStructure.metaFile)) return \"\";\n\nvar fileTypeId = createRecordStructure.metaFile.Fields.file_type_id;\nreturn data.getFileTypeName(fileTypeId);","supplementalCode":"","description":""}},"reconstructFile":{"name":"reconstructFile","type":"apogee.FunctionTable","updateData":{"argList":["fileType","createRecordStructure"],"functionBody":"var metaFileRecord = createRecordStructure.metaFile;\nvar metaFileEntryList = createRecordStructure.entryList;\n\nvar processor = reconstruct[fileType];\n\n//initialize, and load working data if applicable\nvar output = {};\noutput.nm = metaFileRecord.Fields.name;\n\nvar workingData;\nif(processor.initialize) {\n    workingData = processor.initialize(output);    \n}\n\n//process each entry\nfor(var i = 0; i < metaFileEntryList.length; i++) {\n    //get an entry\n    var metaFileEntry = metaFileEntryList[i];\n    var recipeEntry = metaFileEntry.recipeEntry;\n    var fileEntry = metaFileEntry.fileEntry;\n    \n    processor.processEntry(output,metaFileRecord,recipeEntry,fileEntry,workingData);\n}\n\n//post process, if applicable\nif(processor.postProcessFile) {\n    processor.postProcessFile(output,workingData);\n}\n\nreturn output;","supplementalCode":"","description":""}}}},"submit":{"name":"submit","type":"apogee.Folder","children":{"submitControl":{"name":"submitControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return instructionList;","supplementalCode":"","description":""}},"instructionList":{"name":"instructionList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((!createdRecordsStructure)||(createdRecordsStructure.length === 0)) return null;\n\nvar createdRecords = [];\nif(createdRecordsStructure.metaFile) createdRecords.push(createdRecordsStructure.metaFile);\n\nif(createdRecordsStructure.entryList) {\n    for(var i = 0; i < createdRecordsStructure.entryList.length; i++) {\n        var combinedEntry = createdRecordsStructure.entryList[i];\n\n        if((combinedEntry.fileEntry)&&(combinedEntry.fileEntry.Id < 0)) {\n            createdRecords.push(combinedEntry.fileEntry);\n        }\n        \n        if(combinedEntry.recipeEntry) createdRecords.push(combinedEntry.recipeEntry);\n        \n        if(combinedEntry.relations) {\n            for(var ir = 0; ir < combinedEntry.relations.length; ir++) {\n                relationRecord = combinedEntry.relations[ir];\n                createdRecords.push(relationRecord);\n            }\n        }\n    }\n}\n\nreturn micemetarDataAccess.recordsToCreateInstructions(createdRecords);","supplementalCode":"","description":""}},"commitResponse":{"name":"commitResponse","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((!liveInstructionList)||(liveInstructionList.length == 0)) {\n    return null; \n}\n\nreturn micemetarDataAccess.getCommitPromise(liveInstructionList,commitMessage,login.sessionKey);","supplementalCode":"","description":""}},"commitMessage":{"name":"commitMessage","type":"apogee.JsonTable","updateData":{"data":null,"description":""}},"liveInstructionList":{"name":"liveInstructionList","type":"apogee.JsonTable","updateData":{"data":null,"description":""}},"startCommit":{"name":"startCommit","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return inputCreate.createdRecordsStructure;","supplementalCode":"","description":""}},"createdRecordsStructure":{"name":"createdRecordsStructure","type":"apogee.JsonTable","updateData":{"data":"","description":""}},"processResult":{"name":"processResult","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"//only process the commit response if there are\n//live instructions\nif(!liveInstructionList) return \"ok\";\n\nvar taskResult = {};\nif(!commitResponse) {\n    taskResult.state = \"INCOMPLETE\";\n}\nelse if(commitResponse.success === true) {\n    taskResult.state = \"SUCCESS\";\n}\nelse {\n    taskResult.status = \"ERROR\";\n    taskResult.msg = commitResponse.msg;\n}\n\nvar commitResult = {};\ncommitResult.commitMessage = commitMessage;\ncommitResult.commitResponse = commitResponse;\ntaskResult.data = commitResult;\n\n\n\n//set data\nvar updateInfo = [];\nupdateInfo.push([\"liveInstructionList\",null]);\nupdateInfo.push([\"commitMessage\",null]);\nupdateInfo.push([\"result\",taskResult]);\napogeeMessenger.compoundDataUpdate(updateInfo);\n    \nreturn \"ok\";","supplementalCode":"","description":""}},"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":"","description":""}}}},"CURRENT_ERRORS":{"name":"CURRENT_ERRORS","type":"apogee.Folder","children":{"themeMapErrorMessages":{"name":"themeMapErrorMessages","type":"apogee.JsonTable","updateData":{"data":["ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"entity\"],\"path\":[\"$image_url\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"entity\"],\"path\":[\"$icon\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"entity\"],\"path\":[\"$label_text\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"$image_url\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"$icon\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"$label_text\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"bathroom\",\"gender\",\"female\",\"disabled access\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"bathroom\",\"gender\",\"male\",\"disabled access\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"bathroom\",\"gender\",\"family\",\"disabled access\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"fixture\",\"baggage claim\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"traffic\",\"parking lot\",\"paid\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"traffic\",\"parking lot\",\"paid\",\"true\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"class\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"class\",\"car rental\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"class\",\"cocktails\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"class\",\"coffee\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"class\",\"fitness center\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"class\",\"food and drink\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"class\",\"gym\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"class\",\"money changer\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"class\",\"movie theater\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"class\",\"restaurant\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"class\",\"shoe shine\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"class\",\"ticketing, check-in\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"class\",\"transit hotel\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"use\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"use\",\"lost and found\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"use\",\"meditation room\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"use\",\"cafeteria\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"use\",\"information\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"use\",\"customer service\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"use\",\"medical\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"use\",\"police/security\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"changing station\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"entity\"],\"path\":[\"$style\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"theme\",\"section\":[\"style\"],\"path\":[\"<value>\"]},\"type\":\"style source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"$style\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"theme\",\"section\":[\"style\"],\"path\":[\"<value>\"]},\"type\":\"style source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"surface\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"surface\",\"grass\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"surface\",\"sand\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"surface\",\"ice\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"theme\",\"section\":[\"style\"],\"path\":[\"Opening\"]},\"type\":\"style source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"hallway intersection\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"theme\",\"section\":[\"style\"],\"path\":[\"Landing\"]},\"type\":\"style source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"theme\",\"section\":[\"style\"],\"path\":[\"Moving Walkway\"]},\"type\":\"style source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"theme\",\"section\":[\"style\"],\"path\":[\"Porch\"]},\"type\":\"style source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"stairway\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"stage\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"theme\",\"section\":[\"style\"],\"path\":[\"Baggage Claim\"]},\"type\":\"style source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"theme\",\"section\":[\"style\"],\"path\":[\"Countertop\"]},\"type\":\"style source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"theme\",\"section\":[\"style\"],\"path\":[\"Partition\"]},\"type\":\"style source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"theme\",\"section\":[\"style\"],\"path\":[\"Stall\"]},\"type\":\"style source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"furnishing\",\"chair\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"marker\",\"parking\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"theme\",\"section\":[\"style\"],\"path\":[\"Parking\"]},\"type\":\"style source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"theme\",\"section\":[\"style\"],\"path\":[\"Meta-Coordinates\"]},\"type\":\"style source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"theme\",\"section\":[\"style\"],\"path\":[\"Meta-Source\"]},\"type\":\"style source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"theme\",\"section\":[\"style\"],\"path\":[\"Meta-Guide\"]},\"type\":\"style source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"theme\",\"section\":[\"style\"],\"path\":[\"Meta-Level-Outline\"]},\"type\":\"style source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"theme\",\"section\":[\"style\"],\"path\":[\"Meta-Ground-Intersect\"]},\"type\":\"style source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"theme\",\"section\":[\"style\"],\"path\":[\"INVALID\"]},\"type\":\"style source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"traffic\",\"walkway\",\"covered\",\"true\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"traffic\",\"walkway intersection\",\"covered\",\"true\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"transit\",\"railway\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"transit\",\"railway tie\"]},\"type\":\"preset source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"transit\",\"railway rail\"]},\"type\":\"preset source\"}"],"description":""}},"inputColorErrorMessages":{"name":"inputColorErrorMessages","type":"apogee.JsonTable","updateData":{"data":["ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"bathroom\",\"gender\",\"family\",\"disabled access\",\"true\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"bathroom\",\"gender\",\"female\",\"disabled access\",\"true\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"bathroom\",\"gender\",\"male\",\"disabled access\",\"true\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"room\",\"use\",\"gym\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"unit\",\"use\",\"gift card\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"stage\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"unit\",\"class\",\"movie theater\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"fixture\",\"ramp\",\"disabled access\",\"true\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"furnishing\",\"locker\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"marker\",\"disabled access\",\"nonphysical\",\"true\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"marker\",\"entrance\",\"nonphysical\",\"true\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"marker\",\"large text\",\"nonphysical\",\"true\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"marker\",\"small text\",\"nonphysical\",\"true\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"object\",\"INVALID\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"object\",\"true\",\"$style\",\"Invisible\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"object\",\"true\",\"name\",\"$ref_a\",\"$style\",\"Invisible\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"object\",\"true\",\"name\",\"$ref_b\",\"$style\",\"Invisible\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"object\",\"true\",\"name\",\"$ref_c\",\"$style\",\"Invisible\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"object\",\"true\",\"name\",\"$ref_d\",\"$style\",\"Invisible\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"object\",\"true\",\"name\",\"$ref_e\",\"$style\",\"Invisible\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"structure\",\"building\",\"$style\",\"Background\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"structure\",\"building\",\"use\",\"library\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"furnishing\",\"poker table\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"traffic\",\"walkway\",\"covered\",\"true\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"marker\",\"parking\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"furnishing\",\"seat\",\"disabled access\",\"true\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"ramp\",\"disabled access\",\"true\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"room\",\"class\",\"medical\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"unit\",\"class\",\"medical\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"bathroom\",\"disabled access\",\"true\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"area\",\"customs\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"traffic\",\"parking lot\",\"paid\",\"true\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"meta\",\"coordinates\",\"publish\",\"true\",\"ref\",\"sears\",\"units\",\"ft\",\"xscale\",\"80\",\"yscale\",\"80\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"fixture\",\"tee-mat\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"aperio hub\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"security camera\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"siren\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"alarm contact\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"bmz\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"card reader\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"door guard\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"server\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"rack\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"cage\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"traffic\",\"parking sensor\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"barrier\",\"turnstile\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"service\",\"ticket vending machine\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"landing area\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"foyer\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"area\",\"zone\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"area\",\"plot\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"air-conditioner\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"fixture\",\"pallet\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"electric panel\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"fixture\",\"glazing\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"furnishing\",\"countertop\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"turbine\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"lights\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"hitting bay\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"crah\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"pdu\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"furnishing\",\"soccer table\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"beacon\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"beacon\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"beacon\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"service\",\"seat power\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"furnishing\",\"seat\",\"type\",\"polaris\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"furnishing\",\"seat\",\"type\",\"economy plus\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"furnishing\",\"seat\",\"type\",\"economy\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"room\",\"use\",\"closet\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"cafe\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"closet\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"communications\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"company store\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"mail room\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"copy room\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"credit union\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"data center\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"ecafe\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"electrical\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"equipment space\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"file area\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"formal collaboration space\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"fitness room\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"hoteling\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"informal meeting area\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"interview room\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"janitors closet\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"kitchen\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"large workstation\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"library\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"lobby\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"lounge seating\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"main lobby\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"mechanical\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"meeting room\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"mothers room\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"multipurpose room\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"office a\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"project space\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"reception\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"security desk\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"small workstation\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"soft seating area\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"storage\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"video conference\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"training\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"area\",\"seating\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"furnishing\",\"chair\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"furnishing\",\"bench\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"refrigerator\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"fixture\",\"urinal\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"fixture\",\"sink\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"sensor\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"gateway\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"fixture\",\"lighting2x4\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"marker\",\"underground parking\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"soda machine\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"quiet room\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"stair climber\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"elliptical\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"recumbent bicycle\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"treadmill\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"maintenance\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"rtu\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"tv\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"furnishing\",\"disabled chair\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"fixture\",\"light\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"fixture\",\"pipe\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"fixture\",\"connector\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"furnishing\",\"blackjack table\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"furnishing\",\"slot machine\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"wiring\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"custodian janitor\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"furnishing\",\"bed\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"bench\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"fixture\",\"game room\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"break room\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"furnishing\",\"ping pong table\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"furnishing\",\"pool table\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"fixture\",\"toilet\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"fixture\",\"tray\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"fixture\",\"plate\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"squat bench\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"abs\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"arms\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"back\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"legs\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"equipment\",\"row\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"furnishing\",\"cabinet\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"fixture\",\"metal partition\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"room\",\"use\",\"gym\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"club area\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"concourse section\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"employee area\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"food and beverage area\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"media area\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"team area\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"seating section\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"suite\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"office\"]}}","ERROR: relation object not found: {\"type\":\"prop source\",\"objectRef\":{\"file\":\"presets\",\"section\":[\"property_trees\",\"geometry\"],\"path\":[\"geom_type\",\"facility\",\"conference room\"]}}"],"description":""}},"stringsErrorMessages":{"name":"stringsErrorMessages","type":"apogee.JsonTable","updateData":{"data":["ERROR: relation object not found: {\"objectRef\":{\"file\":\"theme\",\"section\":[\"icon\"],\"path\":[\"ATM:Dollar\"]},\"type\":\"string source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"theme\",\"section\":[\"icon\"],\"path\":[\"ATM:Dollar\"]},\"type\":\"string source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"theme\",\"section\":[\"icon\"],\"path\":[\"Bathroom DA\"]},\"type\":\"string source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"theme\",\"section\":[\"icon\"],\"path\":[\"Bathroom DA\"]},\"type\":\"string source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"theme\",\"section\":[\"icon\"],\"path\":[\"Eyewash\"]},\"type\":\"string source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"theme\",\"section\":[\"icon\"],\"path\":[\"Eyewash\"]},\"type\":\"string source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"theme\",\"section\":[\"icon\"],\"path\":[\"Fitness Center\"]},\"type\":\"string source\"}","ERROR: relation object not found: {\"objectRef\":{\"file\":\"theme\",\"section\":[\"icon\"],\"path\":[\"Fitness Center\"]},\"type\":\"string source\"}"],"description":""}},"NOTES":{"name":"NOTES","type":"apogee.JsonTable","updateData":{"data":"7/28/17\n\nThese are the errors on finding relations for the current data.\n\nI have made the presets, theme and input colors file.\n\nThere are a few mismatches in the presets file. I also decided to not use the\n\"required\" children. I need to update the DB and documentation to exclude this.\n\nI need to fix the input colors for the above errors. Several of the errors are \nOK. The types were not in the presets. But in these cases we should store that \ndata and add the entries sometime. (They are also needed in the overrides where\nthey are used.) Other errors include multi-value (family bathroom + disabled access) \n\n\nI still need to load the strings and theme map into the db.\n\nA few problems on the theme map:\n- named groups and keys referenced from a tree were no handled\n- multi-values were not handled (family bathroom + disabled access)\n- class and use were added as top lvel keys, even though they were in a path.\n- missing entries, mispellings and other things not in the presets \n\n","description":""}},"oldPresets_normalized":{"name":"oldPresets_normalized","type":"apogee.JsonTable","updateData":{"data":{"named_groups":{"entity1":[{"input":"text","k":"phone","prop":{"detail":"true"}},{"input":"text","k":"email","prop":{"detail":"true"}},{"input":"text","k":"url","prop":{"detail":"true"}},{"input":"text","k":"fax","prop":{"detail":"true"}},{"has_lang":true,"input":"text","k":"description","prop":{"detail":"true"}},{"input":"text","is_array":true,"k":"naics","prop":{"detail":"true"}}],"entity2":[{"has_lang":true,"input":"text","k":"hours","prop":{"detail":"true"}},{"input":"text","k":"storeid"},{"input":"text","k":"prop_owner"},{"has_lang":true,"input":"text","k":"product","prop":{"detail":"true"}}],"external_ref_object":[{"has_lang":false,"input":"text","k":"ref"},{"has_lang":false,"input":"text","k":"xscale"},{"has_lang":false,"input":"text","k":"yscale"},{"input":"enum","k":"units","v":{"cm":{},"ft":{},"in":{},"km":{},"m":{},"mile":{},"yd":{}}},{"input":"boolean","k":"publish"}],"names":[{"input":"named_key","k":"name"},{"has_lang":true,"input":"text","k":"short name"}],"post address":[{"input":"enum","k":"country","v":{"AD":{},"AE":{},"AF":{},"AG":{},"AI":{},"AL":{},"AM":{},"AN":{},"AO":{},"AQ":{},"AR":{},"AS":{},"AT":{},"AU":{"ks":[{"input":"enum","k":"territory","v":{"NSW":{},"QLD":{},"SA":{},"TAS":{},"VIC":{},"WA":{}}},{"input":"fixed","k":"main admin region"}]},"AW":{},"AX":{},"AZ":{},"BA":{},"BB":{},"BD":{},"BE":{},"BF":{},"BG":{},"BH":{},"BI":{},"BJ":{},"BM":{},"BN":{},"BO":{},"BR":{},"BS":{},"BT":{},"BV":{},"BW":{},"BY":{},"BZ":{},"CA":{"ks":[{"input":"enum","k":"province","v":{"AB":{},"BC":{},"MB":{},"NB":{},"NL":{},"NS":{},"ON":{},"PE":{},"QC":{},"SK":{}}},{"input":"fixed","k":"main admin region"}]},"CC":{},"CD":{},"CF":{},"CG":{},"CH":{},"CI":{},"CK":{},"CL":{},"CM":{},"CN":{},"CO":{},"CR":{},"CV":{},"CX":{},"CY":{},"CZ":{},"DE":{},"DJ":{},"DK":{},"DM":{},"DO":{},"DZ":{},"EC":{},"EE":{},"EG":{},"EH":{},"ER":{},"ES":{},"ET":{},"FI":{},"FJ":{},"FK":{},"FM":{},"FO":{},"FR":{},"GA":{},"GB":{},"GD":{},"GE":{},"GF":{},"GH":{},"GI":{},"GL":{},"GM":{},"GN":{},"GP":{},"GQ":{},"GR":{},"GT":{},"GU":{},"GW":{},"GY":{},"HK":{},"HM":{},"HN":{},"HR":{},"HT":{},"HU":{},"ID":{},"IE":{},"IL":{},"IN":{},"IO":{},"IQ":{},"IS":{},"IT":{},"JM":{},"JO":{},"JP":{"ks":[{"input":"enum","k":"prefecture","v":{"Aichi":{},"Akita":{},"Aomori":{},"Chiba":{},"Ehime":{},"Fukui":{},"Fukuoka":{},"Fukushima":{},"Gifu":{},"Gunma":{},"Hiroshima":{},"Hokkaido":{},"Hyōgo":{},"Ibaraki":{},"Ishikawa":{},"Iwate":{},"Kagawa":{},"Kagoshima":{},"Kanagawa":{},"Kumamoto":{},"Kyoto":{},"Kōchi":{},"Mie":{},"Miyagi":{},"Miyazaki":{},"Nagano":{},"Nagasaki":{},"Nara":{},"Niigata":{},"Okayama":{},"Okinawa":{},"Osaka":{},"Saga":{},"Saitama":{},"Shiga":{},"Shimane":{},"Shizuoka":{},"Tochigi":{},"Tokushima":{},"Tokyo":{},"Tottori":{},"Toyama":{},"Wakayama":{},"Yamagata":{},"Yamaguchi":{},"Yamanashi":{},"Ōita":{}}},{"input":"fixed","k":"main admin region"}]},"KE":{},"KG":{},"KH":{},"KI":{},"KM":{},"KN":{},"KR":{},"KW":{},"KY":{},"KZ":{},"LA":{},"LB":{},"LC":{},"LI":{},"LK":{},"LR":{},"LS":{},"LT":{},"LU":{},"LV":{},"LY":{},"MA":{},"MC":{},"MD":{},"MG":{},"MH":{},"MK":{},"ML":{},"MM":{},"MN":{},"MO":{},"MQ":{},"MR":{},"MS":{},"MT":{},"MU":{},"MV":{},"MW":{},"MX":{},"MY":{},"MZ":{},"NA":{},"NC":{},"NE":{},"NF":{},"NG":{},"NI":{},"NL":{},"NO":{},"NP":{},"NR":{},"NU":{},"NZ":{},"OM":{},"PA":{},"PE":{},"PF":{},"PG":{},"PH":{},"PK":{},"PL":{},"PM":{},"PN":{},"PR":{},"PS":{},"PT":{},"PW":{},"PY":{},"QA":{},"RE":{},"RO":{},"RU":{},"RW":{},"SA":{},"SB":{},"SC":{},"SE":{},"SG":{},"SH":{},"SI":{},"SJ":{},"SK":{},"SL":{},"SM":{},"SN":{},"SO":{},"SR":{},"ST":{},"SV":{},"SZ":{},"TC":{},"TD":{},"TF":{},"TG":{},"TH":{},"TJ":{},"TK":{},"TM":{},"TN":{},"TO":{},"TR":{},"TT":{},"TV":{},"TW":{},"TZ":{},"UA":{},"UG":{},"UM":{},"US":{"ks":[{"input":"enum","k":"state","v":{"AK":{},"AL":{},"AR":{},"AZ":{},"CA":{},"CO":{},"CT":{},"DC":{},"DE":{},"FL":{},"GA":{},"HI":{},"IA":{},"ID":{},"IL":{},"IN":{},"KS":{},"KY":{},"LA":{},"MA":{},"MD":{},"ME":{},"MI":{},"MN":{},"MO":{},"MS":{},"MT":{},"NC":{},"ND":{},"NE":{},"NH":{},"NJ":{},"NM":{},"NV":{},"NY":{},"OH":{},"OK":{},"OR":{},"PA":{},"RI":{},"SC":{},"SD":{},"TN":{},"TX":{},"UT":{},"VA":{},"VT":{},"WA":{},"WI":{},"WV":{},"WY":{}}},{"input":"fixed","k":"main admin region"}]},"UY":{},"UZ":{},"VC":{},"VE":{},"VG":{},"VI":{},"VN":{},"VU":{},"WF":{},"WS":{},"YE":{},"YT":{},"ZA":{},"ZM":{},"ZW":{}}},{"input":"multikey","k":"main admin region","ks":[{"has_lang":true,"input":"text","k":"state"},{"has_lang":true,"input":"text","k":"province"},{"has_lang":true,"input":"text","k":"prefecture"},{"has_lang":true,"input":"text","k":"territory"}]},{"input":"text","k":"postal code"},{"has_lang":true,"input":"text","k":"city"},{"has_lang":true,"input":"text","k":"street address"}],"style keys":[{"has_lang":false,"input":"text","k":"$icon"},{"has_lang":false,"input":"text","k":"$style"},{"has_lang":false,"input":"text","k":"$image_url"},{"has_lang":false,"input":"text","k":"$label_text"},{"has_lang":false,"input":"text","k":"$body_color"},{"has_lang":false,"input":"text","k":"$outline_color"},{"has_lang":false,"input":"text","k":"$outline_width"},{"has_lang":false,"input":"text","k":"$text_color"}]},"named_keys":{"address keys":{"input":"enum","k":"address keys","v":{"#":{},"$id":{},"Address":{},"Address 2":{},"Aisle":{},"Apartment":{},"Apt":{},"Area":{},"Bathroom":{},"Bin":{},"Booth":{},"Box":{},"Building":{},"Chair":{},"City":{},"Concession":{},"Concourse":{},"Country":{},"Cubicle":{},"Department":{},"Desk":{},"Display":{},"Door":{},"Elevator":{},"End Cap":{},"Entrance":{},"Escalator":{},"Exhibit":{},"Exit":{},"Field":{},"Gate":{},"Hall":{},"Hanger":{},"Intersection":{},"Lane":{},"Level":{},"Locker":{},"Lot":{},"Mall":{},"Meeting Room":{},"Moving Walkway":{},"Neighborhood":{},"Office":{},"Painting":{},"Rack":{},"Ramp":{},"Region":{},"Rm":{},"Road":{},"Room":{},"Row":{},"Sculpture":{},"Seat":{},"Section":{},"Shelf":{},"Space":{},"Stair":{},"State":{},"Store":{},"Street":{},"Suite":{},"Terminal":{},"Unit":{},"Zip Code":{},"Zone":{}}},"lang":{"input":"enum","k":"lang","v":{"ar":{},"cs":{},"da":{},"de":{},"en":{},"es":{},"fr":{},"gu":{},"he":{},"hi":{},"id":{},"it":{},"ja":{},"ko":{},"nl":{},"pl":{},"pt":{},"ro":{},"ru":{},"sk":{},"sv":{},"th":{},"tr":{},"zh":{}}}},"property_trees":{"chain":[{"has_lang":true,"input":"text","k":"name","required":true},{"has_lang":true,"input":"text","k":"short name"},{"input":"named_group","k":"entity1"}],"community_entity":[{"has_lang":true,"input":"text","k":"name","required":true},{"desc":"This is a name used by the customer for the venue.","has_lang":true,"input":"text","k":"alt_name","required":true},{"input":"named_group","k":"entity1"},{"input":"named_group","k":"entity2"}],"community_map":[{"input":"enum","k":"com_type","required":true,"v":{"Academic Building":{},"Airport":{},"Apartment Complex":{},"Bus Station":{},"Business Campus":{},"Campground":{},"Casino":{},"College Campus Building":{},"Convention Center":{},"Dormitory":{},"Government":{},"High School":{},"Hospital":{},"Hotel":{},"Industry":{},"Library":{},"Metro Station":{},"Museum":{},"Other":{},"Parking Garage":{},"Religious Building":{},"Retail":{},"School":{},"Shopping Center":{},"Shopping Mall":{},"Sports Center":{},"Stadium":{},"Theater":{},"Theme Park":{},"Train Station":{},"Urban Park":{}}},{"has_lang":true,"input":"text","k":"name","required":true},{"input":"named_key","k":"default_lang","name":"lang","required":true},{"input":"named_group","k":"post address"},{"has_lang":false,"input":"text","k":"theme_map"}],"drawing":[{"input":"enum","k":"map_type","required":true,"v":{"Airport":{},"Airport Terminal":{},"Casino":{},"College Building":{},"College Campus":{},"Convention":{},"Hospital":{},"Retail":{},"School Building":{},"School Campus":{},"Shopping Mall":{},"Station":{}}},{"has_lang":true,"input":"text","k":"name","required":true}],"entity":[{"has_lang":true,"input":"text","k":"name","required":true},{"has_lang":true,"input":"text","k":"short name"},{"input":"named_group","k":"entity1"},{"input":"named_group","k":"post address"},{"input":"named_group","k":"entity2"},{"desc":"This field is used for storing geometry address information, before the geometry address is created. It should not be used for a descriptive location.","input":"text","k":"location"},{"has_lang":true,"input":"text","is_array":true,"k":"category","prop":{"detail":"true"}},{"has_lang":true,"input":"text","is_array":true,"k":"tags","prop":{"detail":"true"}},{"input":"named_group","k":"style keys"}],"geometry":[{"input":"multikey","k":"geom_type","ks":[{"desc":"This represents an area. There are alternate keys representing also representing specific types of areas.","input":"enum","k":"area","v":{"aisle":{},"baggage claim":{"desc":"This is the area where baggage is retrieved. It should not be confused with a baggage carousel."},"copy/print":{},"immigration and customs":{},"meeting point":{},"parcel":{},"passport control":{},"pet relief area":{},"rest area":{},"section":{},"security section":{},"smoke":{},"true":{"desc":"This field represents a generic area."}}},{"input":"enum","k":"barrier","v":{"fence":{},"gate":{},"obstruction":{},"railing":{}}},{"desc":"This represents machinery, either fixed like a heater or portable like a computer.","input":"enum","k":"equipment","v":{"cash register":{},"computer":{},"copy machine":{},"printer":{},"true":{"desc":"This represents a generic machine."},"water heater":{}}},{"desc":"This object represents the objects that construct a building. It can include physical objects like a wall or areas like a room.","input":"enum","k":"facility","v":{"area":{"desc":"This is a generic area in a building, simliar to a room or hallway."},"bathroom":{"desc":"A bathroom can have the gender property specified. Alternatively, the gender unspecified should represent both bathrooms. It can alternatively be used for the case of unisex bathroom in cases where the label unisex is obvious.","ks":[{"input":"enum","k":"gender","v":{"family":{"desc":"This is for an explicitly classified family bathroom."},"female":{},"male":{},"unisex":{"desc":"This is for a bathroom for both genders."}}},{"input":"boolean","k":"changing station"},{"input":"boolean","k":"disabled access"},{"desc":"This is appended to a bathroom when it is mapped as a room object instead of as a unit","input":"boolean","k":"as room"}]},"column":{},"detail":{"desc":"This is a generic detail or contents layer object in a building, like a step."},"door":{},"doorway":{"desc":"This is the open space in the wall where a door goes when plotted as an area. In the case of a line format wall, this doorway may be omitted if a door is present."},"element":{"desc":"This is a generic building element object, like a wall or door (although they have their own classifications)."},"elevator":{"desc":"This represents a single elevator."},"elevator bank":{"desc":"This represents a collection of elevators. It can be used instead of drawing multiple elevators."},"escalator":{"ks":[{"input":"enum","k":"to","v":{"above":{},"below":{},"both":{}}},{"input":"enum","k":"from","v":{"above":{},"below":{},"both":{}}}]},"floor opening":{},"hall area":{"desc":"This is a large open area of hallway, not included intersections."},"hallway":{"ks":[{"desc":"This flag can be added to the portion of a hallway that forms a vestibule.","input":"boolean","k":"vestibule"}]},"inaccessible space":{},"landing":{"desc":"This is the area between stair flights. In some cases it can also be used for the area at the top or bottom of a stairway."},"moving walkway":{"ks":[{"input":"boolean","k":"to"},{"input":"boolean","k":"from"}]},"opening":{"desc":"This is used to illustrate an entrance on objects without doorways, such as an escalator or ramp"},"patio":{"desc":"This is an outdoor area, covered or uncovered, connected or disconnected with a building. This is closely related to a porch."},"platform":{},"porch":{"desc":"This is an covered outdoor area with a floor and typically open sides, connected to a building. This is closely related to a patio."},"ramp":{"ks":[{"input":"boolean","k":"disabled access"}]},"room":{"ks":[{"input":"enum","k":"use","v":{"auditorium":{},"cafeteria":{},"classroom":{},"conference room":{},"foyer":{"desc":"This is an area at the entryway, often with access to other floors. It is closely related to a lobby but different."},"lab":{},"library":{},"lobby":{"desc":"This is an area where the main information or clerk desk is located. It is closely related to a foyer but different."},"locker room":{},"lost and found":{},"meditation room":{},"office":{}}},{"input":"boolean","k":"changing station"}]},"stairs":{"desc":"This represents a stairs object. It will typically be rendered with an icon."},"stairwell":{"desc":"This is the room that houses a stairway. It is typically rendered without an icon."},"step":{"desc":"This represents a single step on a stairway."},"unit":{"ks":[{"desc":"This represents a type of unit. As soon as entity categorization is fully used, this designation will be used only for units with a specific purpose. Several entries will be removed.","input":"enum","k":"class","v":{"car rental":{},"cocktails":{},"coffee":{},"fitness center":{},"food and drink":{},"gym":{},"money changer":{},"movie theatre":{},"restaurant":{},"retail":{},"shoe shine":{},"ticketing, check-in":{},"transit hotel":{}}},{"input":"enum","k":"use","v":{"customer service":{},"information":{},"medical":{},"police/security":{}}}]},"wall":{},"window":{},"window opening":{"desc":"This is the hole in the wall where a window goes."}}},{"desc":"This is a fixed object, or else one that is heavy and difficult to move.","input":"enum","k":"fixture","v":{"baggage carousel":{"desc":"This represents the baggae carousel fixture."},"bin":{"desc":"This represents a bin that is a fixture."},"booth":{},"checkout":{},"countertop":{},"cubicle":{},"kiosk":{},"partition":{},"rack":{"desc":"This represents a rack that is a fixture."},"ramp":{"ks":[{"input":"boolean","k":"disabled access"}]},"shelf":{"desc":"This represents a shelf that is a fixture."},"stage":{},"stall":{},"true":{"desc":"This represents a generic fixture"}}},{"desc":"This represents a movable ojbect, like furniture.","input":"enum","k":"furnishing","v":{"bin":{"desc":"This represents a bin that is a furnishing."},"desk":{},"seat":{"ks":[{"input":"boolean","k":"disabled access"}]},"shelf":{"desc":"This represents a shelf that is a furnishing."},"table":{},"true":{"desc":"This represents a generic furnishing."}}},{"desc":"This represents a marker. It can be either physical, like a traffic line, or nonphysical, like a text label.","input":"enum","k":"marker","ks":[{"input":"boolean","k":"nonphysical"}],"v":{"disabled access":{"ks":[{"fixed_value":"true","input":"fixed","k":"nonphysical"}]},"entrance":{"ks":[{"fixed_value":"true","input":"fixed","k":"nonphysical"}]},"large text":{"ks":[{"fixed_value":"true","input":"fixed","k":"nonphysical"}]},"small text":{"ks":[{"fixed_value":"true","input":"fixed","k":"nonphysical"}]},"traffic marker":{"ks":[{"input":"fixed","k":"nonphysical"}]},"true":{"ks":[{"fixed_value":"true","input":"fixed","k":"nonphysical"}]}}},{"desc":"This represents a meta data object. It is not a part of the map.","input":"enum","k":"meta","v":{"coordinates":{"ks":[{"input":"named_group","k":"external_ref_object"}]},"ground intersect":{"fixed_value":"false","input":"fixed","k":"publish"},"guide":{"fixed_value":"false","input":"fixed","k":"publish"},"level outline":{"fixed_value":"false","input":"fixed","k":"publish"},"source":{"ks":[{"input":"named_group","k":"external_ref_object"}]}}},{"desc":"This is a generic object.","input":"enum","k":"object","v":{"invalid":{},"true":{},"unknown":{}}},{"input":"enum","k":"recreation","v":{"athletic field":{"ks":[{"input":"enum","k":"sport","v":{"baseball":{},"basketball":{},"cricket":{},"field hockey":{},"football":{},"hockey":{},"soccer":{},"tennis":{}}},{"input":"enum","k":"surface","v":{"artificial turf":{},"asphalt":{},"clay":{},"concrete":{},"dirt":{},"grass":{},"gravel":{},"rubber":{},"sand":{}}}]},"playground":{}}},{"desc":"This is a safety or emergency response service or object.","input":"enum","k":"safety","v":{"defibrillator":{},"emergency exit":{},"eyewash":{},"fire extinguisher":{},"fire hose":{},"fire pull":{},"first aid":{},"true":{"desc":"This is a generic safety object."}}},{"desc":"This is a service or amenity.","input":"enum","k":"service","v":{"atm":{"ks":[{"input":"enum","k":"currency","v":{"dollar":{},"general":{},"yen":{}}}]},"bike rack":{},"changing station":{},"flight monitor":{},"locker":{},"luggage cart":{},"mail":{},"massage chair":{},"paid parking":{},"power":{},"santa":{},"showers":{},"stroller":{},"telephone":{},"true":{"desc":"This is a generic service"},"tv":{},"valet parking":{},"vending machine":{},"wifi":{}}},{"input":"enum","k":"sign","v":{"stop sign":{},"true":{"desc":"This is a generic sign."},"yield sign":{}}},{"input":"enum","k":"signal","v":{"traffic light":{},"true":{"desc":"This is a generic signal."}}},{"desc":"This represents a building or other structure.","input":"enum","k":"structure","v":{"building":{"ks":[{"desc":"This is intended for unmapped buildings only, if the level count is available.","input":"text","k":"levels"}]},"parking structure":{"ks":[{"desc":"This is intended for unmapped buildings only, if the level count is available.","input":"text","k":"levels"}]},"subbuilding":{"desc":"This represents a part of a building which will be treated as an independent building."},"tent":{"desc":"This is intended for durable tents."},"true":{"desc":"This represents a generic structure."}}},{"input":"enum","k":"traffic","v":{"crosswalk":{},"parking lot":{},"parking spot":{"ks":[{"input":"boolean","k":"disabled access"}]},"railway":{},"railway rail":{},"railway tie":{},"road":{"ks":[{"input":"enum","k":"cat","v":{"access road":{},"alley":{},"municipal road":{},"parking access":{},"service road":{},"uncategorized":{}}},{"desc":"This is used for one way roads. The direction refers to the direction relative to the direction the road path is drawn. Applicable to line and linear area roads only.","input":"enum","k":"one way","v":{"fwd":{},"rev":{}}}]},"road intersection":{"desc":"This is used at in intersection when area roads are drawn."},"walkway":{"ks":[{"input":"boolean","k":"covered"}]},"walkway intersection":{"desc":"This is used at in intersection when area walkways are drawn.","ks":[{"input":"boolean","k":"covered"}]}}},{"input":"enum","k":"transit","v":{"bus":{},"ground transportation":{},"taxi":{},"train":{}}},{"input":"enum","k":"vegetation","v":{"earth":{},"garden":{},"grass":{},"greenery":{},"tree":{}}},{"input":"enum","k":"vehicle","v":{"airplane":{}}},{"input":"enum","k":"water","v":{"true":{}}}],"required":true},{"has_lang":true,"input":"text","k":"name"},{"has_lang":true,"input":"text","k":"short name"},{"input":"named_group","k":"style keys"},{"desc":"This is a textual description of the location, such as wold be given in a directory to help users find the object.","has_lang":true,"input":"text","k":"location"},{"desc":"This is used to give an additional information on an object, such as the type of object when it is not included in the classification.","has_lang":true,"input":"text","k":"info"}],"level":[{"desc":"This is the full name of the level. If it is longer than TBD characters a short name should also be added.","has_lang":false,"input":"text","k":"name","required":true},{"desc":"This is a short name for the level. It is used if the full name is longer than TBD characters.","has_lang":false,"input":"text","k":"short name"},{"input":"text","k":"elev_m"},{"input":"text","k":"elev_rel_m"},{"input":"enum","k":"type","required":true,"v":{"indoor":{},"outdoor":{}}}],"link":[{"input":"multikey","k":"nav_class","ks":[{"input":"enum","k":"aisle","v":{"major":{},"minor":{}}},{"input":"enum","k":"corridor","v":{"major":{},"minor":{}}},{"input":"enum","k":"entry","v":{"area":{},"doorway":{},"opening":{}}},{"input":"enum","k":"level change","v":{"elevator":{},"escalator":{},"ramp":{},"stairs":{},"transition":{}}},{"input":"enum","k":"mechanical","v":{"moving walkway":{}}},{"input":"enum","k":"path","v":{"major":{},"minor":{}}},{"input":"enum","k":"traffic","v":{"crosswalk":{},"parking lot":{},"shoulder":{},"street":{}}},{"input":"enum","k":"walkway","v":{"major":{},"minor":{}}}],"prop":{"linkType":"class"},"required":true},{"has_lang":true,"input":"text","k":"name","prop":{"linkType":"class"}},{"input":"text","k":"group","prop":{"linkType":"class"}},{"input":"boolean","k":"intersection","prop":{"linkType":"class"}},{"input":"boolean","k":"crossing","prop":{"linkType":"class"}},{"input":"boolean","k":"diversion","prop":{"linkType":"class"}},{"input":"text","k":"flag","prop":{"linkType":"class"}},{"input":"text","k":"start_to_image","prop":{"linkType":"start","reverse":"end_to_image"}},{"input":"text","k":"start_from_image","prop":{"linkType":"start","reverse":"end_from_image"}},{"input":"text","k":"end_to_image","prop":{"linkType":"end","reverse":"start_to_image"}},{"input":"text","k":"end_from_image","prop":{"linkType":"end","reverse":"start_from_image"}},{"input":"text","k":"start_to_desc","prop":{"linkType":"start","reverse":"end_to_desc"}},{"input":"text","k":"start_from_desc","prop":{"linkType":"start","reverse":"end_from_desc"}},{"input":"text","k":"end_to_desc","prop":{"linkType":"end","reverse":"start_to_desc"}},{"input":"text","k":"end_from_desc","prop":{"linkType":"end","reverse":"start_from_desc"}}],"node":[{"has_lang":true,"input":"text","k":"name"},{"input":"boolean","k":"intersection"}]}},"description":""}},"newPresets_normalized":{"name":"newPresets_normalized","type":"apogee.JsonTable","updateData":{"data":{"named_groups":{"entity1":[{"input":"text","k":"phone","prop":{"detail":"true"}},{"input":"text","k":"email","prop":{"detail":"true"}},{"input":"text","k":"url","prop":{"detail":"true"}},{"input":"text","k":"fax","prop":{"detail":"true"}},{"has_lang":true,"input":"text","k":"description","prop":{"detail":"true"}},{"input":"text","is_array":true,"k":"naics","prop":{"detail":"true"}}],"entity2":[{"has_lang":true,"input":"text","k":"hours","prop":{"detail":"true"}},{"input":"text","k":"storeid"},{"input":"text","k":"prop_owner"},{"has_lang":true,"input":"text","k":"product","prop":{"detail":"true"}}],"external_ref_object":[{"input":"text","k":"ref"},{"input":"text","k":"xscale"},{"input":"text","k":"yscale"},{"input":"enum","k":"units","v":{"cm":{},"ft":{},"in":{},"km":{},"m":{},"mile":{},"yd":{}}},{"input":"boolean","k":"publish"}],"names":[{"input":"named_key","k":"name"},{"has_lang":true,"input":"text","k":"short name"}],"post address":[{"input":"enum","k":"country","v":{"AD":{},"AE":{},"AF":{},"AG":{},"AI":{},"AL":{},"AM":{},"AN":{},"AO":{},"AQ":{},"AR":{},"AS":{},"AT":{},"AU":{"ks":[{"input":"enum","k":"territory","v":{"NSW":{},"QLD":{},"SA":{},"TAS":{},"VIC":{},"WA":{}}},{"input":"fixed","k":"main admin region"}]},"AW":{},"AX":{},"AZ":{},"BA":{},"BB":{},"BD":{},"BE":{},"BF":{},"BG":{},"BH":{},"BI":{},"BJ":{},"BM":{},"BN":{},"BO":{},"BR":{},"BS":{},"BT":{},"BV":{},"BW":{},"BY":{},"BZ":{},"CA":{"ks":[{"input":"enum","k":"province","v":{"AB":{},"BC":{},"MB":{},"NB":{},"NL":{},"NS":{},"ON":{},"PE":{},"QC":{},"SK":{}}},{"input":"fixed","k":"main admin region"}]},"CC":{},"CD":{},"CF":{},"CG":{},"CH":{},"CI":{},"CK":{},"CL":{},"CM":{},"CN":{},"CO":{},"CR":{},"CV":{},"CX":{},"CY":{},"CZ":{},"DE":{},"DJ":{},"DK":{},"DM":{},"DO":{},"DZ":{},"EC":{},"EE":{},"EG":{},"EH":{},"ER":{},"ES":{},"ET":{},"FI":{},"FJ":{},"FK":{},"FM":{},"FO":{},"FR":{},"GA":{},"GB":{},"GD":{},"GE":{},"GF":{},"GH":{},"GI":{},"GL":{},"GM":{},"GN":{},"GP":{},"GQ":{},"GR":{},"GT":{},"GU":{},"GW":{},"GY":{},"HK":{},"HM":{},"HN":{},"HR":{},"HT":{},"HU":{},"ID":{},"IE":{},"IL":{},"IN":{},"IO":{},"IQ":{},"IS":{},"IT":{},"JM":{},"JO":{},"JP":{"ks":[{"input":"enum","k":"prefecture","v":{"Aichi":{},"Akita":{},"Aomori":{},"Chiba":{},"Ehime":{},"Fukui":{},"Fukuoka":{},"Fukushima":{},"Gifu":{},"Gunma":{},"Hiroshima":{},"Hokkaido":{},"Hyōgo":{},"Ibaraki":{},"Ishikawa":{},"Iwate":{},"Kagawa":{},"Kagoshima":{},"Kanagawa":{},"Kumamoto":{},"Kyoto":{},"Kōchi":{},"Mie":{},"Miyagi":{},"Miyazaki":{},"Nagano":{},"Nagasaki":{},"Nara":{},"Niigata":{},"Okayama":{},"Okinawa":{},"Osaka":{},"Saga":{},"Saitama":{},"Shiga":{},"Shimane":{},"Shizuoka":{},"Tochigi":{},"Tokushima":{},"Tokyo":{},"Tottori":{},"Toyama":{},"Wakayama":{},"Yamagata":{},"Yamaguchi":{},"Yamanashi":{},"Ōita":{}}},{"input":"fixed","k":"main admin region"}]},"KE":{},"KG":{},"KH":{},"KI":{},"KM":{},"KN":{},"KR":{},"KW":{},"KY":{},"KZ":{},"LA":{},"LB":{},"LC":{},"LI":{},"LK":{},"LR":{},"LS":{},"LT":{},"LU":{},"LV":{},"LY":{},"MA":{},"MC":{},"MD":{},"MG":{},"MH":{},"MK":{},"ML":{},"MM":{},"MN":{},"MO":{},"MQ":{},"MR":{},"MS":{},"MT":{},"MU":{},"MV":{},"MW":{},"MX":{},"MY":{},"MZ":{},"NA":{},"NC":{},"NE":{},"NF":{},"NG":{},"NI":{},"NL":{},"NO":{},"NP":{},"NR":{},"NU":{},"NZ":{},"OM":{},"PA":{},"PE":{},"PF":{},"PG":{},"PH":{},"PK":{},"PL":{},"PM":{},"PN":{},"PR":{},"PS":{},"PT":{},"PW":{},"PY":{},"QA":{},"RE":{},"RO":{},"RU":{},"RW":{},"SA":{},"SB":{},"SC":{},"SE":{},"SG":{},"SH":{},"SI":{},"SJ":{},"SK":{},"SL":{},"SM":{},"SN":{},"SO":{},"SR":{},"ST":{},"SV":{},"SZ":{},"TC":{},"TD":{},"TF":{},"TG":{},"TH":{},"TJ":{},"TK":{},"TM":{},"TN":{},"TO":{},"TR":{},"TT":{},"TV":{},"TW":{},"TZ":{},"UA":{},"UG":{},"UM":{},"US":{"ks":[{"input":"enum","k":"state","v":{"AK":{},"AL":{},"AR":{},"AZ":{},"CA":{},"CO":{},"CT":{},"DC":{},"DE":{},"FL":{},"GA":{},"HI":{},"IA":{},"ID":{},"IL":{},"IN":{},"KS":{},"KY":{},"LA":{},"MA":{},"MD":{},"ME":{},"MI":{},"MN":{},"MO":{},"MS":{},"MT":{},"NC":{},"ND":{},"NE":{},"NH":{},"NJ":{},"NM":{},"NV":{},"NY":{},"OH":{},"OK":{},"OR":{},"PA":{},"RI":{},"SC":{},"SD":{},"TN":{},"TX":{},"UT":{},"VA":{},"VT":{},"WA":{},"WI":{},"WV":{},"WY":{}}},{"input":"fixed","k":"main admin region"}]},"UY":{},"UZ":{},"VC":{},"VE":{},"VG":{},"VI":{},"VN":{},"VU":{},"WF":{},"WS":{},"YE":{},"YT":{},"ZA":{},"ZM":{},"ZW":{}}},{"input":"multikey","k":"main admin region","ks":[{"has_lang":true,"input":"text","k":"state"},{"has_lang":true,"input":"text","k":"province"},{"has_lang":true,"input":"text","k":"prefecture"},{"has_lang":true,"input":"text","k":"territory"}]},{"input":"text","k":"postal code"},{"has_lang":true,"input":"text","k":"city"},{"has_lang":true,"input":"text","k":"street address"}],"style keys":[{"input":"text","k":"$icon"},{"input":"text","k":"$style"},{"input":"text","k":"$image_url"},{"input":"text","k":"$label_text"},{"input":"text","k":"$body_color"},{"input":"text","k":"$outline_color"},{"input":"text","k":"$outline_width"},{"input":"text","k":"$text_color"}]},"named_keys":{"address keys":{"input":"enum","k":"address keys","v":{"#":{},"$id":{},"Address":{},"Address 2":{},"Aisle":{},"Apartment":{},"Apt":{},"Area":{},"Bathroom":{},"Bin":{},"Booth":{},"Box":{},"Building":{},"Chair":{},"City":{},"Concession":{},"Concourse":{},"Country":{},"Cubicle":{},"Department":{},"Desk":{},"Display":{},"Door":{},"Elevator":{},"End Cap":{},"Entrance":{},"Escalator":{},"Exhibit":{},"Exit":{},"Field":{},"Gate":{},"Hall":{},"Hanger":{},"Intersection":{},"Lane":{},"Level":{},"Locker":{},"Lot":{},"Mall":{},"Meeting Room":{},"Moving Walkway":{},"Neighborhood":{},"Office":{},"Painting":{},"Rack":{},"Ramp":{},"Region":{},"Rm":{},"Road":{},"Room":{},"Row":{},"Sculpture":{},"Seat":{},"Section":{},"Shelf":{},"Space":{},"Stair":{},"State":{},"Store":{},"Street":{},"Suite":{},"Terminal":{},"Unit":{},"Zip Code":{},"Zone":{}}},"lang":{"input":"enum","k":"lang","v":{"ar":{},"cs":{},"da":{},"de":{},"en":{},"es":{},"fr":{},"gu":{},"he":{},"hi":{},"id":{},"it":{},"ja":{},"ko":{},"nl":{},"pl":{},"pt":{},"ro":{},"ru":{},"sk":{},"sv":{},"th":{},"tr":{},"zh":{}}}},"property_trees":{"chain":[{"has_lang":true,"input":"text","k":"name","required":true},{"has_lang":true,"input":"text","k":"short name"},{"input":"named_group","k":"entity1"}],"community_entity":[{"has_lang":true,"input":"text","k":"name","required":true},{"desc":"This is a name used by the customer for the venue.","has_lang":true,"input":"text","k":"alt_name","required":true},{"input":"named_group","k":"entity1"},{"input":"named_group","k":"entity2"}],"community_map":[{"input":"enum","k":"com_type","required":true,"v":{"Academic Building":{},"Airport":{},"Apartment Complex":{},"Bus Station":{},"Business Campus":{},"Campground":{},"Casino":{},"College Campus Building":{},"Convention Center":{},"Dormitory":{},"Government":{},"High School":{},"Hospital":{},"Hotel":{},"Industry":{},"Library":{},"Metro Station":{},"Museum":{},"Other":{},"Parking Garage":{},"Religious Building":{},"Retail":{},"School":{},"Shopping Center":{},"Shopping Mall":{},"Sports Center":{},"Stadium":{},"Theater":{},"Theme Park":{},"Train Station":{},"Urban Park":{}}},{"has_lang":true,"input":"text","k":"name","required":true},{"input":"named_key","k":"default_lang","required":true},{"input":"named_group","k":"post address"},{"input":"text","k":"theme_map"}],"drawing":[{"input":"enum","k":"map_type","required":true,"v":{"Airport":{},"Airport Terminal":{},"Casino":{},"College Building":{},"College Campus":{},"Convention":{},"Hospital":{},"Retail":{},"School Building":{},"School Campus":{},"Shopping Mall":{},"Station":{}}},{"has_lang":true,"input":"text","k":"name","required":true}],"entity":[{"has_lang":true,"input":"text","k":"name","required":true},{"has_lang":true,"input":"text","k":"short name"},{"input":"named_group","k":"entity1"},{"input":"named_group","k":"post address"},{"input":"named_group","k":"entity2"},{"desc":"This field is used for storing geometry address information, before the geometry address is created. It should not be used for a descriptive location.","input":"text","k":"location"},{"has_lang":true,"input":"text","is_array":true,"k":"category","prop":{"detail":"true"}},{"has_lang":true,"input":"text","is_array":true,"k":"tags","prop":{"detail":"true"}},{"input":"named_group","k":"style keys"}],"geometry":[{"input":"multikey","k":"geom_type","ks":[{"desc":"This represents an area. There are alternate keys representing also representing specific types of areas.","input":"enum","k":"area","v":{"aisle":{},"baggage claim":{"desc":"This is the area where baggage is retrieved. It should not be confused with a baggage carousel."},"copy/print":{},"immigration and customs":{},"meeting point":{},"parcel":{},"passport control":{},"pet relief area":{},"rest area":{},"section":{},"security section":{},"smoke":{},"true":{"desc":"This field represents a generic area."}}},{"input":"enum","k":"barrier","v":{"fence":{},"gate":{},"obstruction":{},"railing":{}}},{"desc":"This represents machinery, either fixed like a heater or portable like a computer.","input":"enum","k":"equipment","v":{"cash register":{},"computer":{},"copy machine":{},"printer":{},"true":{"desc":"This represents a generic machine."},"water heater":{}}},{"desc":"This object represents the objects that construct a building. It can include physical objects like a wall or areas like a room.","input":"enum","k":"facility","v":{"area":{"desc":"This is a generic area in a building, simliar to a room or hallway."},"bathroom":{"desc":"A bathroom can have the gender property specified. Alternatively, the gender unspecified should represent both bathrooms. It can alternatively be used for the case of unisex bathroom in cases where the label unisex is obvious.","ks":[{"input":"enum","k":"gender","v":{"family":{"desc":"This is for an explicitly classified family bathroom."},"female":{},"male":{},"unisex":{"desc":"This is for a bathroom for both genders."}}},{"input":"boolean","k":"changing station"},{"input":"boolean","k":"disabled access"},{"desc":"This is appended to a bathroom when it is mapped as a room object instead of as a unit","input":"boolean","k":"as room"}]},"column":{},"detail":{"desc":"This is a generic detail or contents layer object in a building, like a step."},"door":{},"doorway":{"desc":"This is the open space in the wall where a door goes when plotted as an area. In the case of a line format wall, this doorway may be omitted if a door is present."},"element":{"desc":"This is a generic building element object, like a wall or door (although they have their own classifications)."},"elevator":{"desc":"This represents a single elevator."},"elevator bank":{"desc":"This represents a collection of elevators. It can be used instead of drawing multiple elevators."},"escalator":{"ks":[{"input":"enum","k":"to","v":{"above":{},"below":{},"both":{}}},{"input":"enum","k":"from","v":{"above":{},"below":{},"both":{}}}]},"floor opening":{},"hall area":{"desc":"This is a large open area of hallway, not included intersections."},"hallway":{"ks":[{"desc":"This flag can be added to the portion of a hallway that forms a vestibule.","input":"boolean","k":"vestibule"}]},"inaccessible space":{},"landing":{"desc":"This is the area between stair flights. In some cases it can also be used for the area at the top or bottom of a stairway."},"moving walkway":{"ks":[{"input":"boolean","k":"to"},{"input":"boolean","k":"from"}]},"opening":{"desc":"This is used to illustrate an entrance on objects without doorways, such as an escalator or ramp"},"patio":{"desc":"This is an outdoor area, covered or uncovered, connected or disconnected with a building. This is closely related to a porch."},"platform":{},"porch":{"desc":"This is an covered outdoor area with a floor and typically open sides, connected to a building. This is closely related to a patio."},"ramp":{"ks":[{"input":"boolean","k":"disabled access"}]},"room":{"ks":[{"input":"enum","k":"use","v":{"auditorium":{},"cafeteria":{},"classroom":{},"conference room":{},"foyer":{"desc":"This is an area at the entryway, often with access to other floors. It is closely related to a lobby but different."},"lab":{},"library":{},"lobby":{"desc":"This is an area where the main information or clerk desk is located. It is closely related to a foyer but different."},"locker room":{},"lost and found":{},"meditation room":{},"office":{}}},{"input":"boolean","k":"changing station"}]},"stairs":{"desc":"This represents a stairs object. It will typically be rendered with an icon."},"stairwell":{"desc":"This is the room that houses a stairway. It is typically rendered without an icon."},"step":{"desc":"This represents a single step on a stairway."},"unit":{"ks":[{"desc":"This represents a type of unit. As soon as entity categorization is fully used, this designation will be used only for units with a specific purpose. Several entries will be removed.","input":"enum","k":"class","v":{"car rental":{},"cocktails":{},"coffee":{},"fitness center":{},"food and drink":{},"gym":{},"money changer":{},"movie theatre":{},"restaurant":{},"retail":{},"shoe shine":{},"ticketing, check-in":{},"transit hotel":{}}},{"input":"enum","k":"use","v":{"customer service":{},"information":{},"medical":{},"police/security":{}}}]},"wall":{},"window":{},"window opening":{"desc":"This is the hole in the wall where a window goes."}}},{"desc":"This is a fixed object, or else one that is heavy and difficult to move.","input":"enum","k":"fixture","v":{"baggage carousel":{"desc":"This represents the baggae carousel fixture."},"bin":{"desc":"This represents a bin that is a fixture."},"booth":{},"checkout":{},"countertop":{},"cubicle":{},"kiosk":{},"partition":{},"rack":{"desc":"This represents a rack that is a fixture."},"ramp":{"ks":[{"input":"boolean","k":"disabled access"}]},"shelf":{"desc":"This represents a shelf that is a fixture."},"stage":{},"stall":{},"true":{"desc":"This represents a generic fixture"}}},{"desc":"This represents a movable ojbect, like furniture.","input":"enum","k":"furnishing","v":{"bin":{"desc":"This represents a bin that is a furnishing."},"desk":{},"seat":{"ks":[{"input":"boolean","k":"disabled access"}]},"shelf":{"desc":"This represents a shelf that is a furnishing."},"table":{},"true":{"desc":"This represents a generic furnishing."}}},{"desc":"This represents a marker. It can be either physical, like a traffic line, or nonphysical, like a text label.","input":"enum","k":"marker","v":{"disabled access":{"ks":[{"input":"fixed","k":"nonphysical"}]},"entrance":{"ks":[{"input":"fixed","k":"nonphysical"}]},"large text":{"ks":[{"input":"fixed","k":"nonphysical"}]},"small text":{"ks":[{"input":"fixed","k":"nonphysical"}]},"traffic marker":{"ks":[{"input":"fixed","k":"nonphysical"}]},"true":{"ks":[{"input":"boolean","k":"nonphysical"}]}}},{"desc":"This represents a meta data object. It is not a part of the map.","input":"enum","k":"meta","v":{"coordinates":{"ks":[{"input":"named_group","k":"external_ref_object"}]},"ground intersect":{},"guide":{},"level outline":{},"source":{"ks":[{"input":"named_group","k":"external_ref_object"}]}}},{"desc":"This is a generic object.","input":"enum","k":"object","v":{"invalid":{},"true":{},"unknown":{}}},{"input":"enum","k":"recreation","v":{"athletic field":{"ks":[{"input":"enum","k":"sport","v":{"baseball":{},"basketball":{},"cricket":{},"field hockey":{},"football":{},"hockey":{},"soccer":{},"tennis":{}}},{"input":"enum","k":"surface","v":{"artificial turf":{},"asphalt":{},"clay":{},"concrete":{},"dirt":{},"grass":{},"gravel":{},"rubber":{},"sand":{}}}]},"playground":{}}},{"desc":"This is a safety or emergency response service or object.","input":"enum","k":"safety","v":{"defibrillator":{},"emergency exit":{},"eyewash":{},"fire extinguisher":{},"fire hose":{},"fire pull":{},"first aid":{},"true":{"desc":"This is a generic safety object."}}},{"desc":"This is a service or amenity.","input":"enum","k":"service","v":{"atm":{"ks":[{"input":"enum","k":"currency"}]},"bike rack":{},"changing station":{},"flight monitor":{},"locker":{},"luggage cart":{},"mail":{},"massage chair":{},"paid parking":{},"power":{},"santa":{},"showers":{},"stroller":{},"telephone":{},"true":{"desc":"This is a generic service"},"tv":{},"valet parking":{},"vending machine":{},"wifi":{}}},{"input":"enum","k":"sign","v":{"stop sign":{},"true":{"desc":"This is a generic sign."},"yield sign":{}}},{"input":"enum","k":"signal","v":{"traffic light":{},"true":{"desc":"This is a generic signal."}}},{"desc":"This represents a building or other structure.","input":"enum","k":"structure","v":{"building":{"ks":[{"desc":"This is intended for unmapped buildings only, if the level count is available.","input":"text","k":"levels"}]},"parking structure":{"ks":[{"desc":"This is intended for unmapped buildings only, if the level count is available.","input":"text","k":"levels"}]},"subbuilding":{"desc":"This represents a part of a building which will be treated as an independent building."},"tent":{"desc":"This is intended for durable tents."},"true":{"desc":"This represents a generic structure."}}},{"input":"enum","k":"traffic","v":{"crosswalk":{},"parking lot":{},"parking spot":{"ks":[{"input":"boolean","k":"disabled access"}]},"railway":{},"railway rail":{},"railway tie":{},"road":{"ks":[{"input":"enum","k":"cat","v":{"access road":{},"alley":{},"municipal road":{},"parking access":{},"service road":{},"uncategorized":{}}},{"desc":"This is used for one way roads. The direction refers to the direction relative to the direction the road path is drawn. Applicable to line and linear area roads only.","input":"enum","k":"one way","v":{"fwd":{},"rev":{}}}]},"road intersection":{"desc":"This is used at in intersection when area roads are drawn."},"walkway":{"ks":[{"input":"boolean","k":"covered"}]},"walkway intersection":{"desc":"This is used at in intersection when area walkways are drawn.","ks":[{"input":"boolean","k":"covered"}]}}},{"input":"enum","k":"transit","v":{"bus":{},"ground transportation":{},"taxi":{},"train":{}}},{"input":"enum","k":"vegetation","v":{"earth":{},"garden":{},"grass":{},"greenery":{},"tree":{}}},{"input":"enum","k":"vehicle","v":{"airplane":{}}},{"input":"enum","k":"water","v":{"true":{}}}],"required":true},{"has_lang":true,"input":"text","k":"name"},{"has_lang":true,"input":"text","k":"short name"},{"input":"named_group","k":"style keys"},{"desc":"This is a textual description of the location, such as wold be given in a directory to help users find the object.","has_lang":true,"input":"text","k":"location"},{"desc":"This is used to give an additional information on an object, such as the type of object when it is not included in the classification.","has_lang":true,"input":"text","k":"info"}],"level":[{"desc":"This is the full name of the level. If it is longer than TBD characters a short name should also be added.","input":"text","k":"name","required":true},{"desc":"This is a short name for the level. It is used if the full name is longer than TBD characters.","input":"text","k":"short name"},{"input":"text","k":"elev_m"},{"input":"text","k":"elev_rel_m"},{"input":"enum","k":"type","required":true,"v":{"indoor":{},"outdoor":{}}}],"link":[{"input":"multikey","k":"nav_class","ks":[{"input":"enum","k":"aisle","v":{"major":{},"minor":{}}},{"input":"enum","k":"corridor","v":{"major":{},"minor":{}}},{"input":"enum","k":"entry","v":{"area":{},"doorway":{},"opening":{}}},{"input":"enum","k":"level change","v":{"elevator":{},"escalator":{},"ramp":{},"stairs":{},"transition":{}}},{"input":"enum","k":"mechanical","v":{"moving walkway":{}}},{"input":"enum","k":"path","v":{"major":{},"minor":{}}},{"input":"enum","k":"traffic","v":{"crosswalk":{},"parking lot":{},"shoulder":{},"street":{}}},{"input":"enum","k":"walkway","v":{"major":{},"minor":{}}}],"prop":{"linkType":"class"},"required":true},{"has_lang":true,"input":"text","k":"name","prop":{"linkType":"class"}},{"input":"text","k":"group","prop":{"linkType":"class"}},{"input":"boolean","k":"intersection","prop":{"linkType":"class"}},{"input":"boolean","k":"crossing","prop":{"linkType":"class"}},{"input":"boolean","k":"diversion","prop":{"linkType":"class"}},{"input":"text","k":"flag","prop":{"linkType":"class"}},{"input":"text","k":"start_to_image","prop":{"linkType":"start","reverse":"end_to_image"}},{"input":"text","k":"start_from_image","prop":{"linkType":"start","reverse":"end_from_image"}},{"input":"text","k":"end_to_image","prop":{"linkType":"end","reverse":"start_to_image"}},{"input":"text","k":"end_from_image","prop":{"linkType":"end","reverse":"start_from_image"}},{"input":"text","k":"start_to_desc","prop":{"linkType":"start","reverse":"end_to_desc"}},{"input":"text","k":"start_from_desc","prop":{"linkType":"start","reverse":"end_from_desc"}},{"input":"text","k":"end_to_desc","prop":{"linkType":"end","reverse":"start_to_desc"}},{"input":"text","k":"end_from_desc","prop":{"linkType":"end","reverse":"start_from_desc"}}],"node":[{"has_lang":true,"input":"text","k":"name"},{"input":"boolean","k":"intersection"}]}},"description":""}}}}}}},"components":{"login":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":25,"y":25}},"children":{"loginUrl":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":463,"height":106},"posInfo":{"x":27,"y":42},"state":0,"viewType":"Text"}},"loginControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":343,"height":101},"posInfo":{"x":32,"y":183},"state":0,"viewType":"Output"},"resource":{"html":"","css":"","setData":"this.loginUrl = data;","constructorAddition":"\n\n//this uses the updated version of test authorization that takes and returns a JSON\nthis.onClick = function() {\n    \n    //get the output table\n    var outputTableName = \"sessionResponse\";\n    var fromMember = mode.getMember();\n    \n    //on click\n    var bodyJson = {};\n    bodyJson.userName = resource.userInput.value;\n    bodyJson.password = resource.passwordInput.value;\n    \n    //cleaer password field\n    resource.passwordInput.value = \"\";\n    \n    var options = {};\n    options.body = JSON.stringify(bodyJson);\n    options.method = \"POST\";\n    \n    var requestPromise = apogee.net.jsonRequest(this.loginUrl,options);\n    apogee.action.asynchDataUpdate(outputTableName,fromMember,requestPromise);\n}","init":"\nvar label1 = document.createElement(\"label\");\nlabel1.for = \"userInput\";\nlabel1.innerHTML = \"User:\"\nelement.appendChild(label1);\n\nvar input1 = document.createElement(\"input\");\ninput1.id = \"userInput\";\nresource.userInput = input1;\nelement.appendChild(input1);\n\nelement.appendChild(document.createElement(\"br\"));\n\nvar label2 = document.createElement(\"label\");\nlabel2.for = \"passwordInput\";\nlabel2.innerHTML = \"Password:\"\nelement.appendChild(label2);\n\nvar input2 = document.createElement(\"input\");\ninput2.type = \"password\";\ninput2.id = \"passwordInput\";\nresource.passwordInput = input2;\nelement.appendChild(input2);\n\nelement.appendChild(document.createElement(\"br\"));\n\nvar button = document.createElement(\"button\");\nbutton.innerHTML = \"Login\";\nelement.appendChild(button);\n\nvar instance = this;\nbutton.onclick = function() {\n    instance.onClick();\n}\n\n\n"}},"sessionResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":697,"height":158},"posInfo":{"x":34,"y":340},"state":0,"viewType":"Text"}},"sessionKey":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":587,"height":167},"posInfo":{"x":41,"y":549},"state":0,"viewType":"Formula"}}}},"data":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":61,"y":111}},"children":{"searchDef":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":540,"height":402},"posInfo":{"x":48,"y":36},"state":-1,"viewType":"JSON"}},"rawRecordMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":655,"height":609},"posInfo":{"x":363,"y":17},"state":0,"viewType":"JSON"}},"getRawRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":28},"posInfo":{"x":365,"y":64},"state":-1,"viewType":"Code"}},"fileEntryDownload":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":474,"height":322},"posInfo":{"x":50,"y":87},"state":-1,"viewType":"JSON"}},"fileTypeMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":642,"height":371},"posInfo":{"x":48,"y":314},"state":-1,"viewType":"Text"}},"getFileTypeId":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":42},"posInfo":{"x":48,"y":212},"state":-1,"viewType":"Code"}},"getFileTypeName":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":49,"y":264},"state":-1,"viewType":"Code"}},"getEntryString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":553,"height":100},"posInfo":{"x":567,"y":163},"state":-1,"viewType":"Code"}},"getEntryStringFromRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":672,"height":382},"posInfo":{"x":563,"y":212},"state":-1,"viewType":"Code"}},"fileEntryMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":724,"height":636},"posInfo":{"x":560,"y":344},"state":-1,"viewType":"JSON"}},"getEntryListFromRefString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":589,"height":301},"posInfo":{"x":561,"y":287},"state":-1,"viewType":"Code"}},"getNormalizedString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":586,"height":43},"posInfo":{"x":562,"y":403},"state":-1,"viewType":"Code"}}}},"micemetarDataAccess":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":159,"y":117}},"children":{"createRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":560,"height":321},"posInfo":{"x":33,"y":368},"state":-1,"viewType":"Code"}},"recordsToCreateInstructions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":834,"height":391},"posInfo":{"x":30,"y":472},"state":-1,"viewType":"Code"}},"createCommitBody":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":568,"height":400},"posInfo":{"x":629,"y":225},"state":-1,"viewType":"Code"}},"createRequestOptions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":523,"height":254},"posInfo":{"x":822,"y":379},"state":-1,"viewType":"Code"}},"host":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":353,"height":71},"posInfo":{"x":16,"y":6},"state":-1,"viewType":"Text"}},"commitUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":433,"height":107},"posInfo":{"x":14,"y":98},"state":-1,"viewType":"Text"}},"requestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":450,"height":68},"posInfo":{"x":14,"y":58},"state":-1,"viewType":"Formula"}},"dataSetInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":882,"height":611},"posInfo":{"x":279,"y":69},"state":-1,"viewType":"Text"}},"createUpdateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":886,"height":655},"posInfo":{"x":36,"y":248},"state":-1,"viewType":"Code"}},"createCreateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":994,"height":643},"posInfo":{"x":35,"y":209},"state":-1,"viewType":"Code"}},"getFieldErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":512,"height":68},"posInfo":{"x":761,"y":616},"state":-1,"viewType":"Code"}},"getRecordErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":81},"posInfo":{"x":762,"y":664},"state":-1,"viewType":"Code"}},"createDeleteInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":678,"height":540},"posInfo":{"x":36,"y":289},"state":-1,"viewType":"Code"}},"getRecordInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":480,"height":400},"posInfo":{"x":818,"y":427},"state":-1,"viewType":"Code"}},"combinedEntriesToInstructionList":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":721,"height":524},"posInfo":{"x":31,"y":516},"state":-1,"viewType":"Private"}},"getCommitPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":569,"height":109},"posInfo":{"x":565,"y":40},"state":-1,"viewType":"Code"}},"getRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":546,"height":89},"posInfo":{"x":563,"y":90},"state":-1,"viewType":"Code"}},"customRequestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":17,"y":142},"state":-1,"viewType":"Formula"}},"getCustomRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":668,"height":88},"posInfo":{"x":564,"y":134},"state":-1,"viewType":"Code"}}}},"inputCreate":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":165,"y":65}},"children":{"fileType":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":215,"height":37},"posInfo":{"x":29,"y":23},"state":0,"viewType":"Text"}},"inputFile":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":514,"height":300},"posInfo":{"x":47,"y":515},"state":0,"viewType":"Text"}},"fileTypeId":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":218,"height":32},"posInfo":{"x":28,"y":114},"state":0,"viewType":"Text"}},"createSettings":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":310,"height":105},"posInfo":{"x":344,"y":13},"state":0,"viewType":"Text"}},"preliminaryEntryList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":728,"height":599},"posInfo":{"x":895,"y":16},"state":-1,"viewType":"JSON"}},"readPreliminaryEntries":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":767,"y":140}},"children":{"theme":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":647,"height":470},"posInfo":{"x":654,"y":355},"state":0,"viewType":"Code"}},"themeSectionMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":208},"posInfo":{"x":752,"y":6},"state":-1,"viewType":"Text"}},"strings":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":747,"height":504},"posInfo":{"x":656,"y":152},"state":0,"viewType":"Code"}},"inputColors":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":626,"height":479},"posInfo":{"x":499,"y":279},"state":0,"viewType":"Code"}},"presetOverrides":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":770,"height":677},"posInfo":{"x":22,"y":210},"state":-1,"viewType":"Private"}},"presetPathPrefixes":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":545,"height":300},"posInfo":{"x":1084,"y":196},"state":-1,"viewType":"Form"}},"stringsObjectRefMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":664,"height":590},"posInfo":{"x":753,"y":507},"state":-1,"viewType":"Text"}},"themeNameSuffixMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":104},"posInfo":{"x":755,"y":49},"state":-1,"viewType":"Text"}},"geomTypeCludgeMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":302,"height":369},"posInfo":{"x":763,"y":289},"state":-1,"viewType":"Text"}},"isGeomTypeChild":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":764,"y":330},"state":-1,"viewType":"Code"}},"capitalizeFirstLetter":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":764,"y":372},"state":-1,"viewType":"Code"}},"presetSectionFromKeyType":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":335,"height":256},"posInfo":{"x":765,"y":205},"state":-1,"viewType":"Text"}},"getPresetSectionFromKeyType":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":758,"y":249},"state":-1,"viewType":"Code"}},"oldThemeMap":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":944,"height":708},"posInfo":{"x":25,"y":260},"state":-1,"viewType":"Code"}},"themeMapPayloadEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":1055,"y":13},"state":-1,"viewType":"Text"}},"themeRules":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":805,"height":588},"posInfo":{"x":301,"y":76},"state":0,"viewType":"Private"}}}},"createdRecordsStructure":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":926,"height":616},"posInfo":{"x":293,"y":107},"state":0,"viewType":"JSON"}},"test":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":871,"height":461},"posInfo":{"x":24,"y":442},"state":-1,"viewType":"JSON"}}}},"outputCreate":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":25,"y":25}},"children":{"createRecordStructure":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":1044,"height":508},"posInfo":{"x":49,"y":127},"state":-1,"viewType":"JSON"}},"oldFile":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":386,"height":300},"posInfo":{"x":50,"y":179},"state":-1,"viewType":"Text"}},"oldNormalized":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":557,"height":300},"posInfo":{"x":802,"y":396},"state":0,"viewType":"JSON"}},"newNormalized":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":428,"height":300},"posInfo":{"x":809,"y":41},"state":0,"viewType":"JSON"}},"newFile":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":597,"height":433},"posInfo":{"x":56,"y":271},"state":0,"viewType":"Formula"}},"reconstruct":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":367,"y":19}},"children":{"presets":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":106,"y":97}},"children":{"processEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":915,"height":475},"posInfo":{"x":26,"y":135},"state":0,"viewType":"Private"}},"postProcessFile":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":734,"height":400},"posInfo":{"x":563,"y":295},"state":0,"viewType":"Code"}},"initialize":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":385,"height":59},"posInfo":{"x":25,"y":25},"state":0,"viewType":"Code"}}}},"theme":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":103,"y":150}},"children":{"initialize":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":24,"y":50},"state":-1,"viewType":"Code"}},"processEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":834,"height":665},"posInfo":{"x":293,"y":99},"state":0,"viewType":"Code"}},"sectionMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":282,"height":137},"posInfo":{"x":1074,"y":25},"state":0,"viewType":"Text"}},"postProcessFile":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":580,"height":400},"posInfo":{"x":23,"y":195},"state":0,"viewType":"Code"}}}},"strings":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":92,"y":245}},"children":{"processEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":614,"height":239},"posInfo":{"x":38,"y":43},"state":0,"viewType":"Code"}},"initialize":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":76},"posInfo":{"x":34,"y":344},"state":0,"viewType":"Code"}}}},"inputColors":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":84,"y":303}},"children":{"processEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":790,"height":716},"posInfo":{"x":246,"y":31},"state":0,"viewType":"Code"}}}},"themeRules":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":93,"y":197}},"children":{"initialize":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":25,"y":25},"state":0,"viewType":"Code"}},"postProcessFile":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":576,"height":400},"posInfo":{"x":687,"y":88},"state":0,"viewType":"Code"}},"oldProcessEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":844,"height":675},"posInfo":{"x":332,"y":200},"state":0,"viewType":"Code"}},"processEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":305,"y":409},"state":0,"viewType":"Code"}}}}}},"fileType":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":235,"height":50},"posInfo":{"x":49,"y":26},"state":0,"viewType":"Text"}},"reconstructFile":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":805,"height":579},"posInfo":{"x":349,"y":76},"state":-1,"viewType":"Code"}}}},"submit":{"type":"apogeeapp.app.FolderComponent","children":{"submitControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":414,"height":305},"posInfo":{"x":19,"y":112},"state":0,"viewType":"Output"},"resource":{"html":"<textarea id=\"submit_messageInput\"></textarea><br>\n<input type=\"button\" id=\"submit_commitButton\" value=\"Commit\"></input>\n<input type=\"button\" id=\"submit_cancelButton\" value=\"Cancel\"></input>","onLoad":"this.submitButton = document.getElementById(\"submit_commitButton\");\nthis.cancelButton = document.getElementById(\"submit_cancelButton\");\nthis.messageInput = document.getElementById(\"submit_messageInput\");\nthis.initialized = true;\n\nvar instance = this;\nthis.submitButton.onclick = function() {\n    instance.onSubmit();\n}\nthis.cancelButton.onclick = function() {\n    instance.onCancel();\n}","constructorAddition":"this.messageInput = null;\nthis.submitButton = null;\nthis.cancelButton = null;\nthis.initialized = false;\n\nthis.onSubmit = function() {\n    \n    if(!this.initialized) {\n        return;\n    }\n    \n    var commitMessage = this.messageInput.value.trim();\n    if((!commitMessage)||(commitMessage.length === 0)) {\n        alert(\"You must enter a commit message!\");\n        return;\n    }\n    this.messageInput.value = \"\";\n    \n    if((!this.instructionList)||(this.instructionList.length === 0)) {\n        alert(\"There is no data to commit.\");\n        return;\n    }\n    \n    var updateInfo = [];\n    updateInfo.push([ \"commitMessage\",commitMessage]);\n    updateInfo.push([\"liveInstructionList\",this.instructionList]);\n    mode.getMessenger().compoundDataUpdate(updateInfo,true);\n}\n\nthis.onCancel = function() {\n    mode.getMessenger().dataUpdate(\"taskResults.editMetaFile\",\"\");\n}","setData":"this.instructionList = data;","css":"#submit_messageInput {\n    height: 200px;\n    width: 300px;\n}"}},"instructionList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":764,"height":489},"posInfo":{"x":509,"y":91},"state":-1,"viewType":"JSON"}},"commitResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":733,"height":438},"posInfo":{"x":512,"y":204},"state":-1,"viewType":"Formula"}},"commitMessage":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":271,"height":70},"posInfo":{"x":741,"y":243},"state":-1,"viewType":"Text"}},"liveInstructionList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":315,"height":124},"posInfo":{"x":503,"y":138},"state":-1,"viewType":"Text"}},"startCommit":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":331,"height":51},"posInfo":{"x":13,"y":0},"state":0,"viewType":"Output"},"resource":{"html":"<input type=\"button\" id=\"submit_startCommitButton\" value=\"Start Commit\"></input>\n<input type=\"button\" id=\"submit_startCommitClearButton\" value=\"Clear\"></input>","onLoad":"this.startCommitButton = document.getElementById(\"submit_startCommitButton\");\nthis.clearButton = document.getElementById(\"submit_startCommitClearButton\");\nthis.initialized = true;\n\nvar instance = this;\nthis.startCommitButton.onclick = function() {\n    instance.onStartCommit();\n}\nthis.clearButton.onclick = function() {\n    instance.onClear();\n}","constructorAddition":"this.startCommitButton = null;\nthis.clearButton = null;\nthis.data = null;\nthis.initialized = false;\n\nthis.onStartCommit = function() {\n    \n    if(!this.initialized) {\n        return;\n    }\n    \n    mode.getMessenger().dataUpdate(\"createdRecordsStructure\",this.data);\n}\n\nthis.onClear = function() {\n    mode.getMessenger().dataUpdate(\"createdRecordsStructure\",\"\");\n}","setData":"this.data = data;"}},"createdRecordsStructure":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":777,"height":645},"posInfo":{"x":522,"y":41},"state":-1,"viewType":"JSON"}},"processResult":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":610,"height":360},"posInfo":{"x":16,"y":519},"state":-1,"viewType":"Text"}},"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":1098,"height":300},"posInfo":{"x":188,"y":452},"state":0,"viewType":"Text"}}}},"CURRENT_ERRORS":{"type":"apogeeapp.app.FolderComponent","children":{"themeMapErrorMessages":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":1467,"height":532},"posInfo":{"x":13,"y":290},"state":-1,"viewType":"Text"}},"inputColorErrorMessages":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":1480,"height":296},"posInfo":{"x":63,"y":496},"state":0,"viewType":"Text"}},"stringsErrorMessages":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":1218,"height":300},"posInfo":{"x":99,"y":530},"state":-1,"viewType":"Text"}},"NOTES":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":646,"height":300},"posInfo":{"x":43,"y":24},"state":0,"viewType":"Text"}},"oldPresets_normalized":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":115,"y":412},"state":-1,"viewType":"Text"}},"newPresets_normalized":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":406,"y":415},"state":-1,"viewType":"Text"}}}}}}