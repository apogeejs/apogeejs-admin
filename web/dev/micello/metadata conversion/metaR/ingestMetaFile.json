{"fileType":"apogee workspace","jsLinks":[],"cssLinks":[],"workspace":{"fileType":"apogee workspace","version":0.2,"data":{"name":"ingestMetaFile","type":"apogee.Folder","children":{"login":{"name":"login","type":"apogee.Folder","children":{"loginUrl":{"name":"loginUrl","type":"apogee.JsonTable","updateData":{"data":"http://localhost:8080/TestAuthorization/loginjson","description":""}},"loginControl":{"name":"loginControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return loginUrl;","supplementalCode":"","description":""}},"sessionResponse":{"name":"sessionResponse","type":"apogee.JsonTable","updateData":{"data":{"sessionKey":"SESS0f6c4c2238a670b8138b63d9fd03cc22=mfrgk1ftdomp042viv8lqt5ic1","responseCode":1},"description":""}},"sessionKey":{"name":"sessionKey","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!sessionResponse) return \"\";\n\nif(sessionResponse.responseCode === 1) {\n    return sessionResponse.sessionKey;\n}\nelse {\n    throw new Error(\"Login error: \" + sessionResponse.message);\n}","supplementalCode":"","description":""}}}},"data":{"name":"data","type":"apogee.Folder","children":{"searchDef":{"name":"searchDef","type":"apogee.JsonTable","updateData":{"data":{"searchType":"table","search":{"record":"file_type"},"cascade":[{"record":"file_type","field":"file_entry_type_list"},{"record":"file_entry_type","field":"file_entry_list"}]},"description":""}},"rawRecordMap":{"name":"rawRecordMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\naddToOutput(fileEntryDownload.data.Response,output);\naddToOutput(fileEntryDownload.data.Records,output);\n\nreturn output;","supplementalCode":"function addToOutput(list,output) {\n    for(var i = 0; i < list.length; i++) {\n        var record = list[i];\n\n        var typeMap = output[record.Type];\n        if(!typeMap) {\n            typeMap = {};\n            output[record.Type] = typeMap;\n        }\n        \n        typeMap[record.Id] = record;\n    }\n}","description":""}},"getRawRecord":{"name":"getRawRecord","type":"apogee.FunctionTable","updateData":{"argList":["metaFileType","id"],"functionBody":"return rawRecordMap[metaFileType][id];","supplementalCode":"","description":""}},"fileEntryDownload":{"name":"fileEntryDownload","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return micemetarDataAccess.getCustomRequestPromise(searchDef,login.sessionKey);\n","supplementalCode":"","description":""}},"fileEntryOptionMap":{"name":"fileEntryOptionMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"output = {};\n\nvar recordList = fileEntryDownload.data.Records;\nfor(var i = 0; i < recordList.length; i++) {\n    var record = recordList[i];\n    if(record.Type == \"file_entry\") {\n        var fileEntryTypeId = record.Fields.file_entry_type_id;\n        var optionList = output[fileEntryTypeId];\n        if(!optionList) {\n            optionList = [];\n            output[fileEntryTypeId] = optionList;\n        }\n        optionList.push(record);\n    }\n}\n\nreturn output;","supplementalCode":"","description":""}},"fileTypeMap":{"name":"fileTypeMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nvar fileTypeRecordList = fileEntryDownload.data.Response;\nfor(var i = 0; i < fileTypeRecordList.length; i++) {\n    var record = fileTypeRecordList[i];\n    output[record.Fields.file_type_name] = record.Id;\n}\n\nreturn output;","supplementalCode":"","description":""}},"getFileTypeId":{"name":"getFileTypeId","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeName"],"functionBody":"return fileTypeMap[fileTypeName];","supplementalCode":"","description":""}},"getEntryTypeStringFromRecord":{"name":"getEntryTypeStringFromRecord","type":"apogee.FunctionTable","updateData":{"argList":["fileEntryTypeRecord"],"functionBody":"\nvar path = [];\nloadPathFromRecord(fileEntryTypeRecord,path);\n\nvar fileType = getFileTypeFromRecord(fileEntryTypeRecord);\n\nvar section = fileEntryTypeRecord.Fields.section;\n\nreturn getEntryTypeString(fileType,section,path);","supplementalCode":"function loadPathFromRecord(record,path) {\n    var parentId = record.Fields.entry_parent_id;\n    if(parentId) {\n        var parent = getRawRecord(\"file_entry_type\",parentId);\n        loadPathFromRecord(parent,path);\n    }\n    \n    path.push(record.Fields.entry_value);\n}\n\nfunction getFileTypeFromRecord(record) {\n    var fileTypeId = record.Fields.file_type_id;\n    var fileTypeRecord = getRawRecord(\"file_type\",fileTypeId);\n    return fileTypeRecord.Fields.file_type_name;\n}","description":""}},"getEntryTypeStringFromParent":{"name":"getEntryTypeStringFromParent","type":"apogee.FunctionTable","updateData":{"argList":["fileType","section","parentPath","value"],"functionBody":"return getEntryTypeString(fileType,section,parentPath.concat([value]));","supplementalCode":"","description":""}},"getEntryTypeString":{"name":"getEntryTypeString","type":"apogee.FunctionTable","updateData":{"argList":["fileType","section","path"],"functionBody":"return fileType + \":\" + section.join(\"|\") + \":\" + path.join(\"|\");","supplementalCode":"","description":""}},"getEntryTypeFromRefString":{"name":"getEntryTypeFromRefString","type":"apogee.FunctionTable","updateData":{"argList":["lookupString"],"functionBody":"return fileEntryTypeMap[lookupString];","supplementalCode":"","description":""}},"getEntryListFromEntryTypeId":{"name":"getEntryListFromEntryTypeId","type":"apogee.FunctionTable","updateData":{"argList":["fileEntryTypeId"],"functionBody":"return fileTypeMap[fileEntryTypeId];","supplementalCode":"","description":""}},"fileEntryTypeMap":{"name":"fileEntryTypeMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nvar fileEntryDownloadList = fileEntryDownload.data.Records;\nfor(var i = 0; i < fileEntryDownloadList.length; i++) {\n    var record = fileEntryDownloadList[i];\n    if(record.Type == \"file_entry_type\") {\n        var lookupKey = getEntryTypeStringFromRecord(record);\n        output[lookupKey] = record;\n    }\n}\n\nreturn output;","supplementalCode":"","description":""}}}},"micemetarDataAccess":{"name":"micemetarDataAccess","type":"apogee.Folder","children":{"createRecord":{"name":"createRecord","type":"apogee.FunctionTable","updateData":{"argList":["recordType","fieldMap"],"functionBody":"var record = {};\n\nrecord.Id = getId();\nrecord.Type = recordTypeName;\nrecord.Fields = fieldMap;\nrecord.read_perm = READ_PERM;\nrecord.edit_perm = EDIT_PERM;\n\nreturn record;","supplementalCode":"var READ_PERM = 2;\nvar EDIT_PERM = 15;\n\nvar nextId = -1;\n\nfunction getId() {\n    return nextId--;\n}","description":"This method creates a record given the field values and record info \nfrom the data set info. It creates and ID and uses standard permissions."}},"recordsToCreateInstructions":{"name":"recordsToCreateInstructions","type":"apogee.FunctionTable","updateData":{"argList":["recordList"],"functionBody":"var instructions = [];\n\nfor(var i = 0; i < recordList.length; i++) {\n    var createRecord = recordList[i];\n    var instruction = createCreateInstruction(createRecord);\n    instructions.push(instruction);\n}\n\nreturn instructions;","supplementalCode":"","description":"This creates a list of create instructions to go along with a list of records to be created.\n\nThere is the option to assign the ID or to leave it as undefined, in which case\nan automatically incremented ID will be assigned. (For consistency in the data\nset, either all records should be preassigned or all records should be \nautomatically assigned."}},"createCommitBody":{"name":"createCommitBody","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage"],"functionBody":"var commit = {};\nvar actions = [];\n\nif(commitMessage.length === 0) throw new Error(\"Commit message missing!\");\n\ncommit.Name = dataSetInfo.name;\ncommit.Message = commitMessage;\ncommit.Actions = actions;\n\n//single action with commits\nvar action = {};\naction.Title = \"bulk create commit\";\naction.Instr = instructionList;\nactions.push(action);\n\nreturn commit","supplementalCode":"","description":"This creates a body for a commit request, given a list of instructions and a commit message."}},"createRequestOptions":{"name":"createRequestOptions","type":"apogee.FunctionTable","updateData":{"argList":["bodyJson","sessionKey"],"functionBody":"var header = {};\nheader[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\nheader.sessionKey = sessionKey;\nheader[\"proto-version\"] = \"4.0\";\nheader[\"db-version\"] = dataSetInfo.version;\n\nrequestInfo = {};\nrequestInfo.header = header;\nif(bodyJson) {\n    requestInfo.method = \"POST\";\n    requestInfo.body = JSON.stringify(bodyJson);\n}\n\nreturn requestInfo;\n","supplementalCode":"","description":"This creates the requestOptions, suitable for apogee.net.jsonRequest, to go with an type of request to the workingset (micemetarequest) server."}},"host":{"name":"host","type":"apogee.JsonTable","updateData":{"data":"http://localhost:8080/micemetarws","description":""}},"commitUrl":{"name":"commitUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvalue = host + \"/commit\";\nreturn value;\n\n","supplementalCode":"","description":""}},"requestUrl":{"name":"requestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return host + \"/cannedsearch\";\n\n","supplementalCode":"","description":""}},"dataSetInfo":{"name":"dataSetInfo","type":"apogee.JsonTable","updateData":{"data":{"records":{"file_entry_type":{"idField":"file_entry_type_id","name":"file_entry_type","foreignList":[{"remoteRecord":"file_entry","name":"file_entry_list","isUnique":false,"remoteField":"file_entry_type_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"file_type_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileType"},{"defaultValue":null,"name":"section","nullOk":true,"fieldClass":"org.json.JSONArray"},{"defaultValue":null,"name":"entry_parent_id","nullOk":true,"fieldClass":"com.micello.micemetar.data.FileEntryType"},{"defaultValue":null,"name":"entry_type","nullOk":true,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"entry_value","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"name","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.FileEntryType"},"file_entry_relation":{"idField":"file_entry_rel_id","name":"file_entry_relation","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"file_entry_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileEntry"},{"defaultValue":null,"name":"referenced_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileEntry"},{"defaultValue":null,"name":"relation_type","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.FileEntryRelation"},"com_file_entry":{"idField":"com_file_entry_id","name":"com_file_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"com_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.ComFile"},{"defaultValue":null,"name":"meta_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"},{"defaultValue":null,"name":"file_group","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.ComFileEntry"},"file_type":{"idField":"file_type_id","name":"file_type","foreignList":[{"remoteRecord":"file_entry_type","name":"file_entry_type_list","isUnique":false,"remoteField":"file_type_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":null,"name":"file_type_name","nullOk":true,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.FileType"},"file_entry":{"idField":"file_entry_id","name":"file_entry","foreignList":[{"remoteRecord":"file_entry_relation","name":"file_entry_ref_list","isUnique":false,"remoteField":"file_entry_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"file_entry_type_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileEntryType"},{"defaultValue":null,"name":"entry_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"option_name","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"entry_data","nullOk":false,"fieldClass":"org.json.JSONObject"}],"recordClass":"com.micello.micemetar.data.FileEntry"},"recipe_entry":{"idField":"recipe_entry_id","name":"recipe_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"meta_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"},{"defaultValue":null,"name":"file_entry_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileEntry"},{"defaultValue":null,"name":"insertion_info","nullOk":true,"fieldClass":"org.json.JSONObject"}],"recordClass":"com.micello.micemetar.data.RecipeEntry"},"com_file":{"idField":"com_file_id","name":"com_file","foreignList":[{"remoteRecord":"com_file_entry","name":"com_file_entry_list","isUnique":false,"remoteField":"com_file_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":null,"name":"file_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"name","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.ComFile"},"meta_file":{"idField":"meta_file_id","name":"meta_file","foreignList":[{"remoteRecord":"recipe_entry","name":"recipe_entry_list","isUnique":false,"remoteField":"meta_file_id","restrictDelete":true,"orderField":"ordr"},{"remoteRecord":"meta_ref_entry","name":"base_file_list","isUnique":false,"remoteField":"meta_file_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":null,"name":"file_type_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileType"},{"defaultValue":null,"name":"file_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"name","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.MetaFile"},"meta_ref_entry":{"idField":"meta_ref_entry_id","name":"meta_ref_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"meta_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"},{"defaultValue":null,"name":"base_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"}],"recordClass":"com.micello.micemetar.data.MetaRefEntry"}},"name":"Micemetar","version":"5.0"},"description":""}},"version":{"name":"version","type":"apogee.JsonTable","updateData":{"data":"1.6","description":""}},"createUpdateInstruction":{"name":"createUpdateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["initialRecord","targetRecord"],"functionBody":"if(initialRecord.Id != targetRecord.Id) {\n    throw new Error(\"Record ID mismatch in create update instruction for target record: \" + getRecordErrString(targetRecord));\n}\n\nif(initialRecord.Type != targetRecord.Type) {\n    throw new Error(\"Inital and target record types do not match. Target record: \" + getRecordErrString(targetRecord));\n}\n\nvar recordsDifferent = false;\n\nvar recordInfo = getRecordInfo(initialRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Update\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = initialRecord.Id;\n\ninstruction.initialReadPerm = initialRecord.read_perm;\ninstruction.initialEditPerm = initialRecord.edit_perm;\n\nif(initialRecord.readPerm != targetRecord.readPerm) {\n    instruction.targetReadPerm = targetRecord.read_perm;\n    recordsDifferent = true;\n}\n\nif(initialRecord.editPerm != targetRecord.editPerm) {\n    instruction.targetEditPerm = targetRecord.edit_perm;\n    recordsDifferent = true;\n}\n\nvar initialData = {};\ninstruction.Initial = initialData;\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    \n    var initialValue;\n    var targetValue;\n    \n    var initialValue = initialRecord.Fields[field.name];\n    var targetValue = targetRecord.Fields[field.name];\n    \n    //validate target values\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecordInfo,createRecord.Id,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(createRecordInfo,createRecord.Id,field));\n        }\n    }\n    \n    if(!fieldsMatch(initialValue,targetValue,field)) {\n        initialData[field.name] = initialValue;\n        targetData[field.name] = targetValue;\n        recordsDifferent = true;\n    }\n}\n\nif(recordsDifferent) {\n    return instruction;\n}\nelse {\n    return null;\n}\n","supplementalCode":"function fieldsMatch(initialValue,targetValue,fieldInfo) {\n    if(fieldInfo.fieldClass === \"java.lang.String\") {\n        //compare strings with \"==\"\n        return (initialValue == targetValue);\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"java.lang\")) {\n        //compare other basic values with \"===\"\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"com.micello\")) {\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONObject\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONArray\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else {\n        throw new Error(\"unrecognized field type: \" + fieldInfo.fieldClass);\n    }\n}\n\nfunction compareJsonData(a,b) {\n    var an = apogee.util.getNormalizedObjectCopy(a);\n    var bn = apogee.util.getNormalizedObjectCopy(b);\n    var aString = JSON.stringify(an);\n    var bString = JSON.stringify(bn);\n    return aString == bString;\n}\n    ","description":"This function creates an update instruction given an initial and target record. If the records are the same then NULL is returned. (No update is needed.)"}},"createCreateInstruction":{"name":"createCreateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["createRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(createRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Create\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = createRecord.Id;\n\ninstruction.targetReadPerm = createRecord.read_perm;\ninstruction.targetEditPerm = createRecord.edit_perm;\n\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var targetValue;\n    var targetValue = createRecord.Fields[field.name];\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(createRecord,field));\n        }\n    }\n    \n    targetData[field.name] = targetValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getFieldErrString":{"name":"getFieldErrString","type":"apogee.FunctionTable","updateData":{"argList":["record","fieldInfo"],"functionBody":"return getRecordErrString(record) + \" - \" + fieldInfo.name;","supplementalCode":"","description":""}},"getRecordErrString":{"name":"getRecordErrString","type":"apogee.FunctionTable","updateData":{"argList":["record"],"functionBody":"return record.Type + \" \" + record.Id;","supplementalCode":"","description":""}},"createDeleteInstruction":{"name":"createDeleteInstruction","type":"apogee.FunctionTable","updateData":{"argList":["deleteRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(deleteRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Delete\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = deleteRecord.Id;\n\ninstruction.initialReadPerm = deleteRecord.read_perm;\ninstruction.initialEditPerm = deleteRecord.edit_perm;\n\nvar initialData = {};\ninstruction.Initial = initialData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var initialValue = deleteRecord.Fields[field.name];\n    \n    initialData[field.name] = initialValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getRecordInfo":{"name":"getRecordInfo","type":"apogee.FunctionTable","updateData":{"argList":["recordType"],"functionBody":"var recordInfo = dataSetInfo.records[recordType];\n\nif(!recordInfo) {\n    throw new Error(\"Record type not found in getRecordInfo: \" + recordType);\n}\n\nreturn recordInfo;","supplementalCode":"","description":""}},"combinedEntriesToInstructionList":{"name":"combinedEntriesToInstructionList","type":"apogee.FunctionTable","updateData":{"argList":["combinedEntries"],"functionBody":"var output = [];\nfor(var key in combinedEntries) {\n    var entry = combinedEntries[key];\n    var instruction = getInstructionForCombinedEntry(entry);\n    if(instruction) {\n        output.push(instruction);\n    }\n}\n\nreturn output;","supplementalCode":"function getInstructionForCombinedEntry(combinedEntry) {\n    var newEntry = combinedEntry.newEntry;\n    var oldEntry = combinedEntry.oldEntry;\n    \n    if(newEntry) {\n        if(!oldEntry) {\n            console.log(\"Create: \" + newEntry.Id);\n            return createCreateInstruction(newEntry);\n        }\n        else {\n            //this will return null for matching records\n            console.log(\"Update(maybe): \" + newEntry.Id);\n            return createUpdateInstruction(oldEntry,newEntry);\n        }\n    }\n    else if(oldEntry) {\n        console.log(\"Delete: \" + oldEntry.Id);\n        return createDeleteInstruction(oldEntry);\n    }\n    \n    return null;\n}\n\nfunction entriesDifferent(entry1,entry2) {\n    var string1 = JSON.stringify(apogee.util.getNormalizedCopy(entry1));\n    var string2 = JSON.stringify(apogee.util.getNormalizedCopy(entry2));\n    return (string1 == string2);\n}","description":"This function takes a combined entry map of the format:\n\n{\n  \"some-identifier\":{\n    \"oldEntry\":{original record entry, if applicable},\n    \"newEntry\":{new record entry, if applicable}\n  },\n  ...\n}\n\nIt returns an instruction list.\n\n"}},"getCommitPromise":{"name":"getCommitPromise","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage","sessionKey"],"functionBody":"var commitBody = createCommitBody(instructionList,commitMessage);\nvar requestOptions = createRequestOptions(commitBody,sessionKey);\nreturn apogee.net.jsonRequest(commitUrl,requestOptions);","supplementalCode":"","description":""}},"getRequestPromise":{"name":"getRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn apogee.net.jsonRequest(requestUrl,requestOptions);","supplementalCode":"","description":""}},"customRequestUrl":{"name":"customRequestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return host + \"/request\";","supplementalCode":"","description":""}},"getCustomRequestPromise":{"name":"getCustomRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn apogee.net.jsonRequest(customRequestUrl,requestOptions);","supplementalCode":"","description":""}}}},"inputCreate":{"name":"inputCreate","type":"apogee.Folder","children":{"fileType":{"name":"fileType","type":"apogee.JsonTable","updateData":{"data":"strings","description":""}},"inputFile":{"name":"inputFile","type":"apogee.JsonTable","updateData":{"data":{"translations":{"com_type:Academic Building":{"en":"Academic Building","ja":"学術の建物"},"com_type:Airport":{"en":"Airport","ja":"空港"},"com_type:Apartment Complex":{"en":"Apartment Complex","ja":"団地"},"com_type:Bus Station":{"en":"Bus Station","ja":"バスターミナル"},"com_type:Business Campus":{"en":"Business Campus","ja":"ビジネスキャンパス"},"com_type:Campground":{"en":"Campground","ja":"キャンプ場"},"com_type:Casino":{"en":"Casino","ja":"カジノ"},"com_type:College Campus Building":{"en":"College Campus Building","ja":"大学キャンパス構築"},"com_type:Convention Center":{"en":"Convention Center","ja":"コンベンションセンター"},"com_type:Dormitory":{"en":"Dormitory","ja":"寮"},"com_type:Government":{"en":"Government","ja":"政府"},"com_type:High School":{"en":"High School","ja":"高等学校"},"com_type:Hospital":{"en":"Hospital","ja":"病院"},"com_type:Hotel":{"en":"Hotel","ja":"ホテル"},"com_type:Industry":{"en":"Industry","ja":"産業"},"com_type:Library":{"en":"Library","ja":"図書館"},"com_type:Metro Station":{"en":"Metro Station","ja":"地下鉄"},"com_type:Museum":{"en":"Museum","ja":"博物館"},"com_type:Other":{"en":"Other","ja":"その他"},"com_type:Parking Garage":{"en":"Parking Garage","ja":"駐車場"},"com_type:Religious Building":{"en":"Religious Building","ja":"宗教建築"},"com_type:Retail":{"en":"Retail","ja":"リテール"},"com_type:School":{"en":"School","ja":"学校"},"com_type:Shopping Center":{"en":"Shopping Center","ja":"ショッピングセンター"},"com_type:Shopping Mall":{"en":"Shopping Mall","ja":"ショッピングモール"},"com_type:Sports Center":{"en":"Sports Center","ja":"スポーツセンター"},"com_type:Stadium":{"en":"Stadium","ja":"スタジアム"},"com_type:Theater":{"en":"Theater","ja":"劇場"},"com_type:Theme Park":{"en":"Theme Park","ja":"テーマパーク"},"com_type:Train Station":{"en":"Train Station","ja":"鉄道駅"},"country:AD":{"en":"Andorra","ja":"アンドラ"},"country:AE":{"en":"United Arab Emirates","ja":"United Arab Emirates"},"country:AF":{"en":"Afghanistan","ja":"アフガニスタン"},"country:AG":{"en":"Antigua and Barbuda","ja":"アンチグアバーブーダ"},"country:AI":{"en":"Anguilla","ja":"アングィラ"},"country:AL":{"en":"Albania","ja":"アルバニア"},"country:AM":{"en":"Armenia","ja":"アルメニア"},"country:AN":{"en":"Netherlands Antilles","ja":"Netherlands Antilles"},"country:AO":{"en":"Angola","ja":"アンゴラ"},"country:AQ":{"en":"Antarctica","ja":"南極大陸"},"country:AR":{"en":"Argentina","ja":"アルゼンチン"},"country:AS":{"en":"American Samoa","ja":"米サモア"},"country:AT":{"en":"Austria","ja":"オーストリア"},"country:AU":{"en":"Australia","ja":"オーストラリア"},"country:AW":{"en":"Aruba","ja":"アルバ"},"country:AX":{"en":"Aland Islands","ja":"オーランド島"},"country:AZ":{"en":"Azerbaijan","ja":"アゼルバイジャン"},"country:BA":{"en":"Bosnia and Herzegovina","ja":"ボスニア_ヘルツェゴビナ"},"country:BB":{"en":"Barbados","ja":"バルバドス"},"country:BD":{"en":"Bangladesh","ja":"バングラデシュ"},"country:BE":{"en":"Belgium","ja":"ベルギー"},"country:BF":{"en":"Burkina Faso","ja":"ブルキナファソ"},"country:BG":{"en":"Bulgaria","ja":"ブルガリア"},"country:BH":{"en":"Bahrain","ja":"バーレーン"},"country:BI":{"en":"Burundi","ja":"ブルンジ"},"country:BJ":{"en":"Benin","ja":"ベナン"},"country:BM":{"en":"Bermuda","ja":"バミューダ"},"country:BN":{"en":"Brunei Darussalam","ja":"ブルネイ_ダルサラーム国"},"country:BO":{"en":"Bolivia","ja":"ボリビア"},"country:BR":{"en":"Brazil","ja":"ブラジル"},"country:BS":{"en":"Bahamas","ja":"バハマ"},"country:BT":{"en":"Bhutan","ja":"ブータン"},"country:BV":{"en":"Bouvet Island","ja":"ブーベ島"},"country:BW":{"en":"Botswana","ja":"ボツワナ"},"country:BY":{"en":"Belarus","ja":"ベラルーシ"},"country:BZ":{"en":"Belize","ja":"ベリーズ"},"country:CA":{"en":"Canada","ja":"カナダ"},"country:CC":{"en":"Cocos (Keeling) Islands","ja":"ココス（キーリング）島"},"country:CD":{"en":"The Democratic Republic of the Congo","ja":"The Democratic Republic of the Congo"},"country:CF":{"en":"Central African Republic","ja":"中央アフリカ共和国"},"country:CG":{"en":"Congo","ja":"コンゴ"},"country:CH":{"en":"Switzerland","ja":"スイス"},"country:CI":{"en":"Cote Divoire","ja":"Cote Divoire"},"country:CK":{"en":"Cook Islands","ja":"クック島"},"country:CL":{"en":"Chile","ja":"チリ"},"country:CM":{"en":"Cameroon","ja":"カメルーン"},"country:CN":{"en":"China","ja":"中国"},"country:CO":{"en":"Colombia","ja":"コロンビア"},"country:CR":{"en":"Costa Rica","ja":"コスタリカ"},"country:CV":{"en":"Cape Verde","ja":"カーボベルデ"},"country:CX":{"en":"Christmas Island","ja":"クリスマス島"},"country:CY":{"en":"Cyprus","ja":"キプロス"},"country:CZ":{"en":"Czech Republic","ja":"Czech Republic"},"country:DE":{"en":"Germany","ja":"ドイツ"},"country:DJ":{"en":"Djibouti","ja":"ジブチ"},"country:DK":{"en":"Denmark","ja":"デンマーク"},"country:DM":{"en":"Dominica","ja":"ドミニカ"},"country:DO":{"en":"Dominican Republic","ja":"ドミニカ共和国"},"country:DZ":{"en":"Algeria","ja":"アルジェリア"},"country:EC":{"en":"Ecuador","ja":"エクアドル"},"country:EE":{"en":"Estonia","ja":"エストニア"},"country:EG":{"en":"Egypt","ja":"エジプト"},"country:EH":{"en":"Western Sahara","ja":"西サハラ"},"country:ER":{"en":"Eritrea","ja":"エリトリア"},"country:ES":{"en":"Spain","ja":"スペイン"},"country:ET":{"en":"Ethiopia","ja":"エチオピア"},"country:FI":{"en":"Finland","ja":"フィンランド"},"country:FJ":{"en":"Fiji","ja":"フィジー"},"country:FK":{"en":"Falkland Islands (Malvinas)","ja":"フォークランド島（マルビナス）"},"country:FM":{"en":"Micronesia","ja":"ミクロネシア"},"country:FO":{"en":"Faroe Islands","ja":"フェロー島"},"country:FR":{"en":"France","ja":"フランス"},"country:GA":{"en":"Gabon","ja":"ガボン"},"country:GB":{"en":"United Kingdom","ja":"イギリス"},"country:GD":{"en":"Grenada","ja":"グレナダ"},"country:GE":{"en":"Georgia","ja":"グルジア"},"country:GF":{"en":"French Guiana","ja":"フレンチギアナ"},"country:GH":{"en":"Ghana","ja":"ガーナ"},"country:GI":{"en":"Gibraltar","ja":"ジブラルタル"},"country:GL":{"en":"Greenland","ja":"グリーンランド"},"country:GM":{"en":"Gambia","ja":"ガンビア"},"country:GN":{"en":"Guinea","ja":"ギニア"},"country:GP":{"en":"Guadeloupe","ja":"グアドループ島"},"country:GQ":{"en":"Equatorial Guinea","ja":"Equatorial Guinea"},"country:GR":{"en":"Greece","ja":"ギリシャ"},"country:GT":{"en":"Guatemala","ja":"グアテマラ"},"country:GU":{"en":"Guam","ja":"グアム島"},"country:GW":{"en":"Guinea-Bissau","ja":"Guinea-Bissau"},"country:GY":{"en":"Guyana","ja":"ガイアナ"},"country:HK":{"en":"Hong Kong","ja":"香港"},"country:HM":{"en":"Heard Island and McDonald Islands","ja":"Heard Island and McDonald Islands"},"country:HN":{"en":"Honduras","ja":"ホンジュラス"},"country:HR":{"en":"Croatia","ja":"クロアチア"},"country:HT":{"en":"Haiti","ja":"ハイチ"},"country:HU":{"en":"Hungary","ja":"ハンガリー"},"country:ID":{"en":"Indonesia","ja":"インドネシア"},"country:IE":{"en":"Ireland","ja":"アイルランド"},"country:IL":{"en":"Israel","ja":"イスラエル"},"country:IN":{"en":"India","ja":"インド"},"country:IO":{"en":"British Indian Ocean Territory","ja":"イギリス領インド洋地域"},"country:IQ":{"en":"Iraq","ja":"イラク"},"country:IS":{"en":"Iceland","ja":"アイスランド"},"country:IT":{"en":"Italy","ja":"イタリア"},"country:JM":{"en":"Jamaica","ja":"ジャマイカ"},"country:JO":{"en":"Jordan","ja":"ヨルダン"},"country:JP":{"en":"Japan","ja":"日本"},"country:KE":{"en":"Kenya","ja":"ケニア"},"country:KG":{"en":"Kyrgyzstan","ja":"キルギスタン"},"country:KH":{"en":"Cambodia","ja":"カンボジア"},"country:KI":{"en":"Kiribati","ja":"キリバス"},"country:KM":{"en":"Comoros","ja":"コモロ"},"country:KN":{"en":"Saint Kitts-Nevis","ja":"セントクリストファー_ネイビス -"},"country:KR":{"en":"Korea (South)","ja":"韓国"},"country:KW":{"en":"Kuwait","ja":"クウェート"},"country:KY":{"en":"Cayman Islands","ja":"ケイマン島"},"country:KZ":{"en":"Kazakstan","ja":"カザフスタン"},"country:LA":{"en":"Laos","ja":"ラオス"},"country:LB":{"en":"Lebanon","ja":"レバノン"},"country:LC":{"en":"Saint Lucia","ja":"セントルシア"},"country:LI":{"en":"Liechtenstein","ja":"リヒテンシュタイン"},"country:LK":{"en":"Sri Lanka","ja":"スリ_ランカ"},"country:LR":{"en":"Liberia","ja":"リベリア"},"country:LS":{"en":"Lesotho","ja":"レソト"},"country:LT":{"en":"Lithuania","ja":"リトアニア"},"country:LU":{"en":"Luxembourg","ja":"ルクセンブルク"},"country:LV":{"en":"Latvia","ja":"ラトビア"},"country:LY":{"en":"Libya","ja":"リビア"},"country:MA":{"en":"Morocco","ja":"モロッコ"},"country:MC":{"en":"Monaco","ja":"モナコ"},"country:MD":{"en":"Moldova","ja":"モルドバ"},"country:MG":{"en":"Madagascar","ja":"マダガスカル"},"country:MH":{"en":"Marshall Islands","ja":"マーシャル島"},"country:MK":{"en":"Macedonia","ja":"マケドニア"},"country:ML":{"en":"Mali","ja":"マリ"},"country:MM":{"en":"Myanmar","ja":"ミャンマー"},"country:MN":{"en":"Mongolia","ja":"モンゴル国"},"country:MO":{"en":"Macau","ja":"マカオ"},"country:MQ":{"en":"Martinique","ja":"マルティニーク島"},"country:MR":{"en":"Mauritania","ja":"モーリタニア"},"country:MS":{"en":"Montserrat","ja":"モントセラト"},"country:MT":{"en":"Malta","ja":"マルタ"},"country:MU":{"en":"Mauritius","ja":"モーリシャス"},"country:MV":{"en":"Maldives","ja":"モルディブ"},"country:MW":{"en":"Malawi","ja":"マラウイ"},"country:MX":{"en":"Mexico","ja":"メキシコ"},"country:MY":{"en":"Malaysia","ja":"マレーシア"},"country:MZ":{"en":"Mozambique","ja":"モザンビーク"},"country:NA":{"en":"Namibia","ja":"ナミビア"},"country:NC":{"en":"New Caledonia","ja":"ニューカレドニア"},"country:NE":{"en":"Niger","ja":"ニジェール"},"country:NF":{"en":"Norfolk Island","ja":"ノーフォーク島"},"country:NG":{"en":"Nigeria","ja":"ナイジェリア"},"country:NI":{"en":"Nicaragua","ja":"ニカラグア"},"country:NL":{"en":"Netherlands","ja":"オランダ"},"country:NO":{"en":"Norway","ja":"ノルウェー"},"country:NP":{"en":"Nepal","ja":"ネパールl"},"country:NR":{"en":"Nauru","ja":"ナウル"},"country:NU":{"en":"Niue","ja":"ニウエ"},"country:NZ":{"en":"New Zealand","ja":"ニュージーランド"},"country:OM":{"en":"Oman","ja":"オマーン"},"country:PA":{"en":"Panama","ja":"パナマ"},"country:PE":{"en":"Peru","ja":"ペルー"},"country:PF":{"en":"French Polynesia","ja":"フランス領ポリネシア"},"country:PG":{"en":"Papua New Guinea","ja":"パプアニューギニア"},"country:PH":{"en":"Philippines","ja":"フィリピン"},"country:PK":{"en":"Pakistan","ja":"パキスタン"},"country:PL":{"en":"Poland","ja":"ポーランド"},"country:PM":{"en":"Saint Pierre and Miquelon","ja":"サンピエール島_ミクロン島"},"country:PN":{"en":"Pitcairn","ja":"ピトケアン"},"country:PR":{"en":"Puerto Rico","ja":"プエルトリコ"},"country:PS":{"en":"Palestinian Territory, Occupied","ja":"パレスチナ"},"country:PT":{"en":"Portugal","ja":"ポルトガル"},"country:PW":{"en":"Palau","ja":"パラオ"},"country:PY":{"en":"Paraguay","ja":"パラグアイ"},"country:QA":{"en":"Qatar","ja":"カタール"},"country:RE":{"en":"Reunion","ja":"再会"},"country:RO":{"en":"Romania","ja":"ルーマニア"},"country:RU":{"en":"Russian Federation","ja":"ロシア連邦"},"country:RW":{"en":"Rwanda","ja":"ルワンダ"},"country:SA":{"en":"Saudi Arabia","ja":"サウジアラビア"},"country:SB":{"en":"Solomon Islands","ja":"ソロモン島"},"country:SC":{"en":"Seychelles","ja":"セイシェル"},"country:SE":{"en":"Sweden","ja":"スウェーデン"},"country:SG":{"en":"Singapore","ja":"シンガポール"},"country:SH":{"en":"Saint Helena","ja":"セント_ヘレナ島"},"country:SI":{"en":"Slovenia","ja":"スロベニア"},"country:SJ":{"en":"Svalbard and Jan Mayen","ja":"スバールバル島ヤンマイエン島"},"country:SK":{"en":"Slovakia","ja":"スロバキア"},"country:SL":{"en":"Sierra Leone","ja":"シエラレオネ"},"country:SM":{"en":"San Marino","ja":"サン_マリノ"},"country:SN":{"en":"Senegal","ja":"セネガル"},"country:SO":{"en":"Somalia","ja":"ソマリア"},"country:SR":{"en":"Suriname","ja":"スリナム"},"country:ST":{"en":"Sao Tome and Principe","ja":"サントメプリンシペ"},"country:SV":{"en":"El Salvador","ja":"エルサルバドル"},"country:SZ":{"en":"Swaziland","ja":"スワジランド"},"country:TC":{"en":"Turks and Caicos Islands","ja":"タークス_カイコス諸島"},"country:TD":{"en":"Chad","ja":"チャド"},"country:TF":{"en":"French Southern Territories","ja":"フランス領極南島"},"country:TG":{"en":"Togo","ja":"トーゴ"},"country:TH":{"en":"Thailand","ja":"タイ"},"country:TJ":{"en":"Tajikistan","ja":"タジキスタン"},"country:TK":{"en":"Tokelau","ja":"トケラウ島"},"country:TM":{"en":"Turkmenistan","ja":"トルクメニスタン"},"country:TN":{"en":"Tunisia","ja":"チュニジア"},"country:TO":{"en":"Tonga","ja":"トンガ"},"country:TR":{"en":"Turkey","ja":"トルコ"},"country:TT":{"en":"Trinidad and Tobago","ja":"トリニダード_トバゴ"},"country:TV":{"en":"Tuvalu","ja":"ツバル"},"country:TW":{"en":"Taiwan","ja":"台湾"},"country:TZ":{"en":"Tanzania","ja":"タンザニア"},"country:UA":{"en":"Ukraine","ja":"ウクライナ"},"country:UG":{"en":"Uganda","ja":"ウガンダ"},"country:UM":{"en":"United States Minor Outlying Islands","ja":"アメリカ合衆国外島"},"country:US":{"en":"United States","ja":"米国"},"country:UY":{"en":"Uruguay","ja":"ウルグアイ"},"country:UZ":{"en":"Uzbekistan","ja":"ウズベキスタン"},"country:VC":{"en":"Saint Vincent and the Grenadines","ja":"Saint Vincent and the Grenadines"},"country:VE":{"en":"Venezuela","ja":"ベネズエラ"},"country:VG":{"en":"Virgin Islands, British","ja":"英領バージン島"},"country:VI":{"en":"Virgin Islands, US","ja":"米領バージン島"},"country:VN":{"en":"Viet Nam","ja":"ベトナム"},"country:VU":{"en":"Vanuatu","ja":"バヌアツ"},"country:WF":{"en":"Wallis and Futuna","ja":"ワリー_エ_フトゥーナ"},"country:WS":{"en":"Samoa","ja":"サモア"},"country:YE":{"en":"Yemen","ja":"イエメン"},"country:YT":{"en":"Mayotte","ja":"マヨット島"},"country:ZA":{"en":"South Africa","ja":"南アフリカ"},"country:ZM":{"en":"Zambia","ja":"ザンビア"},"country:ZW":{"en":"Zimbabwe","ja":"ジンバブエ"},"icon:ATM":{"en":"ATM","ja":"ATM"},"icon:ATM:Dollar":{"en":"ATM","ja":"ATM"},"icon:ATM:General":{"en":"ATM","ja":"ATM:General"},"icon:ATM:Yen":{"en":"ATM","ja":"ATM:Yen"},"icon:Baggage Claim":{"en":"Baggage Claim","ja":"手荷物引渡場"},"icon:Bathroom":{"en":"Bathroom","ja":"トイレ"},"icon:Bathroom M":{"en":"Men's Bathroom","ja":"男子トイレ"},"icon:Bathroom W":{"en":"Women's Bathroom","ja":"女子トイレ"},"icon:Bathroom Fam":{"en":"Family Bathroom","ja":"ファミリールーム"},"icon:Bathroom W DA":{"en":"Bathroom W DA","ja":"Bathroom W DA"},"icon:Bathroom M DA":{"en":"Bathroom M DA","ja":"Bathroom M DA"},"icon:Bathroom Fam DA":{"en":"Bathroom Fam DA","ja":"多目的トイレ"},"icon:Bathroom DA":{"en":"Bathroom DA","ja":"Bathroom DA"},"icon:Bus":{"en":"Bus","ja":"バス"},"icon:Bike Rack":{"en":"Bike Rack","ja":"バイクラック"},"icon:Car Rental":{"en":"Car Rental","ja":"レンタカー"},"icon:Changing Station":{"en":"Changing Station","ja":"オムツ替え"},"icon:Cash Register":{"en":"Cash Register","ja":"Cash Register"},"icon:Cocktails":{"en":"Cocktails","ja":"カクテル"},"icon:Coffee":{"en":"Coffee","ja":"コーヒー"},"icon:Copy/Print":{"en":"Copy/Print","ja":"Copy/Print"},"icon:Crosswalk":{"en":"Crosswalk","ja":"歩道橋"},"icon:Customs":{"en":"Customs","ja":"税関検査"},"icon:Customer Service":{"en":"Customer Service","ja":"顧客サービス"},"icon:Defibrillator":{"en":"Defibrillator","ja":"AED"},"icon:Disabled Access":{"en":"Disabled Access","ja":"車いす対応"},"icon:Elevator":{"en":"Elevator","ja":"エレベータ"},"icon:Emergency Exit":{"en":"Emergency Exit","ja":"非常口"},"icon:Escalator":{"en":"Escalator","ja":"エスカレーター"},"icon:Eyewash":{"en":"Eyewash","ja":"目薬"},"icon:Fire Extinguisher":{"en":"Fire Extinguisher","ja":"消火器"},"icon:Fire Hose":{"en":"Fire Hose","ja":"消防ホース"},"icon:Fire Pull":{"en":"Fire Pull","ja":"火災プル"},"icon:First Aid":{"en":"First Aid","ja":"救護室"},"icon:Fitness Center":{"en":"Fitness Center","ja":"フィットネスセンター"},"icon:Flight Monitor":{"en":"Flight Monitor","ja":"飛行モニター"},"icon:Food and Drink":{"en":"Food and Drink","ja":"飲食物"},"icon:Ground Transportation":{"en":"Ground Transportation","ja":"Ground Transportation"},"icon:Gym":{"en":"Gym","ja":"ジム"},"icon:Immigration and Customs":{"en":"Immigration and Customs","ja":"入国審査、税関審査"},"icon:Information":{"en":"Information","ja":"インフォメーション"},"icon:Locker":{"en":"Locker","ja":"コインロッカー"},"icon:Lost and Found":{"en":"Lost and Found","ja":"お忘れ物承り場所"},"icon:Luggage Cart":{"en":"Luggage Cart","ja":"荷物カート"},"icon:Mail":{"en":"Mail","ja":"郵便"},"icon:Massage Chair":{"en":"Massage Chair","ja":"マッサージチェア"},"icon:Medical":{"en":"Medical","ja":"医療"},"icon:Meditation Room":{"en":"Meditation Room","ja":"瞑想ルーム"},"icon:Meeting Point":{"en":"Meeting Point","ja":"打ち合わせポイント"},"icon:Money Changer":{"en":"Money Changer","ja":"マネーチェンジャー"},"icon:Movie Theater":{"en":"Movie Theater","ja":"映画館"},"icon:Moving Walkway":{"en":"Moving Walkway","ja":"動く歩道"},"icon:Passport Control":{"en":"Passport Control","ja":"Passport Control"},"icon:Paid Parking":{"en":"Paid Parking","ja":"有料駐車場"},"icon:Parking":{"en":"Parking","ja":"駐車場"},"icon:Pet Relief Area":{"en":"Pet Relief Area","ja":"ペット救済エリア"},"icon:Playground":{"en":"Playground","ja":"遊び場"},"icon:Police/Security":{"en":"Police/Security","ja":"警察／セキュリティ"},"icon:Power":{"en":"Power","ja":"電源"},"icon:Rest Area":{"en":"Rest Area","ja":"休憩所"},"icon:Restaurant":{"en":"Restaurant","ja":"レストラン"},"icon:Santa":{"en":"Santa","ja":"Santa"},"icon:Security Section":{"en":"Security Section","ja":"セキュリティ"},"icon:Shoe Shine":{"en":"Shoe Shine","ja":"靴磨き"},"icon:Shower":{"en":"Shower","ja":"シャワー"},"icon:Smoke":{"en":"Smoking Area","ja":"喫煙所"},"icon:Stairs":{"en":"Stairs","ja":"階段"},"icon:Stop Sign":{"en":"Stop Sign","ja":"停止"},"icon:Stroller":{"en":"Stroller","ja":"ベビーカー"},"icon:Taxi":{"en":"Taxi","ja":"タクシ"},"icon:Telephone":{"en":"Telephone","ja":"電話"},"icon:Ticketing, Check-in":{"en":"Ticketing, Check-in","ja":"鉄道乗車券販売"},"icon:Traffic Light":{"en":"Traffic Light","ja":"信号"},"icon:Train":{"en":"Train","ja":"電車"},"icon:Transit Hotel":{"en":"Transit Hotel","ja":"トランジットホテル"},"icon:TV":{"en":"TV","ja":"テレビ"},"icon:Valet Parking":{"en":"Valet Parking","ja":"駐車サービス"},"icon:Vending Machine":{"en":"Vending Machine","ja":"自販機"},"icon:Wheelchair Ramp":{"en":"Wheelchair Ramp","ja":"車椅子用のスロープ"},"icon:Wifi":{"en":"Wifi","ja":"Wifi"},"icon:Yield Sign":{"en":"Yield Sign","ja":"収量サイン"},"lang:ar":{"en":"Arabic","ja":"アラビア語"},"lang:da":{"en":"Danish","ja":"デンマーク語"},"lang:de":{"en":"German","ja":"ドイツ語"},"lang:en":{"en":"English","ja":"英語"},"lang:es":{"en":"Spanish","ja":"スペイン語"},"lang:fr":{"en":"French","ja":"フランス語"},"lang:gu":{"en":"Gujarati","ja":"グジャラート語"},"lang:he":{"en":"Hebrew","ja":"ヘブライ語"},"lang:hi":{"en":"Hindi","ja":"ヒンディー語"},"lang:id":{"en":"Indonesian","ja":"インドネシア語"},"lang:it":{"en":"Italian","ja":"イタリア語"},"lang:ja":{"en":"Japanese","ja":"日本語"},"lang:ko":{"en":"Korean","ja":"韓国語"},"lang:nl":{"en":"Dutch","ja":"オランダ語"},"lang:pt":{"en":"Portuguese","ja":"ポルトガル語"},"lang:ro":{"en":"Romanian","ja":"ルーマニア語"},"lang:ru":{"en":"Russian","ja":"ロシア語"},"lang:sv":{"en":"Swedish","ja":"スウェーデン語"},"lang:tr":{"en":"Turkish","ja":"トルコ語"},"lang:zh":{"en":"Chinese","ja":"中国語"},"map_type:Airport":{"en":"Airport","ja":"空港"},"map_type:Airport Terminal":{"en":"Airport Terminal","ja":"空港ターミナル"},"map_type:Casino":{"en":"Casino","ja":"カジノ"},"map_type:College Building":{"en":"College Building","ja":"カレッジビル"},"map_type:College Campus":{"en":"College Campus","ja":"大学のキャンパス"},"map_type:Convention":{"en":"Convention","ja":"コンベンション"},"map_type:Hospital":{"en":"Hospital","ja":"病院"},"map_type:Retail":{"en":"Retail","ja":"リテール"},"map_type:School Building":{"en":"School Building","ja":"校舎"},"map_type:School Campus":{"en":"School Campus","ja":"学校のキャンパス"},"map_type:Shopping Mall":{"en":"Shopping Mall","ja":"ショッピングモール"},"map_type:Station":{"en":"Station","ja":"駅"},"province:AB":{"en":"Alberta","ja":"アルバータ州"},"state:AK":{"en":"Alaska","ja":"アラスカ州"},"state:AL":{"en":"Alabama","ja":"アラバマ州"},"state:AR":{"en":"Arkansas","ja":"アーカンソー州"},"state:AZ":{"en":"Arizona","ja":"アリゾナ州"},"province:BC":{"en":"British Columbia","ja":"ブリティッシュコロンビア州"},"state:CA":{"en":"California","ja":"カリフォルニア州"},"state:CO":{"en":"Colorado","ja":"コロラド州"},"state:CT":{"en":"Connecticut","ja":"コネチカット州"},"state:DC":{"en":"District Of Columbia","ja":"コロンビア州"},"state:DE":{"en":"Delaware","ja":"デラウェア州"},"state:FL":{"en":"Florida","ja":"フロリダ州"},"state:GA":{"en":"Georgia","ja":"グルジア州"},"state:HI":{"en":"Hawaii","ja":"ハワイ"},"state:IA":{"en":"Iowa","ja":"アイオワ州"},"state:ID":{"en":"Idaho","ja":"アイダホ州"},"state:IL":{"en":"Illinois","ja":"イリノイ州"},"state:IN":{"en":"Indiana","ja":"インディアナ州"},"state:KS":{"en":"Kansas","ja":"カンザス州"},"state:KY":{"en":"Kentucky","ja":"ケンタッキー州"},"state:LA":{"en":"Louisiana","ja":"ルイジアナ州"},"state:MA":{"en":"Massachusetts","ja":"マサチューセッツ州"},"province:MB":{"en":"Manitoba","ja":"マニトバ州"},"state:MD":{"en":"Maryland","ja":"メリーランド州"},"state:ME":{"en":"Maine","ja":"メイン州"},"state:MI":{"en":"Michigan","ja":"ミシガン州"},"state:MN":{"en":"Minnesota","ja":"ミネソタ州"},"state:MO":{"en":"Missouri","ja":"ミズーリ州"},"state:MS":{"en":"Mississippi","ja":"ミシシッピー州"},"state:MT":{"en":"Montana","ja":"モンタナ州"},"province:NB":{"en":"New Brunswick","ja":"ニューブランズウィック州"},"state:NC":{"en":"North Carolina","ja":"ノースカロライナ州"},"state:ND":{"en":"North Dakota","ja":"ノースダコタ州"},"state:NE":{"en":"Nebraska","ja":"ネブラスカ州"},"state:NH":{"en":"New Hampshire","ja":"ニューハンプシャー州"},"state:NJ":{"en":"New Jersey","ja":"ニュージャージー州"},"province:NL":{"en":"Newfoundland and Labrador","ja":"ニューファンドランド_ラブラドール州"},"state:NM":{"en":"New Mexico","ja":"ニューメキシコ州"},"province:NS":{"en":"Nova Scotia","ja":"ノバスコシア州"},"territory:NSW":{"en":"New South Wales","ja":"ニューサウスウェールズ州"},"state:NV":{"en":"Nevada","ja":"ネバダ州"},"state:NY":{"en":"New York","ja":"ニューヨーク"},"state:OH":{"en":"Ohio","ja":"オハイオ州"},"state:OK":{"en":"Oklahoma","ja":"オクラホマ州"},"province:ON":{"en":"Ontario","ja":"オンタリオ州"},"state:OR":{"en":"Oregon","ja":"オレゴン州"},"state:PA":{"en":"Pennsylvania","ja":"ペンシルベニア州"},"province:PE":{"en":"Prince Edward Island","ja":"プリンスエドワードアイランド"},"province:QC":{"en":"Quebec","ja":"ケベック州"},"territory:QLD":{"en":"Queensland","ja":"クイーンズランド州"},"state:RI":{"en":"Rhode Island","ja":"ロードアイランド州"},"territory:SA":{"en":"South Australia","ja":"南オーストラリア州"},"state:SC":{"en":"South Carolina","ja":"サウスカロライナ州"},"state:SD":{"en":"South Dakota","ja":"サウスダコタ州"},"province:SK":{"en":"Saskatchewan","ja":"サスカチュワン州"},"territory:TAS":{"en":"Tasmania","ja":"タスマニア州"},"state:TN":{"en":"Tennessee","ja":"テネシー州"},"prefecture:Tokyo":{"en":"Tokyo","ja":"東京"},"state:TX":{"en":"Texas","ja":"テキサス州"},"state:UT":{"en":"Utah","ja":"ユタ州"},"state:VA":{"en":"Virginia","ja":"バージニア州"},"territory:VIC":{"en":"Victoria","ja":"ビクトリア"},"state:VT":{"en":"Vermont","ja":"バーモント州"},"state:WA":{"en":"Western Australia","ja":"西オーストラリア州"},"state:WI":{"en":"Wisconsin","ja":"ウィスコンシン州"},"state:WV":{"en":"West Virginia","ja":"ウェストバージニア州"},"state:WY":{"en":"Wyoming","ja":"ワイオミング州"}}},"description":""}},"fileTypeId":{"name":"fileTypeId","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return data.getFileTypeId(fileType);","supplementalCode":"","description":""}},"createSettings":{"name":"createSettings","type":"apogee.JsonTable","updateData":{"data":{"fileName":"Standard","fileContext":"public","entryContext":"public","entryOptionName":"Standard"},"description":""}},"preliminaryEntryList":{"name":"preliminaryEntryList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return readPreliminaryEntries[fileType](inputFile);","supplementalCode":"","description":""}},"readPreliminaryEntries":{"name":"readPreliminaryEntries","type":"apogee.Folder","children":{"theme":{"name":"theme","type":"apogee.FunctionTable","updateData":{"argList":["metaFile"],"functionBody":"var output = [];\n\nvar iurl = metaFile.iurl;\n\nfor(var sectionTag in themeSectionMap) {\n    var section = metaFile[sectionTag];\n    var sectionValue = themeSectionMap[sectionTag];\n    var nameSuffix = themeNameSuffixMap[sectionTag];\n    if(section) {\n        for(var key in section) {\n            var data = section[key];\n            \n            if((iurl)&&(sectionTag == \"i\")) {\n                data = getIconData(data,iurl);\n            }\n            \n            var entry = {};\n            entry.fileType = \"theme\";\n            entry.section = sectionValue;\n            entry.entry_value = key;\n            entry.entry_data = data;\n            entry.name = key + nameSuffix;\n            output.push(entry);\n        }\n    }\n}\n\nreturn output;","supplementalCode":"function getIconData(data,iurl) {\n    var outData = apogee.util.deepJsonCopy(data);\n    if(data.rurl) {\n        outData.url = iurl + data.rurl;\n        delete outData.rurl;\n    }\n    return outData;\n}","description":""}},"themeSectionMap":{"name":"themeSectionMap","type":"apogee.JsonTable","updateData":{"data":{"s":["style"],"m":["marker"],"i":["icon"],"l":["labelStyle"]},"description":""}},"themeMap":{"name":"themeMap","type":"apogee.FunctionTable","updateData":{"argList":["metaFile"],"functionBody":"var output = [];\n\nvar labelSectionValue = [\"label\"];\nvar labelSection = metaFile.label;\naddEntries(labelSectionValue,labelSection,getLabelEntryData,getLabelRelations,output);\n\nvar styleSectionValue = [\"style\"];\nvar styleSection = metaFile.style;\naddEntries(styleSectionValue,styleSection,getStyleEntryData,getStyleRelations,output);\n\nreturn output;","supplementalCode":"function addEntries(sectionValue,section,getEntryData,getEntryRelations,output) {\n    \n    var prioritySection;\n    var priority;\n    var fixedData;\n    \n    for(var i = 0; i < section.length; i++) {\n        prioritySection = section[i];\n        priority = prioritySection.priority;\n        \n        fixedData = {};\n        fixedData.getEntryData = getEntryData;\n        fixedData.getEntryRelations = getEntryRelations;\n        fixedData.sectionValue = sectionValue;\n        fixedData.insertionInfo = {\"priority\":priority};\n        \n        //create the parent ref\n        var parentPath = [];\n        \n        var keyList = prioritySection.ks;\n        if(keyList) {\n            addEntriesFromKeyList(keyList,parentPath,fixedData,output);\n        }\n    }\n    \n    //on the last priority section, check for a default\n    var entryData = getEntryData(prioritySection);\n    var entryRelations = getEntryRelations(prioritySection);\n    \n    if(entryData) {\n        addDefaultEntry(entryData,entryRelations,fixedData,output);\n    }\n    \n}\n\nfunction addEntriesFromKeyList(keyList,parentPath,fixedData,output) {\n    for(var i = 0; i < keyList.length; i++) {\n        var inEntry = keyList[i];\n        addKeyEntry(inEntry,parentPath,fixedData,output);\n    }\n}\n\nfunction addKeyEntry(inEntry,parentPath,fixedData,output) {\n    \n    //get the key type\n    var key;\n    var keyType;\n    if(inEntry.gk !== undefined) {\n        keyType = \"gk\";\n        keyTypeName = \"Geometry\";\n        key = inEntry.gk;\n    } \n    else if(inEntry.ek !== undefined) {\n        keyType = \"ek\";\n        keyTypeName = \"Entity\";\n        key = inEntry.ek;\n    } \n    else if(inEntry.ak !== undefined) {\n        keyType = \"ak\";\n        keyTypeName = \"Address\";\n        key = inEntry.ak;\n    } \n    \n    if(parentPath.length == 0) {\n        parentPath.push(keyType);\n    }\n    else {\n        if(parentPath[0] != keyType) {\n            //this is OK, we just don't support it for now.\n            throw new Error(\"child key type does not match parent key type - not supported in translation tool!\");\n        }\n    }\n    \n    //update the path for the children\n    var localObjectPath = parentPath.concat([key]);\n    \n    var entryData = fixedData.getEntryData(inEntry);\n    var relations = fixedData.getEntryRelations(inEntry);\n    \n    var sectionName = fixedData.sectionValue[0];\n    var name = getKeyName(localObjectPath,keyTypeName,sectionName);\n    \n    //note - entry data may be null\n    var outEntry = {};\n    outEntry.fileType = \"themeMap\";\n    outEntry.insertionInfo = fixedData.insertionInfo;\n    outEntry.section = fixedData.sectionValue;\n    outEntry.parent_path = parentPath;\n    outEntry.entry_type = \"key\";\n    outEntry.entry_value = key;\n    outEntry.name = name;\n    outEntry.entry_data = entryData;\n    if(relations) {\n        outEntry.relations = relations;\n    }\n    output.push(outEntry);\n    \n    //do the children!\n    var valueMap = inEntry.v;\n    if(valueMap) {\n        addEntriesFromValueMap(keyTypeName,valueMap,localObjectPath,fixedData,output);\n    }\n}\n\nfunction addEntriesFromValueMap(keyTypeName,valueMap,parentPath,fixedData,output) {\n for(var value in valueMap) {\n        var inEntry = valueMap[value];\n        addValueEntry(keyTypeName,value,inEntry,parentPath,fixedData,output);\n    }\n}\n\nfunction addValueEntry(keyTypeName,value,inEntry,parentPath,fixedData,output) {\n\n    //update the path for the children\n    var localObjectPath = parentPath.concat([value]);\n    \n    var entryData = fixedData.getEntryData(inEntry);\n    var relations = fixedData.getEntryRelations(inEntry);\n    \n    var sectionName = fixedData.sectionValue[0];\n    var name = getValueName(localObjectPath,keyTypeName,sectionName);\n    \n    //note = entry data may be null\n    var outEntry = {};\n    outEntry.fileType = \"themeMap\";\n    outEntry.insertionInfo = fixedData.insertionInfo;\n    outEntry.section = fixedData.sectionValue;\n    outEntry.parent_path = parentPath;\n    outEntry.entry_type = \"value\";\n    outEntry.entry_value = value;\n    outEntry.name = name;\n    outEntry.entry_data = entryData;\n    if(relations) {\n        outEntry.relations = relations;\n    }\n    output.push(outEntry);\n    \n    //do the children!\n    var keyList = inEntry.ks;\n    if(keyList) {\n        addEntriesFromKeyList(keyList,localObjectPath,fixedData,output);\n    }\n}\n\n\nfunction addDefaultEntry(entryData,entryRelations,fixedData,output) {\n    \n    //I am assuming style\n    var sectionName = fixedData.sectionValue[0];\n    if(sectionName != \"style\") throw new Error(\"Only stule default entry is supported in translator!\");\n    \n    \n    var name = \"Default Style: \" + entryData.n;\n    \n    var outEntry = {};\n    outEntry.fileType = \"themeMap\";\n    outEntry.insertionInfo = fixedData.insertionInfo;\n    outEntry.section = fixedData.sectionValue;\n    outEntry.entry_type = \"default\";\n    outEntry.entry_value = \"default\";\n    outEntry.name = name;\n    outEntry.entry_data = entryData;\n    if(entryRelations) outEntry.relations = entryRelations;\n    output.push(outEntry);\n}\n\nfunction getLabelEntryData(inEntry) {\n    var data = {};\n    var hasData = false;\n    if(inEntry.r !== undefined) {\n        data.r = inEntry.r;\n        hasData = true;\n    }\n    if(inEntry.lt !== undefined) {\n        data.lt = inEntry.lt;\n        hasData = true;\n    }\n    if(inEntry.trans !== undefined) {\n        data.trans = inEntry.trans;\n        hasData = true;\n    }\n    if(hasData) return data;    \n    else return null;\n}\nfunction getLabelRelations(inEntry) {\n    return null;\n}\nfunction getStyleEntryData(inEntry) {\n    if(inEntry.n) {\n        var data = {};\n        data.n = inEntry.n;\n        return data;\n    }\n    else {\n        return null;\n    }\n}\nfunction getStyleRelations(inEntry) {\n    if(inEntry.n) {\n        var styleName = inEntry.n;\n        objectRef = {};\n        objectRef.file = \"theme\";\n        objectRef.section = [\"style\"];\n        objectRef.path = [styleName];\n        \n        var relation = {};\n        relation.objectRef = objectRef;\n        relation.type = \"style source\";\n        return [relation];\n    }\n    else {\n        return null;\n    }\n}\n\nfunction getKeyName(objectPath,keyTypeName,sectionName) {\n    var tailPath = apogee.util.deepJsonCopy(objectPath);\n    tailPath.shift();\n    return tailPath.join(\":\") + \" \" + keyTypeName + \" Key \" + capitalizeFirstLetter(sectionName); \n}\n\nfunction getValueName(objectPath,keyTypeName,sectionName) {\n    var tailPath = apogee.util.deepJsonCopy(objectPath);\n    tailPath.shift();\n    return tailPath.join(\":\") + \" \" + keyTypeName + \" \" + capitalizeFirstLetter(sectionName);\n}","description":""}},"strings":{"name":"strings","type":"apogee.FunctionTable","updateData":{"argList":["metaFile"],"functionBody":"var output = [];\n\nfor(var key in metaFile.translations) {\n    var inEntry = metaFile.translations[key];\n    \n    var sourceRef = getSourceRefFromKey(key);\n    \n    for(var lang in inEntry) {\n        var translation = inEntry[lang];\n        \n        var name = key + \" (\" + lang.toUpperCase() + \")\";\n        \n        var relations;\n        if(sourceRef) {\n            relations = []\n            var relation = {};\n            relation.objectRef = sourceRef;\n            relation.type = \"string source\";\n            relations.push(relation);\n        }\n        \n        var outEntry = {};\n        outEntry.fileType = \"strings\";\n        outEntry.section = [lang];\n        outEntry.entry_value = key;\n        outEntry.entry_data = {\"trans\":translation};\n        outEntry.name = name;\n        if(relations) outEntry.relations = relations;\n        output.push(outEntry);\n    }\n}\n\nreturn output;","supplementalCode":"function getSourceRefFromKey(key) {\n    var sepChar = key.indexOf(\":\");\n    var keyPrefix = key.substr(0,sepChar);\n    var keySuffix = key.substr(sepChar+1);\n    \n    var objectRef = apogee.util.deepJsonCopy(stringsObjectRefMap[keyPrefix]);\n    objectRef.path.push(keySuffix);\n    return objectRef;\n}","description":""}},"inputColors":{"name":"inputColors","type":"apogee.FunctionTable","updateData":{"argList":["metaFile"],"functionBody":"var output = [];\n\nfor(var color in metaFile) {\n    var inEntry = metaFile[color];\n    \n    entryData = {};\n    entryData.props = inEntry.props;\n    if(inEntry.doLinearArea) {\n        entryData.doLinearArea = true;\n    }\n    \n    var name = createName(inEntry.props);\n    \n    var objectRef = getPresetsObjectRef(inEntry.props);\n    var relation = {};\n    relation.type = \"prop source\";\n    relation.objectRef = objectRef;\n    \n        \n    var outEntry = {};\n    outEntry.fileType = \"inputColors\";\n    outEntry.entry_value = color;\n    outEntry.entry_data = entryData;\n    outEntry.name = name;\n    outEntry.relations = [relation];\n    output.push(outEntry);\n}\n\nreturn output;","supplementalCode":"function getPresetsObjectRef(props) {\n    //I am assuming these are in order and that they give a single object\n    var objectRef = {};\n    objectRef.file = \"presets\";\n    objectRef.section = [\"property_trees\",\"geometry\"];\n    \n    var path = [\"geom_type\"]; //assume they are all under geom type\n    for(var key in props) {\n        path.push(key);\n        path.push(props[key]);\n    }\n    objectRef.path = path;\n    \n    return objectRef;\n}\n\nfunction createName(props) {\n    var name = \"\";\n    for(var key in props) {\n        if(name.length > 0) name += \":\";\n        name += key + \":\" + props[key];\n    }\n    name += \" Input Color\";\n    return name;\n}\n","description":""}},"presetOverrides":{"name":"presetOverrides","type":"apogee.FunctionTable","updateData":{"argList":["metaFile"],"functionBody":"var output = [];\n\nvar propTreeEntries = metaFile.entries;\nfor(var i = 0; i < propTreeEntries.length; i++) {\n    var inEntry = propTreeEntries[i];\n    var outEntry = getPropTreeEntry(inEntry);\n    output.push(outEntry);\n}\n\nvar namedKeyEntries = metaFile.named_keys;\nfor(var namedKey in namedKeyEntries) {\n    var inEntry = namedKeyEntries[namedKey];\n    var outEntry = getNamedKeyEntry(inEntry);\n    output.push(outEntry);\n}\n\nreturn output;","supplementalCode":"function getPropTreeEntry(inEntry) {\n    //make sure \"entry\" field is empty\n    if(!isEmpty(inEntry.entry)) {\n        throw new Error(\"Non empty child entry: \" + inEntry.value);\n    }\n    \n    outEntry = {};\n    outEntry.fileType = \"presets\";\n    outEntry.section = [\"property_trees\",inEntry.tree];\n    outEntry.parent_path = getPropsParentPath(inEntry);\n    outEntry.entry_type = inEntry.type;\n    outEntry.entry_value = inEntry.value;\n    outEntry.name = getPropName(inEntry);\n    outEntry.entry_data = {};\n    return outEntry;\n}\n\n\nfunction getNamedKeyEntry(inEntry) {\n    //make sure \"entry\" field is empty\n    if(!isEmpty(inEntry.entry)) {\n        throw new Error(\"Non empty child entry: \" + inEntry.value);\n    }\n    \n    if(inEntry.type == \"key\") {\n        throw new Error(\"Entry type key in named keys. Not supported. \");\n    }\n    \n    outEntry = {};\n    outEntry.fileType = \"presets\";\n    outEntry.section = [\"named_keys\",inEntry.name];\n    outEntry.parent_path = getNamedKeyParentPath(inEntry);\n    outEntry.entry_type = inEntry.type;\n    outEntry.entry_value = inEntry.value;\n    outEntry.name = getNamedKeyName(inEntry);\n    outEntry.entry_data = {};\n    return outEntry;\n}\n\nfunction getPropName(inEntry) {\n    var fullPath = inEntry.path.concat([inEntry.value]);\n    return fullPath.join(\":\") + \" \" + capitalizeFirstLetter(inEntry.tree) + \" Entry\";\n}\n\n\nfunction getPropsParentPath(inEntry) {\n    var path = inEntry.path;\n    \n    //we assume no new object places directly under \"geom_type\", wince that wasn't supported\n    //in the old format\n    if(inEntry.path.length > 0) {\n        var leadProp = inEntry.path[0];\n        if(isGeomTypeChild(leadProp)) {\n            var pathStart = [\"geom_type\"];\n            path = pathStart.concat(path);\n        }\n    }\n    \n    return path;\n}\n\nfunction getPathPrefix(treeName) {\n    return presetPathPrefixes[treeName];\n}\n\nfunction getNamedKeyName(inEntry) {\n    return inEntry.name + \":\" + inEntry.value + \" Named Key Entry\";\n}\n\nfunction getNamedKeyParentPath(inEntry) {\n   return inEntry.path;\n}\n\n\nfunction isEmpty(object) {\n    for(var key in object) {\n        return false;\n    }\n    return true;\n}\n\n","description":""}},"presetPathPrefixes":{"name":"presetPathPrefixes","type":"apogee.JsonTable","updateData":{"data":{"communityMap":"cmk","communityEntity":"cek","drawing":"dk","level":"lk","geometry":"gk","entity":"ek","chain":"ck","node":"nk","link":"lnk","address":"ak"},"description":""}},"stringsObjectRefMap":{"name":"stringsObjectRefMap","type":"apogee.JsonTable","updateData":{"data":{"com_type":{"file":"presets","section":["property_trees","community_map"],"path":["com_type"]},"country":{"file":"presets","section":["named_groups","postal address"],"path":["country"]},"state":{"file":"presets","section":["named_groups","postal address"],"path":["country","US"]},"province":{"file":"presets","section":["named_groups","postal address"],"path":["country","CA"]},"prefecture":{"file":"presets","section":["named_groups","postal address"],"path":["country","JP"]},"territory":{"file":"presets","section":["named_groups","postal address"],"path":["country","AU"]},"icon":{"file":"theme","section":["icon"],"path":[]},"lang":{"file":"presets","section":["named_keys","lang"],"path":["lang"]},"map_type":{"file":"presets","section":["property_trees","drawing"],"path":["map_type"]}},"description":""}},"themeNameSuffixMap":{"name":"themeNameSuffixMap","type":"apogee.JsonTable","updateData":{"data":{"s":" Style","m":" Marker","i":" Icon","l":" Label Style"},"description":""}},"geomTypeCludgeMap":{"name":"geomTypeCludgeMap","type":"apogee.JsonTable","updateData":{"data":{"area":true,"barrier":true,"equipment":true,"facility":true,"fixture":true,"furnishing":true,"marker":true,"meta":true,"object":true,"recreation":true,"safety":true,"service":true,"sign":true,"signal":true,"structure":true,"traffic":true,"transit":true,"vegetation":true,"vehicle":true,"water":true},"description":""}},"isGeomTypeChild":{"name":"isGeomTypeChild","type":"apogee.FunctionTable","updateData":{"argList":["key"],"functionBody":"return geomTypeCludgeMap[key];","supplementalCode":"","description":""}},"capitalizeFirstLetter":{"name":"capitalizeFirstLetter","type":"apogee.FunctionTable","updateData":{"argList":["word"],"functionBody":"return word.substr(0,1).toUpperCase() + word.substr(1);","supplementalCode":"","description":""}}}},"createdRecordsStructure":{"name":"createdRecordsStructure","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nvar metaFile = getMetaFile();\noutput.metaFile = metaFile;\n\nvar entryList = [];\noutput.entryList = entryList;\n\nvar msgList = [];\noutput.messages = msgList;\n\nvar createdFileTypeEntries = {};\nvar createdFileEntriesAsLists = {};\n\nvar inputList = preliminaryEntryList;\nfor(var i = 0; i < inputList.length; i++) {\n    var prelimEntry = inputList[i];\n    \n    //--------------------\n    //lookup the file entry type and the file entry\n    //-------------------\n    var fileTypeEntry = getFileTypeEntry(prelimEntry,createdFileTypeEntries,msgList);\n    \n    var fileEntry = getFileEntry(prelimEntry,fileTypeEntry,createdFileEntriesAsLists,msgList);\n    \n    //-------------------------------------\n    //lookup relations data where needed\n    //maybe this is a check on an existing entry, or maybe only if we new to contruct the entry.\n    //--------------------------------------\n    var outRelations = getRelations(prelimEntry,fileEntry,msgList);\n    \n    //------------------------\n    //creat the recipe entry\n    //------------------------\n    var recipeEntry = getRecipeEntry(prelimEntry,metaFile,fileEntry,msgList);\n    \n    //some out entry object to look at\n    var outEntry = {};\n    outEntry.prelimEntry = prelimEntry;\n    outEntry.fileTypeEntry = fileTypeEntry;\n    outEntry.fileEntry = fileEntry;\n    if(outRelations) outEntry.relations = outRelations;\n    entryList.push(outEntry);\n}\n\nreturn output;","supplementalCode":"/** This method creates a meta file record. */\nfunction getMetaFile() {\n    var metaFields = {};\n    metaFields.file_type_id = fileTypeId;\n    metaFields.file_context = createSettings.fileContext;\n    metaFields.name = createSettings.fileName;\n    \n    return micemetarDataAccess.createRecord(\"meta_file\",metaFields);\n}\n\n/** This looks up a file type entry. If it is not present it creats a new one. */\nfunction getFileTypeEntry(prelimEntry,createdFileTypeEntries,msgList) {\n    var fileType = prelimEntry.fileType;\n    \n    var section = prelimEntry.section;\n    if(!section) section = [];\n    \n    var parentPath = prelimEntry.parent_path;\n    if(!parentPath) parentPath = [];\n    \n    var value = prelimEntry.entry_value;\n    \n    var lookupKey = data.getEntryTypeStringFromParent(fileType,section,parentPath,value);\n    var fileEntryType = localGetEntryTypeFromRefString(lookupKey,createdFileTypeEntries);\n    \n    var parentFileEntryType\n    if(parentPath.length > 1) {\n        var parentLookupKey = data.getEntryTypeString(fileType,section,parentPath);\n        parentFileEntryType = localGetEntryTypeFromRefString(parentLookupKey,createdFileTypeEntries);\n        if(!parentFileEntryType) {\n            addMessage(\"ERROR: parent not found: \" + parentLookupKey,msgList);\n        }\n    }\n    \n    if(!fileEntryType) {\n        var fields = {};\n        fields.file_type_id = fileTypeId;\n        fields.section = prelimEntry.section;\n        if(parentFileEntryType) fields.entry_parent_id = parentFileEntryType.Id;\n        if(prelimEntry.entry_type) fields.entry_type = prelimEntry.entry_type;\n        fields.entry_value = prelimEntry.entry_value;\n        fields.name = prelimEntry.name;\n        fields.ordr = order;\n    \n        fileEntryType = micemetarDataAccess.createRecord(\"file_entry_type\",fields);\n        \n        //store this in our created table, for future lookup\n        createdFileTypeEntries[lookupKey] = fileEntryType;\n    }\n    \n    return fileEntryType;\n}\n\n/** This method gets the file entry type using the lookup key checking both the locally\n * created records and the pre-existing recordss. */\nfunction localGetEntryTypeFromRefString(lookupKey,createdFileTypeEntries) {\n    var fileEntryType = createdFileTypeEntries[lookupKey];\n    if(fileEntryType) return fileEntryType;\n    \n    return data.getEntryTypeFromRefString(lookupKey);\n}\n\n\n/** THis method looksup a file entry. If the file entry is not available a \n * new one is created. */\nfunction getFileEntry(prelimEntry,fileEntryType,createdFileEntriesAsLists,msgList) {\n    var fileEntry;\n    var entryData = prelimEntry.entry_data;\n    var fileEntries = localGetEntryListFromEntryTypeId(fileEntryType.Id,createdFileEntriesAsLists);\n    if(fileEntries) {\n        for(var i = 0; i < fileEntries.length; i++) {\n            fileEntry = fileEntries[i];\n            if(jsonObjectsMatch(entryData,fileEntry.Fields.entry_data)) {\n                return fileEntry;\n            }\n        }\n    }\n    \n    //if we get here the entry was not found\n    var fields = {};\n    fields.file_entry_type_id = fileEntryType.Id;\n    fields.entry_context = createSettings.entryContext;\n    fields.option_name = createSettings.entryOptionName;\n    fields.ordr = order;\n    fields.entry_data = prelimEntry.entry_data;\n    \n    fileEntry = micemetarDataAccess.createRecord(\"file_entry\",fields);\n    \n    //store this in our created table, for future lookup\n    var fileEntries = createdFileEntriesAsLists[fileEntryType.Id];\n    if(!fileEntries) {\n        fileEntries = [];\n        createdFileEntriesAsLists[fileEntryType.Id] = fileEntries;\n    }\n    fileEntries.push(fileEntry);\n    \n    return fileEntry;\n}\n\n/** This method looks up the file entry list from the created record list and from \n * the pre-existing records. */\nfunction localGetEntryListFromEntryTypeId(fileEntryTypeId,createdFileEntriesAsLists) {\n    var list = createdFileEntriesAsLists[fileEntryTypeId];\n    if(list) return list;\n    \n    return data.getEntryListFromEntryTypeId(fileEntryTypId);\n}\n\n/** This method returns true if the two jsons match. */\nfunction jsonObjectsMatch(a,b) {\n    return (JSON.stringify(getNormalizedCopy(a)) == JSON.stringify(getNormalizedCopy(b)));\n}\n\nfunction getRelations(prelimEntry,fileEntry,msgList) {\n    if(prelimEntry.relations) {\n        var outRelations = [];\n        for(var ir = 0; ir < prelimEntry.relations.length; ir++) {\n            var relation = prelimEntry.relations[ir];\n            \n            var objectRef = relation.objectRef;\n            var lookupKey = data.getEntryTypeString(objectRef.file,objectRef.section,objectRef.path);\n            var fileEntryType = data.getEntryTypeFromRefString(lookupKey);\n            \n            if(fileEntryType) {\n                var fields = {};\n                fields.file_entry_id = fileEntry.Id;\n                fields.referenced_id = fileEntryType.Id;\n                fields.relation_type = relation.type;\n                fields.ordr = order;\n                \n                var outRelation = micemetarDataAccess.createRecord(\"file_entry_relation\",fields);\n                outRelations.push(outRelation);\n            }\n            else {\n                addMessage(\"ERROR: relation object not found: \" + JSON.stringify(relation),msgList);\n            }\n        }\n        return outRelations;\n    }\n    else {\n        return null;\n    }\n}\n\nfunction getRecipeEntry(prelimEntry,metaFileEntry,fileEntry,order) {\n    var fields = {};\n    fields.meta_file_id = metaFileEntry.Id;\n    fields.file_entry_id = fileEntry.Id;\n    fields.insertion_info = prelimEntry.insertionInfo;\n    fields.ordr = order;\n    \n    return micemetarDataAccess.createRecord(\"recipe_entry\",fields);\n}\n\nfunction addMessage(msg,msgList) {\n    msgList.push(msg);\n}","description":""}}}}}}},"components":{"login":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":25,"y":25}},"children":{"loginUrl":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":463,"height":106},"posInfo":{"x":27,"y":42},"state":0,"viewType":"Text"}},"loginControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":343,"height":101},"posInfo":{"x":32,"y":183},"state":0,"viewType":"Output"},"resource":{"html":"","css":"","setData":"this.loginUrl = data;","constructorAddition":"\n\n//this uses the updated version of test authorization that takes and returns a JSON\nthis.onClick = function() {\n    \n    //get the output table\n    var outputTableName = \"sessionResponse\";\n    var fromMember = mode.getMember();\n    \n    //on click\n    var bodyJson = {};\n    bodyJson.userName = resource.userInput.value;\n    bodyJson.password = resource.passwordInput.value;\n    \n    //cleaer password field\n    resource.passwordInput.value = \"\";\n    \n    var options = {};\n    options.body = JSON.stringify(bodyJson);\n    options.method = \"POST\";\n    \n    var requestPromise = apogee.net.jsonRequest(this.loginUrl,options);\n    apogee.action.asynchDataUpdate(outputTableName,fromMember,requestPromise);\n}","init":"\nvar label1 = document.createElement(\"label\");\nlabel1.for = \"userInput\";\nlabel1.innerHTML = \"User:\"\nelement.appendChild(label1);\n\nvar input1 = document.createElement(\"input\");\ninput1.id = \"userInput\";\nresource.userInput = input1;\nelement.appendChild(input1);\n\nelement.appendChild(document.createElement(\"br\"));\n\nvar label2 = document.createElement(\"label\");\nlabel2.for = \"passwordInput\";\nlabel2.innerHTML = \"Password:\"\nelement.appendChild(label2);\n\nvar input2 = document.createElement(\"input\");\ninput2.type = \"password\";\ninput2.id = \"passwordInput\";\nresource.passwordInput = input2;\nelement.appendChild(input2);\n\nelement.appendChild(document.createElement(\"br\"));\n\nvar button = document.createElement(\"button\");\nbutton.innerHTML = \"Login\";\nelement.appendChild(button);\n\nvar instance = this;\nbutton.onclick = function() {\n    instance.onClick();\n}\n\n\n"}},"sessionResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":697,"height":158},"posInfo":{"x":34,"y":340},"state":0,"viewType":"Text"}},"sessionKey":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":587,"height":167},"posInfo":{"x":41,"y":550},"state":0,"viewType":"Text"}}}},"data":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":61,"y":111}},"children":{"searchDef":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":540,"height":402},"posInfo":{"x":45,"y":118},"state":-1,"viewType":"Text"}},"rawRecordMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":495,"height":261},"posInfo":{"x":738,"y":61},"state":-1,"viewType":"Formula"}},"getRawRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":28},"posInfo":{"x":365,"y":66},"state":-1,"viewType":"Code"}},"fileEntryDownload":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":507,"height":322},"posInfo":{"x":47,"y":182},"state":-1,"viewType":"JSON"}},"fileEntryOptionMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":635,"height":442},"posInfo":{"x":911,"y":463},"state":-1,"viewType":"Formula"}},"fileTypeMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":305,"height":180},"posInfo":{"x":796,"y":579},"state":-1,"viewType":"Formula"}},"getFileTypeId":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":42},"posInfo":{"x":351,"y":577},"state":-1,"viewType":"Code"}},"getEntryTypeStringFromRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":672,"height":382},"posInfo":{"x":363,"y":313},"state":-1,"viewType":"Code"}},"getEntryTypeStringFromParent":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":546,"height":43},"posInfo":{"x":363,"y":265},"state":-1,"viewType":"Code"}},"getEntryTypeString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":553,"height":37},"posInfo":{"x":365,"y":221},"state":-1,"viewType":"Code"}},"getEntryTypeFromRefString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":589,"height":301},"posInfo":{"x":362,"y":364},"state":-1,"viewType":"Code"}},"getEntryListFromEntryTypeId":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":347,"y":462},"state":-1,"viewType":"Code"}},"fileEntryTypeMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":724,"height":636},"posInfo":{"x":907,"y":371},"state":-1,"viewType":"Text"}}}},"micemetarDataAccess":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":95,"y":168}},"children":{"createRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":560,"height":321},"posInfo":{"x":33,"y":368},"state":-1,"viewType":"Code"}},"recordsToCreateInstructions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":834,"height":391},"posInfo":{"x":30,"y":472},"state":-1,"viewType":"Code"}},"createCommitBody":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":568,"height":400},"posInfo":{"x":629,"y":225},"state":-1,"viewType":"Code"}},"createRequestOptions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":523,"height":254},"posInfo":{"x":822,"y":379},"state":-1,"viewType":"Code"}},"host":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":353,"height":71},"posInfo":{"x":16,"y":6},"state":-1,"viewType":"Text"}},"commitUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":433,"height":107},"posInfo":{"x":14,"y":98},"state":-1,"viewType":"Text"}},"requestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":450,"height":68},"posInfo":{"x":14,"y":57},"state":-1,"viewType":"Formula"}},"dataSetInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":882,"height":611},"posInfo":{"x":28,"y":622},"state":-1,"viewType":"Text"}},"version":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":197,"height":91},"posInfo":{"x":523,"y":367},"state":0,"viewType":"Text"}},"createUpdateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":886,"height":655},"posInfo":{"x":36,"y":248},"state":-1,"viewType":"Code"}},"createCreateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":994,"height":643},"posInfo":{"x":35,"y":209},"state":-1,"viewType":"Code"}},"getFieldErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":512,"height":68},"posInfo":{"x":761,"y":616},"state":-1,"viewType":"Code"}},"getRecordErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":81},"posInfo":{"x":762,"y":664},"state":-1,"viewType":"Code"}},"createDeleteInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":678,"height":540},"posInfo":{"x":36,"y":289},"state":-1,"viewType":"Code"}},"getRecordInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":480,"height":400},"posInfo":{"x":818,"y":427},"state":-1,"viewType":"Code"}},"combinedEntriesToInstructionList":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":721,"height":524},"posInfo":{"x":31,"y":516},"state":-1,"viewType":"Private"}},"getCommitPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":569,"height":109},"posInfo":{"x":565,"y":40},"state":-1,"viewType":"Code"}},"getRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":546,"height":89},"posInfo":{"x":563,"y":90},"state":-1,"viewType":"Code"}},"customRequestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":17,"y":142},"state":-1,"viewType":"Formula"}},"getCustomRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":668,"height":88},"posInfo":{"x":564,"y":134},"state":-1,"viewType":"Code"}}}},"inputCreate":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":165,"y":65}},"children":{"fileType":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":215,"height":37},"posInfo":{"x":29,"y":23},"state":0,"viewType":"Text"}},"inputFile":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":514,"height":300},"posInfo":{"x":27,"y":214},"state":0,"viewType":"Text"}},"fileTypeId":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":218,"height":32},"posInfo":{"x":28,"y":113},"state":0,"viewType":"Text"}},"createSettings":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":310,"height":106},"posInfo":{"x":344,"y":12},"state":0,"viewType":"Text"}},"preliminaryEntryList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":728,"height":599},"posInfo":{"x":181,"y":375},"state":0,"viewType":"JSON"}},"readPreliminaryEntries":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":804,"y":13}},"children":{"theme":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":552,"height":470},"posInfo":{"x":36,"y":74},"state":-1,"viewType":"Code"}},"themeSectionMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":208},"posInfo":{"x":752,"y":7},"state":-1,"viewType":"Text"}},"themeMap":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":944,"height":660},"posInfo":{"x":93,"y":359},"state":-1,"viewType":"Private"}},"strings":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":747,"height":504},"posInfo":{"x":47,"y":193},"state":0,"viewType":"Code"}},"inputColors":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":626,"height":479},"posInfo":{"x":491,"y":216},"state":0,"viewType":"Code"}},"presetOverrides":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":770,"height":677},"posInfo":{"x":34,"y":29},"state":-1,"viewType":"Private"}},"presetPathPrefixes":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":545,"height":300},"posInfo":{"x":764,"y":118},"state":-1,"viewType":"Form"}},"stringsObjectRefMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":664,"height":590},"posInfo":{"x":799,"y":133},"state":0,"viewType":"Text"}},"themeNameSuffixMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":104},"posInfo":{"x":755,"y":49},"state":-1,"viewType":"Text"}},"geomTypeCludgeMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":302,"height":340},"posInfo":{"x":763,"y":289},"state":-1,"viewType":"Text"}},"isGeomTypeChild":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":764,"y":330},"state":-1,"viewType":"Code"}},"capitalizeFirstLetter":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":764,"y":372},"state":-1,"viewType":"Code"}}}},"createdRecordsStructure":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":888,"height":660},"posInfo":{"x":386,"y":31},"state":0,"viewType":"Text"}}}}}}