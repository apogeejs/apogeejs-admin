{"fileType":"apogee workspace","jsLinks":[],"cssLinks":[],"workspace":{"fileType":"apogee workspace","version":0.2,"data":{"name":"ingestMetaFile","type":"apogee.Folder","children":{"login":{"name":"login","type":"apogee.Folder","children":{"loginUrl":{"name":"loginUrl","type":"apogee.JsonTable","updateData":{"data":"http://localhost:8080/TestAuthorization/loginjson","description":""}},"loginControl":{"name":"loginControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return loginUrl;","supplementalCode":"","description":""}},"sessionResponse":{"name":"sessionResponse","type":"apogee.JsonTable","updateData":{"data":{"sessionKey":"SESS0f6c4c2238a670b8138b63d9fd03cc22=mfrgk1ftdomp042viv8lqt5ic1","responseCode":1},"description":""}},"sessionKey":{"name":"sessionKey","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!sessionResponse) return \"\";\n\nif(sessionResponse.responseCode === 1) {\n    return sessionResponse.sessionKey;\n}\nelse {\n    throw new Error(\"Login error: \" + sessionResponse.message);\n}","supplementalCode":"","description":""}}}},"data":{"name":"data","type":"apogee.Folder","children":{"searchDef":{"name":"searchDef","type":"apogee.JsonTable","updateData":{"data":{"searchType":"table","search":{"record":"file_type"},"cascade":[{"record":"file_type","field":"file_entry_type_list"},{"record":"file_entry_type","field":"file_entry_list"}]},"description":""}},"rawRecordMap":{"name":"rawRecordMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\naddToOutput(fileEntryDownload.data.Response,output);\naddToOutput(fileEntryDownload.data.Records,output);\n\nreturn output;","supplementalCode":"function addToOutput(list,output) {\n    for(var i = 0; i < list.length; i++) {\n        var record = list[i];\n\n        var typeMap = output[record.Type];\n        if(!typeMap) {\n            typeMap = {};\n            output[record.Type] = typeMap;\n        }\n        \n        typeMap[record.Id] = record;\n    }\n}","description":""}},"getRawRecord":{"name":"getRawRecord","type":"apogee.FunctionTable","updateData":{"argList":["metaFileType","id"],"functionBody":"return rawRecordMap[metaFileType][id];","supplementalCode":"","description":""}},"fileEntryDownload":{"name":"fileEntryDownload","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return micemetarDataAccess.getCustomRequestPromise(searchDef,login.sessionKey);\n","supplementalCode":"","description":""}},"fileEntryOptionMap":{"name":"fileEntryOptionMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"output = {};\n\nvar recordList = fileEntryDownload.data.Records;\nfor(var i = 0; i < recordList.length; i++) {\n    var record = recordList[i];\n    if(record.Type == \"file_entry\") {\n        var fileEntryTypeId = record.Fields.file_entry_type_id;\n        var optionList = output[fileEntryTypeId];\n        if(!optionList) {\n            optionList = [];\n            output[fileEntryTypeId] = optionList;\n        }\n        optionList.push(record);\n    }\n}\n\nreturn output;","supplementalCode":"","description":""}},"fileTypeMap":{"name":"fileTypeMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nvar byName = {};\nvar byId = {}\n\nvar fileTypeRecordList = fileEntryDownload.data.Response;\nfor(var i = 0; i < fileTypeRecordList.length; i++) {\n    var record = fileTypeRecordList[i];\n    byName[record.Fields.file_type_name] = record.Id;\n    byId[record.Id] = record.Fields.file_type_name;\n}\n\noutput.byName = byName;\noutput.byId = byId;\n\nreturn output;","supplementalCode":"","description":""}},"getFileTypeId":{"name":"getFileTypeId","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeName"],"functionBody":"return fileTypeMap.byName[fileTypeName];","supplementalCode":"","description":""}},"getEntryTypeStringFromRecord":{"name":"getEntryTypeStringFromRecord","type":"apogee.FunctionTable","updateData":{"argList":["fileEntryTypeRecord"],"functionBody":"\nvar path = [];\nloadPathFromRecord(fileEntryTypeRecord,path);\n\nvar fileType = getFileTypeFromRecord(fileEntryTypeRecord);\n\nvar section = fileEntryTypeRecord.Fields.section;\n\nreturn getEntryTypeString(fileType,section,path);","supplementalCode":"function loadPathFromRecord(record,path) {\n    var parentId = record.Fields.entry_parent_id;\n    if(parentId) {\n        var parent = getRawRecord(\"file_entry_type\",parentId);\n        loadPathFromRecord(parent,path);\n    }\n    \n    path.push(record.Fields.entry_value);\n}\n\nfunction getFileTypeFromRecord(record) {\n    var fileTypeId = record.Fields.file_type_id;\n    var fileTypeRecord = getRawRecord(\"file_type\",fileTypeId);\n    return fileTypeRecord.Fields.file_type_name;\n}","description":""}},"getEntryTypeStringFromParent":{"name":"getEntryTypeStringFromParent","type":"apogee.FunctionTable","updateData":{"argList":["fileType","section","parentPath","value"],"functionBody":"return getEntryTypeString(fileType,section,parentPath.concat([value]));","supplementalCode":"","description":""}},"getEntryTypeString":{"name":"getEntryTypeString","type":"apogee.FunctionTable","updateData":{"argList":["fileType","section","path"],"functionBody":"return fileType + \":\" + section.join(\"|\") + \":\" + path.join(\"|\");","supplementalCode":"","description":""}},"getEntryTypeFromRefString":{"name":"getEntryTypeFromRefString","type":"apogee.FunctionTable","updateData":{"argList":["lookupString"],"functionBody":"return fileEntryTypeMap[lookupString];","supplementalCode":"","description":""}},"getEntryListFromEntryTypeId":{"name":"getEntryListFromEntryTypeId","type":"apogee.FunctionTable","updateData":{"argList":["fileEntryTypeId"],"functionBody":"return fileTypeMap[fileEntryTypeId];","supplementalCode":"","description":""}},"fileEntryTypeMap":{"name":"fileEntryTypeMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nvar fileEntryDownloadList = fileEntryDownload.data.Records;\nfor(var i = 0; i < fileEntryDownloadList.length; i++) {\n    var record = fileEntryDownloadList[i];\n    if(record.Type == \"file_entry_type\") {\n        var lookupKey = getEntryTypeStringFromRecord(record);\n        output[lookupKey] = record;\n    }\n}\n\nreturn output;","supplementalCode":"","description":""}},"getFileTypeName":{"name":"getFileTypeName","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeId"],"functionBody":"return fileTypeMap.byId[fileTypeId];","supplementalCode":"","description":""}}}},"micemetarDataAccess":{"name":"micemetarDataAccess","type":"apogee.Folder","children":{"createRecord":{"name":"createRecord","type":"apogee.FunctionTable","updateData":{"argList":["recordType","fieldMap"],"functionBody":"var record = {};\n\nrecord.Id = getId();\nrecord.Type = recordTypeName;\nrecord.Fields = fieldMap;\nrecord.read_perm = READ_PERM;\nrecord.edit_perm = EDIT_PERM;\n\nreturn record;","supplementalCode":"var READ_PERM = 2;\nvar EDIT_PERM = 15;\n\nvar nextId = -1;\n\nfunction getId() {\n    return nextId--;\n}","description":"This method creates a record given the field values and record info \nfrom the data set info. It creates and ID and uses standard permissions."}},"recordsToCreateInstructions":{"name":"recordsToCreateInstructions","type":"apogee.FunctionTable","updateData":{"argList":["recordList"],"functionBody":"var instructions = [];\n\nfor(var i = 0; i < recordList.length; i++) {\n    var createRecord = recordList[i];\n    var instruction = createCreateInstruction(createRecord);\n    instructions.push(instruction);\n}\n\nreturn instructions;","supplementalCode":"","description":"This creates a list of create instructions to go along with a list of records to be created.\n\nThere is the option to assign the ID or to leave it as undefined, in which case\nan automatically incremented ID will be assigned. (For consistency in the data\nset, either all records should be preassigned or all records should be \nautomatically assigned."}},"createCommitBody":{"name":"createCommitBody","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage"],"functionBody":"var commit = {};\nvar actions = [];\n\nif(commitMessage.length === 0) throw new Error(\"Commit message missing!\");\n\ncommit.Name = dataSetInfo.name;\ncommit.Message = commitMessage;\ncommit.Actions = actions;\n\n//single action with commits\nvar action = {};\naction.Title = \"bulk create commit\";\naction.Instr = instructionList;\nactions.push(action);\n\nreturn commit","supplementalCode":"","description":"This creates a body for a commit request, given a list of instructions and a commit message."}},"createRequestOptions":{"name":"createRequestOptions","type":"apogee.FunctionTable","updateData":{"argList":["bodyJson","sessionKey"],"functionBody":"var header = {};\nheader[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\nheader.sessionKey = sessionKey;\nheader[\"proto-version\"] = \"4.0\";\nheader[\"db-version\"] = dataSetInfo.version;\n\nrequestInfo = {};\nrequestInfo.header = header;\nif(bodyJson) {\n    requestInfo.method = \"POST\";\n    requestInfo.body = JSON.stringify(bodyJson);\n}\n\nreturn requestInfo;\n","supplementalCode":"","description":"This creates the requestOptions, suitable for apogee.net.jsonRequest, to go with an type of request to the workingset (micemetarequest) server."}},"host":{"name":"host","type":"apogee.JsonTable","updateData":{"data":"http://localhost:8080/micemetarws","description":""}},"commitUrl":{"name":"commitUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvalue = host + \"/commit\";\nreturn value;\n\n","supplementalCode":"","description":""}},"requestUrl":{"name":"requestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return host + \"/cannedsearch\";\n\n","supplementalCode":"","description":""}},"dataSetInfo":{"name":"dataSetInfo","type":"apogee.JsonTable","updateData":{"data":{"records":{"file_entry_type":{"idField":"file_entry_type_id","name":"file_entry_type","foreignList":[{"remoteRecord":"file_entry","name":"file_entry_list","isUnique":false,"remoteField":"file_entry_type_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"file_type_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileType"},{"defaultValue":null,"name":"section","nullOk":true,"fieldClass":"org.json.JSONArray"},{"defaultValue":null,"name":"entry_parent_id","nullOk":true,"fieldClass":"com.micello.micemetar.data.FileEntryType"},{"defaultValue":null,"name":"entry_type","nullOk":true,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"entry_value","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"name","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.FileEntryType"},"file_entry_relation":{"idField":"file_entry_rel_id","name":"file_entry_relation","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"file_entry_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileEntry"},{"defaultValue":null,"name":"referenced_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileEntry"},{"defaultValue":null,"name":"relation_type","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.FileEntryRelation"},"com_file_entry":{"idField":"com_file_entry_id","name":"com_file_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"com_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.ComFile"},{"defaultValue":null,"name":"meta_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"},{"defaultValue":null,"name":"file_group","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.ComFileEntry"},"file_type":{"idField":"file_type_id","name":"file_type","foreignList":[{"remoteRecord":"file_entry_type","name":"file_entry_type_list","isUnique":false,"remoteField":"file_type_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":null,"name":"file_type_name","nullOk":true,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.FileType"},"file_entry":{"idField":"file_entry_id","name":"file_entry","foreignList":[{"remoteRecord":"file_entry_relation","name":"file_entry_ref_list","isUnique":false,"remoteField":"file_entry_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"file_entry_type_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileEntryType"},{"defaultValue":null,"name":"entry_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"option_name","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"entry_data","nullOk":false,"fieldClass":"org.json.JSONObject"}],"recordClass":"com.micello.micemetar.data.FileEntry"},"recipe_entry":{"idField":"recipe_entry_id","name":"recipe_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"meta_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"},{"defaultValue":null,"name":"file_entry_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileEntry"},{"defaultValue":null,"name":"insertion_info","nullOk":true,"fieldClass":"org.json.JSONObject"}],"recordClass":"com.micello.micemetar.data.RecipeEntry"},"com_file":{"idField":"com_file_id","name":"com_file","foreignList":[{"remoteRecord":"com_file_entry","name":"com_file_entry_list","isUnique":false,"remoteField":"com_file_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":null,"name":"file_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"name","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.ComFile"},"meta_file":{"idField":"meta_file_id","name":"meta_file","foreignList":[{"remoteRecord":"recipe_entry","name":"recipe_entry_list","isUnique":false,"remoteField":"meta_file_id","restrictDelete":true,"orderField":"ordr"},{"remoteRecord":"meta_ref_entry","name":"base_file_list","isUnique":false,"remoteField":"meta_file_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":null,"name":"file_type_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileType"},{"defaultValue":null,"name":"file_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"name","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.MetaFile"},"meta_ref_entry":{"idField":"meta_ref_entry_id","name":"meta_ref_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"meta_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"},{"defaultValue":null,"name":"base_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"}],"recordClass":"com.micello.micemetar.data.MetaRefEntry"}},"name":"Micemetar","version":"5.0"},"description":""}},"version":{"name":"version","type":"apogee.JsonTable","updateData":{"data":"1.6","description":""}},"createUpdateInstruction":{"name":"createUpdateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["initialRecord","targetRecord"],"functionBody":"if(initialRecord.Id != targetRecord.Id) {\n    throw new Error(\"Record ID mismatch in create update instruction for target record: \" + getRecordErrString(targetRecord));\n}\n\nif(initialRecord.Type != targetRecord.Type) {\n    throw new Error(\"Inital and target record types do not match. Target record: \" + getRecordErrString(targetRecord));\n}\n\nvar recordsDifferent = false;\n\nvar recordInfo = getRecordInfo(initialRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Update\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = initialRecord.Id;\n\ninstruction.initialReadPerm = initialRecord.read_perm;\ninstruction.initialEditPerm = initialRecord.edit_perm;\n\nif(initialRecord.readPerm != targetRecord.readPerm) {\n    instruction.targetReadPerm = targetRecord.read_perm;\n    recordsDifferent = true;\n}\n\nif(initialRecord.editPerm != targetRecord.editPerm) {\n    instruction.targetEditPerm = targetRecord.edit_perm;\n    recordsDifferent = true;\n}\n\nvar initialData = {};\ninstruction.Initial = initialData;\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    \n    var initialValue;\n    var targetValue;\n    \n    var initialValue = initialRecord.Fields[field.name];\n    var targetValue = targetRecord.Fields[field.name];\n    \n    //validate target values\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecordInfo,createRecord.Id,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(createRecordInfo,createRecord.Id,field));\n        }\n    }\n    \n    if(!fieldsMatch(initialValue,targetValue,field)) {\n        initialData[field.name] = initialValue;\n        targetData[field.name] = targetValue;\n        recordsDifferent = true;\n    }\n}\n\nif(recordsDifferent) {\n    return instruction;\n}\nelse {\n    return null;\n}\n","supplementalCode":"function fieldsMatch(initialValue,targetValue,fieldInfo) {\n    if(fieldInfo.fieldClass === \"java.lang.String\") {\n        //compare strings with \"==\"\n        return (initialValue == targetValue);\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"java.lang\")) {\n        //compare other basic values with \"===\"\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"com.micello\")) {\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONObject\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONArray\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else {\n        throw new Error(\"unrecognized field type: \" + fieldInfo.fieldClass);\n    }\n}\n\nfunction compareJsonData(a,b) {\n    var an = apogee.util.getNormalizedObjectCopy(a);\n    var bn = apogee.util.getNormalizedObjectCopy(b);\n    var aString = JSON.stringify(an);\n    var bString = JSON.stringify(bn);\n    return aString == bString;\n}\n    ","description":"This function creates an update instruction given an initial and target record. If the records are the same then NULL is returned. (No update is needed.)"}},"createCreateInstruction":{"name":"createCreateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["createRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(createRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Create\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = createRecord.Id;\n\ninstruction.targetReadPerm = createRecord.read_perm;\ninstruction.targetEditPerm = createRecord.edit_perm;\n\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var targetValue;\n    var targetValue = createRecord.Fields[field.name];\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(createRecord,field));\n        }\n    }\n    \n    targetData[field.name] = targetValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getFieldErrString":{"name":"getFieldErrString","type":"apogee.FunctionTable","updateData":{"argList":["record","fieldInfo"],"functionBody":"return getRecordErrString(record) + \" - \" + fieldInfo.name;","supplementalCode":"","description":""}},"getRecordErrString":{"name":"getRecordErrString","type":"apogee.FunctionTable","updateData":{"argList":["record"],"functionBody":"return record.Type + \" \" + record.Id;","supplementalCode":"","description":""}},"createDeleteInstruction":{"name":"createDeleteInstruction","type":"apogee.FunctionTable","updateData":{"argList":["deleteRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(deleteRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Delete\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = deleteRecord.Id;\n\ninstruction.initialReadPerm = deleteRecord.read_perm;\ninstruction.initialEditPerm = deleteRecord.edit_perm;\n\nvar initialData = {};\ninstruction.Initial = initialData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var initialValue = deleteRecord.Fields[field.name];\n    \n    initialData[field.name] = initialValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getRecordInfo":{"name":"getRecordInfo","type":"apogee.FunctionTable","updateData":{"argList":["recordType"],"functionBody":"var recordInfo = dataSetInfo.records[recordType];\n\nif(!recordInfo) {\n    throw new Error(\"Record type not found in getRecordInfo: \" + recordType);\n}\n\nreturn recordInfo;","supplementalCode":"","description":""}},"combinedEntriesToInstructionList":{"name":"combinedEntriesToInstructionList","type":"apogee.FunctionTable","updateData":{"argList":["combinedEntries"],"functionBody":"var output = [];\nfor(var key in combinedEntries) {\n    var entry = combinedEntries[key];\n    var instruction = getInstructionForCombinedEntry(entry);\n    if(instruction) {\n        output.push(instruction);\n    }\n}\n\nreturn output;","supplementalCode":"function getInstructionForCombinedEntry(combinedEntry) {\n    var newEntry = combinedEntry.newEntry;\n    var oldEntry = combinedEntry.oldEntry;\n    \n    if(newEntry) {\n        if(!oldEntry) {\n            console.log(\"Create: \" + newEntry.Id);\n            return createCreateInstruction(newEntry);\n        }\n        else {\n            //this will return null for matching records\n            console.log(\"Update(maybe): \" + newEntry.Id);\n            return createUpdateInstruction(oldEntry,newEntry);\n        }\n    }\n    else if(oldEntry) {\n        console.log(\"Delete: \" + oldEntry.Id);\n        return createDeleteInstruction(oldEntry);\n    }\n    \n    return null;\n}\n\nfunction entriesDifferent(entry1,entry2) {\n    var string1 = JSON.stringify(apogee.util.getNormalizedCopy(entry1));\n    var string2 = JSON.stringify(apogee.util.getNormalizedCopy(entry2));\n    return (string1 == string2);\n}","description":"This function takes a combined entry map of the format:\n\n{\n  \"some-identifier\":{\n    \"oldEntry\":{original record entry, if applicable},\n    \"newEntry\":{new record entry, if applicable}\n  },\n  ...\n}\n\nIt returns an instruction list.\n\n"}},"getCommitPromise":{"name":"getCommitPromise","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage","sessionKey"],"functionBody":"var commitBody = createCommitBody(instructionList,commitMessage);\nvar requestOptions = createRequestOptions(commitBody,sessionKey);\nreturn apogee.net.jsonRequest(commitUrl,requestOptions);","supplementalCode":"","description":""}},"getRequestPromise":{"name":"getRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn apogee.net.jsonRequest(requestUrl,requestOptions);","supplementalCode":"","description":""}},"customRequestUrl":{"name":"customRequestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return host + \"/request\";","supplementalCode":"","description":""}},"getCustomRequestPromise":{"name":"getCustomRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn apogee.net.jsonRequest(customRequestUrl,requestOptions);","supplementalCode":"","description":""}}}},"inputCreate":{"name":"inputCreate","type":"apogee.Folder","children":{"fileType":{"name":"fileType","type":"apogee.JsonTable","updateData":{"data":"themeMap","description":""}},"inputFile":{"name":"inputFile","type":"apogee.JsonTable","updateData":{"data":{"ft":"ThemeMap","v":0,"label":[{"priority":0,"ks":[{"ek":"$image_url","lt":3,"r":"<value>"},{"ek":"$icon","lt":2,"r":"<value>"}]},{"priority":1,"ks":[{"ek":"$label_text","lt":1,"r":"<value>"},{"ek":"short name","lt":1,"r":"<value>"},{"ek":"name","lt":1,"r":"<value>"}]},{"priority":3,"ks":[{"gk":"$image_url","lt":3,"r":"<value>"},{"gk":"$icon","lt":2,"r":"<value>"},{"gk":"$label_text","lt":1,"r":"<value>"},{"gk":"short name","lt":1,"r":"<value>"},{"gk":"name","lt":1,"r":"<value>"},{"gk":"area","v":{"baggage claim":{"lt":2,"r":"Baggage Claim"},"copy/print":{"lt":2,"r":"Copy/Print"},"immigration and customs":{"lt":2,"r":"Immigration and Customs"},"meeting point":{"lt":2,"r":"Meeting Point"},"passport control":{"lt":2,"r":"Passport Control"},"pet relief area":{"lt":2,"r":"Pet Relief Area"},"rest area":{"lt":2,"r":"Rest Area"},"security section":{"lt":2,"r":"Security Section"},"smoke":{"lt":2,"r":"Smoke"}}},{"gk":"equipment","v":{"cash register":{"lt":2,"r":"Cash Register"}},"lt":2,"r":"object"},{"gk":"facility","v":{"bathroom":{"ks":[{"gk":"gender","v":{"female":{"lt":2,"r":"Bathroom W","ks":[{"gk":"disabled access","lt":2,"r":"Bathroom W DA"}]},"male":{"lt":2,"r":"Bathroom M","ks":[{"gk":"disabled access","lt":2,"r":"Bathroom M DA"}]},"family":{"lt":2,"r":"Bathroom Fam","ks":[{"gk":"disabled access","lt":2,"r":"Bathroom Fam DA"}]}}},{"gk":"disabled access","lt":2,"r":"Bathroom DA"}],"lt":2,"r":"Bathroom"},"elevator":{"lt":2,"r":"Elevator"},"elevator bank":{"lt":2,"r":"Elevator"},"escalator":{"lt":2,"r":"Escalator"},"ramp":{"ks":[{"gk":"disabled access","lt":2,"r":"Wheelchair Ramp"}]},"stairs":{"lt":2,"r":"Stairs"},"stairwell":{"lt":2,"r":"Stairs"},"moving walkway":{"lt":2,"r":"Moving Walkway"}}},{"gk":"fixture","v":{"baggage claim":{"lt":2,"r":"Baggage Claim"},"ramp":{"ks":[{"gk":"disabled access","lt":2,"r":"Wheelchair Ramp"}]}}},{"gk":"furnishing","v":{"seat":{"ks":[{"gk":"disabled access","lt":2,"r":"Disabled Access"}]}}},{"gk":"marker","v":{"disabled access":{"lt":2,"r":"Disabled Access"}}},{"gk":"recreation","v":{"playground":{"lt":2,"r":"Playground"}}},{"gk":"safety","v":{"defibrillator":{"lt":2,"r":"Defibrillator"},"emergency exit":{"lt":2,"r":"Emergency Exit"},"eyewash":{"lt":2,"r":"Eyewash"},"fire extinguisher":{"lt":2,"r":"Fire Extinguisher"},"fire pull":{"lt":2,"r":"Fire Pull"},"fire hose":{"lt":2,"r":"Fire Hose"},"first aid":{"lt":2,"r":"First Aid"}},"lt":2,"r":"object"},{"gk":"service","v":{"atm":{"ks":[{"gk":"currency","v":{"general":{"lt":2,"r":"ATM:General"},"dollar":{"lt":2,"r":"ATM"},"yen":{"lt":2,"r":"ATM:Yen"}}}],"lt":2,"r":"ATM"},"bike rack":{"lt":2,"r":"Bike Rack"},"changing station":{"lt":2,"r":"Changing Station"},"flight monitor":{"lt":2,"r":"Flight Monitor"},"luggage cart":{"lt":2,"r":"Luggage Cart"},"locker":{"lt":2,"r":"Locker"},"mail":{"lt":2,"r":"Mail"},"massage chair":{"lt":2,"r":"Massage Chair"},"power":{"lt":2,"r":"Power"},"santa":{"lt":2,"r":"Santa"},"showers":{"lt":2,"r":"Shower"},"stroller":{"lt":2,"r":"Stroller"},"telephone":{"lt":2,"r":"Telephone"},"tv":{"lt":2,"r":"TV"},"valet parking":{"lt":2,"r":"Valet Parking"},"paid parking":{"lt":2,"r":"Paid Parking"},"vending machine":{"lt":2,"r":"Vending Machine"},"wifi":{"lt":2,"r":"Wifi"}},"lt":2,"r":"object"},{"gk":"sign","v":{"stop sign":{"lt":2,"r":"Stop Sign"},"yield sign":{"lt":2,"r":"Yield Sign"}},"lt":2,"r":"object"},{"gk":"signal","v":{"traffic light":{"lt":2,"r":"Traffic Light"}},"lt":2,"r":"object"},{"gk":"traffic","v":{"parking lot":{"ks":[{"gk":"paid","v":{"true":{"lt":2,"r":"Paid Parking"}}}]},"parking spot":{"ks":[{"gk":"disabled access","lt":2,"r":"Disabled Access"}]}}},{"gk":"transit","v":{"bus":{"lt":2,"r":"Bus"},"ground transportation":{"lt":2,"r":"Ground Transportation"},"taxi":{"lt":2,"r":"Taxi"},"train":{"lt":2,"r":"Train"}}},{"gk":"class","v":{"car rental":{"lt":2,"r":"Car Rental"},"cocktails":{"lt":2,"r":"Cocktails"},"coffee":{"lt":2,"r":"Coffee"},"fitness center":{"lt":2,"r":"Fitness Center"},"food and drink":{"lt":2,"r":"Food and Drink"},"gym":{"lt":2,"r":"Gym"},"money changer":{"lt":2,"r":"Money Changer"},"movie theater":{"lt":2,"r":"Movie Theater"},"restaurant":{"lt":2,"r":"Restaurant"},"shoe shine":{"lt":2,"r":"Shoe Shine"},"ticketing, check-in":{"lt":2,"r":"Ticketing, Check-in"},"transit hotel":{"lt":2,"r":"Transit Hotel"}}},{"gk":"use","v":{"lost and found":{"lt":2,"r":"Lost and Found"},"meditation room":{"lt":2,"r":"Meditation Room"},"cafeteria":{"lt":2,"r":"Cafeteria"},"information":{"lt":2,"r":"Information"},"customer service":{"lt":2,"r":"Customer Service"},"medical":{"lt":2,"r":"Medical"},"police/security":{"lt":2,"r":"Police/Security"}}},{"gk":"changing station","lt":2,"r":"Changing Station"}]}],"style":[{"priority":1,"ks":[{"ek":"$style","n":"<value>"}]},{"priority":3,"ks":[{"gk":"$style","n":"<value>"},{"gk":"surface","v":{"grass":{"n":"Grass"},"sand":{"n":"Earth"},"ice":{"n":"Ice"}}},{"gk":"area","v":{"aisle":{"n":"Aisle"},"baggage claim":{"n":"Section"},"parcel":{"n":"Parcel"},"section":{"n":"Section"}},"n":"Area"},{"gk":"barrier","v":{"fence":{"n":"Obstruction"},"gate":{"n":"Gate"},"obstruction":{"n":"Obstruction"},"railing":{"n":"Obstruction"}},"n":"Obstruction"},{"gk":"facility","v":{"bathroom":{"n":"Room"},"column":{"n":"Wall"},"door":{"n":"Door"},"doorway":{"n":"Hallway"},"opening":{"n":"Opening"},"elevator":{"n":"Level Change"},"elevator bank":{"n":"Level Change"},"escalator":{"n":"Level Change"},"hallway":{"n":"Hallway"},"hallway intersection":{"n":"Hallway"},"hall area":{"n":"Hallway"},"inaccessible space":{"n":"Inaccessible Space"},"floor opening":{"n":"Open Obstruction"},"landing":{"n":"Landing"},"moving walkway":{"n":"Moving Walkway"},"patio":{"n":"Patio"},"porch":{"n":"Porch"},"platform":{"n":"Platform"},"ramp":{"n":"Ramp"},"room":{"n":"Room"},"stairs":{"n":"Level Change"},"stairway":{"n":"Level Change"},"stairwell":{"n":"Level Change"},"step":{"n":"Step"},"stage":{"n":"Stage","deprecated":true},"unit":{"ks":[{"gk":"class","v":{"money changer":{"n":"Service"},"shoe shine":{"n":"Service"}}},{"gk":"use","v":{"medical":{"n":"Service"},"police/security":{"n":"Service"}}}],"n":"Unit"},"wall":{"n":"Wall"},"window":{"n":"Window"},"window opening":{"n":"Wall"},"element":{"n":"Object"},"area":{"n":"Area"},"detail":{"n":"Object"}}},{"gk":"fixture","v":{"baggage carousel":{"n":"Baggage Claim"},"bin":{"n":"Bin"},"booth":{"n":"Booth"},"checkout":{"n":"Checkout"},"countertop":{"n":"Countertop"},"cubicle":{"n":"Cubicle"},"kiosk":{"n":"Kiosk"},"partition":{"n":"Partition"},"ramp":{"n":"Ramp"},"shelf":{"n":"Shelf"},"stage":{"n":"Stage"},"stall":{"n":"Stall"}},"n":"Object"},{"gk":"furnishing","v":{"chair":{"n":"Chair"},"table":{"n":"Table"},"desk":{"n":"Desk"},"shelf":{"n":"Shelf"},"bin":{"n":"Bin"}},"n":"Object"},{"gk":"equipment","n":"Object"},{"gk":"marker","v":{"entrance":{"n":"Entrance"},"large text":{"n":"Large Text"},"true":{"n":"Marker"},"small text":{"n":"Small Text"},"traffic marker":{"n":"Traffic Marker"},"disabled access":{"n":"Service"},"parking":{"n":"Parking"}}},{"gk":"meta","v":{"coordinates":{"n":"Meta-Coordinates"},"source":{"n":"Meta-Source"},"guide":{"n":"Meta-Guide"},"level outline":{"n":"Meta-Level-Outline"},"ground intersect":{"n":"Meta-Ground-Intersect"}}},{"gk":"object","v":{"invalid":{"n":"INVALID"},"unknown":{"n":"Unknown"}},"n":"Object"},{"gk":"recreation","v":{"athletic field":{"n":"Area"},"playground":{"n":"Area"}},"n":"Area"},{"gk":"safety","v":{"defibrillator":{"n":"Service"}},"n":"Object"},{"gk":"service","v":{"flight monitor":{"n":"Object"},"changing station":{"n":"Object"}},"n":"Service"},{"gk":"sign","n":"Object"},{"gk":"signal","n":"Object"},{"gk":"structure","v":{"building":{"n":"Building"},"parking structure":{"n":"Parking Structure"},"subbuilding":{"n":"Subbuilding"},"tent":{"n":"Tent"}},"n":"Building"},{"gk":"traffic","v":{"crosswalk":{"n":"Area"},"parking lot":{"n":"Parking Lot"},"parking spot":{"n":"Parking Spot"},"railway":{"n":"Railway"},"railway tie":{"n":"Railway"},"railway rail":{"n":"Railway"},"road":{"n":"Road"},"road intersection":{"n":"Road"},"walkway":{"ks":[{"gk":"covered","v":{"true":{"n":"Covered Walkway"}}}],"n":"Walkway"},"walkway intersection":{"ks":[{"gk":"covered","v":{"true":{"n":"Covered Walkway"}}}],"n":"Walkway"}}},{"gk":"transit","v":{"railway":{"deprecated":true,"n":"Railway"},"railway tie":{"deprecated":true,"n":"Railway"},"railway rail":{"deprecated":true,"n":"Railway"}},"n":"Service"},{"gk":"vegetation","v":{"grass":{"n":"Grass"},"greenery":{"n":"Greenery"},"garden":{"n":"Garden"},"tree":{"n":"Tree"},"earth":{"n":"Earth"}}},{"gk":"vehicle","v":{"airplane":{"n":"Airplane"}}},{"gk":"water","n":"Water"}],"n":"Object"}]},"description":""}},"fileTypeId":{"name":"fileTypeId","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return data.getFileTypeId(fileType);","supplementalCode":"","description":""}},"createSettings":{"name":"createSettings","type":"apogee.JsonTable","updateData":{"data":{"fileName":"Modern","fileContext":"public","entryContext":"public","entryOptionName":"Modern"},"description":""}},"preliminaryEntryList":{"name":"preliminaryEntryList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return readPreliminaryEntries[fileType](inputFile);","supplementalCode":"","description":""}},"readPreliminaryEntries":{"name":"readPreliminaryEntries","type":"apogee.Folder","children":{"theme":{"name":"theme","type":"apogee.FunctionTable","updateData":{"argList":["metaFile"],"functionBody":"var output = [];\n\nvar iurl = metaFile.iurl;\n\nfor(var sectionTag in themeSectionMap) {\n    var section = metaFile[sectionTag];\n    var sectionValue = themeSectionMap[sectionTag];\n    var nameSuffix = themeNameSuffixMap[sectionTag];\n    if(section) {\n        for(var key in section) {\n            var data = section[key];\n            \n            if((iurl)&&(sectionTag == \"i\")) {\n                data = getIconData(data,iurl);\n            }\n            \n            var entry = {};\n            entry.fileType = \"theme\";\n            entry.section = sectionValue;\n            entry.entry_value = key;\n            entry.entry_data = data;\n            entry.name = key + nameSuffix;\n            output.push(entry);\n        }\n    }\n}\n\nreturn output;","supplementalCode":"function getIconData(data,iurl) {\n    var outData = apogee.util.deepJsonCopy(data);\n    if(data.rurl) {\n        outData.url = iurl + data.rurl;\n        delete outData.rurl;\n    }\n    return outData;\n}","description":""}},"themeSectionMap":{"name":"themeSectionMap","type":"apogee.JsonTable","updateData":{"data":{"s":["style"],"m":["marker"],"i":["icon"],"l":["labelStyle"]},"description":""}},"themeMap":{"name":"themeMap","type":"apogee.FunctionTable","updateData":{"argList":["metaFile"],"functionBody":"var output = [];\n\nvar labelSectionValue = [\"label\"];\nvar labelSection = metaFile.label;\naddEntries(labelSectionValue,labelSection,getLabelEntryData,getLabelRelations,output);\n\nvar styleSectionValue = [\"style\"];\nvar styleSection = metaFile.style;\naddEntries(styleSectionValue,styleSection,getStyleEntryData,getStyleRelations,output);\n\nreturn output;","supplementalCode":"function addEntries(sectionValue,section,getEntryData,getEntryRelations,output) {\n    \n    var prioritySection;\n    var priority;\n    var fixedData;\n    \n    for(var i = 0; i < section.length; i++) {\n        prioritySection = section[i];\n        priority = prioritySection.priority;\n        \n        fixedData = {};\n        fixedData.getEntryData = getEntryData;\n        fixedData.getEntryRelations = getEntryRelations;\n        fixedData.sectionValue = sectionValue;\n        fixedData.insertionInfo = {\"priority\":priority};\n        \n        //create the parent ref\n        var parentPath = [];\n        \n        var keyList = prioritySection.ks;\n        if(keyList) {\n            addEntriesFromKeyList(keyList,parentPath,fixedData,output);\n        }\n    }\n    \n    //on the last priority section, check for a default\n    var entryData = getEntryData(prioritySection);\n    var entryRelations = getEntryRelations(prioritySection,[]);\n    \n    if(entryData) {\n        addDefaultEntry(entryData,entryRelations,fixedData,output);\n    }\n    \n}\n\nfunction addEntriesFromKeyList(keyList,parentPath,fixedData,output) {\n    for(var i = 0; i < keyList.length; i++) {\n        var inEntry = keyList[i];\n        addKeyEntry(inEntry,parentPath,fixedData,output);\n    }\n}\n\nfunction addKeyEntry(inEntry,parentPath,fixedData,output) {\n    \n    //get the key type\n    var key;\n    var keyType;\n    if(inEntry.gk !== undefined) {\n        keyType = \"gk\";\n        keyTypeName = \"Geometry\";\n        key = inEntry.gk;\n    } \n    else if(inEntry.ek !== undefined) {\n        keyType = \"ek\";\n        keyTypeName = \"Entity\";\n        key = inEntry.ek;\n    } \n    else if(inEntry.ak !== undefined) {\n        keyType = \"ak\";\n        keyTypeName = \"Address\";\n        key = inEntry.ak;\n    } \n    \n    if(parentPath.length == 0) {\n        parentPath.push(keyType);\n    }\n    else {\n        if(parentPath[0] != keyType) {\n            //this is OK, we just don't support it for now.\n            throw new Error(\"child key type does not match parent key type - not supported in translation tool!\");\n        }\n    }\n    \n    //update the path for the children\n    var localObjectPath = parentPath.concat([key]);\n    \n    var entryData = fixedData.getEntryData(inEntry);\n    var relations = fixedData.getEntryRelations(inEntry,localObjectPath);\n    \n    var sectionName = fixedData.sectionValue[0];\n    var name = getKeyName(localObjectPath,keyTypeName,sectionName);\n    \n    //note - entry data may be null\n    var outEntry = {};\n    outEntry.fileType = \"themeMap\";\n    outEntry.insertionInfo = fixedData.insertionInfo;\n    outEntry.section = fixedData.sectionValue;\n    outEntry.parent_path = parentPath;\n    outEntry.entry_type = keyType;\n    outEntry.entry_value = key;\n    outEntry.name = name;\n    outEntry.entry_data = entryData;\n    if(relations) {\n        outEntry.relations = relations;\n    }\n    output.push(outEntry);\n    \n    //do the children!\n    var valueMap = inEntry.v;\n    if(valueMap) {\n        addEntriesFromValueMap(keyTypeName,valueMap,localObjectPath,fixedData,output);\n    }\n}\n\nfunction addEntriesFromValueMap(keyTypeName,valueMap,parentPath,fixedData,output) {\n for(var value in valueMap) {\n        var inEntry = valueMap[value];\n        addValueEntry(keyTypeName,value,inEntry,parentPath,fixedData,output);\n    }\n}\n\nfunction addValueEntry(keyTypeName,value,inEntry,parentPath,fixedData,output) {\n\n    //update the path for the children\n    var localObjectPath = parentPath.concat([value]);\n    \n    var entryData = fixedData.getEntryData(inEntry);\n    var relations = fixedData.getEntryRelations(inEntry,localObjectPath);\n    \n    var sectionName = fixedData.sectionValue[0];\n    var name = getValueName(localObjectPath,keyTypeName,sectionName);\n    \n    //note = entry data may be null\n    var outEntry = {};\n    outEntry.fileType = \"themeMap\";\n    outEntry.insertionInfo = fixedData.insertionInfo;\n    outEntry.section = fixedData.sectionValue;\n    outEntry.parent_path = parentPath;\n    outEntry.entry_type = \"value\";\n    outEntry.entry_value = value;\n    outEntry.name = name;\n    outEntry.entry_data = entryData;\n    if(relations) {\n        outEntry.relations = relations;\n    }\n    output.push(outEntry);\n    \n    //do the children!\n    var keyList = inEntry.ks;\n    if(keyList) {\n        addEntriesFromKeyList(keyList,localObjectPath,fixedData,output);\n    }\n}\n\n\nfunction addDefaultEntry(entryData,entryRelations,fixedData,output) {\n    \n    //I am assuming style\n    var sectionName = fixedData.sectionValue[0];\n    if(sectionName != \"style\") throw new Error(\"Only stule default entry is supported in translator!\");\n    \n    \n    var name = \"Default Style: \" + entryData.n;\n    \n    var outEntry = {};\n    outEntry.fileType = \"themeMap\";\n    outEntry.insertionInfo = fixedData.insertionInfo;\n    outEntry.section = fixedData.sectionValue;\n    outEntry.entry_type = \"default\";\n    outEntry.entry_value = \"default\";\n    outEntry.name = name;\n    outEntry.entry_data = entryData;\n    if(entryRelations) outEntry.relations = entryRelations;\n    output.push(outEntry);\n}\n\nfunction getLabelEntryData(inEntry) {\n    var data = {};\n    var hasData = false;\n    if(inEntry.r !== undefined) {\n        data.r = inEntry.r;\n        hasData = true;\n    }\n    if(inEntry.lt !== undefined) {\n        data.lt = inEntry.lt;\n        hasData = true;\n    }\n    if(inEntry.trans !== undefined) {\n        data.trans = inEntry.trans;\n        hasData = true;\n    }\n    if(hasData) return data;    \n    else return null;\n}\nfunction getLabelRelations(inEntry,objectPath) {\n    var relations = [];\n    \n    var presetRelation = getPresetRelation(objectPath);\n    if(presetRelation) {\n        relations.push(presetRelation);\n    }\n    \n    if((inEntry.lt == 2)&&(inEntry.r != \"<value>\")) {\n        //icon label\n        var iconName = inEntry.r;\n        var objectRef = {};\n        objectRef.file = \"theme\";\n        objectRef.section = [\"icon\"];\n        objectRef.path = [iconName];\n        \n        var relation = {};\n        relation.objectRef = objectRef;\n        relation.type = \"icon source\";\n    }\n    \n    if(relations.length > 0) {\n        return relations;\n    }\n    else {\n        return null;\n    }\n}\nfunction getStyleEntryData(inEntry) {\n    if(inEntry.n) {\n        var data = {};\n        data.n = inEntry.n;\n        return data;\n    }\n}\nfunction getStyleRelations(inEntry,objectPath) {\n    var relations = [];\n    \n    var presetRelation = getPresetRelation(objectPath);\n    if(presetRelation) {\n        relations.push(presetRelation);\n    }\n    \n    if(inEntry.n) {\n        var styleName = inEntry.n;\n        var objectRef = {};\n        objectRef.file = \"theme\";\n        objectRef.section = [\"style\"];\n        objectRef.path = [styleName];\n        \n        var relation = {};\n        relation.objectRef = objectRef;\n        relation.type = \"style source\";\n        relations.push(relation);\n    }\n    \n    if(relations.length > 0) {\n        return relations;\n    }\n    else {\n        return null;\n    }\n}\n\nfunction getPresetRelation(themeMapPath) {\n    \n    //special case for default entry\n    if(themeMapPath.length === 0) return null;\n    \n    var section;\n    var keyType;\n    var presetPath = [];\n    for(var i = 0; i < themeMapPath.length; i++) {\n        var token = themeMapPath[i];\n        if(i == 0) {\n            keyType = token;\n            \n            //get the tree\n            section = getPresetSectionFromKeyType(keyType);\n        }\n        else {\n            if((i == 1)&&(keyType == \"gk\")) {\n                if(isGeomTypeChild(token)) {\n                    presetPath.push(\"geom_type\");\n                }\n            }\n            \n            presetPath.push(token);\n        }\n    }\n    \n    var objectRef = {};\n    objectRef.file = \"presets\";\n    objectRef.section = section;\n    objectRef.path = presetPath;\n    \n    var relation = {};\n    relation.objectRef = objectRef;\n    relation.type = \"preset source\";\n    \n    return relation;\n}\n\n\nfunction getKeyName(objectPath,keyTypeName,sectionName) {\n    var tailPath = apogee.util.deepJsonCopy(objectPath);\n    tailPath.shift();\n    return tailPath.join(\":\") + \" \" + keyTypeName + \" Key \" + capitalizeFirstLetter(sectionName); \n}\n\nfunction getValueName(objectPath,keyTypeName,sectionName) {\n    var tailPath = apogee.util.deepJsonCopy(objectPath);\n    tailPath.shift();\n    return tailPath.join(\":\") + \" \" + keyTypeName + \" \" + capitalizeFirstLetter(sectionName);\n}","description":""}},"strings":{"name":"strings","type":"apogee.FunctionTable","updateData":{"argList":["metaFile"],"functionBody":"var output = [];\n\nfor(var key in metaFile.translations) {\n    var inEntry = metaFile.translations[key];\n    \n    //this doesn't cover all possible, but hopefully it calls all that we used\n    //one that is missing - string translation of object types for labels.\n    var sourceRef = getSourceRefFromKey(key);\n    \n    for(var lang in inEntry) {\n        var translation = inEntry[lang];\n        \n        var name = key + \" (\" + lang.toUpperCase() + \")\";\n        \n        var relations;\n        if(sourceRef) {\n            relations = []\n            var relation = {};\n            relation.objectRef = sourceRef;\n            relation.type = \"string source\";\n            relations.push(relation);\n        }\n        \n        var outEntry = {};\n        outEntry.fileType = \"strings\";\n        outEntry.section = [lang];\n        outEntry.entry_value = key;\n        outEntry.entry_data = {\"trans\":translation};\n        outEntry.name = name;\n        if(relations) outEntry.relations = relations;\n        output.push(outEntry);\n    }\n}\n\nreturn output;","supplementalCode":"function getSourceRefFromKey(key) {\n    var sepChar = key.indexOf(\":\");\n    var keyPrefix = key.substr(0,sepChar);\n    var keySuffix = key.substr(sepChar+1);\n    \n    var objectRef = apogee.util.deepJsonCopy(stringsObjectRefMap[keyPrefix]);\n    objectRef.path.push(keySuffix);\n    return objectRef;\n}","description":""}},"inputColors":{"name":"inputColors","type":"apogee.FunctionTable","updateData":{"argList":["metaFile"],"functionBody":"var output = [];\n\nfor(var color in metaFile) {\n    var inEntry = metaFile[color];\n    \n    entryData = {};\n    entryData.props = inEntry.props;\n    if(inEntry.doLinearArea) {\n        entryData.doLinearArea = true;\n    }\n    \n    var name = createName(inEntry.props);\n    \n    var objectRef = getPresetsObjectRef(inEntry.props);\n    var relation = {};\n    relation.type = \"prop source\";\n    relation.objectRef = objectRef;\n    \n        \n    var outEntry = {};\n    outEntry.fileType = \"inputColors\";\n    outEntry.entry_value = color;\n    outEntry.entry_data = entryData;\n    outEntry.name = name;\n    outEntry.relations = [relation];\n    output.push(outEntry);\n}\n\nreturn output;","supplementalCode":"function getPresetsObjectRef(props) {\n    //I am assuming these are in order and that they give a single object\n    var objectRef = {};\n    objectRef.file = \"presets\";\n    objectRef.section = [\"property_trees\",\"geometry\"];\n    \n    var path = [\"geom_type\"]; //assume they are all under geom type\n    for(var key in props) {\n        path.push(key);\n        path.push(props[key]);\n    }\n    objectRef.path = path;\n    \n    return objectRef;\n}\n\nfunction createName(props) {\n    var name = \"\";\n    for(var key in props) {\n        if(name.length > 0) name += \":\";\n        name += key + \":\" + props[key];\n    }\n    name += \" Input Color\";\n    return name;\n}\n","description":""}},"presetOverrides":{"name":"presetOverrides","type":"apogee.FunctionTable","updateData":{"argList":["metaFile"],"functionBody":"var output = [];\n\nvar propTreeEntries = metaFile.entries;\nfor(var i = 0; i < propTreeEntries.length; i++) {\n    var inEntry = propTreeEntries[i];\n    var outEntry = getPropTreeEntry(inEntry);\n    output.push(outEntry);\n}\n\nvar namedKeyEntries = metaFile.named_keys;\nfor(var namedKey in namedKeyEntries) {\n    var inEntry = namedKeyEntries[namedKey];\n    var outEntry = getNamedKeyEntry(inEntry);\n    output.push(outEntry);\n}\n\nreturn output;","supplementalCode":"function getPropTreeEntry(inEntry) {\n    //make sure \"entry\" field is empty\n    if(!isEmpty(inEntry.entry)) {\n        throw new Error(\"Non empty child entry: \" + inEntry.value);\n    }\n    \n    outEntry = {};\n    outEntry.fileType = \"presets\";\n    outEntry.section = [\"property_trees\",inEntry.tree];\n    outEntry.parent_path = getPropsParentPath(inEntry);\n    outEntry.entry_type = inEntry.type;\n    outEntry.entry_value = inEntry.value;\n    outEntry.name = getPropName(inEntry);\n    outEntry.entry_data = {};\n    return outEntry;\n}\n\n\nfunction getNamedKeyEntry(inEntry) {\n    //make sure \"entry\" field is empty\n    if(!isEmpty(inEntry.entry)) {\n        throw new Error(\"Non empty child entry: \" + inEntry.value);\n    }\n    \n    if(inEntry.type == \"key\") {\n        throw new Error(\"Entry type key in named keys. Not supported. \");\n    }\n    \n    outEntry = {};\n    outEntry.fileType = \"presets\";\n    outEntry.section = [\"named_keys\",inEntry.name];\n    outEntry.parent_path = getNamedKeyParentPath(inEntry);\n    outEntry.entry_type = inEntry.type;\n    outEntry.entry_value = inEntry.value;\n    outEntry.name = getNamedKeyName(inEntry);\n    outEntry.entry_data = {};\n    return outEntry;\n}\n\nfunction getPropName(inEntry) {\n    var fullPath = inEntry.path.concat([inEntry.value]);\n    return fullPath.join(\":\") + \" \" + capitalizeFirstLetter(inEntry.tree) + \" Entry\";\n}\n\n\nfunction getPropsParentPath(inEntry) {\n    var path = inEntry.path;\n    \n    //we assume no new object places directly under \"geom_type\", wince that wasn't supported\n    //in the old format\n    if(inEntry.path.length > 0) {\n        var leadProp = inEntry.path[0];\n        if(isGeomTypeChild(leadProp)) {\n            var pathStart = [\"geom_type\"];\n            path = pathStart.concat(path);\n        }\n    }\n    \n    return path;\n}\n\nfunction getPathPrefix(treeName) {\n    return presetPathPrefixes[treeName];\n}\n\nfunction getNamedKeyName(inEntry) {\n    return inEntry.name + \":\" + inEntry.value + \" Named Key Entry\";\n}\n\nfunction getNamedKeyParentPath(inEntry) {\n   return inEntry.path;\n}\n\n\nfunction isEmpty(object) {\n    for(var key in object) {\n        return false;\n    }\n    return true;\n}\n\n","description":""}},"presetPathPrefixes":{"name":"presetPathPrefixes","type":"apogee.JsonTable","updateData":{"data":{"communityMap":"cmk","communityEntity":"cek","drawing":"dk","level":"lk","geometry":"gk","entity":"ek","chain":"ck","node":"nk","link":"lnk","address":"ak"},"description":""}},"stringsObjectRefMap":{"name":"stringsObjectRefMap","type":"apogee.JsonTable","updateData":{"data":{"com_type":{"file":"presets","section":["property_trees","community_map"],"path":["com_type"]},"country":{"file":"presets","section":["named_groups","postal address"],"path":["country"]},"state":{"file":"presets","section":["named_groups","postal address"],"path":["country","US"]},"province":{"file":"presets","section":["named_groups","postal address"],"path":["country","CA"]},"prefecture":{"file":"presets","section":["named_groups","postal address"],"path":["country","JP"]},"territory":{"file":"presets","section":["named_groups","postal address"],"path":["country","AU"]},"icon":{"file":"theme","section":["icon"],"path":[]},"lang":{"file":"presets","section":["named_keys","lang"],"path":["lang"]},"map_type":{"file":"presets","section":["property_trees","drawing"],"path":["map_type"]}},"description":""}},"themeNameSuffixMap":{"name":"themeNameSuffixMap","type":"apogee.JsonTable","updateData":{"data":{"s":" Style","m":" Marker","i":" Icon","l":" Label Style"},"description":""}},"geomTypeCludgeMap":{"name":"geomTypeCludgeMap","type":"apogee.JsonTable","updateData":{"data":{"area":true,"barrier":true,"equipment":true,"facility":true,"fixture":true,"furnishing":true,"marker":true,"meta":true,"object":true,"recreation":true,"safety":true,"service":true,"sign":true,"signal":true,"structure":true,"traffic":true,"transit":true,"vegetation":true,"vehicle":true,"water":true},"description":""}},"isGeomTypeChild":{"name":"isGeomTypeChild","type":"apogee.FunctionTable","updateData":{"argList":["key"],"functionBody":"return geomTypeCludgeMap[key];","supplementalCode":"","description":""}},"capitalizeFirstLetter":{"name":"capitalizeFirstLetter","type":"apogee.FunctionTable","updateData":{"argList":["word"],"functionBody":"return word.substr(0,1).toUpperCase() + word.substr(1);","supplementalCode":"","description":""}},"presetSectionFromKeyType":{"name":"presetSectionFromKeyType","type":"apogee.JsonTable","updateData":{"data":{"gk":["property_trees","geometry"],"ek":["property_trees","entity"],"ak":["named_keys","address keys"]},"description":""}},"getPresetSectionFromKeyType":{"name":"getPresetSectionFromKeyType","type":"apogee.FunctionTable","updateData":{"argList":["keyType"],"functionBody":"return presetSectionFromKeyType[keyType];","supplementalCode":"","description":""}}}},"createdRecordsStructure":{"name":"createdRecordsStructure","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nvar metaFile = getMetaFile();\noutput.metaFile = metaFile;\n\nvar entryList = [];\noutput.entryList = entryList;\n\nvar msgList = [];\noutput.messages = msgList;\n\nvar createdFileTypeEntries = {};\nvar createdFileEntriesAsLists = {};\n\nvar inputList = preliminaryEntryList;\nfor(var i = 0; i < inputList.length; i++) {\n    var prelimEntry = inputList[i];\n    \n    //--------------------\n    //lookup the file entry type and the file entry\n    //-------------------\n    var fileEntryType = getFileEntryType(prelimEntry,createdFileTypeEntries,msgList);\n    \n    var fileEntry = getFileEntry(prelimEntry,fileEntryType,createdFileEntriesAsLists,msgList);\n    \n    //-------------------------------------\n    //lookup relations data where needed\n    //maybe this is a check on an existing entry, or maybe only if we new to contruct the entry.\n    //--------------------------------------\n    var outRelations = getRelations(prelimEntry,fileEntry,msgList);\n    \n    //------------------------\n    //creat the recipe entry\n    //------------------------\n    var recipeEntry = getRecipeEntry(prelimEntry,metaFile,fileEntry,order,msgList);\n    \n    //some out entry object to look at\n    var outEntry = {};\n    outEntry.prelimEntry = prelimEntry;\n    outEntry.fileEntryType = fileEntryType;\n    outEntry.fileEntry = fileEntry;\n    outEntry.recipeEntry = recipeEntry;\n    if(outRelations) outEntry.relations = outRelations;\n    entryList.push(outEntry);\n}\n\nreturn output;","supplementalCode":"/** This method creates a meta file record. */\nfunction getMetaFile() {\n    var metaFields = {};\n    metaFields.file_type_id = fileTypeId;\n    metaFields.file_context = createSettings.fileContext;\n    metaFields.name = createSettings.fileName;\n    \n    return micemetarDataAccess.createRecord(\"meta_file\",metaFields);\n}\n\n/** This looks up a file type entry. If it is not present it creats a new one. */\nfunction getFileEntryType(prelimEntry,createdFileTypeEntries,msgList) {\n    var fileType = prelimEntry.fileType;\n    \n    var section = prelimEntry.section;\n    if(!section) section = [];\n    \n    var parentPath = prelimEntry.parent_path;\n    if(!parentPath) parentPath = [];\n    \n    var value = prelimEntry.entry_value;\n    \n    var lookupKey = data.getEntryTypeStringFromParent(fileType,section,parentPath,value);\n    var fileEntryType = localGetEntryTypeFromRefString(lookupKey,createdFileTypeEntries);\n    \n    var parentFileEntryType\n    if(parentPath.length > 1) {\n        var parentLookupKey = data.getEntryTypeString(fileType,section,parentPath);\n        parentFileEntryType = localGetEntryTypeFromRefString(parentLookupKey,createdFileTypeEntries);\n        if(!parentFileEntryType) {\n            addMessage(\"ERROR: parent not found: \" + parentLookupKey,msgList);\n        }\n    }\n    \n    if(!fileEntryType) {\n        var fields = {};\n        fields.file_type_id = fileTypeId;\n        fields.section = prelimEntry.section;\n        if(parentFileEntryType) fields.entry_parent_id = parentFileEntryType.Id;\n        if(prelimEntry.entry_type) fields.entry_type = prelimEntry.entry_type;\n        fields.entry_value = prelimEntry.entry_value;\n        fields.name = prelimEntry.name;\n        fields.ordr = order;\n    \n        fileEntryType = micemetarDataAccess.createRecord(\"file_entry_type\",fields);\n        \n        //store this in our created table, for future lookup\n        createdFileTypeEntries[lookupKey] = fileEntryType;\n    }\n    \n    return fileEntryType;\n}\n\n/** This method gets the file entry type using the lookup key checking both the locally\n * created records and the pre-existing recordss. */\nfunction localGetEntryTypeFromRefString(lookupKey,createdFileTypeEntries) {\n    var fileEntryType = createdFileTypeEntries[lookupKey];\n    if(fileEntryType) return fileEntryType;\n    \n    return data.getEntryTypeFromRefString(lookupKey);\n}\n\n\n/** THis method looksup a file entry. If the file entry is not available a \n * new one is created. */\nfunction getFileEntry(prelimEntry,fileEntryType,createdFileEntriesAsLists,msgList) {\n    var fileEntry;\n    var entryData = prelimEntry.entry_data;\n    var fileEntries = localGetEntryListFromEntryTypeId(fileEntryType.Id,createdFileEntriesAsLists);\n    if(fileEntries) {\n        for(var i = 0; i < fileEntries.length; i++) {\n            fileEntry = fileEntries[i];\n            if(jsonObjectsMatch(entryData,fileEntry.Fields.entry_data)) {\n                return fileEntry;\n            }\n        }\n    }\n    \n    //if we get here the entry was not found\n    var fields = {};\n    fields.file_entry_type_id = fileEntryType.Id;\n    fields.entry_context = createSettings.entryContext;\n    fields.option_name = createSettings.entryOptionName;\n    fields.ordr = order;\n    fields.entry_data = prelimEntry.entry_data;\n    \n    fileEntry = micemetarDataAccess.createRecord(\"file_entry\",fields);\n    \n    //store this in our created table, for future lookup\n    var fileEntries = createdFileEntriesAsLists[fileEntryType.Id];\n    if(!fileEntries) {\n        fileEntries = [];\n        createdFileEntriesAsLists[fileEntryType.Id] = fileEntries;\n    }\n    fileEntries.push(fileEntry);\n    \n    return fileEntry;\n}\n\n/** This method looks up the file entry list from the created record list and from \n * the pre-existing records. */\nfunction localGetEntryListFromEntryTypeId(fileEntryTypeId,createdFileEntriesAsLists) {\n    var list = createdFileEntriesAsLists[fileEntryTypeId];\n    if(list) return list;\n    \n    return data.getEntryListFromEntryTypeId(fileEntryTypId);\n}\n\n/** This method returns true if the two jsons match. */\nfunction jsonObjectsMatch(a,b) {\n    return (JSON.stringify(getNormalizedCopy(a)) == JSON.stringify(getNormalizedCopy(b)));\n}\n\nfunction getRelations(prelimEntry,fileEntry,msgList) {\n    if(prelimEntry.relations) {\n        var outRelations = [];\n        for(var ir = 0; ir < prelimEntry.relations.length; ir++) {\n            var relation = prelimEntry.relations[ir];\n            \n            var objectRef = relation.objectRef;\n            var lookupKey = data.getEntryTypeString(objectRef.file,objectRef.section,objectRef.path);\n            var fileEntryType = data.getEntryTypeFromRefString(lookupKey);\n            \n            if(fileEntryType) {\n                var fields = {};\n                fields.file_entry_id = fileEntry.Id;\n                fields.referenced_id = fileEntryType.Id;\n                fields.relation_type = relation.type;\n                fields.ordr = order;\n                \n                var outRelation = micemetarDataAccess.createRecord(\"file_entry_relation\",fields);\n                outRelations.push(outRelation);\n            }\n            else {\n                addMessage(\"ERROR: relation object not found: \" + JSON.stringify(relation),msgList);\n            }\n        }\n        return outRelations;\n    }\n    else {\n        return null;\n    }\n}\n\nfunction getRecipeEntry(prelimEntry,metaFileEntry,fileEntry,order) {\n    var fields = {};\n    fields.meta_file_id = metaFileEntry.Id;\n    fields.file_entry_id = fileEntry.Id;\n    fields.insertion_info = prelimEntry.insertionInfo;\n    fields.ordr = order;\n    \n    return micemetarDataAccess.createRecord(\"recipe_entry\",fields);\n}\n\nfunction addMessage(msg,msgList) {\n    msgList.push(msg);\n}","description":""}}}},"outputCreate":{"name":"outputCreate","type":"apogee.Folder","children":{"createRecordStructure":{"name":"createRecordStructure","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return inputCreate.createdRecordsStructure;","supplementalCode":"","description":""}},"oldFile":{"name":"oldFile","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return inputCreate.inputFile;","supplementalCode":"","description":""}},"oldNormalized":{"name":"oldNormalized","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return apogee.util.getNormalizedCopy(oldFile);","supplementalCode":"","description":""}},"newNormalized":{"name":"newNormalized","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return apogee.util.getNormalizedCopy(newFile);","supplementalCode":"","description":""}},"newFile":{"name":"newFile","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return reconstructFile(fileType,createRecordStructure);","supplementalCode":"","description":""}},"reconstruct":{"name":"reconstruct","type":"apogee.Folder","children":{"presets":{"name":"presets","type":"apogee.Folder","children":{"processEntry":{"name":"processEntry","type":"apogee.FunctionTable","updateData":{"argList":["output","metaFile","recipeEntry","fileEntry","fileEntryType","workingData"],"functionBody":"//----------------\n//load the section\n//----------------\nvar sectionValue = fileEntryType.Fields.section;\n\nvar majorSection = output[sectionValue[0]];\nif(!majorSection) {\n    majorSection = {};\n    output[sectionValue[0]] = majorSection;\n}\n\nvar minorSection = majorSection[sectionValue[1]];\nif(!minorSection) {\n    minorSection = [];\n    majorSection[sectionValue[1]] = minorSection;\n}\n\n//------------------------\n//create this preset entry\n//------------------------\nvar presetEntry = {};\nvar path;\n\nvar entryData = fileEntry.Fields.entry_data;\n\nvar parentPresetEntry = null;\nvar parentFileEntryTypeId = fileEntryType.Fields.entry_parent_id;\nif(parentFileEntryTypeId) {\n    var parentPresetEntry = getPresetEntry(workingData,sectionValue,parentFileEntryTypeId);\n    if(!parentPresetEntry) {\n        //throw new Error(\"parent entry not found!: \" + JSON.stringify(parentPath));\n        console.log(\"parent entry not found!: \" + JSON.stringify(parentPath));\n        return;\n    }\n}\n\nif(fileEntryType.Fields.entry_type == \"key\") {\n    //add any added entry fields\n    presetEntry.k = fileEntryType.Fields.entry_value;\n    presetEntry.input = entryData.input;\n    if(entryData.desc) presetEntry.desc = entryData.desc;\n    if(entryData.required) presetEntry.required = entryData.required;\n    if(entryData.is_array) presetEntry.is_array = entryData.is_array;\n    if(entryData.has_lang) presetEntry.has_lang = entryData.has_lang;\n    if(entryData.prop) presetEntry.prop = entryData.prop;\n    \n    //add the entry to the parent or the base of the section\n    if(parentPresetEntry) {\n        addKeyToParentPresetEntry(parentPresetEntry,presetEntry);\n    }\n    else {\n        minorSection.push(presetEntry);\n    }\n}\nelse {\n    var value = fileEntryType.Fields.entry_value;\n    \n    //add any added entry fields\n    if(entryData.desc) presetEntry.desc = entryData.desc;\n    \n    //add the entry to the parent\n    addValueToParentPresetEntry(parentPresetEntry,presetEntry,value);\n}\n\nstorePresetEntry(workingData,sectionValue,fileEntryType.Id,presetEntry);\n","supplementalCode":"function getPresetEntry(workingData,section,fileEntryTypeId) {\r\n    return workingData.storedEntries[fileEntryTypeId];\r\n}\r\n\r\n\r\nfunction storePresetEntry(workingData,section,fileEntryTypeId,entry) {\r\n    workingData.storedEntries[fileEntryTypeId] = entry;\r\n}\r\n\r\nfunction addKeyToParentPresetEntry(parentPresetEntry,presetEntry) {\r\n    var keyList = parentPresetEntry.ks;\r\n    if(!keyList) {\r\n        keyList = [];\r\n        parentPresetEntry.ks = keyList;\r\n    }\r\n    keyList.push(presetEntry);\r\n}\r\n\r\nfunction addValueToParentPresetEntry(parentPresetEntry,presetEntry,value) {\r\n    var valueSet = parentPresetEntry.v;\r\n    if(!valueSet) {\r\n        valueSet = {};\r\n        parentPresetEntry.v = valueSet;\r\n    }\r\n    valueSet[value] = presetEntry;\r\n}","description":""}},"postProcessFile":{"name":"postProcessFile","type":"apogee.FunctionTable","updateData":{"argList":["outFile","workingData"],"functionBody":"//we need to convert the named keys to a single object each rather than a list \n//and we should enforce that they only have one entry.\nfor(var namedKey in outFile.named_keys) {\n    var namedKeyEntry = outFile.named_keys[namedKey];\n    if(namedKeyEntry.length > 1) {\n        throw new Error(\"named key has mulitipl entries!\");\n    }\n    outFile.named_keys[namedKey] = namedKeyEntry[0];\n}","supplementalCode":"","description":""}},"initialize":{"name":"initialize","type":"apogee.FunctionTable","updateData":{"argList":["outFile"],"functionBody":"return {\"storedEntries\":{}};","supplementalCode":"","description":""}}}},"themeMap":{"name":"themeMap","type":"apogee.Folder","children":{"initialize":{"name":"initialize","type":"apogee.FunctionTable","updateData":{"argList":["output"],"functionBody":"var workingData = {};\nworkingData.storedEntries = {};\nworkingData.sectionMap = {};\n\nreturn workingData;","supplementalCode":"","description":""}},"processEntry":{"name":"processEntry","type":"apogee.FunctionTable","updateData":{"argList":["output","metaFile","recipeEntry","fileEntry","fileEntryType","workingData"],"functionBody":"//----------------\n//load the section\n//----------------\nvar priority = recipeEntry.Fields.insertion_info.priority;\nvar sectionName = fileEntryType.Fields.section[0];\n\nvar workingSection = workingData.sectionMap[sectionName];\nif(!workingSection) {\n    workingSection = {};\n    workingData.sectionMap[sectionName] = workingSection;\n}\n\nvar prioritySection = workingSection[priority];\nif(!prioritySection) {\n    prioritySection = {};\n    prioritySection.priority = priority;\n    prioritySection.ks = [];\n    workingSection[priority] = prioritySection;\n}\n\n//------------------------\n//create this themeMap entry\n//------------------------\n\nvar entryData = fileEntry.Fields.entry_data;\n\nif(fileEntryType.Fields.entry_type == \"default\") {\n    //non theme entry - default entry\n    addPayload(entryData,prioritySection);\n}\nelse {\n    //normal key or value entry\n    var themeMapEntry = {};\n    \n    var parentThemeMapEntry = null;\n    var parentFileEntryTypeId = fileEntryType.Fields.entry_parent_id;\n    if(parentFileEntryTypeId) {\n        var parentThemeMapEntry = getThemeMapEntry(workingData,sectionName,priority,parentFileEntryTypeId);\n        if(!parentThemeMapEntry) {\n            //throw new Error(\"parent entry not found!: \" + sectionName + \":\" + priority + \":\" + parentFileEntryTypeId);\n            console.log(\"parent entry not found!: \" + sectionName + \":\" + priority + \":\" + parentFileEntryTypeId);\n            return;\n        }\n    }\n    \n    if(fileEntryType.Fields.entry_type == \"value\") {\n        //value entry\n        var value = fileEntryType.Fields.entry_value;\n        addValueToParentThemeMapEntry(parentThemeMapEntry,themeMapEntry,value);\n    }\n    else {\n        //key entry\n        \n        //add the key\n        themeMapEntry[fileEntryType.Fields.entry_type] = fileEntryType.Fields.entry_value;\n\n        //add the entry to the parent or the base of the section\n        if(parentThemeMapEntry) {\n            addKeyToParentThemeMapEntry(parentThemeMapEntry,themeMapEntry);\n        }\n        else {\n            prioritySection.ks.push(themeMapEntry);\n        }\n    }\n    \n    addPayload(entryData,themeMapEntry);\n    \n    storeThemeMapEntry(workingData,sectionName,priority,fileEntryType.Id,themeMapEntry);\n}\n","supplementalCode":"function getThemeMapEntry(workingData,sectionName,priority,fileEntryTypeId) {\r\n    var lookupKey = getLookupKey(sectionName,priority,fileEntryTypeId);\r\n    return workingData.storedEntries[lookupKey];\r\n}\r\n\r\nfunction storeThemeMapEntry(workingData,sectionName,priority,fileEntryTypeId,entry) {\r\n    var lookupKey = getLookupKey(sectionName,priority,fileEntryTypeId);\r\n    workingData.storedEntries[lookupKey] = entry;\r\n}\r\n\r\nfunction getLookupKey(sectionName,priority,fileEntryTypeId) {\r\n    return sectionName + \"|\" + priority + \"|\" + fileEntryTypeId;\r\n}\r\n\r\nfunction addKeyToParentThemeMapEntry(parentThemeMapEntry,themeMapEntry) {\r\n    var keyList = parentThemeMapEntry.ks;\r\n    if(!keyList) {\r\n        keyList = [];\r\n        parentThemeMapEntry.ks = keyList;\r\n    }\r\n    keyList.push(themeMapEntry);\r\n}\r\n\r\nfunction addValueToParentThemeMapEntry(parentThemeMapEntry,themeMapEntry,value) {\r\n    var valueSet = parentThemeMapEntry.v;\r\n    if(!valueSet) {\r\n        valueSet = {};\r\n        parentThemeMapEntry.v = valueSet;\r\n    }\r\n    valueSet[value] = themeMapEntry;\r\n}\r\n\r\nfunction addPayload(entryData,themeMapEntry) {\r\n    for(var key in entryData) {\r\n        themeMapEntry[key] = entryData[key];\r\n    }\r\n}","description":""}},"postProcessFile":{"name":"postProcessFile","type":"apogee.FunctionTable","updateData":{"argList":["outFile","workingData"],"functionBody":"outFile.ft = \"ThemeMap\";\n\nfor(var sectionName in workingData.sectionMap) {\n    var sectionArray = [];\n    outFile[sectionName] = sectionArray;\n    \n    var priorityMap = workingData.sectionMap[sectionName];\n    for(var priorityString in priorityMap) {\n        sectionArray.push(priorityMap[priorityString]);\n    }\n}\n","supplementalCode":"","description":""}}}},"theme":{"name":"theme","type":"apogee.Folder","children":{"initialize":{"name":"initialize","type":"apogee.FunctionTable","updateData":{"argList":["outFile"],"functionBody":"return {\"iurl\":null};","supplementalCode":"","description":""}},"processEntry":{"name":"processEntry","type":"apogee.FunctionTable","updateData":{"argList":["output","metaFile","recipeEntry","fileEntry","fileEntryType","workingData"],"functionBody":" \r\n//load the theme section\r\nvar themeSectionName = fileEntryType.Fields.section[0];\r\nvar themeSectionLabel = sectionMap[themeSectionName];\r\n\r\nvar themeSection = output[themeSectionLabel];\r\nif(themeSection === undefined) {\r\n    themeSection = {};\r\n    output[themeSectionLabel] = themeSection;\r\n}\r\n\r\nvar entryData = fileEntry.Fields.entry_data;\r\n\r\n//update the iurl field\r\nif(themeSectionLabel == \"i\") {\r\n    //we need to pull out the relative url\r\n    var entryIUrl = getUrlBaseFromIconUrl(entryData.url);\r\n    var entryRUrl = getRelativeUrlfromIconUrl(entryData.url);\r\n    if(workingData.iurl === null) {\r\n        workingData.iurl = entryIUrl;\r\n    }\r\n    else {\r\n        if(workingData.iurl != entryIUrl) {\r\n            throw new Error(\"This implementation does not support different base urls for icons. Fix this.\");\r\n        }\r\n    }\r\n    \r\n    entryData = apogee.util.deepJsonCopy(entryData);\r\n    delete entryData.url;\r\n    entryData.rurl = entryRUrl;\r\n}\r\n\r\n//add the entry\r\nvar key = fileEntryType.Fields.entry_value;\r\nif(themeSection[key] !== undefined) {\r\n    throw new Error(\"Multiple entries with the given key: \" + key + \", section: \" + themeSectionLabel);\r\n}\r\n\r\nthemeSection[key] = entryData;\r\n","supplementalCode":"function getUrlBaseFromIconUrl(url) {\n    var index = url.lastIndexOf(\"/\");\n    return url.substr(0,index+1);\n}\n\nfunction getRelativeUrlfromIconUrl(url) {\n    var index = url.lastIndexOf(\"/\");\n    return url.substr(index+1);\n}","description":""}},"sectionMap":{"name":"sectionMap","type":"apogee.JsonTable","updateData":{"data":{"icon":"i","style":"s","labelStyle":"l","marker":"m"},"description":""}},"postProcessFile":{"name":"postProcessFile","type":"apogee.FunctionTable","updateData":{"argList":["outFile","workingData"],"functionBody":"if(workingData.iurl !== null) {\r\n    outFile.iurl = workingData.iurl;\r\n}","supplementalCode":"","description":""}}}},"strings":{"name":"strings","type":"apogee.Folder","children":{"processEntry":{"name":"processEntry","type":"apogee.FunctionTable","updateData":{"argList":["output","metaFile","recipeEntry","fileEntry","fileEntryType","workingData"],"functionBody":" \r\nvar outputSection = output.translations;\r\n\r\nvar lang = fileEntryType.Fields.section[0];\r\nvar key = fileEntryType.Fields.entry_value;\r\nvar displayString = fileEntry.Fields.entry_data.trans;\r\n\r\nvar entry = outputSection[key];\r\nif(entry === undefined) {\r\n    entry = {};\r\n    outputSection[key] = entry\r\n}\r\n\r\nentry[lang] = displayString;\r\n","supplementalCode":"","description":""}},"initialize":{"name":"initialize","type":"apogee.FunctionTable","updateData":{"argList":["output"],"functionBody":"output.translations = {};","supplementalCode":"","description":""}}}},"inputColors":{"name":"inputColors","type":"apogee.Folder","children":{"processEntry":{"name":"processEntry","type":"apogee.FunctionTable","updateData":{"argList":["output","metaFile","recipeEntry","fileEntry","fileEntryType","workingData"],"functionBody":"\nvar color = fileEntryType.Fields.entry_value;\nvar entryData = fileEntry.Fields.entry_data;\n\noutput[color] = entryData;","supplementalCode":"","description":""}}}}}},"fileType":{"name":"fileType","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((!createRecordStructure)||(!createRecordStructure.metaFile)) return \"\";\n\nvar fileTypeId = createRecordStructure.metaFile.Fields.file_type_id;\nreturn data.getFileTypeName(fileTypeId);","supplementalCode":"","description":""}},"reconstructFile":{"name":"reconstructFile","type":"apogee.FunctionTable","updateData":{"argList":["fileType","createRecordStructure"],"functionBody":"var output = {};\n\nvar metaFileRecord = createRecordStructure.metaFile;\nvar metaFileEntryList = createRecordStructure.entryList;\n\nvar processor = reconstruct[fileType];\n\n//output.nm = metaFileRecord.Fields.name;\n//output.ft = \"thm5xxxxxx\";\n\n//initialize, and load working data if applicable\nvar workingData;\nif(processor.initialize) {\n    workingData = processor.initialize(output);    \n}\n\n//process each entry\nfor(var i = 0; i < metaFileEntryList.length; i++) {\n    //get an entry\n    var metaFileEntry = metaFileEntryList[i];\n    var recipeEntry = metaFileEntry.recipeEntry;\n    var fileEntry = metaFileEntry.fileEntry;\n    var fileEntryType = metaFileEntry.fileEntryType;\n    \n    processor.processEntry(output,metaFileRecord,recipeEntry,fileEntry,fileEntryType,workingData);\n}\n\n//post process, if applicable\nif(processor.postProcessFile) {\n    processor.postProcessFile(output,workingData);\n}\n\nreturn output;","supplementalCode":"","description":""}}}}}}},"components":{"login":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":25,"y":25}},"children":{"loginUrl":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":463,"height":106},"posInfo":{"x":27,"y":42},"state":0,"viewType":"Text"}},"loginControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":343,"height":101},"posInfo":{"x":32,"y":183},"state":0,"viewType":"Output"},"resource":{"html":"","css":"","setData":"this.loginUrl = data;","constructorAddition":"\n\n//this uses the updated version of test authorization that takes and returns a JSON\nthis.onClick = function() {\n    \n    //get the output table\n    var outputTableName = \"sessionResponse\";\n    var fromMember = mode.getMember();\n    \n    //on click\n    var bodyJson = {};\n    bodyJson.userName = resource.userInput.value;\n    bodyJson.password = resource.passwordInput.value;\n    \n    //cleaer password field\n    resource.passwordInput.value = \"\";\n    \n    var options = {};\n    options.body = JSON.stringify(bodyJson);\n    options.method = \"POST\";\n    \n    var requestPromise = apogee.net.jsonRequest(this.loginUrl,options);\n    apogee.action.asynchDataUpdate(outputTableName,fromMember,requestPromise);\n}","init":"\nvar label1 = document.createElement(\"label\");\nlabel1.for = \"userInput\";\nlabel1.innerHTML = \"User:\"\nelement.appendChild(label1);\n\nvar input1 = document.createElement(\"input\");\ninput1.id = \"userInput\";\nresource.userInput = input1;\nelement.appendChild(input1);\n\nelement.appendChild(document.createElement(\"br\"));\n\nvar label2 = document.createElement(\"label\");\nlabel2.for = \"passwordInput\";\nlabel2.innerHTML = \"Password:\"\nelement.appendChild(label2);\n\nvar input2 = document.createElement(\"input\");\ninput2.type = \"password\";\ninput2.id = \"passwordInput\";\nresource.passwordInput = input2;\nelement.appendChild(input2);\n\nelement.appendChild(document.createElement(\"br\"));\n\nvar button = document.createElement(\"button\");\nbutton.innerHTML = \"Login\";\nelement.appendChild(button);\n\nvar instance = this;\nbutton.onclick = function() {\n    instance.onClick();\n}\n\n\n"}},"sessionResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":697,"height":158},"posInfo":{"x":34,"y":340},"state":0,"viewType":"Text"}},"sessionKey":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":587,"height":167},"posInfo":{"x":41,"y":550},"state":0,"viewType":"Text"}}}},"data":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":61,"y":111}},"children":{"searchDef":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":540,"height":402},"posInfo":{"x":45,"y":118},"state":-1,"viewType":"Text"}},"rawRecordMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":495,"height":261},"posInfo":{"x":738,"y":61},"state":-1,"viewType":"Formula"}},"getRawRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":28},"posInfo":{"x":365,"y":66},"state":-1,"viewType":"Code"}},"fileEntryDownload":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":507,"height":322},"posInfo":{"x":42,"y":179},"state":-1,"viewType":"JSON"}},"fileEntryOptionMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":635,"height":442},"posInfo":{"x":906,"y":470},"state":-1,"viewType":"Formula"}},"fileTypeMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":642,"height":371},"posInfo":{"x":688,"y":603},"state":-1,"viewType":"Text"}},"getFileTypeId":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":42},"posInfo":{"x":351,"y":577},"state":-1,"viewType":"Code"}},"getEntryTypeStringFromRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":672,"height":382},"posInfo":{"x":363,"y":313},"state":-1,"viewType":"Code"}},"getEntryTypeStringFromParent":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":546,"height":43},"posInfo":{"x":363,"y":265},"state":-1,"viewType":"Code"}},"getEntryTypeString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":553,"height":37},"posInfo":{"x":365,"y":221},"state":-1,"viewType":"Code"}},"getEntryTypeFromRefString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":589,"height":301},"posInfo":{"x":362,"y":364},"state":-1,"viewType":"Code"}},"getEntryListFromEntryTypeId":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":347,"y":462},"state":-1,"viewType":"Code"}},"fileEntryTypeMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":724,"height":636},"posInfo":{"x":909,"y":415},"state":-1,"viewType":"Text"}},"getFileTypeName":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":349,"y":624},"state":-1,"viewType":"Code"}}}},"micemetarDataAccess":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":159,"y":117}},"children":{"createRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":560,"height":321},"posInfo":{"x":33,"y":368},"state":-1,"viewType":"Code"}},"recordsToCreateInstructions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":834,"height":391},"posInfo":{"x":30,"y":472},"state":-1,"viewType":"Code"}},"createCommitBody":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":568,"height":400},"posInfo":{"x":629,"y":225},"state":-1,"viewType":"Code"}},"createRequestOptions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":523,"height":254},"posInfo":{"x":822,"y":379},"state":-1,"viewType":"Code"}},"host":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":353,"height":71},"posInfo":{"x":16,"y":6},"state":-1,"viewType":"Text"}},"commitUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":433,"height":107},"posInfo":{"x":14,"y":98},"state":-1,"viewType":"Text"}},"requestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":450,"height":68},"posInfo":{"x":14,"y":57},"state":-1,"viewType":"Formula"}},"dataSetInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":882,"height":611},"posInfo":{"x":28,"y":622},"state":-1,"viewType":"Text"}},"version":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":197,"height":91},"posInfo":{"x":523,"y":367},"state":0,"viewType":"Text"}},"createUpdateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":886,"height":655},"posInfo":{"x":36,"y":248},"state":-1,"viewType":"Code"}},"createCreateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":994,"height":643},"posInfo":{"x":35,"y":209},"state":-1,"viewType":"Code"}},"getFieldErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":512,"height":68},"posInfo":{"x":761,"y":616},"state":-1,"viewType":"Code"}},"getRecordErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":81},"posInfo":{"x":762,"y":664},"state":-1,"viewType":"Code"}},"createDeleteInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":678,"height":540},"posInfo":{"x":36,"y":289},"state":-1,"viewType":"Code"}},"getRecordInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":480,"height":400},"posInfo":{"x":818,"y":427},"state":-1,"viewType":"Code"}},"combinedEntriesToInstructionList":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":721,"height":524},"posInfo":{"x":31,"y":516},"state":-1,"viewType":"Private"}},"getCommitPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":569,"height":109},"posInfo":{"x":565,"y":40},"state":-1,"viewType":"Code"}},"getRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":546,"height":89},"posInfo":{"x":563,"y":90},"state":-1,"viewType":"Code"}},"customRequestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":17,"y":142},"state":-1,"viewType":"Formula"}},"getCustomRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":668,"height":88},"posInfo":{"x":564,"y":134},"state":-1,"viewType":"Code"}}}},"inputCreate":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":165,"y":65}},"children":{"fileType":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":215,"height":37},"posInfo":{"x":29,"y":23},"state":0,"viewType":"Text"}},"inputFile":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":514,"height":300},"posInfo":{"x":23,"y":247},"state":0,"viewType":"Text"}},"fileTypeId":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":218,"height":32},"posInfo":{"x":28,"y":114},"state":0,"viewType":"Text"}},"createSettings":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":310,"height":106},"posInfo":{"x":344,"y":12},"state":0,"viewType":"Text"}},"preliminaryEntryList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":728,"height":599},"posInfo":{"x":722,"y":106},"state":0,"viewType":"JSON"}},"readPreliminaryEntries":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":804,"y":13}},"children":{"theme":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":552,"height":470},"posInfo":{"x":166,"y":490},"state":0,"viewType":"Code"}},"themeSectionMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":208},"posInfo":{"x":752,"y":6},"state":-1,"viewType":"Text"}},"themeMap":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":944,"height":708},"posInfo":{"x":72,"y":76},"state":0,"viewType":"Private"}},"strings":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":747,"height":504},"posInfo":{"x":43,"y":173},"state":-1,"viewType":"Code"}},"inputColors":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":626,"height":479},"posInfo":{"x":38,"y":124},"state":0,"viewType":"Code"}},"presetOverrides":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":770,"height":677},"posInfo":{"x":34,"y":29},"state":-1,"viewType":"Private"}},"presetPathPrefixes":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":545,"height":300},"posInfo":{"x":1103,"y":195},"state":-1,"viewType":"Form"}},"stringsObjectRefMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":664,"height":590},"posInfo":{"x":765,"y":120},"state":-1,"viewType":"Text"}},"themeNameSuffixMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":104},"posInfo":{"x":755,"y":49},"state":-1,"viewType":"Text"}},"geomTypeCludgeMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":302,"height":340},"posInfo":{"x":763,"y":289},"state":-1,"viewType":"Text"}},"isGeomTypeChild":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":764,"y":330},"state":-1,"viewType":"Code"}},"capitalizeFirstLetter":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":764,"y":372},"state":-1,"viewType":"Code"}},"presetSectionFromKeyType":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":335,"height":256},"posInfo":{"x":765,"y":206},"state":-1,"viewType":"Text"}},"getPresetSectionFromKeyType":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":758,"y":249},"state":-1,"viewType":"Code"}}}},"createdRecordsStructure":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":888,"height":813},"posInfo":{"x":445,"y":256},"state":0,"viewType":"Formula"}}}},"outputCreate":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":25,"y":25}},"children":{"createRecordStructure":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":1044,"height":508},"posInfo":{"x":91,"y":363},"state":0,"viewType":"Formula"}},"oldFile":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":386,"height":300},"posInfo":{"x":52,"y":194},"state":0,"viewType":"Text"}},"oldNormalized":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":557,"height":300},"posInfo":{"x":820,"y":402},"state":0,"viewType":"Text"}},"newNormalized":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":428,"height":300},"posInfo":{"x":809,"y":41},"state":0,"viewType":"JSON"}},"newFile":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":597,"height":433},"posInfo":{"x":242,"y":206},"state":0,"viewType":"Text"}},"reconstruct":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":367,"y":19}},"children":{"presets":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":106,"y":97}},"children":{"processEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":915,"height":475},"posInfo":{"x":26,"y":135},"state":0,"viewType":"Private"}},"postProcessFile":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":734,"height":400},"posInfo":{"x":563,"y":295},"state":0,"viewType":"Code"}},"initialize":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":385,"height":59},"posInfo":{"x":25,"y":25},"state":0,"viewType":"Code"}}}},"themeMap":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":93,"y":197}},"children":{"initialize":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":25,"y":25},"state":0,"viewType":"Code"}},"processEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":844,"height":675},"posInfo":{"x":133,"y":42},"state":0,"viewType":"Code"}},"postProcessFile":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":576,"height":400},"posInfo":{"x":687,"y":88},"state":0,"viewType":"Code"}}}},"theme":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":103,"y":150}},"children":{"initialize":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":25,"y":25},"state":0,"viewType":"Code"}},"processEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":834,"height":665},"posInfo":{"x":452,"y":74},"state":0,"viewType":"Code"}},"sectionMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":282,"height":137},"posInfo":{"x":1074,"y":25},"state":0,"viewType":"Text"}},"postProcessFile":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":580,"height":400},"posInfo":{"x":170,"y":281},"state":0,"viewType":"Code"}}}},"strings":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":92,"y":245}},"children":{"processEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":614,"height":239},"posInfo":{"x":27,"y":42},"state":0,"viewType":"Code"}},"initialize":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":76},"posInfo":{"x":34,"y":344},"state":0,"viewType":"Code"}}}},"inputColors":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":84,"y":303}},"children":{"processEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":790,"height":716},"posInfo":{"x":50,"y":50},"state":0,"viewType":"Code"}}}}}},"fileType":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":235,"height":50},"posInfo":{"x":49,"y":26},"state":0,"viewType":"Text"}},"reconstructFile":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":805,"height":579},"posInfo":{"x":366,"y":62},"state":-1,"viewType":"Code"}}}}}}