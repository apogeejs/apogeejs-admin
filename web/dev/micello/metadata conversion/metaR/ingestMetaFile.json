{"fileType":"apogee workspace","jsLinks":[],"cssLinks":[],"workspace":{"fileType":"apogee workspace","version":0.2,"data":{"name":"ingestMetaFile","type":"apogee.Folder","children":{"login":{"name":"login","type":"apogee.Folder","children":{"loginUrl":{"name":"loginUrl","type":"apogee.JsonTable","updateData":{"data":"http://localhost:8080/TestAuthorization/loginjson","description":""}},"loginControl":{"name":"loginControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return loginUrl;","supplementalCode":"","description":""}},"sessionResponse":{"name":"sessionResponse","type":"apogee.JsonTable","updateData":{"data":{"sessionKey":"SESS0f6c4c2238a670b8138b63d9fd03cc22=hjmavnoeu7lk0b2fgan0h4odc7","responseCode":1},"description":""}},"sessionKey":{"name":"sessionKey","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!sessionResponse) return \"\";\n\nif(sessionResponse.responseCode === 1) {\n    return sessionResponse.sessionKey;\n}\nelse {\n    throw new Error(\"Login error: \" + sessionResponse.message);\n}","supplementalCode":"","description":""}}}},"data":{"name":"data","type":"apogee.Folder","children":{"searchDef":{"name":"searchDef","type":"apogee.JsonTable","updateData":{"data":{"searchType":"table","search":{"record":"file_type"},"cascade":[{"record":"file_type","field":"file_entry_type_list"},{"record":"file_entry_type","field":"file_entry_list"}]},"description":""}},"rawRecordMap":{"name":"rawRecordMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\naddToOutput(fileEntryDownload.data.Response,output);\naddToOutput(fileEntryDownload.data.Records,output);\n\nreturn output;","supplementalCode":"function addToOutput(list,output) {\n    for(var i = 0; i < list.length; i++) {\n        var record = list[i];\n\n        var typeMap = output[record.Type];\n        if(!typeMap) {\n            typeMap = {};\n            output[record.Type] = typeMap;\n        }\n        \n        typeMap[record.Id] = record;\n    }\n}","description":""}},"getEntryString":{"name":"getEntryString","type":"apogee.FunctionTable","updateData":{"argList":["fileType","section","path"],"functionBody":"return fileType + \":\" + section.join(\"|\") + \":\" + path.join(\"|\");","supplementalCode":"","description":""}},"getEntryStringFromParent":{"name":"getEntryStringFromParent","type":"apogee.FunctionTable","updateData":{"argList":["fileType","section","parentPath","value"],"functionBody":"return getEntryString(fileType,section,parentPath.concat([value]));","supplementalCode":"","description":""}},"getEntryStringFromRecord":{"name":"getEntryStringFromRecord","type":"apogee.FunctionTable","updateData":{"argList":["fileEntryTypeRecord"],"functionBody":"\nvar path = [];\nloadPathFromRecord(fileEntryTypeRecord,path);\n\nvar fileType = getFileTypeFromRecord(fileEntryTypeRecord);\n\nvar section = fileEntryTypeRecord.Fields.section;\n\nreturn getEntryString(fileType,section,path);","supplementalCode":"function loadPathFromRecord(record,path) {\n    var parentId = record.Fields.entry_parent_id;\n    if(parentId) {\n        var parent = getRawRecord(\"file_entry_type\",parentId);\n        loadPathFromRecord(parent,path);\n    }\n    \n    path.push(record.Fields.entry_value);\n}\n\nfunction getFileTypeFromRecord(record) {\n    var fileTypeId = record.Fields.file_type_id;\n    var fileTypeRecord = getRawRecord(\"file_type\",fileTypeId);\n    return fileTypeRecord.Fields.file_type_name;\n}","description":""}},"getRawRecord":{"name":"getRawRecord","type":"apogee.FunctionTable","updateData":{"argList":["metaFileType","id"],"functionBody":"return rawRecordMap[metaFileType][id];","supplementalCode":"","description":""}},"fileEntryMap":{"name":"fileEntryMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nvar fileEntryDownloadList = fileEntryDownload.data.Records;\nfor(var i = 0; i < fileEntryDownloadList.length; i++) {\n    var record = fileEntryDownloadList[i];\n    if(record.Type == \"file_entry_type\") {\n        var lookupKey = getEntryStringFromRecord(record);\n        \n        var fileTypeRecord = getRawRecord(\"file_type\",record.Fields.file_type_id);\n        var fileType = fileTypeRecord.Fields.file_type_name;\n        \n        var entry = {};\n        entry.fileEntryType = record;\n        entry.optionList = fileEntryOptionMap[record.Id];\n        entry.fileType = fileType;\n        \n        output[lookupKey] = entry;\n    }\n}\n\nreturn output;","supplementalCode":"","description":""}},"fileEntryDownload":{"name":"fileEntryDownload","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return micemetarDataAccess.getCustomRequestPromise(searchDef,login.sessionKey);\n","supplementalCode":"","description":""}},"getFileEntry":{"name":"getFileEntry","type":"apogee.FunctionTable","updateData":{"argList":["lookupString"],"functionBody":"return fileEntryMap[lookupString];","supplementalCode":"","description":""}},"fileEntryOptionMap":{"name":"fileEntryOptionMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"output = {};\n\nvar recordList = fileEntryDownload.data.Records;\nfor(var i = 0; i < recordList.length; i++) {\n    var record = recordList[i];\n    if(record.Type == \"file_entry\") {\n        var fileEntryTypeId = record.Fields.file_entry_type_id;\n        var optionList = output[fileEntryTypeId];\n        if(!optionList) {\n            optionList = [];\n            output[fileEntryTypeId] = optionList;\n        }\n        optionList.push(record);\n    }\n}\n\nreturn output;","supplementalCode":"","description":""}},"fileTypeMap":{"name":"fileTypeMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nvar fileTypeRecordList = fileEntryDownload.data.Response;\nfor(var i = 0; i < fileTypeRecordList.length; i++) {\n    var record = fileTypeRecordList[i];\n    output[record.Fields.file_type_name] = record.Id;\n}\n\nreturn output;","supplementalCode":"","description":""}},"getFileTypeId":{"name":"getFileTypeId","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeName"],"functionBody":"return fileTypeMap[fileTypeName];","supplementalCode":"","description":""}}}},"micemetarDataAccess":{"name":"micemetarDataAccess","type":"apogee.Folder","children":{"createRecord":{"name":"createRecord","type":"apogee.FunctionTable","updateData":{"argList":["recordType","fieldMap"],"functionBody":"var record = {};\n\nrecord.Id = getId();\nrecord.Type = recordTypeName;\nrecord.Fields = fieldMap;\nrecord.read_perm = READ_PERM;\nrecord.edit_perm = EDIT_PERM;\n\nreturn record;","supplementalCode":"var READ_PERM = 2;\nvar EDIT_PERM = 15;\n\nvar nextId = -1;\n\nfunction getId() {\n    return nextId--;\n}","description":"This method creates a record given the field values and record info \nfrom the data set info. It creates and ID and uses standard permissions."}},"recordsToCreateInstructions":{"name":"recordsToCreateInstructions","type":"apogee.FunctionTable","updateData":{"argList":["recordList"],"functionBody":"var instructions = [];\n\nfor(var i = 0; i < recordList.length; i++) {\n    var createRecord = recordList[i];\n    var instruction = createCreateInstruction(createRecord);\n    instructions.push(instruction);\n}\n\nreturn instructions;","supplementalCode":"","description":"This creates a list of create instructions to go along with a list of records to be created.\n\nThere is the option to assign the ID or to leave it as undefined, in which case\nan automatically incremented ID will be assigned. (For consistency in the data\nset, either all records should be preassigned or all records should be \nautomatically assigned."}},"createCommitBody":{"name":"createCommitBody","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage"],"functionBody":"var commit = {};\nvar actions = [];\n\nif(commitMessage.length === 0) throw new Error(\"Commit message missing!\");\n\ncommit.Name = dataSetInfo.name;\ncommit.Message = commitMessage;\ncommit.Actions = actions;\n\n//single action with commits\nvar action = {};\naction.Title = \"bulk create commit\";\naction.Instr = instructionList;\nactions.push(action);\n\nreturn commit","supplementalCode":"","description":"This creates a body for a commit request, given a list of instructions and a commit message."}},"createRequestOptions":{"name":"createRequestOptions","type":"apogee.FunctionTable","updateData":{"argList":["bodyJson","sessionKey"],"functionBody":"var header = {};\nheader[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\nheader.sessionKey = sessionKey;\nheader[\"proto-version\"] = \"4.0\";\nheader[\"db-version\"] = dataSetInfo.version;\n\nrequestInfo = {};\nrequestInfo.header = header;\nif(bodyJson) {\n    requestInfo.method = \"POST\";\n    requestInfo.body = JSON.stringify(bodyJson);\n}\n\nreturn requestInfo;\n","supplementalCode":"","description":"This creates the requestOptions, suitable for apogee.net.jsonRequest, to go with an type of request to the workingset (micemetarequest) server."}},"host":{"name":"host","type":"apogee.JsonTable","updateData":{"data":"http://localhost:8080/micemetarws","description":""}},"commitUrl":{"name":"commitUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvalue = host + \"/commit\";\nreturn value;\n\n","supplementalCode":"","description":""}},"requestUrl":{"name":"requestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return host + \"/cannedsearch\";\n\n","supplementalCode":"","description":""}},"dataSetInfo":{"name":"dataSetInfo","type":"apogee.JsonTable","updateData":{"data":{"records":{"file_entry_type":{"idField":"file_entry_type_id","name":"file_entry_type","foreignList":[{"remoteRecord":"file_entry","name":"file_entry_list","isUnique":false,"remoteField":"file_entry_type_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"file_type_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileType"},{"defaultValue":null,"name":"section","nullOk":true,"fieldClass":"org.json.JSONArray"},{"defaultValue":null,"name":"entry_parent_id","nullOk":true,"fieldClass":"com.micello.micemetar.data.FileEntryType"},{"defaultValue":null,"name":"entry_type","nullOk":true,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"entry_value","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"name","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.FileEntryType"},"file_entry_relation":{"idField":"file_entry_rel_id","name":"file_entry_relation","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"file_entry_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileEntry"},{"defaultValue":null,"name":"referenced_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileEntry"},{"defaultValue":null,"name":"relation_type","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.FileEntryRelation"},"com_file_entry":{"idField":"com_file_entry_id","name":"com_file_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"com_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.ComFile"},{"defaultValue":null,"name":"meta_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"},{"defaultValue":null,"name":"file_group","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.ComFileEntry"},"file_type":{"idField":"file_type_id","name":"file_type","foreignList":[{"remoteRecord":"file_entry_type","name":"file_entry_type_list","isUnique":false,"remoteField":"file_type_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":null,"name":"file_type_name","nullOk":true,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.FileType"},"file_entry":{"idField":"file_entry_id","name":"file_entry","foreignList":[{"remoteRecord":"file_entry_relation","name":"file_entry_ref_list","isUnique":false,"remoteField":"file_entry_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"file_entry_type_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileEntryType"},{"defaultValue":null,"name":"entry_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"option_name","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"entry_data","nullOk":false,"fieldClass":"org.json.JSONObject"}],"recordClass":"com.micello.micemetar.data.FileEntry"},"recipe_entry":{"idField":"recipe_entry_id","name":"recipe_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"meta_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"},{"defaultValue":null,"name":"file_entry_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileEntry"},{"defaultValue":null,"name":"insertion_info","nullOk":true,"fieldClass":"org.json.JSONObject"}],"recordClass":"com.micello.micemetar.data.RecipeEntry"},"com_file":{"idField":"com_file_id","name":"com_file","foreignList":[{"remoteRecord":"com_file_entry","name":"com_file_entry_list","isUnique":false,"remoteField":"com_file_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":null,"name":"file_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"name","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.ComFile"},"meta_file":{"idField":"meta_file_id","name":"meta_file","foreignList":[{"remoteRecord":"recipe_entry","name":"recipe_entry_list","isUnique":false,"remoteField":"meta_file_id","restrictDelete":true,"orderField":"ordr"},{"remoteRecord":"meta_ref_entry","name":"base_file_list","isUnique":false,"remoteField":"meta_file_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":null,"name":"file_type_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileType"},{"defaultValue":null,"name":"file_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"name","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.MetaFile"},"meta_ref_entry":{"idField":"meta_ref_entry_id","name":"meta_ref_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"meta_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"},{"defaultValue":null,"name":"base_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"}],"recordClass":"com.micello.micemetar.data.MetaRefEntry"}},"name":"Micemetar","version":"5.0"},"description":""}},"version":{"name":"version","type":"apogee.JsonTable","updateData":{"data":"1.6","description":""}},"createUpdateInstruction":{"name":"createUpdateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["initialRecord","targetRecord"],"functionBody":"if(initialRecord.Id != targetRecord.Id) {\n    throw new Error(\"Record ID mismatch in create update instruction for target record: \" + getRecordErrString(targetRecord));\n}\n\nif(initialRecord.Type != targetRecord.Type) {\n    throw new Error(\"Inital and target record types do not match. Target record: \" + getRecordErrString(targetRecord));\n}\n\nvar recordsDifferent = false;\n\nvar recordInfo = getRecordInfo(initialRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Update\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = initialRecord.Id;\n\ninstruction.initialReadPerm = initialRecord.read_perm;\ninstruction.initialEditPerm = initialRecord.edit_perm;\n\nif(initialRecord.readPerm != targetRecord.readPerm) {\n    instruction.targetReadPerm = targetRecord.read_perm;\n    recordsDifferent = true;\n}\n\nif(initialRecord.editPerm != targetRecord.editPerm) {\n    instruction.targetEditPerm = targetRecord.edit_perm;\n    recordsDifferent = true;\n}\n\nvar initialData = {};\ninstruction.Initial = initialData;\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    \n    var initialValue;\n    var targetValue;\n    \n    var initialValue = initialRecord.Fields[field.name];\n    var targetValue = targetRecord.Fields[field.name];\n    \n    //validate target values\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecordInfo,createRecord.Id,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(createRecordInfo,createRecord.Id,field));\n        }\n    }\n    \n    if(!fieldsMatch(initialValue,targetValue,field)) {\n        initialData[field.name] = initialValue;\n        targetData[field.name] = targetValue;\n        recordsDifferent = true;\n    }\n}\n\nif(recordsDifferent) {\n    return instruction;\n}\nelse {\n    return null;\n}\n","supplementalCode":"function fieldsMatch(initialValue,targetValue,fieldInfo) {\n    if(fieldInfo.fieldClass === \"java.lang.String\") {\n        //compare strings with \"==\"\n        return (initialValue == targetValue);\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"java.lang\")) {\n        //compare other basic values with \"===\"\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"com.micello\")) {\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONObject\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONArray\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else {\n        throw new Error(\"unrecognized field type: \" + fieldInfo.fieldClass);\n    }\n}\n\nfunction compareJsonData(a,b) {\n    var an = apogee.util.getNormalizedObjectCopy(a);\n    var bn = apogee.util.getNormalizedObjectCopy(b);\n    var aString = JSON.stringify(an);\n    var bString = JSON.stringify(bn);\n    return aString == bString;\n}\n    ","description":"This function creates an update instruction given an initial and target record. If the records are the same then NULL is returned. (No update is needed.)"}},"createCreateInstruction":{"name":"createCreateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["createRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(createRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Create\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = createRecord.Id;\n\ninstruction.targetReadPerm = createRecord.read_perm;\ninstruction.targetEditPerm = createRecord.edit_perm;\n\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var targetValue;\n    var targetValue = createRecord.Fields[field.name];\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(createRecord,field));\n        }\n    }\n    \n    targetData[field.name] = targetValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getFieldErrString":{"name":"getFieldErrString","type":"apogee.FunctionTable","updateData":{"argList":["record","fieldInfo"],"functionBody":"return getRecordErrString(record) + \" - \" + fieldInfo.name;","supplementalCode":"","description":""}},"getRecordErrString":{"name":"getRecordErrString","type":"apogee.FunctionTable","updateData":{"argList":["record"],"functionBody":"return record.Type + \" \" + record.Id;","supplementalCode":"","description":""}},"createDeleteInstruction":{"name":"createDeleteInstruction","type":"apogee.FunctionTable","updateData":{"argList":["deleteRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(deleteRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Delete\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = deleteRecord.Id;\n\ninstruction.initialReadPerm = deleteRecord.read_perm;\ninstruction.initialEditPerm = deleteRecord.edit_perm;\n\nvar initialData = {};\ninstruction.Initial = initialData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var initialValue = deleteRecord.Fields[field.name];\n    \n    initialData[field.name] = initialValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getRecordInfo":{"name":"getRecordInfo","type":"apogee.FunctionTable","updateData":{"argList":["recordType"],"functionBody":"var recordInfo = dataSetInfo.records[recordType];\n\nif(!recordInfo) {\n    throw new Error(\"Record type not found in getRecordInfo: \" + recordType);\n}\n\nreturn recordInfo;","supplementalCode":"","description":""}},"combinedEntriesToInstructionList":{"name":"combinedEntriesToInstructionList","type":"apogee.FunctionTable","updateData":{"argList":["combinedEntries"],"functionBody":"var output = [];\nfor(var key in combinedEntries) {\n    var entry = combinedEntries[key];\n    var instruction = getInstructionForCombinedEntry(entry);\n    if(instruction) {\n        output.push(instruction);\n    }\n}\n\nreturn output;","supplementalCode":"function getInstructionForCombinedEntry(combinedEntry) {\n    var newEntry = combinedEntry.newEntry;\n    var oldEntry = combinedEntry.oldEntry;\n    \n    if(newEntry) {\n        if(!oldEntry) {\n            console.log(\"Create: \" + newEntry.Id);\n            return createCreateInstruction(newEntry);\n        }\n        else {\n            //this will return null for matching records\n            console.log(\"Update(maybe): \" + newEntry.Id);\n            return createUpdateInstruction(oldEntry,newEntry);\n        }\n    }\n    else if(oldEntry) {\n        console.log(\"Delete: \" + oldEntry.Id);\n        return createDeleteInstruction(oldEntry);\n    }\n    \n    return null;\n}\n\nfunction entriesDifferent(entry1,entry2) {\n    var string1 = JSON.stringify(apogee.util.getNormalizedCopy(entry1));\n    var string2 = JSON.stringify(apogee.util.getNormalizedCopy(entry2));\n    return (string1 == string2);\n}","description":"This function takes a combined entry map of the format:\n\n{\n  \"some-identifier\":{\n    \"oldEntry\":{original record entry, if applicable},\n    \"newEntry\":{new record entry, if applicable}\n  },\n  ...\n}\n\nIt returns an instruction list.\n\n"}},"getCommitPromise":{"name":"getCommitPromise","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage","sessionKey"],"functionBody":"var commitBody = createCommitBody(instructionList,commitMessage);\nvar requestOptions = createRequestOptions(commitBody,sessionKey);\nreturn apogee.net.jsonRequest(commitUrl,requestOptions);","supplementalCode":"","description":""}},"getRequestPromise":{"name":"getRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn apogee.net.jsonRequest(requestUrl,requestOptions);","supplementalCode":"","description":""}},"customRequestUrl":{"name":"customRequestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return host + \"/request\";","supplementalCode":"","description":""}},"getCustomRequestPromise":{"name":"getCustomRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn apogee.net.jsonRequest(customRequestUrl,requestOptions);","supplementalCode":"","description":""}}}},"inputCreate":{"name":"inputCreate","type":"apogee.Folder","children":{"fileType":{"name":"fileType","type":"apogee.JsonTable","updateData":{"data":"theme","description":""}},"inputFile":{"name":"inputFile","type":"apogee.JsonTable","updateData":{"data":{"id":2,"v":0,"s":{"Wall":{"w":2,"t":"#000000","m":"#36386e"},"Shelf":{"w":0.5,"t":"#000000","o":"#333333","m":"#cccccc"},"Service":{"w":2,"t":"#000000","o":"#2c3029","m":"#909090"},"Small Text":{"w":2,"t":"#ffffff","m":"#000000"},"Unknown":{"w":2,"t":"#000000","o":"#2c3029","m":"#909090"},"Building":{"w":2,"t":"#000000","o":"#384476","m":"#b5c5de"},"Traffic Marker":{"w":2,"t":"#000000","m":"#808066"},"Aisle":{"w":2,"t":"#000000","m":"#c0c0c0"},"Room":{"w":2,"t":"#000000","o":"#384476","m":"#b5c5de"},"Invisible":{"w":2,"t":"#000000"},"Parking Structure":{"w":2,"t":"#000000","o":"#80805a","m":"#a0a0a0"},"Library":{"w":2,"t":"#000000","o":"#384476","m":"#b5c5de"},"Fore C3":{"w":2,"t":"#000000","o":"#0047f8","m":"#31849b"},"Back A1":{"w":2,"t":"#000000","o":"#00c1b2","m":"#92b1d6"},"Window":{"w":2,"t":"#000000","m":"#7fcdce"},"Back A2":{"w":2,"t":"#000000","o":"#008a87","m":"#6b95c7"},"Fore C1":{"w":2,"t":"#000000","o":"#00a68c","m":"#84c6d8"},"Back A3":{"w":2,"t":"#000000","o":"#0009e7","m":"#4a7dba"},"Fore C2":{"w":2,"t":"#000000","o":"#03982a","m":"#47aac5"},"Kiosk":{"w":2,"t":"#000000","o":"#384476","m":"#b5c5de"},"Gym":{"w":2,"t":"#000000","o":"#384476","m":"#b5c5de"},"Cafeteria":{"w":2,"t":"#000000","o":"#384476","m":"#b5c5de"},"Selected":{"w":2,"t":"#000000","o":"#ff0000","m":"#ffff00"},"Grass":{"w":2,"t":"#000000","m":"#54c356"},"Locker Room":{"w":2,"t":"#000000","o":"#384476","m":"#b5c5de"},"Booth":{"w":2,"t":"#000000","o":"#384476","m":"#b5c5de"},"Fore D2":{"w":2,"t":"#000000","o":"#0011b0","m":"#95b751"},"Back B3":{"w":2,"t":"#000000","o":"#062733","m":"#8165a3"},"Stage":{"w":0.5,"t":"#000000","o":"#333333","m":"#cccccc"},"Fore D3":{"w":2,"t":"#000000","o":"#000da3","m":"#75923c"},"Back B1":{"w":2,"t":"#000000","o":"#01040a","m":"#d4cae0"},"Fore D1":{"w":2,"t":"#000000","o":"#091aa1","m":"#b3cc82"},"Back B2":{"w":2,"t":"#000000","o":"#00c521","m":"#a18cba"},"Greenery":{"w":2,"t":"#ffffff","m":"#167b37"},"Background":{"w":2,"t":"#000000","o":"#36386e","m":"#e5e5e5"},"Table":{"w":0.5,"t":"#000000","o":"#333333","m":"#cccccc"},"Desk":{"w":0.5,"t":"#000000","o":"#333333","m":"#a1a1a1"},"Water":{"w":2,"t":"#000000","m":"#265f9c"},"Unit":{"w":2,"t":"#000000","o":"#384476","m":"#b5c5de"},"Parking Lot":{"w":2,"t":"#000000","m":"#c0c0c0"},"Covered Walkway":{"w":2,"t":"#000000","o":"#384476","m":"#b5c5de"},"Search Result":{"w":2,"t":"#000000","o":"#36386e","m":"#99ff66"},"Large Text":{"w":2,"t":"#ffffff","m":"#000000"},"Tree":{"w":2,"t":"#ffffff","m":"#167b37"},"Fore E1":{"w":2,"t":"#000000","o":"#001d79","m":"#fabd8a"},"Fore E2":{"w":2,"t":"#000000","o":"#001d01","m":"#f7994b"},"Fore E3":{"w":2,"t":"#000000","o":"#011aad","m":"#e46d0a"},"Platform":{"w":2,"t":"#000000","m":"#e5e5e5"},"Hallway":{"w":2,"t":"#000000","m":"#e5e5e5"},"Object":{"w":2,"t":"#000000","o":"#2c3029","m":"#909090"},"Gate":{"w":2,"t":"#000000","o":"#3f3f60","m":"#66669a"},"Garden":{"w":2,"t":"#ffffff","m":"#167b37"},"Checkout":{"w":0.5,"t":"#000000","o":"#333333","m":"#cccccc"},"Walkway":{"w":2,"t":"#000000","m":"#c0c0c0"},"Subbuilding":{"w":2,"t":"#000000","o":"#384476","m":"#b5c5de"},"Parcel":{"w":2,"t":"#000000","m":"#e5e5e5"},"Icon Foreground":{"m":"#ffffff"},"Area":{"w":2,"t":"#000000","o":"#36386e","m":"#e5e5e5"},"Route":{"w":2,"t":"#ffffff","m":"#b40000"},"Patio":{"w":2,"t":"#000000","o":"#384476","m":"#b5c5de"},"Favorite":{"w":2,"t":"#000000","o":"#36386e","m":"#ffba00"},"Ice":{"w":1,"t":"#000000","m":"#cedadd"},"Auditorium":{"w":2,"t":"#000000","o":"#384476","m":"#b5c5de"},"Parking Spot":{"w":2,"t":"#000000"},"Entrance":{"w":2,"t":"#ffffff","m":"#17385f"},"Back E3":{"w":2,"t":"#000000","o":"#001d01","m":"#f7994b"},"Back E2":{"w":2,"t":"#000000","o":"#001d79","m":"#fabd8a"},"Chair":{"w":0.5,"t":"#000000","o":"#333333","m":"#cccccc"},"Back E1":{"w":2,"t":"#000000","o":"#0002fd","m":"#fcd9bc"},"Bin":{"w":0.5,"t":"#000000","o":"#333333","m":"#cccccc"},"Door":{"w":2,"t":"#000000","m":"#929eb7"},"Railway":{"w":2,"t":"#000000","o":"#000000","m":"#c0c0c0"},"Open Obstruction":{"w":2,"t":"#000000","o":"#cccc8f","m":"#e8e8bd"},"Lab":{"w":2,"t":"#000000","o":"#384476","m":"#b5c5de"},"Tent":{"w":2,"t":"#000000","o":"#384476","m":"#b5c5de"},"Office":{"w":2,"t":"#000000","o":"#384476","m":"#b5c5de"},"Marker":{"w":2,"t":"#000000","m":"#808066"},"Fore B3":{"w":2,"t":"#000000","o":"#007623","m":"#60497b"},"Fore B2":{"w":2,"t":"#000000","o":"#062733","m":"#8165a3"},"Map Background":{"w":2,"t":"#000000","m":"#ffffff"},"Back D3":{"w":2,"t":"#000000","o":"#0011b0","m":"#95b751"},"Fore B1":{"w":2,"t":"#000000","o":"#00c521","m":"#a18cba"},"Back D2":{"w":2,"t":"#000000","o":"#091aa1","m":"#b3cc82"},"Back D1":{"w":2,"t":"#000000","o":"#011049","m":"#d2e1b5"},"Airplane":{"w":2,"t":"#000000","o":"#2c3029","m":"#909090"},"Classroom":{"w":2,"t":"#000000","o":"#384476","m":"#b5c5de"},"Icon Background":{"m":"#362620"},"Road":{"w":2,"t":"#000000","m":"#c0c0c0"},"Obstruction":{"w":2,"t":"#000000","o":"#2c3029","m":"#495044"},"Fore A3":{"w":2,"t":"#000000","o":"#0032f8","m":"#376091"},"Step":{"w":2,"t":"#000000","o":"#36386e","m":"#e5e5e5"},"Fore A2":{"w":2,"t":"#000000","o":"#0009e7","m":"#4a7dba"},"Earth":{"w":2,"t":"#000000","m":"#d79823"},"Fore A1":{"w":2,"t":"#000000","o":"#008a87","m":"#6b95c7"},"Back C3":{"w":2,"t":"#000000","o":"#03982a","m":"#47aac5"},"Back C2":{"w":2,"t":"#000000","o":"#00a68c","m":"#84c6d8"},"Back C1":{"w":2,"t":"#000000","o":"#00162a","m":"#b9dfe9"},"Level Change":{"w":2,"t":"#000000","o":"#36386e","m":"#e5e5e5"},"Inaccessible Space":{"w":2,"t":"#000000","o":"#36386e","m":"#c0c0c0"},"Section":{"w":2,"t":"#000000","m":"#bebee5"},"GPS":{"w":0,"t":"#000000","m":"#1f1f81e3"},"Ramp":{"w":0.5,"t":"#000000","o":"#333333","m":"#cccccc"}},"m":{"TrackingDot":{"src":"http://mfs.micello.com/ms/v1/mfile/meta/theme/marker/Standard/TrackingDot","ox":16,"oy":16},"GreenPin":{"src":"http://mfs.micello.com/ms/v1/mfile/meta/theme/marker/Standard/GreenPin","ox":11,"oy":35},"PinMarker":{"src":"http://mfs.micello.com/ms/v1/mfile/meta/theme/marker/Standard/YellowPin","ox":11,"oy":35},"RouteStart":{"src":"http://mfs.micello.com/ms/v1/mfile/meta/theme/marker/Standard/RouteStart","ox":9,"oy":41},"BluePin":{"src":"http://mfs.micello.com/ms/v1/mfile/meta/theme/marker/Standard/BluePin","ox":11,"oy":35},"RouteEnd":{"src":"http://mfs.micello.com/ms/v1/mfile/meta/theme/marker/Standard/RouteEnd","ox":9,"oy":41},"YellowPin":{"src":"http://mfs.micello.com/ms/v1/mfile/meta/theme/marker/Standard/YellowPin","ox":11,"oy":35},"RedPin":{"src":"http://mfs.micello.com/ms/v1/mfile/meta/theme/marker/Standard/RedPin","ox":11,"oy":35}},"ft":"thm5","iurl":"http://mfs.micello.com/ms/v1/mfile/meta/theme/icon/v5/Standard/","i":{"Coffee":{"ar":"Coffee","lt":2,"rurl":"Coffee.json"},"Shoe Shine":{"ar":"Shoe Shine","lt":2,"rurl":"Shoe_Shine.json"},"Fire Pull":{"ar":"Fire Pull","lt":2,"rurl":"Fire_Pull.json"},"Cocktails":{"ar":"Cocktails","lt":2,"rurl":"Cocktails.json"},"Flight Monitor":{"ar":"Flight Monitor","lt":2,"rurl":"Flight_Monitor.json"},"Moving Walkway":{"ar":"Moving Walkway","lt":2,"rurl":"Moving_Walkway.json"},"Crosswalk":{"ar":"Crosswalk","lt":2,"rurl":"Crosswalk.json"},"Meditation Room":{"ar":"Meditation Room","lt":2,"rurl":"Meditation_Room.json"},"Taxi":{"ar":"Taxi","lt":2,"rurl":"Taxi.json"},"Bathroom M":{"ar":"Bathroom M","lt":2,"rurl":"Bathroom_M.json"},"Bathroom M DA":{"ar":"Bathroom M DA","lt":2,"rurl":"Bathroom_M_DA.json"},"Valet Parking":{"ar":"Valet Parking","lt":2,"rurl":"Valet_Parking.json"},"Medical":{"ar":"Medical","lt":2,"rurl":"Medical.json"},"Yield Sign":{"ar":"","lt":2,"rurl":"Yield_Sign.json"},"Ticketing, Check-in":{"ar":"Ticketing, Check-in","lt":2,"rurl":"Ticketing_Check-in.json"},"Police/Security":{"ar":"Police/Security","lt":2,"rurl":"Police_Security.json"},"Customs":{"ar":"Customs","lt":2,"rurl":"Customs.json"},"Bus":{"ar":"Bus","lt":2,"rurl":"Bus.json"},"Movie Theater":{"ar":"Movie Theater","lt":2,"rurl":"Movie_Theater.json"},"Gym":{"ar":"Gym","lt":2,"rurl":"Gym.json"},"Train":{"ar":"Train","lt":2,"rurl":"Train.json"},"Paid Parking":{"ar":"Paid Parking","lt":2,"rurl":"Paid_Parking.json"},"Power":{"ar":"Power","lt":2,"rurl":"Power.json"},"Parking":{"ar":"Parking","lt":2,"rurl":"Parking.json"},"Massage Chair":{"ar":"Massage Chair","lt":2,"rurl":"Massage_Chair.json"},"Defibrillator":{"ar":"Defibrillator","lt":2,"rurl":"Defibrillator.json"},"Changing Station":{"ar":"Changing Station","lt":2,"rurl":"Changing_Station.json"},"Bathroom W":{"ar":"Bathroom W","lt":2,"rurl":"Bathroom_W.json"},"Bathroom W DA":{"ar":"Bathroom W DA","lt":2,"rurl":"Bathroom_W_DA.json"},"Baggage Claim":{"ar":"Baggage Claim","lt":2,"rurl":"Baggage_Claim.json"},"Smoke":{"ar":"Smoke","lt":2,"rurl":"Smoke.json"},"Stairs":{"ar":"Stairs","lt":2,"rurl":"Stairs.json"},"Rest Area":{"ar":"Rest Area","lt":2,"rurl":"Rest_Area.json"},"Transit Hotel":{"ar":"Transit Hotel","lt":2,"rurl":"Transit_Hotel.json"},"Meeting Point":{"ar":"Meeting Point","lt":2,"rurl":"Meeting_Point.json"},"Luggage Cart":{"ar":"Luggage Cart","lt":2,"rurl":"Luggage_Cart.json"},"Elevator":{"ar":"Elevator","lt":2,"rurl":"Elevator.json"},"Escalator":{"ar":"Escalator","lt":2,"rurl":"Escalator.json"},"TV":{"ar":"TV","lt":2,"rurl":"TV.json"},"Bathroom":{"ar":"Bathroom","lt":2,"rurl":"Bathroom.json"},"Disabled Access":{"ar":"Disabled Access","lt":2,"rurl":"Disabled_Access.json"},"Telephone":{"ar":"Telephone","lt":2,"rurl":"Telephone.json"},"Stop Sign":{"ar":"Stop Sign","lt":2,"rurl":"Stop_Sign.json"},"Shower":{"ar":"Shower","lt":2,"rurl":"Shower.json"},"Money Changer":{"ar":"Money Changer","lt":2,"rurl":"Money_Changer.json"},"Traffic Light":{"ar":"Traffic Light","lt":2,"rurl":"Traffic_Light.json"},"Vending Machine":{"ar":"Vending Machine","lt":2,"rurl":"Vending_Machine.json"},"Eye Wash":{"ar":"Eye Wash","lt":2,"rurl":"Eye_Wash.json"},"Emergency Exit":{"ar":"Emergency Exit","lt":2,"rurl":"Emergency_Exit.json"},"Pet Relief Area":{"ar":"Pet Relief Area","lt":2,"rurl":"Pet_Relief_Area.json"},"Security Section":{"ar":"Security Section","lt":2,"rurl":"Security_Section.json"},"Mail":{"ar":"Mail","lt":2,"rurl":"Mail.json"},"Fire Extinguisher":{"ar":"Fire Extinguisher","lt":2,"rurl":"Fire_Extinguisher.json"},"Playground":{"ar":"Playground","lt":2,"rurl":"Playground.json"},"Fire Hose":{"ar":"Fire Hose","lt":2,"rurl":"Fire_Hose.json"},"Object":{"lt":2,"rurl":"Object.json"},"Food and Drink":{"ar":"Food and Drink","lt":2,"rurl":"Food_and_Drink.json"},"Immigration and Customs":{"ar":"Immigration and Customs","lt":2,"rurl":"Immigration_and_Customs.json"},"First Aid":{"ar":"irst Aid","lt":2,"rurl":"First_Aid.json"},"ATM":{"ar":"ATM","lt":2,"rurl":"ATM.json"},"ATM:Yen":{"ar":"ATM:Yen","lt":2,"rurl":"ATM_Yen.json"},"ATM:General":{"ar":"ATM:General","lt":2,"rurl":"ATM_General.json"},"Cash Register":{"ar":"Cash Register","lt":2,"rurl":"Cash_Register.json"},"Ground Transportation":{"ar":"Ground Transportation","lt":2,"rurl":"Ground_Transportation.json"},"Car Rental":{"ar":"Car Rental","lt":2,"rurl":"Car_Rental.json"},"Information":{"ar":"Information","lt":2,"rurl":"Information.json"},"Customer Service":{"ar":"Customer Service","lt":2,"rurl":"Customer_Service.json"},"Restaurant":{"ar":"Restaurant","lt":2,"rurl":"Restaurant.json"},"Wheelchair Ramp":{"ar":"Wheelchair Ramp","lt":2,"rurl":"Wheelchair_Ramp.json"},"Lost and Found":{"ar":"ost and Found","lt":2,"rurl":"Lost_and_Found.json"},"Wifi":{"ar":"Wifi","lt":2,"rurl":"Wifi.json"},"Locker":{"ar":"Locker","lt":2,"rurl":"Locker.json"},"Stroller":{"ar":"Stroller","lt":2,"rurl":"Stroller.json"},"Bike Rack":{"ar":"Bike Rack","lt":2,"rurl":"Bikerack.json"},"Copy/Print":{"ar":"Copy/Print","lt":2,"rurl":"Copy_Print.json"},"Santa":{"ar":"Santa","lt":2,"rurl":"Santa.json"},"Bathroom Fam":{"ar":"Bathroom Fam","lt":2,"rurl":"Bathroom_Fam.json"},"Bathroom Fam DA":{"ar":"Bathroom Fam DA","lt":2,"rurl":"Bathroom_Fam_DA.json"}},"nm":"Standard"},"description":""}},"matchedEntryList":{"name":"matchedEntryList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return getMatchedEntries(inputFile,fileType);","supplementalCode":"","description":""}},"fileTypeId":{"name":"fileTypeId","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return data.getFileTypeId(fileType);","supplementalCode":"","description":""}},"createSettings":{"name":"createSettings","type":"apogee.JsonTable","updateData":{"data":{"fileName":"Standard","fileContext":"public","entryContext":"public","entryOptionName":"Standard"},"description":""}},"createRecords":{"name":"createRecords","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = [];\n\n//make the meta file\nvar metaFile = createMetaFile();\noutput.push(metaFile);\n\n//add the recipe entries and relations\n//and file entries if needed\nfor(var i = 0; i < matchedEntryList.length; i++) {\n    var matchedEntry = matchedEntryList[i];\n    \n    var prelimEntry = matchedEntry.prelimEntry;\n    var fileEntryType = matchedEntry.fileTypeEntry;\n    var fileEntry = matchedEntry.fileEntry;\n    var relations = matchedEntry.relations;\n    \n    //create file entry type if needed\n    if(!fileEntryType) {\n        fileEntryType = createFileEntryType(prelimEntry,i);\n        output.push(fileEntryType);\n    }\n    \n    //create the file entry if needed\n    if(!fileEntry) {\n        fileEntry = createFileEntry(prelimEntry,fileEntryType,i);\n        output.push(fileEntry);\n        \n        //add any file entry relations\n        if(relations) {\n            for(var ir = 0; ir < relations.length; i++) {\n                var relationEntry = createRelationEntry(relations,fileEntry,ir);\n                output.push(relationEntry);\n            }\n        }\n    }\n    \n    //create the recipe entry\n    var recipeEntry = createRecipeEntry(prelimEntry,metaFile,fileEntry,i);\n    output.push(recipeEntry);\n    \n}\n\n\nreturn output;","supplementalCode":"function createMetaFile() {\n    var metaFields = {};\n    metaFields.file_type_id = fileTypeId;\n    metaFields.file_context = createSettings.fileContext;\n    metaFields.name = createSettings.fileName;\n    \n    return micemetarDataAccess.createRecord(\"meta_file\",metaFields);\n}\n\nfunction createFileEntryType(prelimEntry,order) {\n    var fields = {};\n    fields.file_type_id = fileTypeId;\n    fields.section = prelimEntry.section;\nfields.entry_parent_id = \"LOAD THIS!\";\n    if(prelimEntry.entry_type) fields.entry_type = prelimEntry.entry_type;\n    fields.entry_value = prelimEntry.entry_value;\n    fields.name = prelimEntry.name;\n    fields.ordr = order;\n    \n    return micemetarDataAccess.createRecord(\"file_entry_type\",fields);\n}\n    \nfunction createFileEntry(prelimEntry,fileEntryType,order) {\n    var fields = {};\n    fields.file_entry_type_id = fileEntryType.Id;\n    fields.entry_context = createSettings.entryContext;\n    fields.option_name = createSettings.entryOptionName;\n    fields.ordr = order;\n    fields.entry_data = prelimEntry.entry_data;\n    \n    return micemetarDataAccess.createRecord(\"file_entry\",fields);\n}\n\nfunction createRelationEntry(relation,fileEntry,order) {\n    var fields = {};\n    fields.file_entry_id = fileEntry.Id;\n    fields.referenced_id = relation.file_entry_type_id;\n    fields.relation_type = relation.type;\n    fields.ordr = order;\n    \n    return micemetarDataAccess.createRecord(\"file_entry_relation\",fields);\n}\n\nfunction createRecipeEntry(prelimEntry,metaFileEntry,fileEntry,order) {\n    var fields = {};\n    fields.meta_file_id = metaFileEntry.Id;\n    fields.file_entry_id = fileEntry.Id;\n    fields.insertion_info = prelimEntry.insertionInfo;\n    fields.ordr = order;\n    \n    return micemetarDataAccess.createRecord(\"recipe_entry\",fields);\n}","description":""}}}},"getMatchedEntries":{"name":"getMatchedEntries","type":"apogee.FolderFunction","argList":["inputFile","fileType"],"returnValue":"matchedEntryList","internalFolder":{"name":"inputProcessing","type":"apogee.Folder","children":{"inputFile":{"name":"inputFile","type":"apogee.JsonTable","updateData":{"data":{"#DBE5F1":{"props":{"area":"aisle"}},"#CE7424":{"props":{"area":"baggage claim"}},"#143310":{"props":{"area":"copy/print"}},"#C99C73":{"props":{"area":"immigration and customs"}},"#D0D0D0":{"props":{"area":"parcel"}},"#153E11":{"props":{"area":"pet relief area"}},"#133C0F":{"props":{"area":"rest area"}},"#686868":{"props":{"area":"section"}},"#DDD9C3":{"props":{"area":"section"}},"#455B46":{"props":{"area":"security section"}},"#F4EC9A":{"props":{"area":"smoke"}},"#DADADA":{"props":{"area":"true"}},"#4383D1":{"props":{"barrier":"gate"}},"#404040":{"props":{"barrier":"obstruction"}},"#93CC93":{"props":{"facility":"bathroom","gender":"family","disabled access":"true"}},"#96CC96":{"props":{"facility":"bathroom","gender":"family"}},"#95BF95":{"props":{"facility":"bathroom","gender":"female","disabled access":"true"}},"#99CC99":{"props":{"facility":"bathroom","gender":"female"}},"#B5E2B5":{"props":{"facility":"bathroom","gender":"male","disabled access":"true"}},"#CCFFCC":{"props":{"facility":"bathroom","gender":"male"}},"#669966":{"props":{"facility":"bathroom"}},"#666666":{"props":{"facility":"column"}},"#990033":{"props":{"facility":"door"}},"#996033":{"props":{"facility":"doorway"}},"#CC6633":{"props":{"facility":"elevator"}},"#663300":{"props":{"facility":"escalator"}},"#909090":{"props":{"facility":"floor opening"}},"#B0B0B0":{"props":{"facility":"hallway"}},"#24A5A8":{"props":{"facility":"inaccessible space"}},"#000029":{"props":{"facility":"moving walkway"}},"#993033":{"props":{"facility":"opening"}},"#E4E1CE":{"props":{"facility":"patio"}},"#D1CAAA":{"props":{"facility":"platform"}},"#A0A0B3":{"props":{"facility":"ramp"}},"#E5E0EC":{"props":{"facility":"room","use":"auditorium"}},"#DBEEF3":{"props":{"facility":"room","use":"cafeteria"}},"#DFE6F1":{"props":{"facility":"room","use":"classroom"}},"#F7EF9D":{"props":{"facility":"room","use":"gym"}},"#F2DDDC":{"props":{"facility":"room","use":"lab"}},"#EAF1DD":{"props":{"facility":"room","use":"library"}},"#DBD0C0":{"props":{"facility":"room","use":"locker room"}},"#194215":{"props":{"facility":"room","use":"lost and found"}},"#F2EA98":{"props":{"facility":"room","use":"meditation room"}},"#DBE0F0":{"props":{"facility":"room","use":"office"}},"#6DACF7":{"props":{"facility":"unit","use":"gift card"}},"#85A3CB":{"props":{"facility":"room"}},"#C5BEA1":{"props":{"facility":"stage"}},"#990000":{"props":{"facility":"stairs"}},"#D8D8D8":{"props":{"facility":"step"}},"#0F387B":{"props":{"facility":"unit","class":"car rental"}},"#03F9A8":{"props":{"facility":"unit","class":"cocktails"}},"#EB974E":{"props":{"facility":"unit","class":"restaurant"}},"#F0E896":{"props":{"facility":"unit","class":"food and drink"}},"#FBF3A1":{"props":{"facility":"unit","class":"money changer"}},"#163F12":{"props":{"facility":"unit","class":"movie theater"}},"#F5ED9B":{"props":{"facility":"unit","class":"shoe shine"}},"#FCF4A2":{"props":{"facility":"unit","class":"transit hotel"}},"#4055A0":{"props":{"facility":"unit","use":"customer service"}},"#FDF5A3":{"props":{"facility":"unit","use":"information"}},"#A3B9D8":{"props":{"facility":"unit"}},"#4343EF":{"props":{"facility":"wall"}},"#4D93E1":{"props":{"facility":"window"}},"#336699":{"props":{"fixture":"booth"}},"#999933":{"props":{"fixture":"checkout"}},"#788FB0":{"props":{"fixture":"kiosk"}},"#0CF242":{"props":{"fixture":"ramp","disabled access":"true"}},"#A0A0A3":{"props":{"fixture":"ramp"}},"#C5BE97":{"props":{"fixture":"stage"}},"#95B3D7":{"props":{"furnishing":"bin"}},"#009999":{"props":{"furnishing":"desk"}},"#BBCCDD":{"props":{"furnishing":"shelf"}},"#AACCCC":{"props":{"furnishing":"locker"}},"#409988":{"props":{"furnishing":"table"}},"#1E471B":{"props":{"marker":"disabled access","nonphysical":"true"}},"#002040":{"props":{"marker":"entrance","nonphysical":"true"}},"#6600CC":{"props":{"marker":"large text","nonphysical":"true"}},"#330033":{"props":{"marker":"small text","nonphysical":"true"}},"#A5A5A5":{"props":{"marker":"traffic marker"}},"#202020":{"props":{"marker":"true"}},"#AAFFAA":{"props":{"meta":"ground intersect"}},"#00FF00":{"props":{"meta":"guide"}},"#88FF88":{"props":{"meta":"level outline"}},"#CC3333":{"props":{"object":"INVALID"}},"#B8B8B8":{"props":{"object":"true","$style":"Invisible"}},"#FFAD33":{"props":{"object":"true","name":"$ref_a","$style":"Invisible"}},"#FFC166":{"props":{"object":"true","name":"$ref_b","$style":"Invisible"}},"#CC7A00":{"props":{"object":"true","name":"$ref_c","$style":"Invisible"}},"#8E5500":{"props":{"object":"true","name":"$ref_d","$style":"Invisible"}},"#513000":{"props":{"object":"true","name":"$ref_e","$style":"Invisible"}},"#808080":{"props":{"object":"true"}},"#FF0000":{"props":{"object":"unknown"}},"#143D10":{"props":{"recreation":"playground"}},"#F8F09E":{"props":{"safety":"defibrillator"}},"#1D4619":{"props":{"safety":"emergency exit"}},"#1C4518":{"props":{"safety":"fire extinguisher"}},"#1B4417":{"props":{"safety":"first aid"}},"#336633":{"props":{"service":"atm"}},"#E89B00":{"props":{"service":"bike rack"}},"#1E1408":{"props":{"service":"changing station"}},"#02F8A7":{"props":{"service":"flight monitor"}},"#0F3549":{"props":{"service":"locker"}},"#184114":{"props":{"service":"luggage cart"}},"#F1E997":{"props":{"service":"mail"}},"#174013":{"props":{"service":"massage chair"}},"#88A1B5":{"props":{"service":"power"}},"#F3EB99":{"props":{"service":"showers"}},"#010202":{"props":{"service":"stroller"}},"#F6EE9C":{"props":{"service":"telephone"}},"#10390C":{"props":{"service":"tv"}},"#0E2D0A":{"props":{"service":"vending machine"}},"#1A4316":{"props":{"service":"wifi"}},"#123B0E":{"props":{"sign":"stop sign"}},"#113A0D":{"props":{"signal":"traffic light"}},"#E5E5E5":{"props":{"structure":"building","$style":"Background"}},"#EAF1DE":{"props":{"structure":"building","use":"library"}},"#676767":{"props":{"structure":"building"}},"#777777":{"props":{"structure":"parking structure"}},"#6C6C6C":{"props":{"structure":"subbuilding"}},"#A0B0D0":{"props":{"structure":"tent"}},"#1F481B":{"props":{"traffic":"crosswalk"}},"#999999":{"props":{"traffic":"parking lot"}},"#1E471A":{"props":{"furnishing":"poker table"}},"#C0C0C0":{"props":{"traffic":"parking spot"}},"#C0C0A0":{"props":{"traffic":"railway rail"}},"#C0C0D0":{"props":{"traffic":"railway tie"}},"#C0C0B0":{"props":{"traffic":"railway"}},"#000000":{"props":{"traffic":"road"},"doLinearArea":"true"},"#7896BA":{"props":{"traffic":"walkway","covered":"true"}},"#C0C0C2":{"props":{"traffic":"walkway"}},"#CC6666":{"props":{"transit":"bus"}},"#0F381B":{"props":{"transit":"ground transportation"}},"#DDDD66":{"props":{"transit":"taxi"}},"#993333":{"props":{"transit":"train"}},"#DBBFA1":{"props":{"vegetation":"earth"}},"#40D040":{"props":{"vegetation":"garden"}},"#80C080":{"props":{"vegetation":"grass"}},"#75923C":{"props":{"vegetation":"greenery"}},"#33CC33":{"props":{"vegetation":"tree"}},"#A4AAB2":{"props":{"vehicle":"airplane"}},"#3D72E0":{"props":{"water":"true"}},"#2276AF":{"props":{"marker":"parking"}},"#6BB56B":{"props":{"service":"atm","currency":"general"}},"#356335":{"props":{"service":"atm","currency":"yen"}},"#D8D08F":{"props":{"equipment":"cash register"}},"#25261E":{"props":{"facility":"unit","class":"ticketing, check-in"}},"#BCCCCE":{"props":{"facility":"hall area"}},"#C13030":{"props":{"facility":"stairwell"}},"#85CCFF":{"props":{"facility":"room","use":"conference room"}},"#B0A0A1":{"props":{"facility":"room","use":"lobby"}},"#306B8B":{"props":{"furnishing":"seat","disabled access":"true"}},"#30A0A3":{"props":{"furnishing":"seat"}},"#B1":{"props":{"facility":"ramp","disabled access":"true"}},"#48":{"props":{"service":"valet parking"}},"#10":{"props":{"safety":"eyewash"}},"#12":{"props":{"safety":"fire pull"}},"#14":{"props":{"facility":"unit","class":"fitness center"}},"#24":{"props":{"facility":"room","class":"medical"}},"#25":{"props":{"facility":"unit","class":"medical"}},"#26":{"props":{"area":"meeting point"}},"#33":{"props":{"facility":"unit","use":"police/security"}},"#51":{"props":{"sign":"yield sign"}},"#A2":{"props":{"service":"atm","currency":"dollar"}},"#A4":{"props":{"facility":"bathroom","disabled access":"true"}},"#A6":{"props":{"area":"customs"}},"#A7":{"props":{"safety":"fire hose"}},"#A8":{"props":{"service":"santa"}},"#A9":{"props":{"traffic":"parking lot","paid":"true"}},"#A0":{"props":{"area":"passport control"}},"#AABBAA":{"props":{"meta":"coordinates","publish":"true","ref":"sears","units":"ft","xscale":"80","yscale":"80"}},"#AADDAA":{"props":{"facility":"bathroom","gender":"unisex"}},"#20A020":{"props":{"fixture":"tee-mat"}},"#20A585":{"props":{"equipment":"aperio hub"}},"#C8CCC6":{"props":{"equipment":"security camera"}},"#0E4DDB":{"props":{"equipment":"siren"}},"#238099":{"props":{"equipment":"alarm contact"}},"#6688CC":{"props":{"equipment":"bmz"}},"#11CC11":{"props":{"equipment":"card reader"}},"#F99DC9":{"props":{"equipment":"door guard"}},"#535454":{"props":{"equipment":"server"}},"#2A3233":{"props":{"equipment":"rack"}},"#3B95EE":{"props":{"equipment":"cage"}},"#7C7C7C":{"props":{"equipment":"true"}},"#1515AD":{"props":{"traffic":"parking sensor"}},"#4A4ADD":{"props":{"barrier":"turnstile"}},"#2B9999":{"props":{"service":"ticket vending machine"}},"#BCA6A6":{"props":{"fixture":"stall"}},"#9B8663":{"props":{"fixture":"partition"}},"#D9DADB":{"props":{"facility":"landing area"}},"#E8E8E8":{"props":{"facility":"foyer"}},"#C3D3F3":{"props":{"area":"zone"}},"#4C5C6C":{"props":{"area":"plot"}},"#8CCC00":{"props":{"equipment":"air-conditioner"}},"#2C8C89":{"props":{"fixture":"pallet"}},"#E2C262":{"props":{"facility":"electric panel"}},"#FCFAFA":{"props":{"fixture":"glazing"}},"#297C7A":{"props":{"furnishing":"countertop"}},"#A2C2CC":{"props":{"fixture":"cubicle"}},"#F9CB7A":{"props":{"equipment":"turbine"}},"#DDDD09":{"props":{"equipment":"lights"}},"#C6C0A7":{"props":{"facility":"hitting bay"}},"#C9BCBC":{"props":{"equipment":"crah"}},"#B6CECC":{"props":{"equipment":"pdu"}},"#80F980":{"props":{"furnishing":"soccer table"}},"#0186FF":{"props":{"equipment":"beacon"}},"#F08F2C":{"props":{"equipment":"beacon"}},"#0E8632":{"props":{"equipment":"beacon"}},"#95B0C1":{"props":{"service":"seat power"}},"#7182BC":{"props":{"furnishing":"seat","type":"polaris"}},"#A8A8EF":{"props":{"furnishing":"seat","type":"economy plus"}},"#ABBDED":{"props":{"furnishing":"seat","type":"economy"}},"#2B90CF":{"props":{"facility":"room","use":"closet"}},"#66CCFF":{"props":{"facility":"cafe"}},"#FFB6B6":{"props":{"facility":"closet"}},"#D4D4D6":{"props":{"facility":"communications"}},"#A4C0FF":{"props":{"facility":"company store"}},"#F9EBB4":{"props":{"facility":"mail room"}},"#F5FFBB":{"props":{"facility":"copy room"}},"#9FE8FF":{"props":{"facility":"credit union"}},"#909694":{"props":{"facility":"data center"}},"#84BDCE":{"props":{"facility":"ecafe"}},"#CCCFBC":{"props":{"facility":"electrical"}},"#FFFFFF":{"props":{"facility":"equipment space"}},"#E1FFBB":{"props":{"facility":"file area"}},"#FFCCF1":{"props":{"facility":"formal collaboration space"}},"#A4BBC1":{"props":{"facility":"fitness room"}},"#A6CEFF":{"props":{"facility":"hoteling"}},"#ECCAFC":{"props":{"facility":"informal meeting area"}},"#CFDAFF":{"props":{"facility":"interview room"}},"#CDDB9D":{"props":{"facility":"janitors closet"}},"#CCFFBB":{"props":{"facility":"kitchen"}},"#F2DDC9":{"props":{"facility":"large workstation"}},"#EDEDCA":{"props":{"facility":"library"}},"#AEB5CC":{"props":{"facility":"lobby"}},"#F9CADE":{"props":{"facility":"lounge seating"}},"#DDE1ED":{"props":{"facility":"main lobby"}},"#AFAFAF":{"props":{"facility":"mechanical"}},"#B4D8E7":{"props":{"facility":"meeting room"}},"#A9FFF7":{"props":{"facility":"mothers room"}},"#E0C6A0":{"props":{"facility":"multipurpose room"}},"#DCF0F7":{"props":{"facility":"office a"}},"#CDBBFF":{"props":{"facility":"project space"}},"#FFD3BD":{"props":{"facility":"reception"}},"#FFD7D7":{"props":{"facility":"security desk"}},"#EDCEB2":{"props":{"facility":"small workstation"}},"#E2AFC7":{"props":{"facility":"soft seating area"}},"#C9A798":{"props":{"facility":"storage"}},"#A0DCEA":{"props":{"facility":"video conference"}},"#C7EAE6":{"props":{"facility":"training"}},"#6F6F9B":{"props":{"area":"seating"}},"#308899":{"props":{"furnishing":"chair"}},"#80BABA":{"props":{"furnishing":"bench"}},"#66D1AA":{"props":{"equipment":"refrigerator"}},"#55CC99":{"props":{"fixture":"urinal"}},"#BCE6DA":{"props":{"fixture":"sink"}},"#3EFF3E":{"props":{"equipment":"sensor"}},"#474747":{"props":{"equipment":"gateway"}},"#84FCFC":{"props":{"fixture":"lighting2x4"}},"#181191":{"props":{"facility":"ramp"}},"#18772A":{"props":{"marker":"underground parking"}},"#5C3C2C":{"props":{"equipment":"soda machine"}},"#A0A0A0":{"props":{"facility":"quiet room"}},"#36A9E0":{"props":{"equipment":"stair climber"}},"#94C11E":{"props":{"equipment":"elliptical"}},"#28587C":{"props":{"equipment":"recumbent bicycle"}},"#BD8D45":{"props":{"equipment":"treadmill"}},"#F4D77A":{"props":{"equipment":"maintenance"}},"#919DA8":{"props":{"equipment":"rtu"}},"#232B33":{"props":{"equipment":"tv"}},"#424242":{"props":{"furnishing":"disabled chair"}},"#FFCA6C":{"props":{"fixture":"light"}},"#B8B8BC":{"props":{"fixture":"pipe"}},"#909190":{"props":{"fixture":"connector"}},"#6B2929":{"props":{"furnishing":"blackjack table"}},"#365484":{"props":{"furnishing":"slot machine"}},"#2C2C2D":{"props":{"facility":"wiring"}},"#141092":{"props":{"facility":"custodian janitor"}},"#B2A8A8":{"props":{"furnishing":"bed"}},"#EFAE13":{"props":{"equipment":"bench"}},"#C1BB80":{"props":{"fixture":"game room"}},"#181989":{"props":{"facility":"break room"}},"#01BCB0":{"props":{"furnishing":"ping pong table"}},"#838FC2":{"props":{"furnishing":"pool table"}},"#AA7E7E":{"props":{"fixture":"toilet"}},"#6ABCDF":{"props":{"fixture":"tray"}},"#9ABCDF":{"props":{"fixture":"plate"}},"#603813":{"props":{"equipment":"squat bench"}},"#783FFF":{"props":{"equipment":"abs"}},"#EE4036":{"props":{"equipment":"arms"}},"#90278E":{"props":{"equipment":"back"}},"#00ADEE":{"props":{"equipment":"legs"}},"#EFB11D":{"props":{"equipment":"row"}},"#7CAFD1":{"props":{"furnishing":"cabinet"}},"#EDEDED":{"props":{"fixture":"metal partition"}},"#1C2C3C":{"props":{"facility":"room","use":"gym"}},"#AAACC1":{"props":{"facility":"club area"}},"#AAACC2":{"props":{"facility":"concourse section"}},"#AAACC3":{"props":{"facility":"employee area"}},"#AAACC4":{"props":{"facility":"food and beverage area"}},"#AAACC5":{"props":{"facility":"media area"}},"#AAACC6":{"props":{"facility":"team area"}},"#AAACC7":{"props":{"facility":"seating section"}},"#AAACC8":{"props":{"facility":"suite"}},"#88A4EA":{"props":{"facility":"office"}},"#BBCCFF":{"props":{"facility":"conference room"}}},"description":""}},"preliminaryEntryList":{"name":"preliminaryEntryList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return readPreliminaryEntries[fileType](inputFile);","supplementalCode":"","description":""}},"fileType":{"name":"fileType","type":"apogee.JsonTable","updateData":{"data":"inputColors","description":""}},"readPreliminaryEntries":{"name":"readPreliminaryEntries","type":"apogee.Folder","children":{"theme":{"name":"theme","type":"apogee.FunctionTable","updateData":{"argList":["metaFile"],"functionBody":"var output = [];\n\nvar iurl = metaFile.iurl;\n\nfor(var sectionTag in themeSectionMap) {\n    var section = metaFile[sectionTag];\n    var sectionValue = themeSectionMap[sectionTag];\n    var nameSuffix = themeNameSuffixMap[sectionTag];\n    if(section) {\n        for(var key in section) {\n            var data = section[key];\n            \n            if((iurl)&&(sectionTag == \"i\")) {\n                data = getIconData(data,iurl);\n            }\n            \n            var entry = {};\n            entry.section = sectionValue;\n            entry.entry_value = key;\n            entry.entry_data = data;\n            entry.name = key + nameSuffix;\n            output.push(entry);\n        }\n    }\n}\n\nreturn output;","supplementalCode":"function getIconData(data,iurl) {\n    var outData = apogee.util.deepJsonCopy(data);\n    if(data.rurl) {\n        outData.url = iurl + data.rurl;\n        delete outData.rurl;\n    }\n    return outData;\n}","description":""}},"themeSectionMap":{"name":"themeSectionMap","type":"apogee.JsonTable","updateData":{"data":{"s":["style"],"m":["marker"],"i":["icon"],"l":["labelStyle"]},"description":""}},"themeMap":{"name":"themeMap","type":"apogee.FunctionTable","updateData":{"argList":["metaFile"],"functionBody":"var output = [];\n\nvar labelSectionValue = [\"label\"];\nvar labelSection = metaFile.label;\naddEntries(labelSectionValue,labelSection,getLabelEntryData,getLabelRelations,output);\n\nvar styleSectionValue = [\"style\"];\nvar styleSection = metaFile.style;\naddEntries(styleSectionValue,styleSection,getStyleEntryData,getStyleRelations,output);\n\nreturn output;","supplementalCode":"function addEntries(sectionValue,section,getEntryData,getEntryRelations,output) {\n    \n    var prioritySection;\n    var priority;\n    var fixedData;\n    \n    for(var i = 0; i < section.length; i++) {\n        prioritySection = section[i];\n        priority = prioritySection.priority;\n        \n        fixedData = {};\n        fixedData.getEntryData = getEntryData;\n        fixedData.getEntryRelations = getEntryRelations;\n        fixedData.sectionValue = sectionValue;\n        fixedData.insertionInfo = {\"priority\":priority};\n        \n        var parentRef = null;\n        \n        var keyList = prioritySection.ks;\n        if(keyList) {\n            addEntriesFromKeyList(keyList,parentRef,fixedData,output);\n        }\n    }\n    \n    //on the last priority section, check for a default\n    var entryData = getEntryData(prioritySection);\n    var entryRelations = getEntryRelations(prioritySection);\n    \n    if(entryData) {\n        addDefaultEntry(entryData,entryRelations,fixedData,output);\n    }\n    \n}\n\nfunction addEntriesFromKeyList(keyList,parentRef,fixedData,output) {\n    for(var i = 0; i < keyList.length; i++) {\n        var inEntry = keyList[i];\n        addKeyEntry(inEntry,parentRef,fixedData,output);\n    }\n}\n\nfunction addKeyEntry(inEntry,parentRef,fixedData,output) {\n    \n    //get the key type\n    var key;\n    var keyType;\n    if(inEntry.gk !== undefined) {\n        keyType = \"geometry\";\n        key = inEntry.gk;\n    } \n    else if(inEntry.ek !== undefined) {\n        keyType = \"entity\";\n        key = inEntry.ek;\n    } \n    else if(inEntry.ak !== undefined) {\n        keyType = \"address\";\n        key = inEntry.ak;\n    } \n    \n    \n    //update parent path for this key type  (we are assuming a path will use a single key type!)\n    if(!parentRef) {\n        parentRef = {};\n        parentRef.file = \"theme\";\n        parentRef.section = fixedData.sectionValue;\n        parentRef.path = [keyType];\n    }\n    else {\n        //make sure a child key is in the same tree as the parent - for simplicity only\n        if(parentRef.section[1] != keyType) {\n            //I don't think we need to support this...\n            throw new Error(\"Theme map entry with different key types! Legal but not yet supported here.\");\n        }\n    }\n    \n    //update the path for the children\n    var localObjectRef = apogee.util.deepJsonCopy(parentRef);\n    localObjectRef.path.push(key);\n    \n    var entryData = fixedData.getEntryData(inEntry);\n    var relations = fixedData.getEntryRelations(inEntry);\n    \n    var sectionName = fixedData.sectionValue[0];\n    var name = getKeyName(parentRef,key,sectionName);\n    \n    //only save this entry if there is actually data\n    if(entryData) {\n        var outEntry = {};\n        outEntry.insertionInfo = fixedData.insertionInfo;\n        outEntry.section = fixedData.sectionValue;\n        outEntry.parent_ref = parentRef;\n        outEntry.entry_type = \"key\";\n        outEntry.entry_value = key;\n        outEntry.name = name;\n        outEntry.entry_data = entryData;\n        if(relations) {\n            outEntry.relations = relations;\n        }\n        output.push(outEntry);\n    }\n    \n    //do the children!\n    var valueMap = inEntry.v;\n    if(valueMap) {\n        addEntriesFromValueMap(valueMap,localObjectRef,fixedData,output);\n    }\n}\n\nfunction addEntriesFromValueMap(valueMap,parentRef,fixedData,output) {\n for(var value in valueMap) {\n        var inEntry = valueMap[value];\n        addValueEntry(value,inEntry,parentRef,fixedData,output);\n    }\n}\n\nfunction addValueEntry(value,inEntry,parentRef,fixedData,output) {\n\n    //update the path for the children\n    var localObjectRef = apogee.util.deepJsonCopy(parentRef);\n    localObjectRef.path.push(value);\n    \n    var entryData = fixedData.getEntryData(inEntry);\n    var relations = fixedData.getEntryRelations(inEntry);\n    \n    var sectionName = fixedData.sectionValue[0];\n    var name = getValueName(parentRef,value,sectionName);\n    \n    //only save this entry if there is actually data\n    if(entryData) {\n        var outEntry = {};\n        outEntry.insertionInfo = fixedData.insertionInfo;\n        outEntry.section = fixedData.sectionValue;\n        outEntry.parent_ref = parentRef;\n        outEntry.entry_type = \"value\";\n        outEntry.entry_value = value;\n        outEntry.name = name;\n        outEntry.entry_data = entryData;\n        output.push(outEntry);\n    }\n    \n    //do the children!\n    var keyList = inEntry.ks;\n    if(keyList) {\n        addEntriesFromValueMap(keyList,localObjectRef,fixedData,output);\n    }\n}\n\n\nfunction addDefaultEntry(entryData,entryRelations,fixedData,output) {\n    \n    //I am assuming style\n    var sectionName = fixedData.sectionValue[0];\n    if(sectionName != \"style\") throw new Error(\"Only stule default entry is supported in translator!\");\n    \n    \n    var name = \"Default Style: \" + entryData.n;\n    \n    var outEntry = {};\n    outEntry.insertionInfo = fixedData.insertionInfo;\n    outEntry.section = fixedData.sectionValue;\n    outEntry.entry_type = \"default\";\n    outEntry.entry_value = \"default\";\n    outEntry.name = name;\n    outEntry.entry_data = entryData;\n    if(entryRelations) outEntry.relations = entryRelations;\n    output.push(outEntry);\n}\n\nfunction getLabelEntryData(inEntry) {\n    var data = {};\n    var hasData = false;\n    if(inEntry.r !== undefined) {\n        data.r = inEntry.r;\n        hasData = true;\n    }\n    if(inEntry.lt !== undefined) {\n        data.lt = inEntry.lt;\n        hasData = true;\n    }\n    if(inEntry.trans !== undefined) {\n        data.trans = inEntry.trans;\n        hasData = true;\n    }\n    if(hasData) return data;    \n    else return null;\n}\nfunction getLabelRelations(inEntry) {\n    return null;\n}\nfunction getStyleEntryData(inEntry) {\n    if(inEntry.n) {\n        var data = {};\n        data.n = inEntry.n;\n        return data;\n    }\n    else {\n        return null;\n    }\n}\nfunction getStyleRelations(inEntry) {\n    if(inEntry.n) {\n        var styleName = inEntry.n;\n        objectRef = {};\n        objectRef.file = \"theme\";\n        objectRef.section = [\"style\"];\n        objectRef.path = [styleName];\n        \n        var relation = {};\n        relation.objectRef = objectRef;\n        relation.type = \"style source\";\n        return [relation];\n    }\n    else {\n        return null;\n    }\n}\n\nfunction getKeyName(parentRef,key,sectionName) {\n    var propType = parentRef.path[0];\n    var pathString = getTailPathString(parentRef.path,key);\n    return pathString + \" \" + capitalizeFirstLetter(propType) + \" Key \" + capitalizeFirstLetter(sectionName); \n}\n\nfunction getValueName(parentRef,value,sectionName) {\n    var propType = parentRef.path[0];\n    var pathString = getTailPathString(parentRef.path,value);\n    return pathString + \" \" + capitalizeFirstLetter(propType) + \" \" + capitalizeFirstLetter(sectionName);\n}\n\nfunction getTailPathString(pathArray,endString) {\n    var array = pathArray.concat([endString]);\n    array.splice(0,1);\n    return array.join(\":\");\n}","description":""}},"strings":{"name":"strings","type":"apogee.FunctionTable","updateData":{"argList":["metaFile"],"functionBody":"var output = [];\n\nfor(var key in metaFile.translations) {\n    var inEntry = metaFile.translations[key];\n    \n    var sourceRef = getSourceRefFromKey(key);\n    \n    for(var lang in inEntry) {\n        var translation = inEntry[lang];\n        \n        var name = key + \" (\" + lang.toUpperCase() + \")\";\n        \n        var relations = [];\n        var relation = {};\n        relation.objectRef = sourceRef;\n        relation.type = \"string source\";\n        \n        var outEntry = {};\n        outEntry.section = [lang];\n        outEntry.entry_value = key;\n        outEntry.entry_data = {\"trans\":translation};\n        outEntry.name = name;\n        outEntry.relations = relations;\n        output.push(outEntry);\n    }\n}\n\nreturn output;","supplementalCode":"function getSourceRefFromKey(key) {\n    var sepChar = key.indexOf(\":\");\n    var keyPrefix = key.substr(0,sepChar);\n    var keySuffix = key.substr(sepChar+1);\n    \n    var objectRef = apogee.util.deepJsonCopy(stringsObjectRefMap[keyPrefix]);\n    objectRef.path.push(keySuffix);\n    return objectRef;\n}","description":""}},"inputColors":{"name":"inputColors","type":"apogee.FunctionTable","updateData":{"argList":["metaFile"],"functionBody":"var output = [];\n\nfor(var color in metaFile) {\n    var inEntry = metaFile[color];\n    \n    entryData = {};\n    entryData.props = inEntry.props;\n    if(inEntry.doLinearArea) {\n        entryData.doLinearArea = true;\n    }\n    \n    var name = createName(inEntry.props);\n    \n    var objectRef = getPresetsObjectRef(inEntry.props);\n    var relation = {};\n    relation.type = \"prop source\";\n    relation.objectRef = objectRef;\n    \n        \n    var outEntry = {};\n    outEntry.entry_value = color;\n    outEntry.entry_data = entryData;\n    outEntry.name = name;\n    outEntry.relations = [relation];\n    output.push(outEntry);\n}\n\nreturn output;","supplementalCode":"function getPresetsObjectRef(props) {\n    //I am assuming these are in order and that they give a single object\n    var objectRef = {};\n    objectRef.file = \"presets\";\n    objectRef.section = [\"property_trees\",\"geometry\"];\n    \n    var path = [\"geom_type\"]; //assume they are all under geom type\n    for(var key in props) {\n        path.push(key);\n        path.push(props[key]);\n    }\n    objectRef.path = path;\n    \n    return objectRef;\n}\n\nfunction createName(props) {\n    var name = \"\";\n    for(var key in props) {\n        if(name.length > 0) name += \":\";\n        name += key + \":\" + props[key];\n    }\n    name += \" Input Color\";\n    return name;\n}\n","description":""}},"presetOverrides":{"name":"presetOverrides","type":"apogee.FunctionTable","updateData":{"argList":["metaFile"],"functionBody":"var output = [];\n\nvar propTreeEntries = metaFile.entries;\nfor(var i = 0; i < propTreeEntries.length; i++) {\n    var inEntry = propTreeEntries[i];\n    var outEntry = getPropTreeEntry(inEntry);\n    output.push(outEntry);\n}\n\nvar namedKeyEntries = metaFile.named_keys;\nfor(var namedKey in namedKeyEntries) {\n    var inEntry = namedKeyEntries[namedKey];\n    var outEntry = getNamedKeyEntry(inEntry);\n    output.push(outEntry);\n}\n\nreturn output;","supplementalCode":"function getPropTreeEntry(inEntry) {\n    //make sure \"entry\" field is empty\n    if(!isEmpty(inEntry.entry)) {\n        throw new Error(\"Non empty child entry: \" + inEntry.value);\n    }\n    \n    outEntry = {};\n    outEntry.section = [\"property_trees\",inEntry.tree];\n    outEntry.parentRef = getPropsParentRef(inEntry);\n    outEntry.entry_type = inEntry.type;\n    outEntry.entry_value = inEntry.value;\n    outEntry.name = getPropName(inEntry);\n    outEntry.entry_data = {};\n    return outEntry;\n}\n\n\nfunction getNamedKeyEntry(inEntry) {\n    //make sure \"entry\" field is empty\n    if(!isEmpty(inEntry.entry)) {\n        throw new Error(\"Non empty child entry: \" + inEntry.value);\n    }\n    \n    if(inEntry.type == \"key\") {\n        throw new Error(\"Entry type key in named keys. Not supported. \");\n    }\n    \n    outEntry = {};\n    outEntry.section = [\"named_keys\",inEntry.name];\n    outEntry.parentRef = getNamedKeyParentRef(inEntry);\n    outEntry.entry_type = inEntry.type;\n    outEntry.entry_value = inEntry.value;\n    outEntry.name = getNamedKeyName(inEntry);\n    outEntry.entry_data = {};\n    return outEntry;\n}\n\nfunction getPropName(inEntry) {\n    var pathString = inEntry.path.join(\"|\");\n    var fullPath = inEntry.path.concat([inEntry.value]);\n    return fullPath.join(\":\") + \" \" + capitalizeFirstLetter(inEntry.tree) + \" Entry\";\n}\n\n\nfunction getPropsParentRef(inEntry) {\n    var objectRef = {};\n    objectRef.file = \"presets\";\n    objectRef.section = [\"property_trees\",inEntry.tree];\n    \n    //we assume no new object places directly under \"geom_type\", wince that wasn't supported\n    //in the old format\n    var newPath;\n    if(inEntry.path.length > 0) {\n        var leadProp = inEntry.path[0];\n        if(isGeomTypeChild(leadProp)) {\n            newPath = [\"geom_type\"];\n            newPath = newPath.concat(inEntry.path);\n        }\n    }\n    objectRef.path = newPath ? newPath : inEntry.path;\n    \n    return objectRef;\n}\n\nfunction getPathPrefix(treeName) {\n    return presetPathPrefixes[treeName];\n}\n\nfunction getNamedKeyName(inEntry) {\n    return inEntry.name + \":\" + inEntry.value + \" Named Key Entry\";\n}\n\nfunction getNamedKeyParentRef(inEntry) {\n    var objectRef = {};\n    objectRef.file = \"presets\";\n    objectRef.section = [\"named_keys\",inEntry.name];\n    \n    var path = [inEntry.name];\n    objectRef.path = path;\n    \n    return objectRef;\n}\n\n\nfunction isEmpty(object) {\n    for(var key in object) {\n        return false;\n    }\n    return true;\n}\n\n","description":""}},"presetPathPrefixes":{"name":"presetPathPrefixes","type":"apogee.JsonTable","updateData":{"data":{"communityMap":"cmk","communityEntity":"cek","drawing":"dk","level":"lk","geometry":"gk","entity":"ek","chain":"ck","node":"nk","link":"lnk","address":"ak"},"description":""}},"stringsObjectRefMap":{"name":"stringsObjectRefMap","type":"apogee.JsonTable","updateData":{"data":{"com_type":{"file":"presets","section":["property_trees","community_map"],"path":["com_type"]},"country":{"file":"presets","section":["named_groups","postal address"],"path":["country"]},"state":{"file":"presets","section":["named_groups","postal address"],"path":["country","US"]},"province":{"file":"presets","section":["named_groups","postal address"],"path":["country","CA"]},"prefecture":{"file":"presets","section":["named_groups","postal address"],"path":["country","JP"]},"territory":{"file":"presets","section":["named_groups","postal address"],"path":["country","AU"]},"icon":{"file":"theme","section":["icon"],"path":[]},"lang":{"file":"presets","section":["named_keys","lang"],"path":["lang"]},"map_type":{"file":"presets","section":["property_trees","drawing"],"path":["map_type"]}},"description":""}},"themeNameSuffixMap":{"name":"themeNameSuffixMap","type":"apogee.JsonTable","updateData":{"data":{"s":" Style","m":" Marker","i":" Icon","l":" Label Style"},"description":""}},"geomTypeCludgeMap":{"name":"geomTypeCludgeMap","type":"apogee.JsonTable","updateData":{"data":{"area":true,"barrier":true,"equipment":true,"facility":true,"fixture":true,"furnishing":true,"marker":true,"meta":true,"object":true,"recreation":true,"safety":true,"service":true,"sign":true,"signal":true,"structure":true,"traffic":true,"transit":true,"vegetation":true,"vehicle":true,"water":true},"description":""}},"isGeomTypeChild":{"name":"isGeomTypeChild","type":"apogee.FunctionTable","updateData":{"argList":["key"],"functionBody":"return geomTypeCludgeMap[key];","supplementalCode":"","description":""}},"capitalizeFirstLetter":{"name":"capitalizeFirstLetter","type":"apogee.FunctionTable","updateData":{"argList":["word"],"functionBody":"return word.substr(0,1).toUpperCase() + word.substr(1);","supplementalCode":"","description":""}}}},"matchedEntryList":{"name":"matchedEntryList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = [];\n\nvar inputList = preliminaryEntryList;\nfor(var i = 0; i < inputList.length; i++) {\n    var prelimEntry = inputList[i];\n    \n    //--------------------\n    //lookup the file entry type and the file entry\n    //-------------------\n    var lookupEntry = getLookupEntry(prelimEntry);\n\n    var matchingFileEntry;\n    var matchingFileTypeEntry;\n    if(lookupEntry) {\n        matchingFileTypeEntry = lookupEntry.fileTypeEntry;\n        \n        var matchingFileEntry = getMatchingFileEntry(prelimEntry,lookupEntry);\n    }\n    \n    //-------------------------------------\n    //lookup relations data where needed\n    //maybe this is a check on an existing entry, or maybe only if we new to contruct the entry.\n    //--------------------------------------\n    var outRelations = getRelations(prelimEntry);\n    \n    //some out entry object to look at\n    var outEntry = {};\n    outEntry.prelimEntry = prelimEntry;\n    if(matchingFileTypeEntry) outEntry.fileTypeEntry = matchingFileTypeEntry;\n    if(matchingFileEntry) outEntry.fileEntry = matchingFileEntry;\n    if(outRelations) outEntry.relations = outRelations;\n    output.push(outEntry);\n}\n\nreturn output;","supplementalCode":"//this gets the file entry type lookup object, which includes other needed info. \nfunction getLookupEntry(prelimEntry) {\n    var fileType = prelimEntry.fileType;\n    \n    var section = prelimEntry.section;\n    if(!section) section = [];\n    \n    var parentPath = prelimEntry.parent_path;\n    if(!parentPath) parentPath = [];\n    \n    var value = prelimEntry.entry_value;\n    \n    var lookupKey = data.getEntryStringFromParent(fileType,section,parentPath,value);\n    var lookupEntry = data.getFileEntry(lookupKey);\n    \n    return lookupEntry;\n}\n\n\nfunction getMatchingFileEntry(prelimEntry,lookupEntry) {\n    var entryData = prelimEntry.entry_data;\n    var fileEntries = lookupEntry.optionList;\n    \n    for(var i = 0; i < fileEntries.length; i++) {\n        var fileEntry = fileEntries[i];\n        if(jsonObjectsMatch(entryData,fileEntry.Fields.entry_data)) {\n            return fileEntry;\n        }\n    }\n    \n    return null;\n}\n\nfunction jsonObjectsMatch(a,b) {\n    return (JSON.stringify(getNormalizedCopy(a)) == JSON.stringify(getNormalizedCopy(b)));\n}\n\n/** This constructs the relations info with the proper references. */\nfunction getRelations(prelimEntry) {\n    if(prelimEntry.relations) {\n        var outRelations = [];\n        for(var ir = 0; ir < prelimEntry.relations.length; ir++) {\n            var relation = prelimEntry.relations[ir];\n            \n            var objectRef = relation.objectRef;\n            var lookupKey = data.getEntryString(objectRef.file,objectRef.section,objectRef.path);\n            var lookupEntry = data.getFileEntry(lookupKey);\n            //if(!fileEntryType) throw new Error(\"relation object not found!\");\n            \n            if(lookupEntry) {\n                var outRelation = {};\n                outRelation.type = relation.type;\n                outRelation.file_entry_type_id = lookupEntry.fileEntryType.Id;\n                \n                outRelations.push(outRelation);\n            }\n        }\n        return outRelations;\n    }\n    else {\n        return null;\n    }\n}","description":""}}}}}}}},"components":{"login":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":25,"y":25}},"children":{"loginUrl":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":463,"height":106},"posInfo":{"x":27,"y":42},"state":0,"viewType":"Text"}},"loginControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":354,"height":143},"posInfo":{"x":32,"y":183},"state":0,"viewType":"Output"},"resource":{"html":"","css":"","setData":"this.loginUrl = data;","constructorAddition":"\n\n//this uses the updated version of test authorization that takes and returns a JSON\nthis.onClick = function() {\n    \n    //get the output table\n    var outputTableName = \"sessionResponse\";\n    var fromMember = mode.getMember();\n    \n    //on click\n    var bodyJson = {};\n    bodyJson.userName = resource.userInput.value;\n    bodyJson.password = resource.passwordInput.value;\n    \n    //cleaer password field\n    resource.passwordInput.value = \"\";\n    \n    var options = {};\n    options.body = JSON.stringify(bodyJson);\n    options.method = \"POST\";\n    \n    var requestPromise = apogee.net.jsonRequest(this.loginUrl,options);\n    apogee.action.asynchDataUpdate(outputTableName,fromMember,requestPromise);\n}","init":"\nvar label1 = document.createElement(\"label\");\nlabel1.for = \"commitMessageInput\";\nlabel1.innerHTML = \"User:\"\nelement.appendChild(label1);\n\nvar input1 = document.createElement(\"input\");\ninput1.id = \"userInput\";\nresource.userInput = input1;\nelement.appendChild(input1);\n\nelement.appendChild(document.createElement(\"br\"));\n\nvar label2 = document.createElement(\"label\");\nlabel2.for = \"commitMessageInput\";\nlabel2.innerHTML = \"Password:\"\nelement.appendChild(label2);\n\nvar input2 = document.createElement(\"input\");\ninput2.id = \"passwordInput\";\nresource.passwordInput = input2;\nelement.appendChild(input2);\n\nelement.appendChild(document.createElement(\"br\"));\n\nvar button = document.createElement(\"button\");\nbutton.innerHTML = \"Login\";\nelement.appendChild(button);\n\nvar instance = this;\nbutton.onclick = function() {\n    instance.onClick();\n}\n\n\n"}},"sessionResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":697,"height":158},"posInfo":{"x":30,"y":368},"state":0,"viewType":"Text"}},"sessionKey":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":587,"height":167},"posInfo":{"x":35,"y":577},"state":0,"viewType":"Text"}}}},"data":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":61,"y":111}},"children":{"searchDef":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":540,"height":402},"posInfo":{"x":79,"y":38},"state":-1,"viewType":"Text"}},"rawRecordMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":495,"height":261},"posInfo":{"x":747,"y":35},"state":-1,"viewType":"Formula"}},"getEntryString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":553,"height":37},"posInfo":{"x":55,"y":292},"state":-1,"viewType":"Code"}},"getEntryStringFromParent":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":546,"height":43},"posInfo":{"x":52,"y":343},"state":-1,"viewType":"Code"}},"getEntryStringFromRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":672,"height":170},"posInfo":{"x":50,"y":396},"state":-1,"viewType":"Code"}},"getRawRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":28},"posInfo":{"x":377,"y":36},"state":-1,"viewType":"Code"}},"fileEntryMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":724,"height":346},"posInfo":{"x":741,"y":135},"state":-1,"viewType":"Text"}},"fileEntryDownload":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":507,"height":322},"posInfo":{"x":73,"y":97},"state":-1,"viewType":"JSON"}},"getFileEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":342,"height":90},"posInfo":{"x":406,"y":130},"state":-1,"viewType":"Code"}},"fileEntryOptionMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":635,"height":300},"posInfo":{"x":745,"y":91},"state":-1,"viewType":"Formula"}},"fileTypeMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":305,"height":155},"posInfo":{"x":748,"y":217},"state":-1,"viewType":"Text"}},"getFileTypeId":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":42},"posInfo":{"x":411,"y":220},"state":-1,"viewType":"Code"}}}},"micemetarDataAccess":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":95,"y":168}},"children":{"createRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":560,"height":321},"posInfo":{"x":33,"y":368},"state":-1,"viewType":"Code"}},"recordsToCreateInstructions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":834,"height":391},"posInfo":{"x":30,"y":472},"state":-1,"viewType":"Code"}},"createCommitBody":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":568,"height":400},"posInfo":{"x":629,"y":225},"state":-1,"viewType":"Code"}},"createRequestOptions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":523,"height":254},"posInfo":{"x":822,"y":379},"state":-1,"viewType":"Code"}},"host":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":353,"height":71},"posInfo":{"x":16,"y":6},"state":-1,"viewType":"Text"}},"commitUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":433,"height":107},"posInfo":{"x":14,"y":98},"state":-1,"viewType":"Text"}},"requestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":450,"height":68},"posInfo":{"x":14,"y":57},"state":-1,"viewType":"Formula"}},"dataSetInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":882,"height":611},"posInfo":{"x":28,"y":622},"state":-1,"viewType":"Text"}},"version":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":197,"height":91},"posInfo":{"x":523,"y":367},"state":0,"viewType":"Text"}},"createUpdateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":886,"height":655},"posInfo":{"x":36,"y":248},"state":-1,"viewType":"Code"}},"createCreateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":994,"height":643},"posInfo":{"x":35,"y":209},"state":-1,"viewType":"Code"}},"getFieldErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":512,"height":68},"posInfo":{"x":761,"y":616},"state":-1,"viewType":"Code"}},"getRecordErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":81},"posInfo":{"x":762,"y":664},"state":-1,"viewType":"Code"}},"createDeleteInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":678,"height":540},"posInfo":{"x":36,"y":289},"state":-1,"viewType":"Code"}},"getRecordInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":480,"height":400},"posInfo":{"x":818,"y":427},"state":-1,"viewType":"Code"}},"combinedEntriesToInstructionList":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":721,"height":524},"posInfo":{"x":31,"y":516},"state":-1,"viewType":"Private"}},"getCommitPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":569,"height":109},"posInfo":{"x":565,"y":40},"state":-1,"viewType":"Code"}},"getRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":546,"height":89},"posInfo":{"x":563,"y":90},"state":-1,"viewType":"Code"}},"customRequestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":17,"y":142},"state":-1,"viewType":"Formula"}},"getCustomRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":668,"height":88},"posInfo":{"x":564,"y":134},"state":-1,"viewType":"Code"}}}},"inputCreate":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":165,"y":65}},"children":{"fileType":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":215,"height":37},"posInfo":{"x":29,"y":23},"state":0,"viewType":"Text"}},"inputFile":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":27,"y":214},"state":0,"viewType":"Text"}},"matchedEntryList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":547,"height":555},"posInfo":{"x":384,"y":301},"state":0,"viewType":"Text"}},"fileTypeId":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":218,"height":32},"posInfo":{"x":28,"y":113},"state":0,"viewType":"Text"}},"createSettings":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":310,"height":106},"posInfo":{"x":344,"y":12},"state":0,"viewType":"Text"}},"createRecords":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":700,"height":517},"posInfo":{"x":519,"y":163},"state":0,"viewType":"Text"}}}},"getMatchedEntries":{"type":"apogeeapp.app.FolderFunctionComponent","windowState":{"posInfo":{"x":404,"y":37}},"children":{"inputFile":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":353,"height":299},"posInfo":{"x":29,"y":160},"state":0,"viewType":"JSON"}},"preliminaryEntryList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":554,"height":583},"posInfo":{"x":392,"y":50},"state":-1,"viewType":"Text"}},"fileType":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":328,"height":41},"posInfo":{"x":16,"y":46},"state":0,"viewType":"Text"}},"readPreliminaryEntries":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":681,"y":84}},"children":{"theme":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":552,"height":470},"posInfo":{"x":42,"y":203},"state":-1,"viewType":"Private"}},"themeSectionMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":208},"posInfo":{"x":752,"y":7},"state":-1,"viewType":"Text"}},"themeMap":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":832,"height":660},"posInfo":{"x":42,"y":83},"state":-1,"viewType":"Private"}},"strings":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":747,"height":400},"posInfo":{"x":33,"y":136},"state":-1,"viewType":"Code"}},"inputColors":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":626,"height":479},"posInfo":{"x":45,"y":257},"state":-1,"viewType":"Private"}},"presetOverrides":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":770,"height":677},"posInfo":{"x":49,"y":25},"state":-1,"viewType":"Private"}},"presetPathPrefixes":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":545,"height":300},"posInfo":{"x":764,"y":118},"state":-1,"viewType":"Form"}},"stringsObjectRefMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":664,"height":590},"posInfo":{"x":758,"y":165},"state":-1,"viewType":"Text"}},"themeNameSuffixMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":104},"posInfo":{"x":755,"y":49},"state":-1,"viewType":"Text"}},"geomTypeCludgeMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":302,"height":340},"posInfo":{"x":786,"y":303},"state":-1,"viewType":"Text"}},"isGeomTypeChild":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":798,"y":350},"state":-1,"viewType":"Code"}},"capitalizeFirstLetter":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":790,"y":401},"state":-1,"viewType":"Code"}}}},"matchedEntryList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":784,"height":608},"posInfo":{"x":421,"y":146},"state":0,"viewType":"Text"}}}}}}