{"fileType":"apogee workspace","jsLinks":[],"cssLinks":[],"workspace":{"fileType":"apogee workspace","version":0.2,"data":{"name":"ingestMetaFile","type":"apogee.Folder","children":{"inputProcessing":{"name":"inputProcessing","type":"apogee.Folder","children":{"inputFile":{"name":"inputFile","type":"apogee.JsonTable","updateData":{"data":{"entries":[{"type":"value","tree":"geometry","path":["facility"],"value":"stall","entry":{}},{"type":"value","tree":"geometry","path":["facility"],"value":"sink","entry":{}},{"type":"value","tree":"geometry","path":["furnishing"],"value":"countertops","entry":{}},{"type":"value","tree":"geometry","path":["facility"],"value":"refrigerator","entry":{}},{"type":"value","tree":"geometry","path":["facility"],"value":"urinal","entry":{}},{"type":"value","tree":"geometry","path":["facility"],"value":"urinal","entry":{}}],"named_keys":[{"name":"icon","value":"stall","entry":{}},{"name":"icon","value":"sink","entry":{}},{"name":"address keys","value":"Countertops","entry":{}},{"name":"address keys","value":"Workspace","entry":{}}]},"description":""}},"entryList":{"name":"entryList","type":"apogee.JsonTable","updateData":{"data":["section","entry_parent","entry_type","entry_value","entry_data"],"description":""}},"preliminaryEntryFormat":{"name":"preliminaryEntryFormat","type":"apogee.JsonTable","updateData":{"data":["parentPath","type","value","entry_data"],"description":""}},"preliminaryEntryList":{"name":"preliminaryEntryList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return readPreliminaryEntries[fileType](inputFile);","supplementalCode":"","description":""}},"fileType":{"name":"fileType","type":"apogee.JsonTable","updateData":{"data":"presetOverrides","description":""}},"readPreliminaryEntries":{"name":"readPreliminaryEntries","type":"apogee.Folder","children":{"theme":{"name":"theme","type":"apogee.FunctionTable","updateData":{"argList":["metaFile"],"functionBody":"var output = [];\n\nvar fileName = metaFile.nm;\nvar iurl = metaFile.iurl;\n\nfor(var sectionTag in themeSectionMap) {\n    var section = metaFile[sectionTag];\n    var sectionValue = themeSectionMap[sectionTag];\n    if(section) {\n        for(var key in section) {\n            var data = section[key];\n            \n            if((iurl)&&(sectionTag == \"i\")) {\n                data = getIconData(data,iurl);\n            }\n            \n            var entry = {};\n            entry.section = sectionValue;\n            entry.entry_value = key;\n            entry.entry_data = data;\n            entry.option_name = fileName;\n            output.push(entry);\n        }\n    }\n}\n\nreturn output;","supplementalCode":"function getIconData(data,iurl) {\n    var outData = apogee.util.deepJsonCopy(data);\n    if(data.rurl) {\n        outData.url = iurl + data.rurl;\n        delete outData.rurl;\n    }\n    return outData;\n}","description":""}},"themeSectionMap":{"name":"themeSectionMap","type":"apogee.JsonTable","updateData":{"data":{"s":["style"],"m":["marker"],"i":["icon"],"l":["labelStyle"]},"description":""}},"themeMap":{"name":"themeMap","type":"apogee.FunctionTable","updateData":{"argList":["metaFile"],"functionBody":"var output = [];\n\nvar fileName = \"Standard\";\n\nvar labelSectionValue = [\"label\"];\nvar labelSection = metaFile.label;\nvar labelPayloadKeys = [\"lt\",\"r\",\"trans\"];\naddEntries(fileName,labelSectionValue,labelSection,labelPayloadKeys,output);\n\nvar styleSectionValue = [\"style\"];\nvar styleSection = metaFile.style;\nvar stylePayloadKeys = [\"n\"];\naddEntries(fileName,styleSectionValue,styleSection,stylePayloadKeys,output);\n\nreturn output;","supplementalCode":"function addEntries(fileName,sectionValue,section,payloadTags,output) {\n    \n    var prioritySection;\n    var priority;\n    var fixedData;\n    \n    for(var i = 0; i < section.length; i++) {\n        prioritySection = section[i];\n        priority = prioritySection.priority;\n        \n        fixedData = {};\n        fixedData.payloadTags = payloadTags;\n        fixedData.fileName = fileName;\n        fixedData.sectionValue = sectionValue;\n        fixedData.insertionInfo = {\"priority\":priority};\n        \n        parentPath = [];\n        var keyList = prioritySection.ks;\n        if(keyList) {\n            addEntriesFromKeyList(keyList,parentPath,fixedData,output);\n        }\n    }\n    \n    //on the last priority section, check for a default\n    var data = {};\n    var hasData = false;\n    for(var it = 0; it < fixedData.payloadTags.length; it++) {\n        var tag = fixedData.payloadTags[it];\n        if(prioritySection[tag] !== undefined) {\n            data[tag] = prioritySection[tag];\n            hasData = true;\n        }\n    }\n    \n    if(hasData) {\n        addDefaultEntry(data,fixedData,output);\n    }\n    \n}\n\nfunction addEntriesFromKeyList(keyList,parentPath,fixedData,output) {\n    for(var i = 0; i < keyList.length; i++) {\n        var inEntry = keyList[i];\n        addKeyEntry(inEntry,parentPath,fixedData,output);\n    }\n}\n\nfunction addKeyEntry(inEntry,parentPath,fixedData,output) {\n    \n    //get the key type\n    var key;\n    var keyType;\n    if(inEntry.gk !== undefined) {\n        keyType = \"gk\";\n        key = inEntry.gk;\n    } \n    else if(inEntry.ek !== undefined) {\n        keyType = \"ek\";\n        key = inEntry.ek;\n    } \n    else if(inEntry.ak !== undefined) {\n        keyType = \"ak\";\n        key = inEntry.ak;\n    } \n    \n    \n    //update parent path for this key type  (we are assuming a path will use a single key type!)\n    if(parentPath.length === 0) {\n        parentPath.push(keyType);\n    }\n    else {\n        if(parentPath.lenth > 0) {\n            if(parentPath[0] != keyType) {\n                //I don't think we need to support this...\n                throw new Error(\"Theme map entry with different key types! Legal but not yet supported here.\")\n            }\n        }\n    }\n    \n    //update the path for the children\n    var thisPath = apogee.util.deepJsonCopy(parentPath);\n    thisPath.push(key);\n    \n    var data = {};\n    var hasData = false;\n    for(var it = 0; it < fixedData.payloadTags.length; it++) {\n        var tag = fixedData.payloadTags[it];\n        if(inEntry[tag] !== undefined) {\n            data[tag] = inEntry[tag];\n            hasData = true;\n        }\n    }\n    \n    //only save this entry if there is actually data\n    if(hasData) {\n        var outEntry = {};\n        outEntry.insertionInfo = fixedData.insertionInfo;\n        outEntry.section = fixedData.sectionValue;\n        outEntry.option_name = fixedData.fileName;\n        outEntry.parent_path = parentPath;\n        outEntry.entry_type = \"key\";\n        outEntry.entry_value = key;\n        outEntry.entry_data = data;\n        output.push(outEntry);\n    }\n    \n    //do the children!\n    var valueMap = inEntry.v;\n    if(valueMap) {\n        addEntriesFromValueMap(valueMap,thisPath,fixedData,output);\n    }\n}\n\nfunction addEntriesFromValueMap(valueMap,parentPath,fixedData,output) {\n for(var value in valueMap) {\n        var inEntry = valueMap[value];\n        addValueEntry(value,inEntry,parentPath,fixedData,output);\n    }\n}\n\nfunction addValueEntry(value,inEntry,parentPath,fixedData,output) {\n\n    //update the path for the children\n    var thisPath = apogee.util.deepJsonCopy(parentPath);\n    thisPath.push(value);\n    \n    var data = {};\n    var hasData = false;\n    for(var it = 0; it < fixedData.payloadTags.length; it++) {\n        var tag = fixedData.payloadTags[it];\n        if(inEntry[tag] !== undefined) {\n            data[tag] = inEntry[tag];\n            hasData = true;\n        }\n    }\n    \n    //only save this entry if there is actually data\n    if(hasData) {\n        var outEntry = {};\n        outEntry.insertionInfo = fixedData.insertionInfo;\n        outEntry.section = fixedData.sectionValue;\n        outEntry.option_name = fixedData.fileName;\n        outEntry.parent_path = parentPath;\n        outEntry.entry_type = \"value\";\n        outEntry.entry_value = value;\n        outEntry.entry_data = data;\n        output.push(outEntry);\n    }\n    \n    //do the children!\n    var keyList = inEntry.ks;\n    if(keyList) {\n        addEntriesFromValueMap(keyList,thisPath,fixedData,output);\n    }\n}\n\n\nfunction addDefaultEntry(data,fixedData,output) {\n    var outEntry = {};\n    outEntry.insertionInfo = fixedData.insertionInfo;\n    outEntry.section = fixedData.sectionValue;\n    outEntry.option_name = fixedData.fileName;\n    outEntry.entry_type = \"default\";\n    outEntry.entry_value = \"default\";\n    outEntry.entry_data = data;\n    output.push(outEntry);\n}","description":""}},"strings":{"name":"strings","type":"apogee.FunctionTable","updateData":{"argList":["metaFile"],"functionBody":"var output = [];\n\nvar fileName = \"Standard\";\n\nfor(var key in metaFile.translations) {\n    var inEntry = metaFile.translations[key];\n    \n    for(var lang in inEntry) {\n        var translation = inEntry[lang];\n        \n        var outEntry = {};\n        outEntry.section = lang;\n        outEntry.entry_value = key;\n        outEntry.entry_data = {\"trans\":translation};\n        outEntry.optionName = fileName;\n        output.push(outEntry);\n    }\n}\n\nreturn output;","supplementalCode":"","description":""}},"inputColors":{"name":"inputColors","type":"apogee.FunctionTable","updateData":{"argList":["metaFile"],"functionBody":"var output = [];\n\nvar fileName = \"Factory\";\n\nfor(var color in metaFile) {\n    var inEntry = metaFile[color];\n    \n    entryData = {};\n    entryData.propertyPath = getPropertyPath(inEntry.props);\n    if(inEntry.doLinearArea) {\n        entryData.doLinearArea = true;\n    }\n    \n    var outEntry = {};\n    outEntry.entry_value = color;\n    outEntry.optionName = fileName;\n    outEntry.entry_data = entryData;\n    output.push(outEntry);\n}\n\nreturn output;","supplementalCode":"function getPropertyPath(props) {\n    //I am assuming these are in order and that they give a single object\n    var path = [\"gk\"];\n    for(var key in props) {\n        path.push(key);\n        path.push(props[key]);\n    }\n    return path;\n}\n","description":""}},"presetOverrides":{"name":"presetOverrides","type":"apogee.FunctionTable","updateData":{"argList":["metaFile"],"functionBody":"var output = [];\n\nvar optionName = \"Standard\";\n\nvar propTreeEntries = metaFile.entries;\nfor(var i = 0; i < propTreeEntries.length; i++) {\n    var inEntry = propTreeEntries[i];\n    var outEntry = getPropTreeEntry(inEntry,optionName);\n    output.push(outEntry);\n}\n\nvar namedKeyEntries = metaFile.named_keys;\nfor(var namedKey in namedKeyEntries) {\n    var inEntry = namedKeyEntries[namedKey];\n    var outEntry = getNamedKeyEntry(inEntry,optionName);\n    output.push(outEntry);\n}\n\nreturn output;","supplementalCode":"function getPropTreeEntry(inEntry,optionName) {\n    //make sure \"entry\" field is empty\n    if(!isEmpty(inEntry.entry)) {\n        throw new Error(\"Non empty child entry: \" + inEntry.value);\n    }\n    \n    outEntry = {};\n    outEntry.section = [\"property_trees\",inEntry.tree];\n    outEntry.optionName = optionName;\n    outEntry.parentPath = getPropsParentPath(inEntry);\n    outEntry.entry_type = inEntry.type;\n    outEntry.entry_value = inEntry.value;\n    outEntry.entry_data = {};\n    return outEntry;\n}\n\n\nfunction getNamedKeyEntry(inEntry,optionName) {\n    //make sure \"entry\" field is empty\n    if(!isEmpty(inEntry.entry)) {\n        throw new Error(\"Non empty child entry: \" + inEntry.value);\n    }\n    \n    if(inEntry.type == \"key\") {\n        throw new Error(\"Entry type key in named keys. Not supported. \");\n    }\n    \n    outEntry = {};\n    outEntry.section = [\"named_keys\",inEntry.name];\n    outEntry.optionName = optionName;\n    outEntry.parentPath = getNamedKeyParentPath(inEntry);\n    outEntry.entry_type = inEntry.type;\n    outEntry.entry_value = inEntry.value;\n    outEntry.entry_data = {};\n    return outEntry;\n}\n\nfunction getPropsParentPath(inEntry) {\n    var path = [];\n    path.push(getPathPrefix(inEntry.tree));\n    return path.concat(inEntry.path);\n}\n\nfunction getPathPrefix(treeName) {\n    return presetPathPrefixes[treeName];\n}\n\nfunction getNamedKeyParentPath(inEntry) {\n    var path = [];\n    path.push(\"named_key\");\n    path.push(inEntry.name);\n    return path;\n}\n\n\nfunction isEmpty(object) {\n    for(var key in object) {\n        return false;\n    }\n    return true;\n}\n\n","description":""}},"presetPathPrefixes":{"name":"presetPathPrefixes","type":"apogee.JsonTable","updateData":{"data":{"communityMap":"cmk","communityEntity":"cek","drawing":"dk","level":"lk","geometry":"gk","entity":"ek","chain":"ck","node":"nk","link":"lnk","address":"ak"},"description":""}}}}}}}}},"components":{"inputProcessing":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":75,"y":75}},"children":{"inputFile":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":420,"height":660},"posInfo":{"x":544,"y":20},"state":0,"viewType":"JSON"}},"entryList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":759,"y":161},"state":-1,"viewType":"Form"}},"preliminaryEntryFormat":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":31},"posInfo":{"x":771,"y":99},"state":-1,"viewType":"Form"}},"preliminaryEntryList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":441,"height":583},"posInfo":{"x":55,"y":113},"state":0,"viewType":"Text"}},"fileType":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":328,"height":89},"posInfo":{"x":42,"y":16},"state":0,"viewType":"Text"}},"readPreliminaryEntries":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":825,"y":39}},"children":{"theme":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":552,"height":470},"posInfo":{"x":32,"y":35},"state":-1,"viewType":"Code"}},"themeSectionMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":479},"posInfo":{"x":742,"y":42},"state":-1,"viewType":"Form"}},"themeMap":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":832,"height":821},"posInfo":{"x":52,"y":343},"state":0,"viewType":"Private"}},"strings":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":508,"height":400},"posInfo":{"x":15,"y":196},"state":0,"viewType":"Code"}},"inputColors":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":626,"height":400},"posInfo":{"x":28,"y":145},"state":-1,"viewType":"Code"}},"presetOverrides":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":770,"height":677},"posInfo":{"x":164,"y":57},"state":0,"viewType":"Private"}},"presetPathPrefixes":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":545,"height":300},"posInfo":{"x":737,"y":101},"state":-1,"viewType":"Form"}}}}}}}}