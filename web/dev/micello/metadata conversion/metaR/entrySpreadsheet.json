{"fileType":"apogee workspace","jsLinks":[],"cssLinks":[],"workspace":{"fileType":"apogee workspace","version":0.2,"data":{"name":"entrySpreadsheet","type":"apogee.Folder","children":{"login":{"name":"login","type":"apogee.Folder","children":{"loginUrl":{"name":"loginUrl","type":"apogee.JsonTable","updateData":{"data":"http://localhost:8080/TestAuthorization/loginjson","description":""}},"loginControl":{"name":"loginControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return loginUrl;","supplementalCode":"","description":""}},"sessionResponse":{"name":"sessionResponse","type":"apogee.JsonTable","updateData":{"data":{"sessionKey":"SESS0f6c4c2238a670b8138b63d9fd03cc22=clkqlpn6jk2196llk5tkrrr212","responseCode":1},"description":""}},"sessionKey":{"name":"sessionKey","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!sessionResponse) return \"\";\n\nif(sessionResponse.responseCode === 1) {\n    return sessionResponse.sessionKey;\n}\nelse {\n    throw new Error(\"Login error: \" + sessionResponse.message);\n}","supplementalCode":"","description":""}}}},"micemetarDataAccess":{"name":"micemetarDataAccess","type":"apogee.Folder","children":{"createRecord":{"name":"createRecord","type":"apogee.FunctionTable","updateData":{"argList":["recordType","fieldMap"],"functionBody":"var record = {};\n\nrecord.Id = getId();\nrecord.Type = recordType;\nrecord.Fields = fieldMap;\nrecord.read_perm = READ_PERM;\nrecord.edit_perm = EDIT_PERM;\n\nreturn record;","supplementalCode":"var READ_PERM = 2;\nvar EDIT_PERM = 15;\n\nvar nextId = -1;\n\nfunction getId() {\n    return nextId--;\n}","description":"This method creates a record given the field values and record info \nfrom the data set info. It creates and ID and uses standard permissions."}},"recordsToCreateInstructions":{"name":"recordsToCreateInstructions","type":"apogee.FunctionTable","updateData":{"argList":["recordList"],"functionBody":"var instructions = [];\n\nfor(var i = 0; i < recordList.length; i++) {\n    var createRecord = recordList[i];\n    var instruction = createCreateInstruction(createRecord);\n    instructions.push(instruction);\n}\n\nreturn instructions;","supplementalCode":"","description":"This creates a list of create instructions to go along with a list of records to be created.\n\nThere is the option to assign the ID or to leave it as undefined, in which case\nan automatically incremented ID will be assigned. (For consistency in the data\nset, either all records should be preassigned or all records should be \nautomatically assigned."}},"createCommitBody":{"name":"createCommitBody","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage"],"functionBody":"var commit = {};\nvar actions = [];\n\nif(commitMessage.length === 0) throw new Error(\"Commit message missing!\");\n\ncommit.Name = dataSetInfo.name;\ncommit.Message = commitMessage;\ncommit.Actions = actions;\n\n//single action with commits\nvar action = {};\naction.Title = \"bulk create commit\";\naction.Instr = instructionList;\nactions.push(action);\n\nreturn commit","supplementalCode":"","description":"This creates a body for a commit request, given a list of instructions and a commit message."}},"createRequestOptions":{"name":"createRequestOptions","type":"apogee.FunctionTable","updateData":{"argList":["bodyJson","sessionKey"],"functionBody":"var header = {};\nheader[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\nheader.sessionKey = sessionKey;\nheader[\"proto-version\"] = \"4.0\";\nheader[\"db-version\"] = dataSetInfo.version;\n\nrequestInfo = {};\nrequestInfo.header = header;\nif(bodyJson) {\n    requestInfo.method = \"POST\";\n    requestInfo.body = JSON.stringify(bodyJson);\n}\n\nreturn requestInfo;\n","supplementalCode":"","description":"This creates the requestOptions, suitable for apogee.net.jsonRequest, to go with an type of request to the workingset (micemetarequest) server."}},"host":{"name":"host","type":"apogee.JsonTable","updateData":{"data":"http://localhost:8080/micemetarws","description":""}},"commitUrl":{"name":"commitUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvalue = host + \"/commit\";\nreturn value;\n\n","supplementalCode":"","description":""}},"requestUrl":{"name":"requestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return host + \"/cannedsearch\";\n\n","supplementalCode":"","description":""}},"dataSetInfo":{"name":"dataSetInfo","type":"apogee.JsonTable","updateData":{"data":{"records":{"file_entry_relation":{"idField":"file_entry_rel_id","name":"file_entry_relation","foreignList":[],"fields":[{"defaultValue":null,"name":"file_entry_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileEntry"},{"defaultValue":null,"name":"ref_entry_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileEntry"},{"defaultValue":null,"name":"relation_type","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.FileEntryRelation"},"com_file_entry":{"idField":"com_file_entry_id","name":"com_file_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"com_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.ComFile"},{"defaultValue":null,"name":"meta_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"},{"defaultValue":null,"name":"file_group","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.ComFileEntry"},"file_type":{"idField":"file_type_id","name":"file_type","foreignList":[{"remoteRecord":"file_entry","name":"file_entry_list","isUnique":false,"remoteField":"file_type_id","restrictDelete":true}],"fields":[{"defaultValue":null,"name":"file_type_name","nullOk":true,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.FileType"},"file_entry":{"idField":"file_entry_id","name":"file_entry","foreignList":[{"remoteRecord":"file_entry_relation","name":"file_entry_ref_list","isUnique":false,"remoteField":"file_entry_id","restrictDelete":true}],"fields":[{"defaultValue":null,"name":"entry_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"entry_name","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"file_type_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileType"},{"defaultValue":null,"name":"entry_section","nullOk":true,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"entry_value","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"option_name","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"entry_data","nullOk":false,"fieldClass":"org.json.JSONObject"}],"recordClass":"com.micello.micemetar.data.FileEntry"},"recipe_entry":{"idField":"recipe_entry_id","name":"recipe_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"meta_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"},{"defaultValue":null,"name":"file_entry_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileEntry"},{"defaultValue":null,"name":"insertion_info","nullOk":true,"fieldClass":"org.json.JSONObject"}],"recordClass":"com.micello.micemetar.data.RecipeEntry"},"com_file":{"idField":"com_file_id","name":"com_file","foreignList":[{"remoteRecord":"com_file_entry","name":"com_file_entry_list","isUnique":false,"remoteField":"com_file_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":null,"name":"file_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"name","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"ref","nullOk":true,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.ComFile"},"meta_file":{"idField":"meta_file_id","name":"meta_file","foreignList":[{"remoteRecord":"recipe_entry","name":"recipe_entry_list","isUnique":false,"remoteField":"meta_file_id","restrictDelete":true,"orderField":"ordr"},{"remoteRecord":"meta_ref_entry","name":"base_file_list","isUnique":false,"remoteField":"meta_file_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":null,"name":"file_type_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileType"},{"defaultValue":null,"name":"file_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"name","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.MetaFile"},"meta_ref_entry":{"idField":"meta_ref_entry_id","name":"meta_ref_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"meta_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"},{"defaultValue":null,"name":"base_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"}],"recordClass":"com.micello.micemetar.data.MetaRefEntry"}},"name":"Micemetar","version":"5.0"},"description":""}},"createUpdateInstruction":{"name":"createUpdateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["initialRecord","targetRecord"],"functionBody":"if(initialRecord.Id != targetRecord.Id) {\n    throw new Error(\"Record ID mismatch in create update instruction for target record: \" + getRecordErrString(targetRecord));\n}\n\nif(initialRecord.Type != targetRecord.Type) {\n    throw new Error(\"Inital and target record types do not match. Target record: \" + getRecordErrString(targetRecord));\n}\n\nvar recordsDifferent = false;\n\nvar recordInfo = getRecordInfo(initialRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Update\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = initialRecord.Id;\n\ninstruction.initialReadPerm = initialRecord.read_perm;\ninstruction.initialEditPerm = initialRecord.edit_perm;\n\nif(initialRecord.readPerm != targetRecord.readPerm) {\n    instruction.targetReadPerm = targetRecord.read_perm;\n    recordsDifferent = true;\n}\n\nif(initialRecord.editPerm != targetRecord.editPerm) {\n    instruction.targetEditPerm = targetRecord.edit_perm;\n    recordsDifferent = true;\n}\n\nvar initialData = {};\ninstruction.Initial = initialData;\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    \n    var initialValue;\n    var targetValue;\n    \n    var initialValue = initialRecord.Fields[field.name];\n    var targetValue = targetRecord.Fields[field.name];\n    \n    //validate target values\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecordInfo,createRecord.Id,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(createRecordInfo,createRecord.Id,field));\n        }\n    }\n    \n    if(!fieldsMatch(initialValue,targetValue,field)) {\n        initialData[field.name] = initialValue;\n        targetData[field.name] = targetValue;\n        recordsDifferent = true;\n    }\n}\n\nif(recordsDifferent) {\n    return instruction;\n}\nelse {\n    return null;\n}\n","supplementalCode":"function fieldsMatch(initialValue,targetValue,fieldInfo) {\n    if(fieldInfo.fieldClass === \"java.lang.String\") {\n        //compare strings with \"==\"\n        return (initialValue == targetValue);\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"java.lang\")) {\n        //compare other basic values with \"===\"\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"com.micello\")) {\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONObject\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONArray\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else {\n        throw new Error(\"unrecognized field type: \" + fieldInfo.fieldClass);\n    }\n}\n\nfunction compareJsonData(a,b) {\n    var an = apogee.util.getNormalizedObjectCopy(a);\n    var bn = apogee.util.getNormalizedObjectCopy(b);\n    var aString = JSON.stringify(an);\n    var bString = JSON.stringify(bn);\n    return aString == bString;\n}\n    ","description":"This function creates an update instruction given an initial and target record. If the records are the same then NULL is returned. (No update is needed.)"}},"createCreateInstruction":{"name":"createCreateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["createRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(createRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Create\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = createRecord.Id;\n\ninstruction.targetReadPerm = createRecord.read_perm;\ninstruction.targetEditPerm = createRecord.edit_perm;\n\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var targetValue;\n    var targetValue = createRecord.Fields[field.name];\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(createRecord,field));\n        }\n    }\n    \n    targetData[field.name] = targetValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getFieldErrString":{"name":"getFieldErrString","type":"apogee.FunctionTable","updateData":{"argList":["record","fieldInfo"],"functionBody":"return getRecordErrString(record) + \" - \" + fieldInfo.name;","supplementalCode":"","description":""}},"getRecordErrString":{"name":"getRecordErrString","type":"apogee.FunctionTable","updateData":{"argList":["record"],"functionBody":"return record.Type + \" \" + record.Id;","supplementalCode":"","description":""}},"createDeleteInstruction":{"name":"createDeleteInstruction","type":"apogee.FunctionTable","updateData":{"argList":["deleteRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(deleteRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Delete\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = deleteRecord.Id;\n\ninstruction.initialReadPerm = deleteRecord.read_perm;\ninstruction.initialEditPerm = deleteRecord.edit_perm;\n\nvar initialData = {};\ninstruction.Initial = initialData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var initialValue = deleteRecord.Fields[field.name];\n    \n    initialData[field.name] = initialValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getRecordInfo":{"name":"getRecordInfo","type":"apogee.FunctionTable","updateData":{"argList":["recordType"],"functionBody":"var recordInfo = dataSetInfo.records[recordType];\n\nif(!recordInfo) {\n    throw new Error(\"Record type not found in getRecordInfo: \" + recordType);\n}\n\nreturn recordInfo;","supplementalCode":"","description":""}},"combinedEntriesToInstructionList":{"name":"combinedEntriesToInstructionList","type":"apogee.FunctionTable","updateData":{"argList":["combinedEntries"],"functionBody":"var output = [];\nfor(var key in combinedEntries) {\n    var entry = combinedEntries[key];\n    var instruction = getInstructionForCombinedEntry(entry);\n    if(instruction) {\n        output.push(instruction);\n    }\n}\n\nreturn output;","supplementalCode":"function getInstructionForCombinedEntry(combinedEntry) {\n    var newEntry = combinedEntry.newEntry;\n    var oldEntry = combinedEntry.oldEntry;\n    \n    if(newEntry) {\n        if(!oldEntry) {\n            console.log(\"Create: \" + newEntry.Id);\n            return createCreateInstruction(newEntry);\n        }\n        else {\n            //this will return null for matching records\n            console.log(\"Update(maybe): \" + newEntry.Id);\n            return createUpdateInstruction(oldEntry,newEntry);\n        }\n    }\n    else if(oldEntry) {\n        console.log(\"Delete: \" + oldEntry.Id);\n        return createDeleteInstruction(oldEntry);\n    }\n    \n    return null;\n}\n\nfunction entriesDifferent(entry1,entry2) {\n    var string1 = JSON.stringify(apogee.util.getNormalizedCopy(entry1));\n    var string2 = JSON.stringify(apogee.util.getNormalizedCopy(entry2));\n    return (string1 == string2);\n}","description":"This function takes a combined entry map of the format:\n\n{\n  \"some-identifier\":{\n    \"oldEntry\":{original record entry, if applicable},\n    \"newEntry\":{new record entry, if applicable}\n  },\n  ...\n}\n\nIt returns an instruction list.\n\n"}},"getCommitPromise":{"name":"getCommitPromise","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage","sessionKey"],"functionBody":"var commitBody = createCommitBody(instructionList,commitMessage);\nvar requestOptions = createRequestOptions(commitBody,sessionKey);\nreturn apogee.net.jsonRequest(commitUrl,requestOptions);","supplementalCode":"","description":""}},"getRequestPromise":{"name":"getRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn apogee.net.jsonRequest(requestUrl,requestOptions);","supplementalCode":"","description":""}},"customRequestUrl":{"name":"customRequestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return host + \"/request\";","supplementalCode":"","description":""}},"getCustomRequestPromise":{"name":"getCustomRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn apogee.net.jsonRequest(customRequestUrl,requestOptions);","supplementalCode":"","description":""}}}},"data":{"name":"data","type":"apogee.Folder","children":{"searchDef":{"name":"searchDef","type":"apogee.JsonTable","updateData":{"data":{"searchType":"table","search":{"record":"file_type"},"cascade":[{"record":"file_type","field":"file_entry_list"}]},"description":""}},"rawRecordMap":{"name":"rawRecordMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\naddToOutput(fileEntryDownload.data.Response,output);\naddToOutput(fileEntryDownload.data.Records,output);\n\nreturn output;","supplementalCode":"function addToOutput(list,output) {\n    for(var i = 0; i < list.length; i++) {\n        var record = list[i];\n\n        var typeMap = output[record.Type];\n        if(!typeMap) {\n            typeMap = {};\n            output[record.Type] = typeMap;\n        }\n        \n        typeMap[record.Id] = record;\n    }\n}","description":""}},"getRawRecord":{"name":"getRawRecord","type":"apogee.FunctionTable","updateData":{"argList":["metaFileType","id"],"functionBody":"return rawRecordMap[metaFileType][id];","supplementalCode":"","description":""}},"fileEntryDownload":{"name":"fileEntryDownload","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return micemetarDataAccess.getCustomRequestPromise(searchDef,login.sessionKey);\n","supplementalCode":"","description":""}},"fileTypeMap":{"name":"fileTypeMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nvar byName = {};\nvar byId = {}\n\nvar fileTypeRecordList = fileEntryDownload.data.Response;\nfor(var i = 0; i < fileTypeRecordList.length; i++) {\n    var record = fileTypeRecordList[i];\n    byName[record.Fields.file_type_name] = record.Id;\n    byId[record.Id] = record.Fields.file_type_name;\n}\n\noutput.byName = byName;\noutput.byId = byId;\n\nreturn output;","supplementalCode":"","description":""}},"getFileTypeId":{"name":"getFileTypeId","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeName"],"functionBody":"return fileTypeMap.byName[fileTypeName];","supplementalCode":"","description":""}},"getFileTypeName":{"name":"getFileTypeName","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeId"],"functionBody":"return fileTypeMap.byId[fileTypeId];","supplementalCode":"","description":""}},"getEntryString":{"name":"getEntryString","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeId","section","entryValue"],"functionBody":"if((section === null)||(section === undefined)) section = \"\";\nreturn fileTypeId + \":\" + section + \":\" + entryValue;","supplementalCode":"","description":""}},"getEntryStringFromRecord":{"name":"getEntryStringFromRecord","type":"apogee.FunctionTable","updateData":{"argList":["fileEntryRecord"],"functionBody":"\nvar fileTypeId = fileEntryRecord.Fields.file_type_id;\nvar section = fileEntryRecord.Fields.entry_section;\nvar entryValue = fileEntryRecord.Fields.entry_value;\n\nreturn getEntryString(fileTypeId,section,entryValue);","supplementalCode":"function getFileTypeFromRecord(record) {\n    var fileTypeId = record.Fields.file_type_id;\n    var fileTypeRecord = getRawRecord(\"file_type\",fileTypeId);\n    return fileTypeRecord.Fields.file_type_name;\n}","description":""}},"fileEntryMap":{"name":"fileEntryMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nvar fileEntryDownloadList = fileEntryDownload.data.Records;\nfor(var i = 0; i < fileEntryDownloadList.length; i++) {\n    var record = fileEntryDownloadList[i];\n    if(record.Type == \"file_entry\") {\n        var lookupKey = getEntryStringFromRecord(record);\n        var entryList = output[lookupKey];\n        if(!entryList) {\n            entryList = [];\n            output[lookupKey] = entryList;\n        }\n        \n        refString = getNormalizedString(record.Fields.entry_data);\n        var recordEntry = {\n            \"fileEntry\":record,\n            \"refString\": refString\n        };\n        entryList.push(recordEntry);\n    }\n}\n\nreturn output;","supplementalCode":"","description":""}},"getEntryListFromRefString":{"name":"getEntryListFromRefString","type":"apogee.FunctionTable","updateData":{"argList":["lookupString"],"functionBody":"return fileEntryMap[lookupString];","supplementalCode":"","description":""}},"getNormalizedString":{"name":"getNormalizedString","type":"apogee.FunctionTable","updateData":{"argList":["entryData"],"functionBody":"var normalized = apogee.util.getNormalizedCopy(entryData);\nreturn JSON.stringify(normalized);","supplementalCode":"","description":""}}}},"output":{"name":"output","type":"apogee.Folder","children":{"fileEntryGrid":{"name":"fileEntryGrid","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var recordList = data.fileEntryDownload.data.Records;\n\nvar fileEntryFilter = (entry) => (entry.Type == \"file_entry\");\n\nvar body = recordList.filter(fileEntryFilter).map(createRow);\n\nvar header = [headerRow];\n\nreturn header.concat(body);","supplementalCode":"function createRow(entry) {\n    var baseRow = getBaseRow(entry);\n    \n    var fileType = data.getFileTypeName(entry.Fields.file_type_id);\n    var sectionName = entry.Fields.entry_section;\n    var entryData = entry.Fields.entry_data;\n    \n    var entryDataColumns = serializers[fileType](sectionName,entryData);\n\n    var row = baseRow.concat(entryDataColumns);\n    //add the file type, which we didn't lookup in the base row\n    row[2] = fileType;\n    \n    return row;\n}\n\nfunction getBaseRow(entry) {\n    var baseRow = [];\n    baseColumns.forEach( (columnName) => baseRow.push(entry.Fields[columnName]));\n    return baseRow;\n    \n    //file type is missing! - add above\n}","description":""}},"serializers":{"name":"serializers","type":"apogee.Folder","children":{"propertyRules":{"name":"propertyRules","type":"apogee.FunctionTable","updateData":{"argList":["section","entryData"],"functionBody":"if(section == \"geometry\") {\n    var propCount = entryData.properties.length;\n    var firstProp = entryData.properties[0];\n    var row = [];\n    \n    //action,base,key,value,legacyKey,legacyValue,firstValue\n    \n    if(entryData.modifies !== undefined) {\n        row[0] = \"modifies\";\n        row[1] = entryData.modifies;\n        \n    }\n    else if(entryData.extends !== undefined) {\n        row[0] = \"extends\";\n        row[1] = entryData.extends;\n    }\n    else if(entryData.deletes !== undefined) {\n        row[0] = \"deletes\";\n        row[1] = \"\";\n    }\n    else {\n        row[0] = \"base\";\n        row[1] = \"\";\n    }\n    \n    row[2] = firstProp.key;\n    row[3] = firstProp.value;\n    row[4] = firstProp.legacyKey;\n    row[5] = firstProp.legacyValue;\n    if(firstProp.values) {\n        row[6] = firstProp.values.value;\n    }\n    \n    return row;\n}\nelse {\n    return [];\n}","supplementalCode":"","description":""}},"themeRules":{"name":"themeRules","type":"apogee.FunctionTable","updateData":{"argList":["section","entryData"],"functionBody":"var columnList = entryDataColumns[\"themeRules\"][section];\nvar row = normalSerializer(entryData,columnList);\n\n//above missed some rows\nvar propType = entryData[\"propType\"];\nvar pathObject = entryData[\"path\"];\nrow[0] = propType;\nrow[1] = pathToString(pathObject);\n\nreturn row;","supplementalCode":"function pathToString(pathObject) {\n    return pathObject.map( (innerEntry) => innerEntry.join(\":\")).join(\"; \");\n}","description":""}},"theme":{"name":"theme","type":"apogee.FunctionTable","updateData":{"argList":["section","entryData"],"functionBody":"var columnList = entryDataColumns[\"theme\"][section];\n\nreturn normalSerializer(entryData,columnList);","supplementalCode":"","description":""}},"strings":{"name":"strings","type":"apogee.FunctionTable","updateData":{"argList":["section","entryData"],"functionBody":"var columnList = entryDataColumns[\"strings\"][\"[all]\"];\n\nreturn normalSerializer(entryData,columnList);\n\n","supplementalCode":"","description":""}},"inputColors":{"name":"inputColors","type":"apogee.FunctionTable","updateData":{"argList":["section","entryData"],"functionBody":"var columnList = entryDataColumns[\"inputColors\"][\"[all]\"];\n\nvar row = normalSerializer(entryData,columnList);\n\n//fix the props\nif(columnList[0] != \"props\") throw new Error(\"Column name mismatch in input colors. Expected 'props' in col 0\")\nrow[0] = propsToString(row[0]);\n\nreturn row;","supplementalCode":"function propsToString(props) {\n    var output = \"\"\n    for(var key in props) {\n        if(output.length > 0) output += \"; \";\n        output += key + \":\" + props[key];\n    }\n    return output;\n}","description":""}},"normalSerializer":{"name":"normalSerializer","type":"apogee.FunctionTable","updateData":{"argList":["entry","columnList"],"functionBody":"var row = [];\n\ncolumnList.forEach( (columnName) => {row.push(entry[columnName]);} );\n\nreturn row;","supplementalCode":"","description":""}}}},"entryDataColumns":{"name":"entryDataColumns","type":"apogee.JsonTable","updateData":{"data":{"propertyRules":{"geometry":["action","base","key","value","legacyKey","legacyValue","firstValue"]},"themeRules":{"label":["propType","path","lt","r","trans"],"style":["propType","path","n"]},"theme":{"style":["m","o","w","l","t","zmin","img","shadow"],"icon":["lt","r","ar","url","rurl"],"labelStyle":["font","minFont","maxFont","caps","fill","outline","outlineWidth","padding","bgOutline","bgOutlineWidth","bgPadding","bgR","bgShadow","zmin"],"marker":["src","ox","oy"]},"strings":{"[all]":["trans"]},"inputColors":{"[all]":["props","isLinearArea"]}},"description":""}},"baseColumns":{"name":"baseColumns","type":"apogee.JsonTable","updateData":{"data":["entry_context","entry_name","file_type","entry_section","entry_value","option_name"],"description":""}},"headerRow":{"name":"headerRow","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var maxAddedLength = 0;\n\nfor(var fileType in entryDataColumns) {\n    var fileTypeSection = entryDataColumns[fileType];\n    for(var section in fileTypeSection) {\n        var columnNames = fileTypeSection[section];\n        var count = columnNames.length;\n        if(count > maxAddedLength) {\n            maxAddedLength = count;\n        }\n    }\n}\n\nvar output = apogee.util.deepJsonCopy(baseColumns);\nvar totalLength = output.length + maxAddedLength;\nwhile(output.length < totalLength) {\n    output.push(\"\");\n}\n\nreturn output;","supplementalCode":"","description":""}},"entryDataColumnGrid":{"name":"entryDataColumnGrid","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = [];\n\nfor(var fileType in entryDataColumns) {\n    var fileTypeSection = entryDataColumns[fileType];\n    for(var sectionName in fileTypeSection) {\n        var sectionList = fileTypeSection[sectionName];\n        var sectionLabel = [fileType,sectionName];\n        output.push(sectionLabel.concat(sectionList));\n    }\n}\n\nreturn output;","supplementalCode":"","description":""}}}}}}},"components":{"login":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":137,"y":24}},"children":{"loginUrl":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":463,"height":106},"posInfo":{"x":27,"y":42},"state":0,"viewType":"Text"}},"loginControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":343,"height":101},"posInfo":{"x":32,"y":183},"state":0,"viewType":"Output"},"resource":{"html":"","css":"","setData":"this.loginUrl = data;","constructorAddition":"\n\n//this uses the updated version of test authorization that takes and returns a JSON\nthis.onClick = function() {\n    \n    //get the output table\n    var outputTableName = \"sessionResponse\";\n    var fromMember = mode.getMember();\n    \n    //on click\n    var bodyJson = {};\n    bodyJson.userName = resource.userInput.value;\n    bodyJson.password = resource.passwordInput.value;\n    \n    //cleaer password field\n    resource.passwordInput.value = \"\";\n    \n    var options = {};\n    options.body = JSON.stringify(bodyJson);\n    options.method = \"POST\";\n    \n    var requestPromise = apogee.net.jsonRequest(this.loginUrl,options);\n    apogee.action.asynchDataUpdate(outputTableName,fromMember,requestPromise);\n}","init":"\nvar label1 = document.createElement(\"label\");\nlabel1.for = \"userInput\";\nlabel1.innerHTML = \"User:\"\nelement.appendChild(label1);\n\nvar input1 = document.createElement(\"input\");\ninput1.id = \"userInput\";\nresource.userInput = input1;\nelement.appendChild(input1);\n\nelement.appendChild(document.createElement(\"br\"));\n\nvar label2 = document.createElement(\"label\");\nlabel2.for = \"passwordInput\";\nlabel2.innerHTML = \"Password:\"\nelement.appendChild(label2);\n\nvar input2 = document.createElement(\"input\");\ninput2.type = \"password\";\ninput2.id = \"passwordInput\";\nresource.passwordInput = input2;\nelement.appendChild(input2);\n\nelement.appendChild(document.createElement(\"br\"));\n\nvar button = document.createElement(\"button\");\nbutton.innerHTML = \"Login\";\nelement.appendChild(button);\n\nvar instance = this;\nbutton.onclick = function() {\n    instance.onClick();\n}\n\n\n"}},"sessionResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":697,"height":158},"posInfo":{"x":34,"y":340},"state":0,"viewType":"Text"}},"sessionKey":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":587,"height":167},"posInfo":{"x":41,"y":549},"state":0,"viewType":"Formula"}}}},"micemetarDataAccess":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":213,"y":24}},"children":{"createRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":560,"height":321},"posInfo":{"x":33,"y":368},"state":-1,"viewType":"Code"}},"recordsToCreateInstructions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":834,"height":391},"posInfo":{"x":30,"y":472},"state":-1,"viewType":"Code"}},"createCommitBody":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":568,"height":400},"posInfo":{"x":629,"y":225},"state":-1,"viewType":"Code"}},"createRequestOptions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":523,"height":254},"posInfo":{"x":822,"y":379},"state":-1,"viewType":"Code"}},"host":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":353,"height":71},"posInfo":{"x":16,"y":6},"state":-1,"viewType":"Text"}},"commitUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":433,"height":107},"posInfo":{"x":14,"y":98},"state":-1,"viewType":"Text"}},"requestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":450,"height":68},"posInfo":{"x":14,"y":58},"state":-1,"viewType":"Formula"}},"dataSetInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":882,"height":611},"posInfo":{"x":279,"y":69},"state":-1,"viewType":"Text"}},"createUpdateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":886,"height":655},"posInfo":{"x":36,"y":248},"state":-1,"viewType":"Code"}},"createCreateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":994,"height":643},"posInfo":{"x":35,"y":209},"state":-1,"viewType":"Code"}},"getFieldErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":512,"height":68},"posInfo":{"x":761,"y":616},"state":-1,"viewType":"Code"}},"getRecordErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":81},"posInfo":{"x":762,"y":664},"state":-1,"viewType":"Code"}},"createDeleteInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":678,"height":540},"posInfo":{"x":36,"y":289},"state":-1,"viewType":"Code"}},"getRecordInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":480,"height":400},"posInfo":{"x":818,"y":427},"state":-1,"viewType":"Code"}},"combinedEntriesToInstructionList":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":721,"height":524},"posInfo":{"x":31,"y":516},"state":-1,"viewType":"Private"}},"getCommitPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":569,"height":109},"posInfo":{"x":565,"y":40},"state":-1,"viewType":"Code"}},"getRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":546,"height":89},"posInfo":{"x":563,"y":90},"state":-1,"viewType":"Code"}},"customRequestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":17,"y":142},"state":-1,"viewType":"Formula"}},"getCustomRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":668,"height":88},"posInfo":{"x":564,"y":134},"state":-1,"viewType":"Code"}}}},"data":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":51,"y":24}},"children":{"searchDef":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":540,"height":402},"posInfo":{"x":48,"y":36},"state":-1,"viewType":"JSON"}},"rawRecordMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":655,"height":609},"posInfo":{"x":560,"y":69},"state":-1,"viewType":"JSON"}},"getRawRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":28},"posInfo":{"x":560,"y":26},"state":-1,"viewType":"Code"}},"fileEntryDownload":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":474,"height":322},"posInfo":{"x":69,"y":379},"state":0,"viewType":"JSON"}},"fileTypeMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":642,"height":371},"posInfo":{"x":48,"y":313},"state":-1,"viewType":"Text"}},"getFileTypeId":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":42},"posInfo":{"x":48,"y":212},"state":-1,"viewType":"Code"}},"getFileTypeName":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":49,"y":264},"state":-1,"viewType":"Code"}},"getEntryString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":553,"height":100},"posInfo":{"x":567,"y":163},"state":-1,"viewType":"Code"}},"getEntryStringFromRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":672,"height":382},"posInfo":{"x":563,"y":212},"state":-1,"viewType":"Code"}},"fileEntryMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":724,"height":636},"posInfo":{"x":227,"y":114},"state":0,"viewType":"JSON"}},"getEntryListFromRefString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":589,"height":301},"posInfo":{"x":561,"y":287},"state":-1,"viewType":"Code"}},"getNormalizedString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":586,"height":43},"posInfo":{"x":562,"y":333},"state":-1,"viewType":"Code"}}}},"output":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":47,"y":75}},"children":{"fileEntryGrid":{"type":"apogeeapp.app.GridTableComponent","windowState":{"sizeInfo":{"width":1095,"height":477},"posInfo":{"x":12,"y":334},"state":0,"viewType":"Grid"}},"serializers":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":85,"y":20}},"children":{"propertyRules":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":650,"height":400},"posInfo":{"x":58,"y":18},"state":0,"viewType":"Code"}},"themeRules":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":642,"height":400},"posInfo":{"x":516,"y":326},"state":0,"viewType":"Code"}},"theme":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":581,"height":400},"posInfo":{"x":513,"y":178},"state":0,"viewType":"Code"}},"strings":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":876,"height":400},"posInfo":{"x":77,"y":490},"state":0,"viewType":"Code"}},"inputColors":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":652,"height":400},"posInfo":{"x":526,"y":308},"state":0,"viewType":"Code"}},"normalSerializer":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":560,"height":88},"posInfo":{"x":493,"y":21},"state":0,"viewType":"Code"}}}},"entryDataColumns":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":625,"height":619},"posInfo":{"x":355,"y":21},"state":0,"viewType":"JSON"}},"baseColumns":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":701,"y":20},"state":0,"viewType":"Text"}},"headerRow":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":605,"height":300},"posInfo":{"x":101,"y":82},"state":-1,"viewType":"Formula"}},"entryDataColumnGrid":{"type":"apogeeapp.app.GridTableComponent","windowState":{"sizeInfo":{"width":868,"height":300},"posInfo":{"x":42,"y":178},"state":0,"viewType":"Grid"}}}}}}