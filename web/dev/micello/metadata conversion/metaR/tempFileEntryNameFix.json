{"fileType":"apogee app js workspace","version":"0.40","references":[],"workspace":{"fileType":"apogee workspace","version":0.2,"name":"tempFileEntryNameFix","data":{"name":"Model","type":"apogee.Folder","children":{"dev":{"name":"dev","type":"apogee.Folder","children":{"commitResponse":{"name":"commitResponse","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var commmitMessage = \"reame addresses\";\n\n//return micemetarDataAccess.getCommitPromise(instructionList,commmitMessage,sessionKey);\n","supplementalCode":"","description":""}},"sessionKey":{"name":"sessionKey","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(login.sessionResponse.sessionKey) {\n    return login.sessionResponse.sessionKey;\n}\nelse {\n    throw new Error(\"Login needed!\");\n}","supplementalCode":"","description":""}},"updatedRecords":{"name":"updatedRecords","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return working.addresses.after;","supplementalCode":"","description":""}},"createdRecords":{"name":"createdRecords","type":"apogee.JsonTable","updateData":{"data":{},"description":""}},"preUpdateRecords":{"name":"preUpdateRecords","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return working.addresses.before;","supplementalCode":"","description":""}},"instructionList":{"name":"instructionList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var combinedEntries = {};\n\nif((preUpdateRecords)&&(updatedRecords)) {\n    for(var idString in preUpdateRecords) {\n        var updatedEntry = {};\n        updatedEntry.newEntry = updatedRecords[idString];\n        updatedEntry.oldEntry = preUpdateRecords[idString];\n        \n        if(updatedEntry.newEntry === undefined) throw new Error(\"Missing entry in updated records!\");\n        \n        combinedEntries[idString] = updatedEntry;\n    }\n}\n\nif(createdRecords) {\n    for(idString in createdRecords) {\n        var createdEntry = {};\n        createdEntry.newEntry = createdRecords[idString];\n        \n        combinedEntries[idString] = createdEntry;\n    }\n}\n\nif(deletedRecords) {\n    for(idString in deletedRecords) {\n        var deletedEntry = {};\n        deletedEntry.oldEntry = deletedRecords[idString];\n        \n        combinedEntries[idString] = deletedEntry;\n    }\n}\n\nvar instructionList = micemetarDataAccess.combinedEntriesToInstructionList(combinedEntries);\n\nreturn instructionList;","supplementalCode":"function updateObject(fileEntry) {\n    var newFileEntry = apogee.util.jsonCopy(fileEntry);\n    var featureTypePropData = newFileEntry.Fields.entry_data.properties[0];\n    if(featureTypePropData.key != \"featureType\") throw new Error(\"Not the feature type!\");\n    \n    featureTypePropData.legacyKey = \"object\";\n    featureTypePropData.legacyValue = \"true\";\n    \n    \n    \n    return newFileEntry;\n}\n\nfunction updateSpace(fileEntry) {\n    var newFileEntry = apogee.util.jsonCopy(fileEntry);\n    var featureTypePropData = newFileEntry.Fields.entry_data.properties[0];\n    if(featureTypePropData.key != \"featureType\") throw new Error(\"Not the feature type!\");\n    \n    featureTypePropData.legacyKey = \"area\";\n    featureTypePropData.legacyValue = \"space\";\n    \n    return newFileEntry;\n}\n\nfunction updateGeometryEntry(fileEntry) {\n    var newFileEntry = apogee.util.jsonCopy(fileEntry);\n    var featureTypePropData = newFileEntry.Fields.entry_data.properties[0];\n    if(featureTypePropData.key != \"featureType\") throw new Error(\"Not the feature type!\");\n    \n    var legacyKey = featureTypePropData.legacyKey;\n    var legacyValue = featureTypePropData.value;\n    \n    if(legacyValue == legacyKey) {\n        legacyValue = \"true\";\n    }\n    \n    featureTypePropData.legacyValue = legacyValue;\n    \n    return newFileEntry;\n}","description":""}},"deletedRecords":{"name":"deletedRecords","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return working.fileEntryRemap.deletedRecords;","supplementalCode":"","description":""}},"allSearch":{"name":"allSearch","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"// var searchDef = {\n// \t\"searchType\": \"table\",\n// \t\"search\": {\n// \t\t\"record\": \"meta_file\"\n// \t}\n// };\n\n// return micemetarDataAccess.getCustomRequestPromise(searchDef,login.sessionResponse.sessionKey);\n\n//return \"This contains a formula to retrieve an entire table.\";","supplementalCode":"","description":""}},"working":{"name":"working","type":"apogee.Folder","children":{"fileEntryDownload":{"name":"fileEntryDownload","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var searchDef = {\n\t\"searchType\": \"table\",\n\t\"search\": {\n\t\t\"record\": \"file_entry\"\n\t}\n};\n\nreturn micemetarDataAccess.getCustomRequestPromise(searchDef,login.sessionResponse.sessionKey);","supplementalCode":"","description":""}},"metaFileDownload":{"name":"metaFileDownload","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var searchDef = {\n\t\"searchType\": \"table\",\n\t\"search\": {\n\t\t\"record\": \"meta_file\"\n\t}\n};\n\nreturn micemetarDataAccess.getCustomRequestPromise(searchDef,login.sessionResponse.sessionKey);","supplementalCode":"","description":""}},"recipeEntryDownload":{"name":"recipeEntryDownload","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var searchDef = {\n\t\"searchType\": \"table\",\n\t\"search\": {\n\t\t\"record\": \"recipe_entry\"\n\t}\n};\n\nreturn micemetarDataAccess.getCustomRequestPromise(searchDef,login.sessionResponse.sessionKey);","supplementalCode":"","description":""}},"fileEntryTable":{"name":"fileEntryTable","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\naddToOutput = record => {\n    var key = getKey(record);\n    var list = output[key];\n    if(!list) {\n        list = [];\n        output[key] = list;\n    }\n    \n    list.push(record);\n}\n\nfileEntryDownload.data.Response.forEach(addToOutput);\n\nreturn output;","supplementalCode":"function getKey(record) {\n    var ft = record.Fields.file_type_id;\n    var section = record.Fields.entry_section;\n    var key = record.Fields.entry_key;\n    \n    return ft + \"|\" + section + \"|\" + key;\n}","description":""}},"repeats":{"name":"repeats","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = [];\n\nfor(var key in repeatTestMap) {\n    var list = repeatTestMap[key];\n    if(list.length > 1) {\n        output.push(list);\n    }\n}\n\nreturn output;","supplementalCode":"","description":""}},"repeatTestMap":{"name":"repeatTestMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nvar addToOutput = (oldKey,record) => {\n    var newKey = oldKey + \"|\" + getKey(record)\n    var list = output[newKey];\n    if(!list) {\n        list = [];\n        output[newKey] = list;\n    }\n    list.push(record);\n}\n\nfor(var key in fileEntryTable) {\n    var list = fileEntryTable[key];\n    if(list.length > 1) {\n        list.forEach(record => addToOutput(key,record));\n    }\n}\n\nreturn output;","supplementalCode":"function getKey(record) {\n    if(record.Fields.file_type_id == 21) {\n        return getPropRulesKey(record);\n    }\n    else {\n        return JSON.stringify(apogee.util.getNormalizedCopy(record.Fields.entry_data));\n    }\n}\n\nfunction getPropRulesKey(record) {\n    var normalEntryData = apogee.util.getNormalizedCopy(record.Fields.entry_data);\n    delete normalEntryData.name;\n    return JSON.stringify(normalEntryData);\n}","description":""}},"repeatAnalysis":{"name":"repeatAnalysis","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return repeats.map(getRepeatResult);","supplementalCode":"function getRepeatResult(list) {\n    var result = {};\n    \n    var getOptionName = record => record.Fields.option_name;\n    var standardIndex = list.findIndex(record => (getOptionName(record) ==\"Standard\") );\n    \n    if(standardIndex >= 0) {\n        bestIndex = standardIndex;\n    }\n    else {\n        var getBestDalue = (bestData,record,index) => {\n            var makeBestData = false;\n            if(!bestData) {\n               makeBestData = true; \n            }\n            else {\n                var option = getOptionName(record);\n                if(option.localeCompare(bestData.option) < 0) {\n                    makeBestData = true;\n                }\n            }\n            \n            if(makeBestData) {\n                var newBestData = {};\n                newBestData.option = getOptionName(record);\n                newBestData.index = index;\n                return newBestData;\n            }\n            else {\n                return bestData;\n            }\n        }\n        var bestData = list.reduce(getBestDalue,null);\n        bestIndex = bestData.index;\n    }\n    \n    var result = {};\n    result.savedRecord = list[bestIndex];\n    result.deletedRecords = list.filter( (record,index) => (index != bestIndex) );\n    \n    return result;\n}","description":""}},"fileEntryRemap":{"name":"fileEntryRemap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\noutput.idRemap = {};\noutput.deletedRecords = {};\n\nvar addToMap = element => {\n    var goodId = element.savedRecord.Id;\n    element.deletedRecords.forEach( record => {\n        output.idRemap[record.Id] = goodId\n        output.deletedRecords[record.Id] = record;\n    });\n} \n\nrepeatAnalysis.forEach(addToMap);\n\nreturn output;","supplementalCode":"","description":""}},"recipeEntryFix":{"name":"recipeEntryFix","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\noutput.initial = {};\noutput.fixed = {};\n\nvar addToOutput = record => {\n    var fileEntryId = record.Fields.file_entry_id;\n    if(fileEntryRemap.deletedRecords[fileEntryId] !== undefined) {\n        //save initial\n        output.initial[record.Id] = record;\n        \n        //save fixed\n        var newRecord = apogee.util.jsonCopy(record);\n        newRecord.Fields.file_entry_id = fileEntryRemap.idRemap[fileEntryId];\n        output.fixed[record.Id] = newRecord;\n    }\n};\nrecipeEntryDownload.data.Response.forEach(addToOutput);\n\nreturn output;","supplementalCode":"","description":""}},"multiEntryKeys":{"name":"multiEntryKeys","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nvar GOOD_START = 22;\n\nfor(var key in fileEntryTable) {\n    if(!key.startsWith(GOOD_START)) continue;\n    \n    var list = fileEntryTable[key];\n    if(list.length > 1) {\n        output[key] = list;\n    }\n}\n\nreturn output;","supplementalCode":"","description":""}},"addresses":{"name":"addresses","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var isAddress = record => ((record.Fields.file_type_id == 22)&&(record.Fields.entry_data.propType == \"address\"));\n\nvar output = {};\noutput.before = {};\noutput.after = {};\nvar addToOutput = record => {\n    output.before[record.Id] = record;\n    \n    var newRecord = apogee.util.jsonCopy(record);\n    var ref = newRecord.Fields.entry_data.payload.r;\n    var suffix = nameSuffixes[ref];\n    if(suffix === undefined) throw new Error(\"Unfound ref: \" + ref);\n    \n    var oldOptionName = record.Fields.option_name;\n    \n    var optionNameBase = oldOptionName.startsWith(\"Standard WITH SPACE\") ? \"Standard WITH SPACE \" : \"Standard \";\n    var newOptionName = optionNameBase + suffix;\n    newRecord.Fields.entry_name = newRecord.Fields.entry_key + \" label (\" + newOptionName + \")\";\n    newRecord.Fields.option_name = newOptionName;\n    output.after[record.Id] = newRecord;\n}\n\nfileEntryDownload.data.Response.filter(isAddress).forEach(addToOutput);\n\nreturn output;","supplementalCode":"","description":""}},"nameSuffixes":{"name":"nameSuffixes","type":"apogee.JsonTable","updateData":{"data":{"<short>":"Short","<long>":"Long","<full>":"Full"},"description":""}},"test":{"name":"test","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\nvar getLongCount = (total,record) => {\n    if(record.Fields.entry_data.payload.r != \"<long>\") return total+1;\n    else return total;\n}\n\n\nfor(var key in multiEntryKeys) {\n    if(!key.startsWith(\"22|label|address\")) continue;\n    \n    var list = multiEntryKeys[key];\n    if(list.reduce(getLongCount,0) > 1) {\n        output[key] = list;\n    }\n}\n\nreturn output;","supplementalCode":"","description":""}}}}}},"micemetarDataAccess":{"name":"micemetarDataAccess","type":"apogee.Folder","children":{"createRecord":{"name":"createRecord","type":"apogee.FunctionTable","updateData":{"argList":["recordType","fieldMap"],"functionBody":"var record = {};\n\nrecord.Id = getId();\nrecord.Type = recordType;\nrecord.Fields = fieldMap;\nrecord.read_perm = READ_PERM;\nrecord.edit_perm = EDIT_PERM;\n\nreturn record;","supplementalCode":"var READ_PERM = 2;\nvar EDIT_PERM = 15;\n\n//this will be illegal at some point\nvar nextId = -1;\n\nfunction getId() {\n    return nextId--;\n}","description":"This method creates a record given the field values and record info \nfrom the data set info. It creates and ID and uses standard permissions."}},"recordsToCreateInstructions":{"name":"recordsToCreateInstructions","type":"apogee.FunctionTable","updateData":{"argList":["recordList"],"functionBody":"var instructions = [];\n\nfor(var i = 0; i < recordList.length; i++) {\n    var createRecord = recordList[i];\n    var instruction = createCreateInstruction(createRecord);\n    instructions.push(instruction);\n}\n\nreturn instructions;","supplementalCode":"","description":"This creates a list of create instructions to go along with a list of records to be created.\n\nThere is the option to assign the ID or to leave it as undefined, in which case\nan automatically incremented ID will be assigned. (For consistency in the data\nset, either all records should be preassigned or all records should be \nautomatically assigned."}},"createCommitBody":{"name":"createCommitBody","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage"],"functionBody":"var commit = {};\nvar actions = [];\n\nif(commitMessage.length === 0) throw new Error(\"Commit message missing!\");\n\ncommit.Name = dataSetInfo.name;\ncommit.Message = commitMessage;\ncommit.Actions = actions;\n\n//single action with commits\nvar action = {};\naction.Title = \"bulk create commit\";\naction.Instr = instructionList;\nactions.push(action);\n\nreturn commit","supplementalCode":"","description":"This creates a body for a commit request, given a list of instructions and a commit message."}},"createRequestOptions":{"name":"createRequestOptions","type":"apogee.FunctionTable","updateData":{"argList":["bodyJson","sessionKey"],"functionBody":"var header = {};\nheader[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\nheader.sessionKey = sessionKey;\nheader[\"proto-version\"] = \"4.0\";\nheader[\"db-version\"] = dataSetInfo.version;\n\nrequestInfo = {};\nrequestInfo.header = header;\nif(bodyJson) {\n    requestInfo.method = \"POST\";\n    requestInfo.body = JSON.stringify(bodyJson);\n}\n\nreturn requestInfo;\n","supplementalCode":"","description":"This creates the requestOptions, suitable for apogee.net.jsonRequest, to go with an type of request to the workingset (micemetarequest) server."}},"host":{"name":"host","type":"apogee.JsonTable","updateData":{"data":"http://eng.micello.com/micemetarws","description":""}},"commitUrl":{"name":"commitUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvalue = host + \"/commit\";\nreturn value;\n\n","supplementalCode":"","description":""}},"requestUrl":{"name":"requestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return host + \"/cannedsearch\";\n\n","supplementalCode":"","description":""}},"dataSetInfo":{"name":"dataSetInfo","type":"apogee.JsonTable","updateData":{"data":{"name":"Micemetar","records":{"com_file_entry":{"foreignList":[],"idField":"com_file_entry_id","name":"com_file_entry","recordClass":"com.micello.micemetar.data.ComFileEntry","fields":[{"fieldClass":"java.lang.Integer","name":"ordr","nullOk":false,"defaultValue":0},{"fieldClass":"com.micello.micemetar.data.ComFile","name":"com_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.MetaFile","name":"meta_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"file_group","nullOk":false,"defaultValue":null}]},"com_file":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"com_file_id","remoteRecord":"com_file_entry","orderField":"ordr","name":"com_file_entry_list"}],"idField":"com_file_id","name":"com_file","recordClass":"com.micello.micemetar.data.ComFile","fields":[{"fieldClass":"java.lang.String","name":"file_context","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"name","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"ref","nullOk":true,"defaultValue":null}]},"file_entry":{"foreignList":[],"idField":"file_entry_id","name":"file_entry","recordClass":"com.micello.micemetar.data.FileEntry","fields":[{"fieldClass":"java.lang.String","name":"entry_context","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"entry_name","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.FileType","name":"file_type_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"entry_section","nullOk":true,"defaultValue":null},{"fieldClass":"java.lang.String","name":"entry_key","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"option_name","nullOk":false,"defaultValue":null},{"fieldClass":"org.json.JSONObject","name":"entry_data","nullOk":false,"defaultValue":null}]},"file_type":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"file_type_id","remoteRecord":"file_entry","name":"file_entry_list"}],"idField":"file_type_id","name":"file_type","recordClass":"com.micello.micemetar.data.FileType","fields":[{"fieldClass":"java.lang.String","name":"file_type_name","nullOk":true,"defaultValue":null}]},"meta_file":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"meta_file_id","remoteRecord":"recipe_entry","orderField":"ordr","name":"recipe_entry_list"}],"idField":"meta_file_id","name":"meta_file","recordClass":"com.micello.micemetar.data.MetaFile","fields":[{"fieldClass":"com.micello.micemetar.data.FileType","name":"file_type_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"file_context","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"name","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"use_type","nullOk":false,"defaultValue":null},{"fieldClass":"org.json.JSONObject","name":"ref","nullOk":true,"defaultValue":null}]},"recipe_entry":{"foreignList":[],"idField":"recipe_entry_id","name":"recipe_entry","recordClass":"com.micello.micemetar.data.RecipeEntry","fields":[{"fieldClass":"java.lang.Integer","name":"ordr","nullOk":false,"defaultValue":0},{"fieldClass":"com.micello.micemetar.data.MetaFile","name":"meta_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.FileEntry","name":"file_entry_id","nullOk":false,"defaultValue":null},{"fieldClass":"org.json.JSONObject","name":"insertion_info","nullOk":true,"defaultValue":null}]}},"version":"5.0"},"description":""}},"createUpdateInstruction":{"name":"createUpdateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["initialRecord","targetRecord"],"functionBody":"if(initialRecord.Id != targetRecord.Id) {\n    throw new Error(\"Record ID mismatch in create update instruction for target record: \" + getRecordErrString(targetRecord));\n}\n\nif(initialRecord.Type != targetRecord.Type) {\n    throw new Error(\"Inital and target record types do not match. Target record: \" + getRecordErrString(targetRecord));\n}\n\nvar recordsDifferent = false;\n\nvar recordInfo = getRecordInfo(initialRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Update\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = initialRecord.Id;\n\ninstruction.initialReadPerm = initialRecord.read_perm;\ninstruction.initialEditPerm = initialRecord.edit_perm;\n\nif(initialRecord.readPerm != targetRecord.readPerm) {\n    instruction.targetReadPerm = targetRecord.read_perm;\n    recordsDifferent = true;\n}\n\nif(initialRecord.editPerm != targetRecord.editPerm) {\n    instruction.targetEditPerm = targetRecord.edit_perm;\n    recordsDifferent = true;\n}\n\nvar initialData = {};\ninstruction.Initial = initialData;\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    \n    var initialValue;\n    var targetValue;\n    \n    var initialValue = initialRecord.Fields[field.name];\n    var targetValue = targetRecord.Fields[field.name];\n    \n    //validate target values\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(targetRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(targetRecord,field));\n        }\n    }\n    \n    if(!fieldsMatch(initialValue,targetValue,field)) {\n        initialData[field.name] = initialValue;\n        targetData[field.name] = targetValue;\n        recordsDifferent = true;\n    }\n}\n\nif(recordsDifferent) {\n    return instruction;\n}\nelse {\n    return null;\n}\n","supplementalCode":"function fieldsMatch(initialValue,targetValue,fieldInfo) {\n    if(fieldInfo.fieldClass === \"java.lang.String\") {\n        //compare strings with \"==\"\n        return (initialValue == targetValue);\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"java.lang\")) {\n        //compare other basic values with \"===\"\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"com.micello\")) {\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONObject\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONArray\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else {\n        throw new Error(\"unrecognized field type: \" + fieldInfo.fieldClass);\n    }\n}\n\nfunction compareJsonData(a,b) {\n    var an = apogee.util.getNormalizedObjectCopy(a);\n    var bn = apogee.util.getNormalizedObjectCopy(b);\n    var aString = JSON.stringify(an);\n    var bString = JSON.stringify(bn);\n    return aString == bString;\n}\n    ","description":"This function creates an update instruction given an initial and target record. If the records are the same then NULL is returned. (No update is needed.)"}},"createCreateInstruction":{"name":"createCreateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["createRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(createRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Create\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = createRecord.Id;\n\ninstruction.targetReadPerm = createRecord.read_perm;\ninstruction.targetEditPerm = createRecord.edit_perm;\n\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var targetValue;\n    var targetValue = createRecord.Fields[field.name];\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(createRecord,field));\n        }\n    }\n    \n    targetData[field.name] = targetValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getFieldErrString":{"name":"getFieldErrString","type":"apogee.FunctionTable","updateData":{"argList":["record","fieldInfo"],"functionBody":"return getRecordErrString(record) + \" - \" + fieldInfo.name;","supplementalCode":"","description":""}},"getRecordErrString":{"name":"getRecordErrString","type":"apogee.FunctionTable","updateData":{"argList":["record"],"functionBody":"return record.Type + \" \" + record.Id;","supplementalCode":"","description":""}},"createDeleteInstruction":{"name":"createDeleteInstruction","type":"apogee.FunctionTable","updateData":{"argList":["deleteRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(deleteRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Delete\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = deleteRecord.Id;\n\ninstruction.initialReadPerm = deleteRecord.read_perm;\ninstruction.initialEditPerm = deleteRecord.edit_perm;\n\nvar initialData = {};\ninstruction.Initial = initialData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var initialValue = deleteRecord.Fields[field.name];\n    \n    initialData[field.name] = initialValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getRecordInfo":{"name":"getRecordInfo","type":"apogee.FunctionTable","updateData":{"argList":["recordType"],"functionBody":"var recordInfo = dataSetInfo.records[recordType];\n\nif(!recordInfo) {\n    throw new Error(\"Record type not found in getRecordInfo: \" + recordType);\n}\n\nreturn recordInfo;","supplementalCode":"","description":""}},"combinedEntriesToInstructionList":{"name":"combinedEntriesToInstructionList","type":"apogee.FunctionTable","updateData":{"argList":["combinedEntries"],"functionBody":"var output = [];\nfor(var key in combinedEntries) {\n    var entry = combinedEntries[key];\n    var instruction = getInstructionForCombinedEntry(entry);\n    if(instruction) {\n        output.push(instruction);\n    }\n}\n\nreturn output;","supplementalCode":"function getInstructionForCombinedEntry(combinedEntry) {\n    var newEntry = combinedEntry.newEntry;\n    var oldEntry = combinedEntry.oldEntry;\n    \n    if(newEntry) {\n        if(!oldEntry) {\n            console.log(\"Create: \" + newEntry.Id);\n            return createCreateInstruction(newEntry);\n        }\n        else {\n            //this will return null for matching records\n            console.log(\"Update(maybe): \" + newEntry.Id);\n            return createUpdateInstruction(oldEntry,newEntry);\n        }\n    }\n    else if(oldEntry) {\n        console.log(\"Delete: \" + oldEntry.Id);\n        return createDeleteInstruction(oldEntry);\n    }\n    \n    return null;\n}\n\nfunction entriesDifferent(entry1,entry2) {\n    var string1 = JSON.stringify(apogee.util.getNormalizedCopy(entry1));\n    var string2 = JSON.stringify(apogee.util.getNormalizedCopy(entry2));\n    return (string1 == string2);\n}","description":"This function takes a combined entry map of the format:\n\n{\n  \"some-identifier\":{\n    \"oldEntry\":{original record entry, if applicable},\n    \"newEntry\":{new record entry, if applicable}\n  },\n  ...\n}\n\nIt returns an instruction list.\n\n"}},"getCommitPromise":{"name":"getCommitPromise","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage","sessionKey"],"functionBody":"var commitBody = createCommitBody(instructionList,commitMessage);\nvar requestOptions = createRequestOptions(commitBody,sessionKey);\nreturn apogee.net.jsonRequest(commitUrl,requestOptions);","supplementalCode":"","description":""}},"getRequestPromise":{"name":"getRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn apogee.net.jsonRequest(requestUrl,requestOptions);","supplementalCode":"","description":""}},"customRequestUrl":{"name":"customRequestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return host + \"/request\";","supplementalCode":"","description":""}},"getCustomRequestPromise":{"name":"getCustomRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn apogee.net.jsonRequest(customRequestUrl,requestOptions);","supplementalCode":"","description":""}}}},"login":{"name":"login","type":"apogee.Folder","children":{"loginUrl":{"name":"loginUrl","type":"apogee.JsonTable","updateData":{"data":"http://eng.micello.com/TestAuthorization/loginjson","description":""}},"loginControl":{"name":"loginControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return loginUrl;","supplementalCode":"","description":""}},"sessionResponse":{"name":"sessionResponse","type":"apogee.JsonTable","updateData":{"data":{"responseCode":1,"paramTable":[{"urlPattern":"http://eng.micello.com/mfs","params":[["key","S1sshnIV1Rk9EGz32Acrl8aSYsTKYd"]]},{"urlPattern":"http://mfs.micello.com","params":[["key","nS71TmmSmgvwcXlfrGrin38AMLP48B"]]},{"urlPattern":"http://factory-mfs.micello.com","params":[["key","yfZkszbELEy6lxz1sSeUZscJlC41hL"]]},{"urlPattern":"http://mfs-hub-master.micello.com/","params":[["key","pvLuRozg2EZVrpE8nCpCrQT0FOHcLh"]]},{"urlPattern":"http://mfs-us-1.micello.com","params":[["key","nS71TmmSmgvwcXlfrGrin38AMLP48B"]]},{"urlPattern":"http://eng.micello.com/mfs-node","params":[["key","dnSkxyrgxRNtGMUYbhgV8uvdPW1V4U"]]},{"urlPattern":"http://int.micello.com/mfs","params":[["key","u1VjArfzrFKvBr7X7UVRxFB4eDQmqR"]]}],"sessionKey":"SESS0f6c4c2238a670b8138b63d9fd03cc22=o940qkovgl96f1ucmvmrs0sv10"},"description":""}}}}}}},"components":{"type":"apogeeapp.app.FolderComponent","treeState":1,"children":{"dev":{"type":"apogeeapp.app.FolderComponent","tabOpen":true,"treeState":1,"children":{"commitResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":1221,"height":300},"posInfo":{"x":69,"y":487},"state":0,"viewType":"Formula"},"dataView":"Plain"},"sessionKey":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":539,"height":42},"posInfo":{"x":54,"y":31},"state":-1,"viewType":"Data"},"dataView":"Plain"},"updatedRecords":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":797,"height":759},"posInfo":{"x":644,"y":22},"state":0,"viewType":"Data"},"dataView":"Plain"},"createdRecords":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":751,"height":475},"posInfo":{"x":61,"y":125},"state":-1,"viewType":"Data"},"dataView":"Plain"},"preUpdateRecords":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":540,"height":620},"posInfo":{"x":23,"y":30},"state":0,"viewType":"Data"},"dataView":"Plain"},"instructionList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":874,"height":570},"posInfo":{"x":130,"y":716},"state":0,"viewType":"Data"},"dataView":"Plain"},"deletedRecords":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":485,"height":300},"posInfo":{"x":354,"y":69},"state":0,"viewType":"Formula"},"dataView":"Plain"},"allSearch":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":775,"height":582},"posInfo":{"x":1180,"y":47},"state":-1,"viewType":"Formula"},"dataView":"Plain"},"working":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":587,"y":301}},"tabOpen":true,"treeState":1,"children":{"fileEntryDownload":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":745,"height":747},"posInfo":{"x":77,"y":759},"state":0,"viewType":"Data"},"dataView":"JSON"},"metaFileDownload":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":547,"height":506},"posInfo":{"x":62,"y":625},"state":0,"viewType":"Data"},"dataView":"JSON"},"recipeEntryDownload":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":661,"height":579},"posInfo":{"x":42,"y":566},"state":0,"viewType":"Data"},"dataView":"JSON"},"fileEntryTable":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":844,"height":690},"posInfo":{"x":222,"y":624},"state":0,"viewType":"Data"},"dataView":"JSON"},"repeats":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":589,"height":501},"posInfo":{"x":460,"y":131},"state":-1,"viewType":"Data"},"dataView":"JSON"},"repeatTestMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":821,"height":514},"posInfo":{"x":451,"y":85},"state":-1,"viewType":"Data"},"dataView":"JSON"},"repeatAnalysis":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":740,"height":615},"posInfo":{"x":461,"y":178},"state":-1,"viewType":"Data"},"dataView":"JSON"},"fileEntryRemap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":755,"height":461},"posInfo":{"x":465,"y":257},"state":-1,"viewType":"Data"},"dataView":"JSON"},"recipeEntryFix":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":906,"height":535},"posInfo":{"x":33,"y":334},"state":-1,"viewType":"Data"},"dataView":"JSON"},"multiEntryKeys":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":919,"height":835},"posInfo":{"x":226,"y":408},"state":0,"viewType":"Data"},"dataView":"JSON"},"addresses":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":971,"height":721},"posInfo":{"x":740,"y":771},"state":0,"viewType":"Formula"},"dataView":"JSON"},"nameSuffixes":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":1102,"y":103},"state":0,"viewType":"Data"},"dataView":"JSON"},"test":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":810,"height":595},"posInfo":{"x":805,"y":693},"state":0,"viewType":"Formula"},"dataView":"JSON"}}}}},"micemetarDataAccess":{"type":"apogeeapp.app.FolderComponent","treeState":-1,"children":{"createRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":560,"height":321},"posInfo":{"x":33,"y":368},"state":-1,"viewType":"Private"}},"recordsToCreateInstructions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":834,"height":391},"posInfo":{"x":30,"y":472},"state":-1,"viewType":"Code"}},"createCommitBody":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":568,"height":400},"posInfo":{"x":629,"y":225},"state":-1,"viewType":"Code"}},"createRequestOptions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":523,"height":254},"posInfo":{"x":822,"y":379},"state":-1,"viewType":"Code"}},"host":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":353,"height":71},"posInfo":{"x":15,"y":6},"state":-1,"viewType":"Data"},"dataView":"Plain"},"commitUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":433,"height":107},"posInfo":{"x":14,"y":98},"state":-1,"viewType":"Data"},"dataView":"Plain"},"requestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":450,"height":68},"posInfo":{"x":14,"y":58},"state":-1,"viewType":"Formula"},"dataView":"Plain"},"dataSetInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":882,"height":611},"posInfo":{"x":317,"y":143},"state":-1,"viewType":"Data"},"dataView":"Plain"},"createUpdateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":1002,"height":655},"posInfo":{"x":37,"y":247},"state":-1,"viewType":"Code"}},"createCreateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":994,"height":643},"posInfo":{"x":39,"y":209},"state":-1,"viewType":"Code"}},"getFieldErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":512,"height":68},"posInfo":{"x":761,"y":616},"state":-1,"viewType":"Code"}},"getRecordErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":81},"posInfo":{"x":762,"y":664},"state":-1,"viewType":"Code"}},"createDeleteInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":678,"height":540},"posInfo":{"x":36,"y":289},"state":-1,"viewType":"Code"}},"getRecordInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":480,"height":400},"posInfo":{"x":818,"y":427},"state":-1,"viewType":"Code"}},"combinedEntriesToInstructionList":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":721,"height":524},"posInfo":{"x":31,"y":516},"state":-1,"viewType":"Private"}},"getCommitPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":569,"height":109},"posInfo":{"x":316,"y":26},"state":-1,"viewType":"Code"}},"getRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":546,"height":89},"posInfo":{"x":315,"y":67},"state":-1,"viewType":"Code"}},"customRequestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":17,"y":142},"state":-1,"viewType":"Formula"},"dataView":"Plain"},"getCustomRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":668,"height":88},"posInfo":{"x":317,"y":104},"state":-1,"viewType":"Code"}}}},"login":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":79,"y":21}},"tabOpen":true,"treeState":-1,"children":{"loginUrl":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":463,"height":46},"posInfo":{"x":29,"y":37},"state":0,"viewType":"Text"}},"loginControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":554,"height":127},"posInfo":{"x":27,"y":155},"state":0,"viewType":"Output"},"resource":{"html":"","css":"","setData":"this.loginUrl = data;","constructorAddition":"\n\n//this uses the updated version of test authorization that takes and returns a JSON\nthis.onClick = function() {\n    \n    //on click\n    var bodyJson = {};\n    bodyJson.userName = resource.userInput.value;\n    bodyJson.password = resource.passwordInput.value;\n    \n    //cleaer password field\n    resource.passwordInput.value = \"\";\n    \n    var options = {};\n    options.body = JSON.stringify(bodyJson);\n    options.method = \"POST\";\n    \n    var requestPromise = apogee.net.jsonRequest(this.loginUrl,options);\n    \n    //set the response\n    mode.getMessenger().asynchDataUpdate(\"sessionResponse\",requestPromise);\n}","init":"\nvar label1 = document.createElement(\"label\");\nlabel1.for = \"userInput\";\nlabel1.innerHTML = \"User:\"\nelement.appendChild(label1);\n\nvar input1 = document.createElement(\"input\");\ninput1.id = \"userInput\";\nresource.userInput = input1;\nelement.appendChild(input1);\n\nelement.appendChild(document.createElement(\"br\"));\n\nvar label2 = document.createElement(\"label\");\nlabel2.for = \"passwordInput\";\nlabel2.innerHTML = \"Password:\"\nelement.appendChild(label2);\n\nvar input2 = document.createElement(\"input\");\ninput2.id = \"passwordInput\";\ninput2.type = \"password\";\nresource.passwordInput = input2;\nelement.appendChild(input2);\n\nelement.appendChild(document.createElement(\"br\"));\n\nvar button = document.createElement(\"button\");\nbutton.innerHTML = \"Login\";\nelement.appendChild(button);\n\nvar instance = this;\nbutton.onclick = function() {\n    instance.onClick();\n}\n\n\n"},"destroyOnInactive":false},"sessionResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":697,"height":217},"posInfo":{"x":32,"y":363},"state":0,"viewType":"Data"},"dataView":"Plain"}}}}},"activeTabMember":"Model.dev.working"}