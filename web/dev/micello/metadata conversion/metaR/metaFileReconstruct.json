{"fileType":"apogee workspace","jsLinks":["http://localhost:8383/apogee/dev/micello/metadata%20conversion/lib/taskAppModule2.js?x=4"],"cssLinks":[],"workspace":{"fileType":"apogee workspace","version":0.2,"data":{"name":"metaFileReconstruct","type":"apogee.Folder","children":{"micemetarDataAccess":{"name":"micemetarDataAccess","type":"apogee.Folder","children":{"createRecord":{"name":"createRecord","type":"apogee.FunctionTable","updateData":{"argList":["recordInfo","fieldMap"],"functionBody":"var record = {};\n\nrecord.Id = getId();\nrecord.Type = recordInfo.name;\nrecord.Fields = fieldMap;\nrecord.read_perm = READ_PERM;\nrecord.edit_perm = EDIT_PERM;\n\nreturn record;","supplementalCode":"var READ_PERM = 2;\nvar EDIT_PERM = 15;\n\nvar nextId = -1;\n\nfunction getId() {\n    return nextId--;\n}","description":"This method creates a record given the field values and record info \nfrom the data set info. It creates and ID and uses standard permissions."}},"recordsToCreateInstructions":{"name":"recordsToCreateInstructions","type":"apogee.FunctionTable","updateData":{"argList":["recordList"],"functionBody":"var instructions = [];\n\nfor(var i = 0; i < recordList.length; i++) {\n    var createRecord = recordList[i];\n    var instruction = createCreateInstruction(createRecord);\n    instructions.push(instruction);\n}\n\nreturn instructions;","supplementalCode":"","description":"This creates a list of create instructions to go along with a list of records to be created.\n\nThere is the option to assign the ID or to leave it as undefined, in which case\nan automatically incremented ID will be assigned. (For consistency in the data\nset, either all records should be preassigned or all records should be \nautomatically assigned."}},"createCommitBody":{"name":"createCommitBody","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage"],"functionBody":"var commit = {};\nvar actions = [];\n\nif(commitMessage.length === 0) throw new Error(\"Commit message missing!\");\n\ncommit.Name = dataSetInfo.name;\ncommit.Message = commitMessage;\ncommit.Actions = actions;\n\n//single action with commits\nvar action = {};\naction.Title = \"bulk create commit\";\naction.Instr = instructionList;\nactions.push(action);\n\nreturn commit","supplementalCode":"","description":"This creates a body for a commit request, given a list of instructions and a commit message."}},"createRequestOptions":{"name":"createRequestOptions","type":"apogee.FunctionTable","updateData":{"argList":["bodyJson","sessionKey"],"functionBody":"var header = {};\nheader[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\nheader.sessionKey = sessionKey;\nheader[\"proto-version\"] = \"4.0\";\nheader[\"db-version\"] = dataSetInfo.version;\n\nrequestInfo = {};\nrequestInfo.header = header;\nif(bodyJson) {\n    requestInfo.method = \"POST\";\n    requestInfo.body = JSON.stringify(bodyJson);\n}\n\nreturn requestInfo;\n","supplementalCode":"","description":"This creates the requestOptions, suitable for apogee.net.jsonRequest, to go with an type of request to the workingset (micemetarequest) server."}},"host":{"name":"host","type":"apogee.JsonTable","updateData":{"data":"http://localhost:8080/micemetarws","description":""}},"commitUrl":{"name":"commitUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvalue = host + \"/commit\";\nreturn value;\n\n","supplementalCode":"","description":""}},"requestUrl":{"name":"requestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvalue = host + \"/cannedsearch\";\nreturn value;\n\n","supplementalCode":"","description":""}},"dataSetInfo":{"name":"dataSetInfo","type":"apogee.JsonTable","updateData":{"data":{"records":{"file_entry_relation":{"idField":"file_entry_rel_id","name":"file_entry_relation","foreignList":[],"fields":[{"defaultValue":null,"name":"file_entry_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileEntry"},{"defaultValue":null,"name":"ref_entry_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileEntry"},{"defaultValue":null,"name":"relation_type","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.FileEntryRelation"},"com_file_entry":{"idField":"com_file_entry_id","name":"com_file_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"com_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.ComFile"},{"defaultValue":null,"name":"meta_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"},{"defaultValue":null,"name":"file_group","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.ComFileEntry"},"file_type":{"idField":"file_type_id","name":"file_type","foreignList":[{"remoteRecord":"file_entry","name":"file_entry_list","isUnique":false,"remoteField":"file_type_id","restrictDelete":true}],"fields":[{"defaultValue":null,"name":"file_type_name","nullOk":true,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.FileType"},"file_entry":{"idField":"file_entry_id","name":"file_entry","foreignList":[{"remoteRecord":"file_entry_relation","name":"file_entry_ref_list","isUnique":false,"remoteField":"file_entry_id","restrictDelete":true}],"fields":[{"defaultValue":null,"name":"entry_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"entry_name","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"file_type_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileType"},{"defaultValue":null,"name":"entry_section","nullOk":true,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"entry_value","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"option_name","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"entry_data","nullOk":false,"fieldClass":"org.json.JSONObject"}],"recordClass":"com.micello.micemetar.data.FileEntry"},"recipe_entry":{"idField":"recipe_entry_id","name":"recipe_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"meta_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"},{"defaultValue":null,"name":"file_entry_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileEntry"},{"defaultValue":null,"name":"insertion_info","nullOk":true,"fieldClass":"org.json.JSONObject"}],"recordClass":"com.micello.micemetar.data.RecipeEntry"},"com_file":{"idField":"com_file_id","name":"com_file","foreignList":[{"remoteRecord":"com_file_entry","name":"com_file_entry_list","isUnique":false,"remoteField":"com_file_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":null,"name":"file_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"name","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"ref","nullOk":true,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.ComFile"},"meta_file":{"idField":"meta_file_id","name":"meta_file","foreignList":[{"remoteRecord":"recipe_entry","name":"recipe_entry_list","isUnique":false,"remoteField":"meta_file_id","restrictDelete":true,"orderField":"ordr"},{"remoteRecord":"meta_ref_entry","name":"base_file_list","isUnique":false,"remoteField":"meta_file_id","restrictDelete":true,"orderField":"ordr"}],"fields":[{"defaultValue":null,"name":"file_type_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.FileType"},{"defaultValue":null,"name":"file_context","nullOk":false,"fieldClass":"java.lang.String"},{"defaultValue":null,"name":"name","nullOk":false,"fieldClass":"java.lang.String"}],"recordClass":"com.micello.micemetar.data.MetaFile"},"meta_ref_entry":{"idField":"meta_ref_entry_id","name":"meta_ref_entry","foreignList":[],"fields":[{"defaultValue":0,"name":"ordr","nullOk":false,"fieldClass":"java.lang.Integer"},{"defaultValue":null,"name":"meta_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"},{"defaultValue":null,"name":"base_file_id","nullOk":false,"fieldClass":"com.micello.micemetar.data.MetaFile"}],"recordClass":"com.micello.micemetar.data.MetaRefEntry"}},"name":"Micemetar","version":"5.0"},"description":""}},"version":{"name":"version","type":"apogee.JsonTable","updateData":{"data":"1.6","description":""}},"createUpdateInstruction":{"name":"createUpdateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["initialRecord","targetRecord"],"functionBody":"if(initialRecord.Id != targetRecord.Id) {\n    throw new Error(\"Record ID mismatch in create update instruction for target record: \" + getRecordErrString(targetRecord));\n}\n\nif(initialRecord.Type != targetRecord.Type) {\n    throw new Error(\"Inital and target record types do not match. Target record: \" + getRecordErrString(targetRecord));\n}\n\nvar recordsDifferent = false;\n\nvar recordInfo = getRecordInfo(initialRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Update\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = initialRecord.Id;\n\ninstruction.initialReadPerm = initialRecord.read_perm;\ninstruction.initialEditPerm = initialRecord.edit_perm;\n\nif(initialRecord.readPerm != targetRecord.readPerm) {\n    instruction.targetReadPerm = targetRecord.read_perm;\n    recordsDifferent = true;\n}\n\nif(initialRecord.editPerm != targetRecord.editPerm) {\n    instruction.targetEditPerm = targetRecord.edit_perm;\n    recordsDifferent = true;\n}\n\nvar initialData = {};\ninstruction.Initial = initialData;\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    \n    var initialValue;\n    var targetValue;\n    \n    var initialValue = initialRecord.Fields[field.name];\n    var targetValue = targetRecord.Fields[field.name];\n    \n    //validate target values\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecordInfo,createRecord.Id,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(createRecordInfo,createRecord.Id,field));\n        }\n    }\n    \n    if(!fieldsMatch(initialValue,targetValue,field)) {\n        initialData[field.name] = initialValue;\n        targetData[field.name] = targetValue;\n        recordsDifferent = true;\n    }\n}\n\nif(recordsDifferent) {\n    return instruction;\n}\nelse {\n    return null;\n}\n","supplementalCode":"function fieldsMatch(initialValue,targetValue,fieldInfo) {\n    if(fieldInfo.fieldClass === \"java.lang.String\") {\n        //compare strings with \"==\"\n        return (initialValue == targetValue);\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"java.lang\")) {\n        //compare other basic values with \"===\"\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"com.micello\")) {\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONObject\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONArray\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else {\n        throw new Error(\"unrecognized field type: \" + fieldInfo.fieldClass);\n    }\n}\n\nfunction compareJsonData(a,b) {\n    var an = apogee.util.getNormalizedObjectCopy(a);\n    var bn = apogee.util.getNormalizedObjectCopy(b);\n    var aString = JSON.stringify(an);\n    var bString = JSON.stringify(bn);\n    return aString == bString;\n}\n    ","description":"This function creates an update instruction given an initial and target record. If the records are the same then NULL is returned. (No update is needed.)"}},"createCreateInstruction":{"name":"createCreateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["createRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(createRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Create\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = createRecord.Id;\n\ninstruction.targetReadPerm = createRecord.read_perm;\ninstruction.targetEditPerm = createRecord.edit_perm;\n\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var targetValue;\n    var targetValue = createRecord.Fields[field.name];\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(createRecord,field));\n        }\n    }\n    \n    targetData[field.name] = targetValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getFieldErrString":{"name":"getFieldErrString","type":"apogee.FunctionTable","updateData":{"argList":["record","fieldInfo"],"functionBody":"return getRecordErrString(record) + \" - \" + fieldInfo.name;","supplementalCode":"","description":""}},"getRecordErrString":{"name":"getRecordErrString","type":"apogee.FunctionTable","updateData":{"argList":["record"],"functionBody":"return record.Type + \" \" + record.Id;","supplementalCode":"","description":""}},"createDeleteInstruction":{"name":"createDeleteInstruction","type":"apogee.FunctionTable","updateData":{"argList":["deleteRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(deleteRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Delete\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = deleteRecord.Id;\n\ninstruction.initialReadPerm = deleteRecord.read_perm;\ninstruction.initialEditPerm = deleteRecord.edit_perm;\n\nvar initialData = {};\ninstruction.Initial = initialData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var initialValue = deleteRecord.Fields[field.name];\n    \n    initialData[field.name] = initialValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getRecordInfo":{"name":"getRecordInfo","type":"apogee.FunctionTable","updateData":{"argList":["recordType"],"functionBody":"var recordInfo = dataSetInfo.records[recordType];\n\nif(!recordInfo) {\n    throw new Error(\"Record type not found in getRecordInfo: \" + recordType);\n}\n\nreturn recordInfo;","supplementalCode":"","description":""}},"combinedEntriesToInstructionList":{"name":"combinedEntriesToInstructionList","type":"apogee.FunctionTable","updateData":{"argList":["combinedEntries"],"functionBody":"var output = [];\nfor(var key in combinedEntries) {\n    var entry = combinedEntries[key];\n    var instruction = getInstructionForCombinedEntry(entry);\n    if(instruction) {\n        output.push(instruction);\n    }\n}\n\nreturn output;","supplementalCode":"function getInstructionForCombinedEntry(combinedEntry) {\n    var newEntry = combinedEntry.newEntry;\n    var oldEntry = combinedEntry.oldEntry;\n    \n    if(newEntry) {\n        if(!oldEntry) {\n            console.log(\"Create: \" + newEntry.Id);\n            return createCreateInstruction(newEntry);\n        }\n        else {\n            //this will return null for matching records\n            console.log(\"Update(maybe): \" + newEntry.Id);\n            return createUpdateInstruction(oldEntry,newEntry);\n        }\n    }\n    else if(oldEntry) {\n        console.log(\"Delete: \" + oldEntry.Id);\n        return createDeleteInstruction(oldEntry);\n    }\n    \n    return null;\n}\n\nfunction entriesDifferent(entry1,entry2) {\n    var string1 = JSON.stringify(apogee.util.getNormalizedCopy(entry1));\n    var string2 = JSON.stringify(apogee.util.getNormalizedCopy(entry2));\n    return (string1 == string2);\n}","description":"This function takes a combined entry map of the format:\n\n{\n  \"some-identifier\":{\n    \"oldEntry\":{original record entry, if applicable},\n    \"newEntry\":{new record entry, if applicable}\n  },\n  ...\n}\n\nIt returns an instruction list.\n\n"}},"getCommitPromise":{"name":"getCommitPromise","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage","sessionKey"],"functionBody":"var commitBody = createCommitBody(instructionList,commitMessage);\nvar requestOptions = createRequestOptions(commitBody,sessionKey);\nvalue = apogee.net.jsonRequest(commitUrl,requestOptions);\nreturn value;","supplementalCode":"","description":""}},"getRequestPromise":{"name":"getRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nvalue = apogee.net.jsonRequest(requestUrl,requestOptions);\nreturn value;","supplementalCode":"","description":""}}}},"login":{"name":"login","type":"apogee.Folder","children":{"loginUrl":{"name":"loginUrl","type":"apogee.JsonTable","updateData":{"data":"http://eng.micello.com/TestAuthorization/loginjson","description":""}},"loginControl":{"name":"loginControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return loginUrl;","supplementalCode":"","description":""}},"sessionResponse":{"name":"sessionResponse","type":"apogee.JsonTable","updateData":{"data":{"responseCode":1,"paramTable":[{"urlPattern":"http://eng.micello.com/mfs","params":[["key","S1sshnIV1Rk9EGz32Acrl8aSYsTKYd"]]},{"urlPattern":"http://mfs.micello.com","params":[["key","nS71TmmSmgvwcXlfrGrin38AMLP48B"]]},{"urlPattern":"http://factory-mfs.micello.com","params":[["key","yfZkszbELEy6lxz1sSeUZscJlC41hL"]]},{"urlPattern":"http://mfs-hub-master.micello.com/","params":[["key","pvLuRozg2EZVrpE8nCpCrQT0FOHcLh"]]},{"urlPattern":"http://mfs-us-1.micello.com","params":[["key","nS71TmmSmgvwcXlfrGrin38AMLP48B"]]},{"urlPattern":"http://eng.micello.com/mfs-node","params":[["key","dnSkxyrgxRNtGMUYbhgV8uvdPW1V4U"]]}],"sessionKey":"SESS0f6c4c2238a670b8138b63d9fd03cc22=9f43j9dm9gicea0umh6e27sik7"},"description":""}},"sessionKey":{"name":"sessionKey","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((sessionResponse)&&(sessionResponse.sessionKey)) {\n    return sessionResponse.sessionKey;\n}\nelse {\n    throw new Error(\"No valid session key!\");\n}","supplementalCode":"","description":""}},"paramTable":{"name":"paramTable","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((sessionResponse)&&(sessionResponse.paramTable)) {\n    return sessionResponse.paramTable;\n}\nelse {\n    throw new Error(\"No valid param table!\");\n}","supplementalCode":"","description":""}}}},"loadContext":{"name":"loadContext","type":"apogee.Folder","children":{"contextControl":{"name":"contextControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return null;","supplementalCode":"","description":""}},"context":{"name":"context","type":"apogee.JsonTable","updateData":{"data":"public","description":""}}}},"loadMetaFileRecords":{"name":"loadMetaFileRecords","type":"apogee.Folder","children":{"fileTypeList":{"name":"fileTypeList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!login.sessionKey) return null;\n\nvar fileTypeSearch = {};\nfileTypeSearch.search = \"file_type_list\";\n\nreturn micemetarDataAccess.getRequestPromise(fileTypeSearch,login.sessionKey);\n\n","supplementalCode":"","description":""}},"fileTypeEntryList":{"name":"fileTypeEntryList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!login.sessionKey) return null;\nif(!metaFileRecord) return null;\n\nvar searchDef = {};\nsearchDef.search = \"file_type_entries\";\nsearchDef.id = metaFileRecord.Fields.file_type_id;\n\nreturn micemetarDataAccess.getRequestPromise(searchDef,login.sessionKey);\n\n","supplementalCode":"","description":""}},"metaFileResponse":{"name":"metaFileResponse","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!login.sessionKey) return null;\nif(!selectedMetaFileId) return null;\n\nvar searchDef = {};\nsearchDef.search = \"meta_file\";\nsearchDef.id = selectedMetaFileId;\nreturn micemetarDataAccess.getRequestPromise(searchDef,login.sessionKey);\n\n\n\n\n\n\n","supplementalCode":"","description":""}},"metaFileList":{"name":"metaFileList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!login.sessionKey) return null;\nif(!loadContext.context) return null;\n\n\nvar searchDef = {};\nsearchDef.search = \"meta_file_list\";\nsearchDef.file_context = loadContext.context;\n\nreturn micemetarDataAccess.getRequestPromise(searchDef,login.sessionKey);\n\n","supplementalCode":"","description":""}},"metaFileSelector":{"name":"metaFileSelector","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nif((metaFileList)&&(metaFileList.success)) {\n    var metaFiles = {};\n    output.metaFiles = metaFiles;\n    \n    var metaFileRecords = metaFileList.data.Response;\n    for(var i = 0; i < metaFileRecords.length; i++) {\n        var record = metaFileRecords[i];\n        var fileType = getFileTypeName(record.Fields.file_type_id);\n        var metaName = record.Fields.name;\n        metaFiles[fileType + \":\" + metaName] = record.Id;\n    }\n}\n\noutput.currentMetaFileId = metaFileId;\n\nreturn output;","supplementalCode":"","description":""}},"INVALID_ID":{"name":"INVALID_ID","type":"apogee.JsonTable","updateData":{"data":0,"description":""}},"selectedMetaFileId":{"name":"selectedMetaFileId","type":"apogee.JsonTable","updateData":{"data":5,"description":""}},"fileEntryLookupTable":{"name":"fileEntryLookupTable","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!fileTypeEntryList) return null;\n\nvar lookupTable = {};\n\nvar isFileEntry = (record) => record.Type == \"file_entry\";\nvar addToLookupTable = (record) => lookupTable[record.Id] = record;\n\nfileTypeEntryList.data.Records.filter(isFileEntry).forEach(addToLookupTable);\n\nreturn lookupTable;\n\n","supplementalCode":"","description":""}},"getFileEntry":{"name":"getFileEntry","type":"apogee.FunctionTable","updateData":{"argList":["recordId"],"functionBody":"return fileEntryLookupTable[recordId];\n","supplementalCode":"","description":""}},"fileTypeLookupTable":{"name":"fileTypeLookupTable","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!fileTypeList) return null;\n\nvar lookupTable = {};\n\nvar isFileType = (record) => record.Type == \"file_type\";\nvar addToLookupTable = (record) => lookupTable[record.Id] = record.Fields.file_type_name;\n\nfileTypeList.data.Response.filter(isFileType).forEach(addToLookupTable);\n\nreturn lookupTable;","supplementalCode":"","description":""}},"getFileTypeName":{"name":"getFileTypeName","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeId"],"functionBody":"return fileTypeLookupTable[fileTypeId];","supplementalCode":"","description":""}},"metaFileRecord":{"name":"metaFileRecord","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!loadMetaFileRecords.metaFileResponse) {\n    return false;\n}\n\nif(!loadMetaFileRecords.metaFileResponse.success) {\n    throw new Error(\"Meta File request error\");\n}\n\nif(loadMetaFileRecords.metaFileResponse.data.Response.length === 0) {\n    throw new Error(\"Meta file not found\");\n}\n\nreturn loadMetaFileRecords.metaFileResponse.data.Response[0];","supplementalCode":"","description":""}},"supportingRecords":{"name":"supportingRecords","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!loadMetaFileRecords.metaFileResponse) {\n    return false;\n}\n\n\nreturn loadMetaFileRecords.metaFileResponse.data.Records;","supplementalCode":"","description":""}},"propRulesFileEntryLookupTable":{"name":"propRulesFileEntryLookupTable","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!fileTypeEntryList) return null;\n\nvar fileType = fileTypeEntryList.data.Response[0].Fields.file_type_name;\n\nif(fileType != \"propertyRules\") return null;\n\nvar output = {};\n\nvar isFileEntry = (record) => record.Type == \"file_entry\";\nvar addToLookupTable = (record) => {\n    var key = getRecordNameLookupKey(\"propertyRules\",record.Fields.entry_section,record.Fields.entry_name);\n    output[key] = record;\n}\n\nfileTypeEntryList.data.Records.filter(isFileEntry).forEach(addToLookupTable);\n\nreturn output;","supplementalCode":"","description":""}},"getRecordNameLookupKey":{"name":"getRecordNameLookupKey","type":"apogee.FunctionTable","updateData":{"argList":["recordType","section","entryName"],"functionBody":"return recordType + \"|\" + section + \"|\" + entryName;","supplementalCode":"","description":""}},"getPropRuleFileEntry":{"name":"getPropRuleFileEntry","type":"apogee.FunctionTable","updateData":{"argList":["section","entryName"],"functionBody":"var key = getRecordNameLookupKey(\"propertyRules\",section,entryName);\nreturn propRulesFileEntryLookupTable[key];","supplementalCode":"","description":""}}}},"fileReconstruct":{"name":"fileReconstruct","type":"apogee.Folder","children":{"reconstruct":{"name":"reconstruct","type":"apogee.Folder","children":{"themeMap":{"name":"themeMap","type":"apogee.FunctionTable","updateData":{"argList":["baseFile"],"functionBody":"var outFile = {};\noutFile.ft = \"ThemeMap\";\noutFile.nm = baseFile.nm;\n\nfor(var sectionName in baseFile.data) {\n    var inSectionEntry = baseFile.data[sectionName];\n    var outSectionEntry = [];\n    outFile[sectionName] = outSectionEntry;\n    \n    for(var i = 0; i < inSectionEntry.length; i++) {\n        var inPriorityEntry = inSectionEntry[i];\n        \n        var outPriorityEntry = {};\n        outPriorityEntry.priority = inPriorityEntry.order;\n        outPriorityEntry.ks = [];\n        processInputEntries(inPriorityEntry.entries,outPriorityEntry);\n        \n        outSectionEntry.push(outPriorityEntry);\n    }\n}\n\nreturn outFile;","supplementalCode":"const propTypeToKeyTag = {\n    \"address\":\"ak\",\n    \"entity\":\"ek\",\n    \"geometry\":\"gk\"\n};\n\n//read all in entries and add them as out entries to the output priority section\nfunction processInputEntries(inEntryMap,outPriorityEntry) {\n    for(var tag in inEntryMap) {\n        var inEntry = inEntryMap[tag];\n        processInEntry(inEntry,outPriorityEntry)\n    }\n    return outEntryList;\n}\n\n//add this in entry to the output priority section\nfunction processInEntry(inEntry,outPriorityEntry) {\n    //only process if there is a payload - there should be\n    if(inEntry.payload) {\n        var pathType = inEntry.propType;\n        var path = inEntry.path;\n        var keyIndex = path.length-1;\n        var rootEntry = outPriorityEntry;\n        //read the proper key or value entry from the path\n        var resultEntry = getEntry(pathType,path,keyIndex,rootEntry);\n        addPayload(resultEntry,inEntry.payload);\n    }\n}\n\n//copies data from the payload to the entry\nfunction addPayload(entry,payload) {\n    for(var tag in payload) {\n        entry[tag] = payload[tag];\n    }\n}\n\n//This function looks up the entry as the given index of the path\nfunction getEntry(pathType,path,keyIndex,rootEntry) {\n    if(path.length === 0) {\n        //the root entry is the value entry\n        return rootEntry;\n    }   \n    else {\n        var parentValueEntry;\n        \n        //get the parent value entry\n        if(keyIndex === 0) {\n            parentValueEntry = rootEntry;\n        }\n        else {\n            var parentIndex = keyIndex - 1;\n            //we require all entries excpet that last is a key-value entry\n            if(path[parentIndex].length !== 2) throw new Error(\"Error: all path entries except the last must be a full key-value entry! path: \" + path);\n            \n            parentValueEntry = getEntry(pathType,path,parentIndex,rootEntry);\n        }\n        \n        //get the key or value element at this entry\n        var currentPathElement = path[keyIndex];\n        var key = currentPathElement[0];\n        var keyEntry = getKeyEntryFromValueEntry(parentValueEntry,pathType,key);\n        if(currentPathElement.length === 1) {\n            //this is a key entry\n            return keyEntry;\n        }\n        else {\n            //this is a value entry\n            var value = currentPathElement[1];\n            return getValueEntryFromKeyEntry(keyEntry,value);\n        }\n    }\n}\n\nfunction getValueEntryFromKeyEntry(keyEntry,value) {\n    //get the value map from the key entry\n    var valueMap = keyEntry.v;\n    if(valueMap === undefined) {\n       valueMap = {};\n       keyEntry.v = valueMap;\n    }\n    //lookup up the value entry\n    valueEntry = valueMap[value];\n    \n    if(valueEntry === undefined) {\n        //construct a new one if it doesn't exist\n        valueEntry = {};\n        valueMap[value] = valueEntry;\n    }\n    return valueEntry;\n}\n\nfunction getKeyEntryFromValueEntry(valueEntry,propType,key) {\n    //key varies by prop type: ak/ek/gk\n    var keyTag = propTypeToKeyTag[propType];\n    \n    //get the key list from the value entry\n    var keyList = valueEntry.ks;\n    if(keyList === undefined) {\n        keyList = [];\n        valueEntry.ks = keyList;\n    }\n    //check if the key entry already exists\n    for(var i = 0; i < keyList.length; i++) {\n        var keyEntry = keyList[i];\n        if(keyEntry[keyTag] == key) {\n            return keyEntry;\n        }\n    }\n    //make a new key entry\n    var keyEntry = {};\n    keyEntry[keyTag] = key;\n    keyList.push(keyEntry);\n    return keyEntry;\n}","description":""}},"inputColors":{"name":"inputColors","type":"apogee.FunctionTable","updateData":{"argList":["baseFile"],"functionBody":"//just get rid of the data section\nvar outFile = apogee.util.jsonCopy(baseFile.data);\noutFile.nm = baseFile.nm;\nreturn outFile;","supplementalCode":"","description":""}},"strings":{"name":"strings","type":"apogee.FunctionTable","updateData":{"argList":["baseFile"],"functionBody":"var outFile = {};\noutFile.nm = baseFile.nm;\n\nvar translations = {};\noutFile.translations = translations;\n\nfor(var lang in baseFile.data) {\n    var section = baseFile.data[lang];\n    \n    for(var key in section) {\n        var entry = section[key];\n        var translation = entry.trans;\n        addTranslation(key,lang,translation,translations);\n    }\n}\n\nreturn outFile;","supplementalCode":"function addTranslation(key,lang,translation,translations) {\n    var entry = translations[key];\n    if(entry === undefined) {\n        entry = {};\n        translations[key] = entry;\n    }\n    entry[lang] = translation;\n}","description":""}},"theme":{"name":"theme","type":"apogee.FunctionTable","updateData":{"argList":["baseFile"],"functionBody":"var outFile = {};\noutFile.nm = baseFile.nm;\noutFile.ft = \"thm5\";\n\nfor(var sectionName in baseFile.data) {\n    var newSectionName = SECTION_NAME_MAP[sectionName];\n    outFile[newSectionName] = baseFile.data[sectionName];\n}\n\nreturn outFile;","supplementalCode":"const SECTION_NAME_MAP = {\n    \"style\": \"s\",\n    \"icon\": \"i\",\n    \"labelStyle\": \"l\",\n    \"marker\": \"m\"\n}","description":""}},"presetOverride":{"name":"presetOverride","type":"apogee.FunctionTable","updateData":{"argList":["baseFile"],"functionBody":"var outFile = {};\n\nvar outEntriesSection = [];\nvar namedKeysSection = [];\n\n//identify the pattern based on current allowed types (for preset overrides)\nfor(var sectionName in baseFile.data) {\n    var section = baseFile.data[sectionName];\n    for(var entryName in section) {\n        var inEntry = section[entryName];\n        if(sectionName != \"named_entries\") {\n            var outEntry = createTreeOutEntry(inEntry,sectionName);\n            if(outEntry) {\n                outEntriesSection.push(outEntry);\n            }\n        }\n        else {\n            var outEntryList = createNamedOutEntryList(inEntry);\n            if(outEntryList) {\n                namedKeysSection = namedKeysSection.concat(outEntryList);\n            }\n        }\n    }\n}\n\nif(outEntriesSection.length > 0) {\n    outFile.entries = outEntriesSection;\n}\nif(namedKeysSection.length > 0) {\n    outFile.name_keys = namedKeysSection;\n}\n\nreturn outFile;","supplementalCode":"function createTreeOutEntry(inEntry,section) {\n    if(inEntry.extends !== undefined) {\n        return createExtendsEntry(inEntry,section);\n    }\n    else if(inEntry.modifies !== undefined) {\n        return createModifiesEntry(inEntry,section);\n    }\n    else {\n        throw new Error(\"Preset override supports only entry action extends and modifies\");\n    }\n}\n\nfunction createExtendsEntry(inEntry,section) {\n    if(inEntry.properties.length > 1) {\n        throw new Error(\"Preset override supports only extend entries with no new properties\");\n    }\n    \n    var firstProp = inEntry.properties[0];\n    \n    if((firstProp.action != \"modifies\")&&(firstProp.key != \"featureType\")) {\n        throw new Error(\"Preset override supports only extend entries for feature types\");\n    }\n    \n    var legacyKey = firstProp.legacyKey;\n    var legacyValue = firstProp.legacyValue;\n    \n    \n    //this is a simple new key-value\n    var outEntry = {};\n    outEntry.type = \"value\";\n    outEntry.tree = section;\n    outEntry.path = [legacyKey];\n    outEntry.value = legacyValue;\n    outEntry.entry = {};\n    \n    return outEntry;\n}\n\nfunction createModifiesEntry(inEntry,section) {\n    //lookup base entry\n    var parentName = inEntry.modifies;\n   \n    var parentFileEntry =  loadMetaFileRecords.getPropRuleFileEntry(section,parentName);\n    if(!parentFileEntry) {\n        throw new Error(\"Parent not found: \" + section + \":\" + parentName);\n    }\n    parentEntryData = parentFileEntry.Fields.entry_data;\n    \n    //sanity check - because we are implmenting a subset of valid cases here\n    var parentFeatureTypeProp = parentEntryData.properties[0];\n    if(parentFeatureTypeProp.key != \"featureType\") {\n        throw new Error(\"Preset override failed on reading base entry for modifies: \" + entryValue);\n    }\n    \n    var parentLegacyKey = parentFeatureTypeProp.legacyKey;\n    var parentLegacyValue = parentFeatureTypeProp.legacyValue;\n    \n    //read the inEntry\n    if(inEntry.properties.length > 1) {\n        throw new Error(\"Preset override reconstruct only supports single property entries! Entry value = \" + inEntry.name);\n    }\n    var childProp = inEntry.properties[0];\n    \n    if(childProp.action == \"modifies\") {\n        return createChildValueEntry(section,parentLegacyKey,parentLegacyValue,childProp);\n    }\n    else if(childProp.action === undefined) {\n        return createChildKeyEntry(section,parentLegacyKey,parentLegacyValue,childProp);\n    }\n    else {\n        throw new Error(\"Unsupported property action in modifies entry: \" + childProp.action);\n    }\n}\n\nfunction createChildKeyEntry(section,parentLegacyKey,parentLegacyValue,childProp) {\n    \n    if(childProp.type != \"enum\") {\n        throw new Error(\"Preset override reconstruct supports only child key entry of type enum: childProp key = \" + childProp.key);\n    }\n    \n    //for enum, update the values format\n    var newValues = {};\n    childProp.values.forEach((element) => {newValues[element.value] = {}});\n    \n    var newData = {};\n    newData.k = childProp.key;\n    newData.type = childProp.input;\n    newData.values = newValues;\n    \n    var outEntry = {};\n    outEntry.type = \"value\";\n    outEntry.tree = section;\n    outEntry.path = [parentLegacyKey,parentLegacyValue];\n    outEntry.value = legacyValue;\n    outEntry.entry = newData;\n    \n    return outEntry;\n}\n\nfunction createChildValueEntry(section,parentLegacyKey,parentLegacyValue,childProp) {\n    \n    var childKey = childProp.key;\n    \n    if(childProp.values.length > 1) {\n        throw new Error(\"Preset override reconstruct supports only child value entry with a single added value: childProp key = \" + childKey);\n    }\n    \n    var childValue = childProp.values[0].value;\n    \n    var outEntry = {};\n    outEntry.type = \"value\";\n    outEntry.tree = section;\n    outEntry.path = [parentLegacyKey,parentLegacyValue,childKey];\n    outEntry.value = childValue;\n    outEntry.entry = {};\n    \n    return outEntry;\n}\n\nfunction createNamedOutEntryList(inEntry) {\n    //we support a very restricted set in this conversion - address key additions\n    if(inEntry.modifies != \"address keys\") {\n        throw new Error(\"Unsupported named entry in preset overrides conversion: \" + inEntry.modifies);\n    }\n    \n    if(inEntry.properties.length !== 1) {\n        throw new Error(\"Preset override resonctruct supports only a single property!\");\n    }\n    var addressProp = inEntry.properties[0];\n    if(addressProp.key != \"address keys\") {\n        throw new Error(\"Unsupported named entry key in preset overrides conversion: \" + addressProp.key);\n    }\n    if(addressProp.action != \"modifies\") {\n        throw new Error(\"Unsupported named key action in preset overrides conversion: \" + addressProp.action);\n    }\n    \n    var createNewEntry = (listEntry) => ({\"name\": \"address keys\",\"value\": listEntry.value,\"entry\": {}});\n    var outEntryList = addressProp.values.map(createNewEntry);\n    \n    return outEntryList;\n}\n    ","description":""}},"presets":{"name":"presets","type":"apogee.FolderFunction","argList":["baseFile"],"returnValue":"newFile","internalFolder":{"name":"root","type":"apogee.Folder","children":{"firstStepFile":{"name":"firstStepFile","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!baseFile) return null;\n\nvar output = {};\n\nvar metaFileRecord = loadMetaFileRecords.metaFileRecord;\nvar supportingRecords = loadMetaFileRecords.supportingRecords;\n\n\n//initialize, and load working data if applicable\nvar workingData = {}; \n\nvar isRecipeEntry = (record) => record.Type == \"recipe_entry\";\nvar addRecord = (recipeEntry) => processEntry(output,metaFileRecord,recipeEntry,workingData);\n\nsupportingRecords.filter(isRecipeEntry).forEach(addRecord);\n\nreturn output;\n","supplementalCode":"function processEntry(output,metaFile,recipeEntry,workingData) {\n    var fileEntry = loadMetaFileRecords.getFileEntry(recipeEntry.Fields.file_entry_id);\n    var entryData = fileEntry.Fields.entry_data;\n    \n    var newProperties = updateProperties(entryData.properties);\n    \n    //----------------\n    //load the section\n    //----------------\n    \n    var sectionName = fileEntry.Fields.entry_section;\n    if(sectionName == \"named_entries\") {\n        //handle generic entries\n        var entryName = entryData.name;\n        if(namedKeys[entryName]) {\n            //this is a named key\n            if(!output.named_keys) output.named_keys = {};\n            output.named_keys[entryName] = newProperties;\n        }\n        else {\n            //this is a named value\n            if(!output.named_groups) output.named_groups = {};\n            output.named_groups[entryName] = newProperties;\n        }\n        \n    }\n    else {\n        if(!output.property_trees) output.property_trees = {};\n        \n        if(entryData.extends) {\n            //modify the base section\n            baseEntry = getBaseEntry(output.property_trees[sectionName]);\n            updateBaseEntry(baseEntry,entryData);\n        }\n        else if(output.property_trees[sectionName] === undefined) {\n            //normal entry\n            output.property_trees[sectionName] = newProperties;\n        }\n        else {\n            //this shouldn't happen\n            throw new Error(\"Wasn't expecting another entry!\");\n        }\n    }\n\n}\n\nfunction updateProperties(properties) {\n    var newProperties = [];\n    \n    var propCopy = apogee.util.jsonCopy(properties);\n    for(var i = 0; i < propCopy.length; i++) {\n        var property = propCopy[i];\n        \n        if(property.type == \"type\") {\n            //remap this!\n            var newKey = typeRemap[property.key];\n            \n            var newProp = {};\n            newProp.key = newKey;\n            newProp.type = \"multikey\";\n            \n            //this is a cludge - I should do this another way.\n            if(property.meta) newProp.meta = property.meta;\n            \n            newProp.required = true;\n            newProp.properties = [];\n            newProperties.push(newProp);\n            \n            //handle legacy data addition if applicable\n            if(property.legacyKey !== undefined) {\n                var modEntry = {};\n                modEntry.name = property.name;\n                modEntry.properties = [];\n                var propEntry = {};\n                propEntry.legacyKey = property.legacyKey;\n                propEntry.legacyValue = property.legacyValue;\n                propEntry.value = property.value;\n                propEntry.key = property.key;\n                propEntry.action = \"modifies\";\n                modEntry.properties.push(propEntry);\n                \n                updateBaseEntry(newProp,modEntry);\n            }\n        }\n        else if(property.type == \"conditional\") {\n            //this is ugly!!\n            \n            var previousProperty = newProperties[newProperties.length-1];\n            var negationProperty;\n            \n            //add the default case to the parent\n            var propToAdd = property.default;\n            if(propToAdd !== undefined) {\n                newProperties.push(propToAdd);\n                \n                negationProperty = {};\n                negationProperty.type = \"fixed\";\n                negationProperty.key = propToAdd.key;\n            }\n            \n            //go through and update the preious property\n            for(var caseValue in property.cases) {\n                var caseProperty = property.cases[caseValue];\n                insertValueIntoPreviousPropery(previousProperty,caseValue,caseProperty,negationProperty);\n            }\n           \n        \n        }\n        else {\n            //keep as is\n            newProperties.push(property);\n        }\n    }\n    \n    return newProperties;\n}\n\nfunction insertValueIntoPreviousPropery(previousProperty,caseValue,caseProperty,negationProperty) {\n    var isCaseValueEntry = (entry) => (entry.value == caseValue);\n    var entry = previousProperty.values.find(isCaseValueEntry);\n    \n    if(!entry) throw new Error(\"Entry not found: \" + caseValue);\n    \n    var keyList = entry.keys;\n    if(!keyList) {\n        keyList = [];\n        entry.keys = keyList; \n    }\n    \n    keyList.push(caseProperty);\n    if(negationProperty) {\n        keyList.push(negationProperty);\n    }\n}\n\nfunction updateBaseEntry(baseEntry,entryData) {\n    var extendingProp = entryData.properties[0];\n    if(!extendingProp.action) throw new Error(\"Expected a 'modifies' entry!\");\n    \n    var key = extendingProp.legacyKey;\n    var value = extendingProp.legacyValue;\n    \n    var childKeys = baseEntry.properties;\n    if(!childKeys) {\n        childKeys = [];\n        baseEntry.properties = childKeys;\n    }\n    \n    var keyEntry = getChildKeyEntry(childKeys,key);\n    \n    //create the value entry\n    var valueEntry = {};\n    valueEntry.value = value;\n    keyEntry.values.push(valueEntry);\n    \n    //add any child keys for the value\n    if(entryData.properties.length > 1) {\n        \n        var valueChildKeys = [];\n        valueEntry.properties = valueChildKeys;\n        for(var i = 1; i < entryData.properties.length; i++) {\n            var entry = entryData.properties[i];\n            valueChildKeys.push(entry);\n        }\n    }\n}\n\n\n//---------------------------------------------------\n// this is repeat code - wasn't sure how else to do it\nfunction addObjectForBaseEntry(baseEntry) {\n    if(baseEntry.legacyKey !== undefined) {\n        var childKeys = baseEntry.properties;\n        if(!childKeys) {\n            childKeys = [];\n            baseEntry.properties = childKeys;\n        }\n        \n        var keyEntry = getChildKeyEntry(childKeys,baseEntry.legacyKey);\n        \n        //create the value entry\n        var valueEntry = {};\n        valueEntry.value = baseEntry.legacyValue;\n        keyEntry.values.push(valueEntry);\n    }\n}\n//-----------------------------------------------------\n\nfunction getBaseEntry(section) {\n    return section[0];\n}\n\nfunction getChildKeyEntry(childKeys,key) {\n    var keyEntry;\n    for(var i = 0; i < childKeys.length; i++) {\n        var entry = childKeys[i];\n        if(entry.key == key) {\n            keyEntry = entry;\n        }\n    }\n    if(!keyEntry) {\n        keyEntry = {};\n        keyEntry.key = key;\n        keyEntry.input = \"enum\";\n        keyEntry.values = [];\n        childKeys.push(keyEntry);\n    }\n    \n    return keyEntry;\n}","description":""}},"newFile":{"name":"newFile","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!firstStepFile) return null;\n\nvar output = {};\n\noutput.property_trees = {};\nvar inPropertyTrees = firstStepFile.property_trees;\n\nfor(var treeName in inPropertyTrees) {\n    var treeEntry = inPropertyTrees[treeName];\n\n    var outTreeEntry = convertKeyList(treeEntry);\n    output.property_trees[treeName] = outTreeEntry;\n}\n\noutput.named_groups = {};\nvar inNamedGroups = firstStepFile.named_groups;\nfor(var groupName in inNamedGroups) {\n    var group = inNamedGroups[groupName];\n    \n    var outGroup = convertKeyList(group);\n    output.named_groups[groupName] = outGroup;\n}\n\noutput.named_keys = {};\nvar inNamedKeys = firstStepFile.named_keys;\nfor(var groupName in inNamedKeys) {\n    var group = inNamedKeys[groupName];\n    \n    var outGroup = convertKeyList(group);\n    //named key is just the first element - array not used\n    output.named_keys[groupName] = outGroup[0];\n}\n\nreturn output;","supplementalCode":"\nfunction convertKeyList(inList) {\n    var outList = [];\n    for(var i = 0; i < inList.length; i++) {\n        var inEntry = inList[i];\n        outList.push(getOutEntry(inEntry));\n    }\n    return outList;\n}\n\nfunction convertValueList(inList) {\n    var outMap = {};\n    for(var i = 0; i < inList.length; i++) {\n        var inEntry = inList[i];\n        var tag = inEntry.value;\n        outMap[tag] = getOutEntry(inEntry);\n    }\n    return outMap;\n}\n\nfunction getOutEntry(inEntry) {\n    var outEntry = {};\n    for(var inTag in inEntry) {\n        if(inTag == \"value\") continue;\n        \n        var outTag = tagRename[inTag];\n        if(outTag === undefined) outTag = inTag;\n        \n        var inValue = inEntry[inTag];\n        \n        var outValue;\n        if(inTag == \"values\") {\n            outValue = convertValueList(inValue);\n        }\n        else if(inTag == \"properties\") {\n            outValue = convertKeyList(inValue);\n        }\n        else if(inTag == \"keys\") {\n            outValue = convertKeyList(inValue);\n        }\n        else if(inTag == \"options\") {\n            outValue = convertKeyList(inValue);\n        }\n        else {\n            outValue = inValue;\n        }\n        \n        outEntry[outTag] = outValue;\n    }\n    \n    //special changes\n    if(outEntry.input == \"named_entry\") {\n        var entryName = outEntry.named_entry;\n        if(namedKeys[entryName]) {\n            //named key\n            outEntry.input = \"named_key\";\n            outEntry.name = entryName;\n            delete outEntry.named_entry;\n        }\n        else {\n            //named group\n            outEntry.input = \"named_group\";\n            outEntry.name = entryName;\n            delete outEntry.named_entry;\n        }\n    }\n    \n    if(outEntry.input == \"type\") {\n        outEntry.input = \"multikey\";\n        outEntry.k = typeRemap[outEntry.k];\n    }\n    \n    if(outEntry.action == \"delete\") {\n        outEntry.input = \"fixed\";\n        delete outEntry.action;\n    }\n    if(outEntry.action == \"modifies\") {\n        //this won't work in all cases - just the ones we have so far!!!\n        delete outEntry.action;\n    }\n\n    return outEntry;\n}","description":""}},"namedKeys":{"name":"namedKeys","type":"apogee.JsonTable","updateData":{"data":{"address keys":true,"lang":true},"description":""}},"typeRemap":{"name":"typeRemap","type":"apogee.JsonTable","updateData":{"data":{"featureType":"geom_type","linkType":"nav_class"},"description":""}},"tagRename":{"name":"tagRename","type":"apogee.JsonTable","updateData":{"data":{"key":"k","values":"v","properties":"ks","options":"ks","keys":"ks","meta":"prop","type":"input"},"description":""}},"baseFile":{"name":"baseFile","type":"apogee.JsonTable","updateData":{"data":null,"description":"WE DON'T USE THIS!"}}}}}}},"baseFile":{"name":"baseFile","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var metaFileRecord = loadMetaFileRecords.metaFileRecord;\nvar supportingRecords = loadMetaFileRecords.supportingRecords;\n\nif(!metaFileRecord) return null;\n\nvar output = {};\noutput.nm = metaFileRecord.Fields.name;\noutput.data = {};\n\nvar isRecipeEntry = entry => entry.Type == \"recipe_entry\";\nvar addToOutput = recipeEntry => processEntry(output,metaFileRecord,recipeEntry);\n\nsupportingRecords.filter(isRecipeEntry).map(addToOutput);\n\nreturn output;","supplementalCode":"function processEntry(outFile,metaFile,recipeEntry) {\n    \n    var fileEntry = loadMetaFileRecords.getFileEntry(recipeEntry.Fields.file_entry_id);\n    if(!fileEntry) {\n        throw new Error(\"File entry not found. id=\" + recipeEntry.Fields.file_entry_id);\n    }\n    \n    //get the section or subsection to which this should be added\n    var outSection;\n    var sectionName = fileEntry.Fields.entry_section;\n    var insertionInfo = recipeEntry.Fields.insertion_info;\n    if(insertionInfo != null) {\n        //allow for the different types of insertion info\n        var subsectionEntry;\n        if(insertionInfo.taggedEntry !== undefined) {\n            subsectionEntry = getTaggedSubsection(outFile,sectionName,insertionInfo.taggedEntry);\n        }\n        else if(insertionInfo.orderedEntry !== undefined) {\n            subsectionEntry = getOrderedSubsection(outFile,sectionName,insertionInfo.orderedEntry);\n        }\n        else {\n            throw new Error(\"unrecognized subsection type\");\n        }\n        outSection = subsectionEntry;\n    } \n    else if(sectionName) {\n        //standard case - no recipe entry insertion info\n        outSection = getMapSection(outFile,sectionName);\n    }\n    else {\n        //no section\n        outSection = outFile.data;\n    }\n\n\n    //insert the data\n    var key = fileEntry.Fields.entry_value;\n    var data = fileEntry.Fields.entry_data;\n    \n    if(outSection[key] !== undefined) {\n        throw new Error(\"Repeat key! section: \" + sectionName + \". Key: \" + key);\n    }\n\n    outSection[key] = data;\n}\n\nfunction getMapSection(outFile,sectionName) {\n    var sectionEntry = outFile.data[sectionName];\n    if(sectionEntry === undefined) {\n        sectionEntry = {};\n        outFile.data[sectionName] = sectionEntry;\n    }\n    return sectionEntry;\n}\n\nfunction getTaggedSubsection(outFile,sectionName,tag) {\n    var sectionEntry = getMapSection(outFile,sectionName);\n    var subsectionEntry = sectionEntry[tag];\n    if(subsectionEntry === undefined) {\n        subsectionEntry = {};\n        sectionEntry[tag] = subsectionEntry;\n    }\n    return subsectionEntry;\n}\n\nfunction getOrderedSubsection(outFile,sectionName,order) {\n    //read the section\n    var sectionEntry = outFile.data[sectionName];\n    if(!sectionEntry) {\n        sectionEntry = [];\n        outFile.data[sectionName] = sectionEntry;\n    }\n    \n    //get or add the subsection, from the proper ordered location\n    var subsectionEntry;\n    var index = 0;\n    if(sectionEntry.length > 0) {\n        do {\n            var entry = sectionEntry[index];\n            if(entry.order === order) {\n                subsectionEntry = entry;\n            }\n            index++;\n        } while((entry.order < order)&&(index < sectionEntry.length));\n    }\n    \n    if(!subsectionEntry) {\n        subsectionEntry = {};\n        subsectionEntry.order = order;\n        subsectionEntry.entries = {};\n        sectionEntry.splice(index,0,subsectionEntry);\n    }\n    return subsectionEntry.entries;\n}\n\n","description":"This is the default file constructed from the inputs, according to a standard formula. An alternate file may be desired, in which case it can be constructed based on this file."}},"outFileType":{"name":"outFileType","type":"apogee.JsonTable","updateData":{"data":"strings","description":"This is the type of out file to create."}},"outputFile":{"name":"outputFile","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(outFileType == \"baseFile\") {\n    return baseFile;\n}\nelse if(outFileType) {\n    return reconstruct[outFileType](baseFile);\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}}}},"upload":{"name":"upload","type":"apogee.Folder","children":{"mfsUrl":{"name":"mfsUrl","type":"apogee.Folder","children":{"urlPatterns":{"name":"urlPatterns","type":"apogee.JsonTable","updateData":{"data":{"NOTES":["{0} is for the file name, {1} is for the identifier, either cid or customer name"],"community":{"comFile":"/map/{1}/overrides","propertyRules":"/map/{1}/overrides/presets","themeRules":"/map/{1}/overrides/thememap","theme":"/map/{1}/overrides/theme/{0}","strings":"/map/{1}/overrides/strings","inputColors":"/map/{1}/overrides/inputcolors"},"customer":{"propertyRules":"/customer/{1}/overrides/{0}/presets","themeRules":"/customer/{1}/overrides/{0}/thememap","theme":"/customer/{1}/overrides/{0}/theme","strings":"/customer/{1}/overrides/{0}/strings","inputColors":"/customer/{1}/overrides/{0}/inputcolors"},"global":{"propertyRules":"/meta/presets/v5/{0}","themeRules":"/meta/thememap/v5/{0}","theme":"/meta/theme/v5/{0}","strings":"/meta/strings/v5/{0}","inputColors":"/meta/miceditor/inputcolors/v5/{0}"}},"description":""}},"getUrl":{"name":"getUrl","type":"apogee.FunctionTable","updateData":{"argList":["fileType","uploadType","name","identifier"],"functionBody":"var formatString = urlPatterns[uploadType][fileType];\n\nreturn mfsBaseUrl + apogee.util.formatString(formatString,name,identifier);","supplementalCode":"","description":"- fileType - the meta data file type:\n  \"comFile\"\n  \"propertyRules\"\n  \"themeRules\"\n  \"theme\"\n  \"strings\"\n  \"inputColors\"\n\n- uploadType - the scope of the meta file\n  \"community\"\n  \"global\"\n  \"customer\"\n\n- name - the meta file name\n\n- identifier - cid for community or customer path name for customer"}},"mfsBaseUrl":{"name":"mfsBaseUrl","type":"apogee.JsonTable","updateData":{"data":"http://eng.micello.com/mfs/ms/v1/mfile","description":""}},"getUrlWithParams":{"name":"getUrlWithParams","type":"apogee.FunctionTable","updateData":{"argList":["url"],"functionBody":"if(!login.paramTable) {\n    throw new Error(\"Param table needed for MFS upload\");\n}\n\nvar isMatchingKey = (paramEntry) => url.startsWith(paramEntry.urlPattern);\n\nvar paramEntry = login.paramTable.find(isMatchingKey);\n\nif(paramEntry.params.length > 0) {\n    var appendParam = (inUrl,paramData) => {\n        inUrl += paramData[0] + \"=\" + paramData[1];\n        return inUrl;\n    }\n    \n    url = paramEntry.params.reduce(appendParam,url + \"?\");\n}\n\nreturn url;\n\n","supplementalCode":"","description":""}},"getUploadType":{"name":"getUploadType","type":"apogee.FunctionTable","updateData":{"argList":["context"],"functionBody":"if(context == \"public\") return \"global\";\nelse if(context.startsWith(\"com_\")) return \"community\";\nelse if(context.startsWith(\"~\")) return \"customer\";\nelse throw new Error(\"Upload type not known for context \" + context);","supplementalCode":"","description":""}},"getCommunityIdentifier":{"name":"getCommunityIdentifier","type":"apogee.FunctionTable","updateData":{"argList":["context"],"functionBody":"var prefixLength = COMMUNITY_PREFIX.length;\r\nreturn context.substr(prefixLength);","supplementalCode":"","description":""}},"COMMUNITY_PREFIX":{"name":"COMMUNITY_PREFIX","type":"apogee.JsonTable","updateData":{"data":"com_","description":""}},"getCustomerIdentifier":{"name":"getCustomerIdentifier","type":"apogee.FunctionTable","updateData":{"argList":["context"],"functionBody":"var name = customerAuthToPathName[context];\n\nif(name === undefined) throw new Error(\"Customer name not found for: \" + context);\n\nreturn name;","supplementalCode":"","description":""}},"customerAuthToPathName":{"name":"customerAuthToPathName","type":"apogee.JsonTable","updateData":{"data":{},"description":""}},"getFullUrl":{"name":"getFullUrl","type":"apogee.FunctionTable","updateData":{"argList":["fileType","context","name"],"functionBody":"var uploadType = getUploadType(context);\nvar identifier;\n\nswitch(uploadType) {\n    case \"community\":\n        identifier = getCommunityIdentifier(context);\n        break;\n        \n    case \"customer\":\n        identifier = getCustomerIdentifier(context);\n        break;\n        \n    case \"global\":\n        identifier = null;\n        break;\n}\n\nvar url = getUrl(fileType,uploadType,name,identifier);\n\nreturn getUrlWithParams(url);\n","supplementalCode":"","description":""}}}},"uploadFile":{"name":"uploadFile","type":"apogee.JsonTable","updateData":{"data":{"nm":"Standard","translations":{"com_type:Academic Building":{"en":"Academic Building","ja":"学術の建物"},"com_type:Airport":{"en":"Airport","ja":"空港"},"com_type:Apartment Complex":{"en":"Apartment Complex","ja":"団地"},"com_type:Bus Station":{"en":"Bus Station","ja":"バスターミナル"},"com_type:Business Campus":{"en":"Business Campus","ja":"ビジネスキャンパス"},"com_type:Campground":{"en":"Campground","ja":"キャンプ場"},"com_type:Casino":{"en":"Casino","ja":"カジノ"},"com_type:College Campus Building":{"en":"College Campus Building","ja":"大学キャンパス構築"},"com_type:Convention Center":{"en":"Convention Center","ja":"コンベンションセンター"},"com_type:Dormitory":{"en":"Dormitory","ja":"寮"},"com_type:Government":{"en":"Government","ja":"政府"},"com_type:High School":{"en":"High School","ja":"高等学校"},"com_type:Hospital":{"en":"Hospital","ja":"病院"},"com_type:Hotel":{"en":"Hotel","ja":"ホテル"},"com_type:Industry":{"en":"Industry","ja":"産業"},"com_type:Library":{"en":"Library","ja":"図書館"},"com_type:Metro Station":{"en":"Metro Station","ja":"地下鉄"},"com_type:Museum":{"en":"Museum","ja":"博物館"},"com_type:Other":{"en":"Other","ja":"その他"},"com_type:Parking Garage":{"en":"Parking Garage","ja":"駐車場"},"com_type:Religious Building":{"en":"Religious Building","ja":"宗教建築"},"com_type:Retail":{"en":"Retail","ja":"リテール"},"com_type:School":{"en":"School","ja":"学校"},"com_type:Shopping Center":{"en":"Shopping Center","ja":"ショッピングセンター"},"com_type:Shopping Mall":{"en":"Shopping Mall","ja":"ショッピングモール"},"com_type:Sports Center":{"en":"Sports Center","ja":"スポーツセンター"},"com_type:Stadium":{"en":"Stadium","ja":"スタジアム"},"com_type:Theater":{"en":"Theater","ja":"劇場"},"com_type:Theme Park":{"en":"Theme Park","ja":"テーマパーク"},"com_type:Train Station":{"en":"Train Station","ja":"鉄道駅"},"country:AD":{"en":"Andorra","ja":"アンドラ"},"country:AE":{"en":"United Arab Emirates","ja":"United Arab Emirates"},"country:AF":{"en":"Afghanistan","ja":"アフガニスタン"},"country:AG":{"en":"Antigua and Barbuda","ja":"アンチグアバーブーダ"},"country:AI":{"en":"Anguilla","ja":"アングィラ"},"country:AL":{"en":"Albania","ja":"アルバニア"},"country:AM":{"en":"Armenia","ja":"アルメニア"},"country:AN":{"en":"Netherlands Antilles","ja":"Netherlands Antilles"},"country:AO":{"en":"Angola","ja":"アンゴラ"},"country:AQ":{"en":"Antarctica","ja":"南極大陸"},"country:AR":{"en":"Argentina","ja":"アルゼンチン"},"country:AS":{"en":"American Samoa","ja":"米サモア"},"country:AT":{"en":"Austria","ja":"オーストリア"},"country:AU":{"en":"Australia","ja":"オーストラリア"},"country:AW":{"en":"Aruba","ja":"アルバ"},"country:AX":{"en":"Aland Islands","ja":"オーランド島"},"country:AZ":{"en":"Azerbaijan","ja":"アゼルバイジャン"},"country:BA":{"en":"Bosnia and Herzegovina","ja":"ボスニア_ヘルツェゴビナ"},"country:BB":{"en":"Barbados","ja":"バルバドス"},"country:BD":{"en":"Bangladesh","ja":"バングラデシュ"},"country:BE":{"en":"Belgium","ja":"ベルギー"},"country:BF":{"en":"Burkina Faso","ja":"ブルキナファソ"},"country:BG":{"en":"Bulgaria","ja":"ブルガリア"},"country:BH":{"en":"Bahrain","ja":"バーレーン"},"country:BI":{"en":"Burundi","ja":"ブルンジ"},"country:BJ":{"en":"Benin","ja":"ベナン"},"country:BM":{"en":"Bermuda","ja":"バミューダ"},"country:BN":{"en":"Brunei Darussalam","ja":"ブルネイ_ダルサラーム国"},"country:BO":{"en":"Bolivia","ja":"ボリビア"},"country:BR":{"en":"Brazil","ja":"ブラジル"},"country:BS":{"en":"Bahamas","ja":"バハマ"},"country:BT":{"en":"Bhutan","ja":"ブータン"},"country:BV":{"en":"Bouvet Island","ja":"ブーベ島"},"country:BW":{"en":"Botswana","ja":"ボツワナ"},"country:BY":{"en":"Belarus","ja":"ベラルーシ"},"country:BZ":{"en":"Belize","ja":"ベリーズ"},"country:CA":{"en":"Canada","ja":"カナダ"},"country:CC":{"en":"Cocos (Keeling) Islands","ja":"ココス（キーリング）島"},"country:CD":{"en":"The Democratic Republic of the Congo","ja":"The Democratic Republic of the Congo"},"country:CF":{"en":"Central African Republic","ja":"中央アフリカ共和国"},"country:CG":{"en":"Congo","ja":"コンゴ"},"country:CH":{"en":"Switzerland","ja":"スイス"},"country:CI":{"en":"Cote Divoire","ja":"Cote Divoire"},"country:CK":{"en":"Cook Islands","ja":"クック島"},"country:CL":{"en":"Chile","ja":"チリ"},"country:CM":{"en":"Cameroon","ja":"カメルーン"},"country:CN":{"en":"China","ja":"中国"},"country:CO":{"en":"Colombia","ja":"コロンビア"},"country:CR":{"en":"Costa Rica","ja":"コスタリカ"},"country:CV":{"en":"Cape Verde","ja":"カーボベルデ"},"country:CX":{"en":"Christmas Island","ja":"クリスマス島"},"country:CY":{"en":"Cyprus","ja":"キプロス"},"country:CZ":{"en":"Czech Republic","ja":"Czech Republic"},"country:DE":{"en":"Germany","ja":"ドイツ"},"country:DJ":{"en":"Djibouti","ja":"ジブチ"},"country:DK":{"en":"Denmark","ja":"デンマーク"},"country:DM":{"en":"Dominica","ja":"ドミニカ"},"country:DO":{"en":"Dominican Republic","ja":"ドミニカ共和国"},"country:DZ":{"en":"Algeria","ja":"アルジェリア"},"country:EC":{"en":"Ecuador","ja":"エクアドル"},"country:EE":{"en":"Estonia","ja":"エストニア"},"country:EG":{"en":"Egypt","ja":"エジプト"},"country:EH":{"en":"Western Sahara","ja":"西サハラ"},"country:ER":{"en":"Eritrea","ja":"エリトリア"},"country:ES":{"en":"Spain","ja":"スペイン"},"country:ET":{"en":"Ethiopia","ja":"エチオピア"},"country:FI":{"en":"Finland","ja":"フィンランド"},"country:FJ":{"en":"Fiji","ja":"フィジー"},"country:FK":{"en":"Falkland Islands (Malvinas)","ja":"フォークランド島（マルビナス）"},"country:FM":{"en":"Micronesia","ja":"ミクロネシア"},"country:FO":{"en":"Faroe Islands","ja":"フェロー島"},"country:FR":{"en":"France","ja":"フランス"},"country:GA":{"en":"Gabon","ja":"ガボン"},"country:GB":{"en":"United Kingdom","ja":"イギリス"},"country:GD":{"en":"Grenada","ja":"グレナダ"},"country:GE":{"en":"Georgia","ja":"グルジア"},"country:GF":{"en":"French Guiana","ja":"フレンチギアナ"},"country:GH":{"en":"Ghana","ja":"ガーナ"},"country:GI":{"en":"Gibraltar","ja":"ジブラルタル"},"country:GL":{"en":"Greenland","ja":"グリーンランド"},"country:GM":{"en":"Gambia","ja":"ガンビア"},"country:GN":{"en":"Guinea","ja":"ギニア"},"country:GP":{"en":"Guadeloupe","ja":"グアドループ島"},"country:GQ":{"en":"Equatorial Guinea","ja":"Equatorial Guinea"},"country:GR":{"en":"Greece","ja":"ギリシャ"},"country:GT":{"en":"Guatemala","ja":"グアテマラ"},"country:GU":{"en":"Guam","ja":"グアム島"},"country:GW":{"en":"Guinea-Bissau","ja":"Guinea-Bissau"},"country:GY":{"en":"Guyana","ja":"ガイアナ"},"country:HK":{"en":"Hong Kong","ja":"香港"},"country:HM":{"en":"Heard Island and McDonald Islands","ja":"Heard Island and McDonald Islands"},"country:HN":{"en":"Honduras","ja":"ホンジュラス"},"country:HR":{"en":"Croatia","ja":"クロアチア"},"country:HT":{"en":"Haiti","ja":"ハイチ"},"country:HU":{"en":"Hungary","ja":"ハンガリー"},"country:ID":{"en":"Indonesia","ja":"インドネシア"},"country:IE":{"en":"Ireland","ja":"アイルランド"},"country:IL":{"en":"Israel","ja":"イスラエル"},"country:IN":{"en":"India","ja":"インド"},"country:IO":{"en":"British Indian Ocean Territory","ja":"イギリス領インド洋地域"},"country:IQ":{"en":"Iraq","ja":"イラク"},"country:IS":{"en":"Iceland","ja":"アイスランド"},"country:IT":{"en":"Italy","ja":"イタリア"},"country:JM":{"en":"Jamaica","ja":"ジャマイカ"},"country:JO":{"en":"Jordan","ja":"ヨルダン"},"country:JP":{"en":"Japan","ja":"日本"},"country:KE":{"en":"Kenya","ja":"ケニア"},"country:KG":{"en":"Kyrgyzstan","ja":"キルギスタン"},"country:KH":{"en":"Cambodia","ja":"カンボジア"},"country:KI":{"en":"Kiribati","ja":"キリバス"},"country:KM":{"en":"Comoros","ja":"コモロ"},"country:KN":{"en":"Saint Kitts-Nevis","ja":"セントクリストファー_ネイビス -"},"country:KR":{"en":"Korea (South)","ja":"韓国"},"country:KW":{"en":"Kuwait","ja":"クウェート"},"country:KY":{"en":"Cayman Islands","ja":"ケイマン島"},"country:KZ":{"en":"Kazakstan","ja":"カザフスタン"},"country:LA":{"en":"Laos","ja":"ラオス"},"country:LB":{"en":"Lebanon","ja":"レバノン"},"country:LC":{"en":"Saint Lucia","ja":"セントルシア"},"country:LI":{"en":"Liechtenstein","ja":"リヒテンシュタイン"},"country:LK":{"en":"Sri Lanka","ja":"スリ_ランカ"},"country:LR":{"en":"Liberia","ja":"リベリア"},"country:LS":{"en":"Lesotho","ja":"レソト"},"country:LT":{"en":"Lithuania","ja":"リトアニア"},"country:LU":{"en":"Luxembourg","ja":"ルクセンブルク"},"country:LV":{"en":"Latvia","ja":"ラトビア"},"country:LY":{"en":"Libya","ja":"リビア"},"country:MA":{"en":"Morocco","ja":"モロッコ"},"country:MC":{"en":"Monaco","ja":"モナコ"},"country:MD":{"en":"Moldova","ja":"モルドバ"},"country:MG":{"en":"Madagascar","ja":"マダガスカル"},"country:MH":{"en":"Marshall Islands","ja":"マーシャル島"},"country:MK":{"en":"Macedonia","ja":"マケドニア"},"country:ML":{"en":"Mali","ja":"マリ"},"country:MM":{"en":"Myanmar","ja":"ミャンマー"},"country:MN":{"en":"Mongolia","ja":"モンゴル国"},"country:MO":{"en":"Macau","ja":"マカオ"},"country:MQ":{"en":"Martinique","ja":"マルティニーク島"},"country:MR":{"en":"Mauritania","ja":"モーリタニア"},"country:MS":{"en":"Montserrat","ja":"モントセラト"},"country:MT":{"en":"Malta","ja":"マルタ"},"country:MU":{"en":"Mauritius","ja":"モーリシャス"},"country:MV":{"en":"Maldives","ja":"モルディブ"},"country:MW":{"en":"Malawi","ja":"マラウイ"},"country:MX":{"en":"Mexico","ja":"メキシコ"},"country:MY":{"en":"Malaysia","ja":"マレーシア"},"country:MZ":{"en":"Mozambique","ja":"モザンビーク"},"country:NA":{"en":"Namibia","ja":"ナミビア"},"country:NC":{"en":"New Caledonia","ja":"ニューカレドニア"},"country:NE":{"en":"Niger","ja":"ニジェール"},"country:NF":{"en":"Norfolk Island","ja":"ノーフォーク島"},"country:NG":{"en":"Nigeria","ja":"ナイジェリア"},"country:NI":{"en":"Nicaragua","ja":"ニカラグア"},"country:NL":{"en":"Netherlands","ja":"オランダ"},"country:NO":{"en":"Norway","ja":"ノルウェー"},"country:NP":{"en":"Nepal","ja":"ネパールl"},"country:NR":{"en":"Nauru","ja":"ナウル"},"country:NU":{"en":"Niue","ja":"ニウエ"},"country:NZ":{"en":"New Zealand","ja":"ニュージーランド"},"country:OM":{"en":"Oman","ja":"オマーン"},"country:PA":{"en":"Panama","ja":"パナマ"},"country:PE":{"en":"Peru","ja":"ペルー"},"country:PF":{"en":"French Polynesia","ja":"フランス領ポリネシア"},"country:PG":{"en":"Papua New Guinea","ja":"パプアニューギニア"},"country:PH":{"en":"Philippines","ja":"フィリピン"},"country:PK":{"en":"Pakistan","ja":"パキスタン"},"country:PL":{"en":"Poland","ja":"ポーランド"},"country:PM":{"en":"Saint Pierre and Miquelon","ja":"サンピエール島_ミクロン島"},"country:PN":{"en":"Pitcairn","ja":"ピトケアン"},"country:PR":{"en":"Puerto Rico","ja":"プエルトリコ"},"country:PS":{"en":"Palestinian Territory, Occupied","ja":"パレスチナ"},"country:PT":{"en":"Portugal","ja":"ポルトガル"},"country:PW":{"en":"Palau","ja":"パラオ"},"country:PY":{"en":"Paraguay","ja":"パラグアイ"},"country:QA":{"en":"Qatar","ja":"カタール"},"country:RE":{"en":"Reunion","ja":"再会"},"country:RO":{"en":"Romania","ja":"ルーマニア"},"country:RU":{"en":"Russian Federation","ja":"ロシア連邦"},"country:RW":{"en":"Rwanda","ja":"ルワンダ"},"country:SA":{"en":"Saudi Arabia","ja":"サウジアラビア"},"country:SB":{"en":"Solomon Islands","ja":"ソロモン島"},"country:SC":{"en":"Seychelles","ja":"セイシェル"},"country:SE":{"en":"Sweden","ja":"スウェーデン"},"country:SG":{"en":"Singapore","ja":"シンガポール"},"country:SH":{"en":"Saint Helena","ja":"セント_ヘレナ島"},"country:SI":{"en":"Slovenia","ja":"スロベニア"},"country:SJ":{"en":"Svalbard and Jan Mayen","ja":"スバールバル島ヤンマイエン島"},"country:SK":{"en":"Slovakia","ja":"スロバキア"},"country:SL":{"en":"Sierra Leone","ja":"シエラレオネ"},"country:SM":{"en":"San Marino","ja":"サン_マリノ"},"country:SN":{"en":"Senegal","ja":"セネガル"},"country:SO":{"en":"Somalia","ja":"ソマリア"},"country:SR":{"en":"Suriname","ja":"スリナム"},"country:ST":{"en":"Sao Tome and Principe","ja":"サントメプリンシペ"},"country:SV":{"en":"El Salvador","ja":"エルサルバドル"},"country:SZ":{"en":"Swaziland","ja":"スワジランド"},"country:TC":{"en":"Turks and Caicos Islands","ja":"タークス_カイコス諸島"},"country:TD":{"en":"Chad","ja":"チャド"},"country:TF":{"en":"French Southern Territories","ja":"フランス領極南島"},"country:TG":{"en":"Togo","ja":"トーゴ"},"country:TH":{"en":"Thailand","ja":"タイ"},"country:TJ":{"en":"Tajikistan","ja":"タジキスタン"},"country:TK":{"en":"Tokelau","ja":"トケラウ島"},"country:TM":{"en":"Turkmenistan","ja":"トルクメニスタン"},"country:TN":{"en":"Tunisia","ja":"チュニジア"},"country:TO":{"en":"Tonga","ja":"トンガ"},"country:TR":{"en":"Turkey","ja":"トルコ"},"country:TT":{"en":"Trinidad and Tobago","ja":"トリニダード_トバゴ"},"country:TV":{"en":"Tuvalu","ja":"ツバル"},"country:TW":{"en":"Taiwan","ja":"台湾"},"country:TZ":{"en":"Tanzania","ja":"タンザニア"},"country:UA":{"en":"Ukraine","ja":"ウクライナ"},"country:UG":{"en":"Uganda","ja":"ウガンダ"},"country:UM":{"en":"United States Minor Outlying Islands","ja":"アメリカ合衆国外島"},"country:US":{"en":"United States","ja":"米国"},"country:UY":{"en":"Uruguay","ja":"ウルグアイ"},"country:UZ":{"en":"Uzbekistan","ja":"ウズベキスタン"},"country:VC":{"en":"Saint Vincent and the Grenadines","ja":"Saint Vincent and the Grenadines"},"country:VE":{"en":"Venezuela","ja":"ベネズエラ"},"country:VG":{"en":"Virgin Islands, British","ja":"英領バージン島"},"country:VI":{"en":"Virgin Islands, US","ja":"米領バージン島"},"country:VN":{"en":"Viet Nam","ja":"ベトナム"},"country:VU":{"en":"Vanuatu","ja":"バヌアツ"},"country:WF":{"en":"Wallis and Futuna","ja":"ワリー_エ_フトゥーナ"},"country:WS":{"en":"Samoa","ja":"サモア"},"country:YE":{"en":"Yemen","ja":"イエメン"},"country:YT":{"en":"Mayotte","ja":"マヨット島"},"country:ZA":{"en":"South Africa","ja":"南アフリカ"},"country:ZM":{"en":"Zambia","ja":"ザンビア"},"country:ZW":{"en":"Zimbabwe","ja":"ジンバブエ"},"icon:ATM":{"en":"ATM","ja":"ATM"},"icon:ATM:Dollar":{"en":"ATM","ja":"ATM"},"icon:ATM:General":{"en":"ATM","ja":"ATM:General"},"icon:ATM:Yen":{"en":"ATM","ja":"ATM:Yen"},"icon:Baggage Claim":{"en":"Baggage Claim","ja":"手荷物引渡場"},"icon:Bathroom":{"en":"Bathroom","ja":"トイレ"},"icon:Bathroom M":{"en":"Men's Bathroom","ja":"男子トイレ"},"icon:Bathroom W":{"en":"Women's Bathroom","ja":"女子トイレ"},"icon:Bathroom Fam":{"en":"Family Bathroom","ja":"ファミリールーム"},"icon:Bathroom W DA":{"en":"Bathroom W DA","ja":"Bathroom W DA"},"icon:Bathroom M DA":{"en":"Bathroom M DA","ja":"Bathroom M DA"},"icon:Bathroom Fam DA":{"en":"Bathroom Fam DA","ja":"多目的トイレ"},"icon:Bathroom DA":{"en":"Bathroom DA","ja":"Bathroom DA"},"icon:Bus":{"en":"Bus","ja":"バス"},"icon:Bike Rack":{"en":"Bike Rack","ja":"バイクラック"},"icon:Car Rental":{"en":"Car Rental","ja":"レンタカー"},"icon:Changing Station":{"en":"Changing Station","ja":"オムツ替え"},"icon:Cash Register":{"en":"Cash Register","ja":"Cash Register"},"icon:Cocktails":{"en":"Cocktails","ja":"カクテル"},"icon:Coffee":{"en":"Coffee","ja":"コーヒー"},"icon:Copy/Print":{"en":"Copy/Print","ja":"Copy/Print"},"icon:Crosswalk":{"en":"Crosswalk","ja":"歩道橋"},"icon:Customs":{"en":"Customs","ja":"税関検査"},"icon:Customer Service":{"en":"Customer Service","ja":"顧客サービス"},"icon:Defibrillator":{"en":"Defibrillator","ja":"AED"},"icon:Disabled Access":{"en":"Disabled Access","ja":"車いす対応"},"icon:Elevator":{"en":"Elevator","ja":"エレベータ"},"icon:Emergency Exit":{"en":"Emergency Exit","ja":"非常口"},"icon:Escalator":{"en":"Escalator","ja":"エスカレーター"},"icon:Eyewash":{"en":"Eyewash","ja":"目薬"},"icon:Fire Extinguisher":{"en":"Fire Extinguisher","ja":"消火器"},"icon:Fire Hose":{"en":"Fire Hose","ja":"消防ホース"},"icon:Fire Pull":{"en":"Fire Pull","ja":"火災プル"},"icon:First Aid":{"en":"First Aid","ja":"救護室"},"icon:Fitness Center":{"en":"Fitness Center","ja":"フィットネスセンター"},"icon:Flight Monitor":{"en":"Flight Monitor","ja":"飛行モニター"},"icon:Food and Drink":{"en":"Food and Drink","ja":"飲食物"},"icon:Ground Transportation":{"en":"Ground Transportation","ja":"Ground Transportation"},"icon:Gym":{"en":"Gym","ja":"ジム"},"icon:Immigration and Customs":{"en":"Immigration and Customs","ja":"入国審査、税関審査"},"icon:Information":{"en":"Information","ja":"インフォメーション"},"icon:Locker":{"en":"Locker","ja":"コインロッカー"},"icon:Lost and Found":{"en":"Lost and Found","ja":"お忘れ物承り場所"},"icon:Luggage Cart":{"en":"Luggage Cart","ja":"荷物カート"},"icon:Mail":{"en":"Mail","ja":"郵便"},"icon:Massage Chair":{"en":"Massage Chair","ja":"マッサージチェア"},"icon:Medical":{"en":"Medical","ja":"医療"},"icon:Meditation Room":{"en":"Meditation Room","ja":"瞑想ルーム"},"icon:Meeting Point":{"en":"Meeting Point","ja":"打ち合わせポイント"},"icon:Money Changer":{"en":"Money Changer","ja":"マネーチェンジャー"},"icon:Movie Theater":{"en":"Movie Theater","ja":"映画館"},"icon:Moving Walkway":{"en":"Moving Walkway","ja":"動く歩道"},"icon:Passport Control":{"en":"Passport Control","ja":"Passport Control"},"icon:Paid Parking":{"en":"Paid Parking","ja":"有料駐車場"},"icon:Parking":{"en":"Parking","ja":"駐車場"},"icon:Pet Relief Area":{"en":"Pet Relief Area","ja":"ペット救済エリア"},"icon:Playground":{"en":"Playground","ja":"遊び場"},"icon:Police/Security":{"en":"Police/Security","ja":"警察／セキュリティ"},"icon:Power":{"en":"Power","ja":"電源"},"icon:Rest Area":{"en":"Rest Area","ja":"休憩所"},"icon:Restaurant":{"en":"Restaurant","ja":"レストラン"},"icon:Santa":{"en":"Santa","ja":"Santa"},"icon:Security Section":{"en":"Security Section","ja":"セキュリティ"},"icon:Shoe Shine":{"en":"Shoe Shine","ja":"靴磨き"},"icon:Shower":{"en":"Shower","ja":"シャワー"},"icon:Smoke":{"en":"Smoking Area","ja":"喫煙所"},"icon:Stairs":{"en":"Stairs","ja":"階段"},"icon:Stop Sign":{"en":"Stop Sign","ja":"停止"},"icon:Stroller":{"en":"Stroller","ja":"ベビーカー"},"icon:Taxi":{"en":"Taxi","ja":"タクシ"},"icon:Telephone":{"en":"Telephone","ja":"電話"},"icon:Ticketing, Check-in":{"en":"Ticketing, Check-in","ja":"鉄道乗車券販売"},"icon:Traffic Light":{"en":"Traffic Light","ja":"信号"},"icon:Train":{"en":"Train","ja":"電車"},"icon:Transit Hotel":{"en":"Transit Hotel","ja":"トランジットホテル"},"icon:TV":{"en":"TV","ja":"テレビ"},"icon:Valet Parking":{"en":"Valet Parking","ja":"駐車サービス"},"icon:Vending Machine":{"en":"Vending Machine","ja":"自販機"},"icon:Wheelchair Ramp":{"en":"Wheelchair Ramp","ja":"車椅子用のスロープ"},"icon:Wifi":{"en":"Wifi","ja":"Wifi"},"icon:Yield Sign":{"en":"Yield Sign","ja":"収量サイン"},"lang:ar":{"en":"Arabic","ja":"アラビア語"},"lang:da":{"en":"Danish","ja":"デンマーク語"},"lang:de":{"en":"German","ja":"ドイツ語"},"lang:en":{"en":"English","ja":"英語"},"lang:es":{"en":"Spanish","ja":"スペイン語"},"lang:fr":{"en":"French","ja":"フランス語"},"lang:gu":{"en":"Gujarati","ja":"グジャラート語"},"lang:he":{"en":"Hebrew","ja":"ヘブライ語"},"lang:hi":{"en":"Hindi","ja":"ヒンディー語"},"lang:id":{"en":"Indonesian","ja":"インドネシア語"},"lang:it":{"en":"Italian","ja":"イタリア語"},"lang:ja":{"en":"Japanese","ja":"日本語"},"lang:ko":{"en":"Korean","ja":"韓国語"},"lang:nl":{"en":"Dutch","ja":"オランダ語"},"lang:pt":{"en":"Portuguese","ja":"ポルトガル語"},"lang:ro":{"en":"Romanian","ja":"ルーマニア語"},"lang:ru":{"en":"Russian","ja":"ロシア語"},"lang:sv":{"en":"Swedish","ja":"スウェーデン語"},"lang:tr":{"en":"Turkish","ja":"トルコ語"},"lang:zh":{"en":"Chinese","ja":"中国語"},"map_type:Airport":{"en":"Airport","ja":"空港"},"map_type:Airport Terminal":{"en":"Airport Terminal","ja":"空港ターミナル"},"map_type:Casino":{"en":"Casino","ja":"カジノ"},"map_type:College Building":{"en":"College Building","ja":"カレッジビル"},"map_type:College Campus":{"en":"College Campus","ja":"大学のキャンパス"},"map_type:Convention":{"en":"Convention","ja":"コンベンション"},"map_type:Hospital":{"en":"Hospital","ja":"病院"},"map_type:Retail":{"en":"Retail","ja":"リテール"},"map_type:School Building":{"en":"School Building","ja":"校舎"},"map_type:School Campus":{"en":"School Campus","ja":"学校のキャンパス"},"map_type:Shopping Mall":{"en":"Shopping Mall","ja":"ショッピングモール"},"map_type:Station":{"en":"Station","ja":"駅"},"province:AB":{"en":"Alberta","ja":"アルバータ州"},"state:AK":{"en":"Alaska","ja":"アラスカ州"},"state:AL":{"en":"Alabama","ja":"アラバマ州"},"state:AR":{"en":"Arkansas","ja":"アーカンソー州"},"state:AZ":{"en":"Arizona","ja":"アリゾナ州"},"province:BC":{"en":"British Columbia","ja":"ブリティッシュコロンビア州"},"state:CA":{"en":"California","ja":"カリフォルニア州"},"state:CO":{"en":"Colorado","ja":"コロラド州"},"state:CT":{"en":"Connecticut","ja":"コネチカット州"},"state:DC":{"en":"District Of Columbia","ja":"コロンビア州"},"state:DE":{"en":"Delaware","ja":"デラウェア州"},"state:FL":{"en":"Florida","ja":"フロリダ州"},"state:GA":{"en":"Georgia","ja":"グルジア州"},"state:HI":{"en":"Hawaii","ja":"ハワイ"},"state:IA":{"en":"Iowa","ja":"アイオワ州"},"state:ID":{"en":"Idaho","ja":"アイダホ州"},"state:IL":{"en":"Illinois","ja":"イリノイ州"},"state:IN":{"en":"Indiana","ja":"インディアナ州"},"state:KS":{"en":"Kansas","ja":"カンザス州"},"state:KY":{"en":"Kentucky","ja":"ケンタッキー州"},"state:LA":{"en":"Louisiana","ja":"ルイジアナ州"},"state:MA":{"en":"Massachusetts","ja":"マサチューセッツ州"},"province:MB":{"en":"Manitoba","ja":"マニトバ州"},"state:MD":{"en":"Maryland","ja":"メリーランド州"},"state:ME":{"en":"Maine","ja":"メイン州"},"state:MI":{"en":"Michigan","ja":"ミシガン州"},"state:MN":{"en":"Minnesota","ja":"ミネソタ州"},"state:MO":{"en":"Missouri","ja":"ミズーリ州"},"state:MS":{"en":"Mississippi","ja":"ミシシッピー州"},"state:MT":{"en":"Montana","ja":"モンタナ州"},"province:NB":{"en":"New Brunswick","ja":"ニューブランズウィック州"},"state:NC":{"en":"North Carolina","ja":"ノースカロライナ州"},"state:ND":{"en":"North Dakota","ja":"ノースダコタ州"},"state:NE":{"en":"Nebraska","ja":"ネブラスカ州"},"state:NH":{"en":"New Hampshire","ja":"ニューハンプシャー州"},"state:NJ":{"en":"New Jersey","ja":"ニュージャージー州"},"province:NL":{"en":"Newfoundland and Labrador","ja":"ニューファンドランド_ラブラドール州"},"state:NM":{"en":"New Mexico","ja":"ニューメキシコ州"},"province:NS":{"en":"Nova Scotia","ja":"ノバスコシア州"},"territory:NSW":{"en":"New South Wales","ja":"ニューサウスウェールズ州"},"state:NV":{"en":"Nevada","ja":"ネバダ州"},"state:NY":{"en":"New York","ja":"ニューヨーク"},"state:OH":{"en":"Ohio","ja":"オハイオ州"},"state:OK":{"en":"Oklahoma","ja":"オクラホマ州"},"province:ON":{"en":"Ontario","ja":"オンタリオ州"},"state:OR":{"en":"Oregon","ja":"オレゴン州"},"state:PA":{"en":"Pennsylvania","ja":"ペンシルベニア州"},"province:PE":{"en":"Prince Edward Island","ja":"プリンスエドワードアイランド"},"province:QC":{"en":"Quebec","ja":"ケベック州"},"territory:QLD":{"en":"Queensland","ja":"クイーンズランド州"},"state:RI":{"en":"Rhode Island","ja":"ロードアイランド州"},"territory:SA":{"en":"South Australia","ja":"南オーストラリア州"},"state:SC":{"en":"South Carolina","ja":"サウスカロライナ州"},"state:SD":{"en":"South Dakota","ja":"サウスダコタ州"},"province:SK":{"en":"Saskatchewan","ja":"サスカチュワン州"},"territory:TAS":{"en":"Tasmania","ja":"タスマニア州"},"state:TN":{"en":"Tennessee","ja":"テネシー州"},"prefecture:Tokyo":{"en":"Tokyo","ja":"東京"},"state:TX":{"en":"Texas","ja":"テキサス州"},"state:UT":{"en":"Utah","ja":"ユタ州"},"state:VA":{"en":"Virginia","ja":"バージニア州"},"territory:VIC":{"en":"Victoria","ja":"ビクトリア"},"state:VT":{"en":"Vermont","ja":"バーモント州"},"state:WA":{"en":"Western Australia","ja":"西オーストラリア州"},"state:WI":{"en":"Wisconsin","ja":"ウィスコンシン州"},"state:WV":{"en":"West Virginia","ja":"ウェストバージニア州"},"state:WY":{"en":"Wyoming","ja":"ワイオミング州"}}},"description":""}},"submitControl":{"name":"submitControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var data = {};\ndata.uploadFile = uploadFile;\ndata.previousTask = state.previousTask;\n\nreturn data;","supplementalCode":"","description":""}},"commitMessage":{"name":"commitMessage","type":"apogee.JsonTable","updateData":{"data":null,"description":""}},"commitResponse":{"name":"commitResponse","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((!commitMessage)||(!liveUploadFile)) return null;\n\nvar options = {};\noptions.method = \"POST\";\noptions.body = liveUploadFile;\n\nvar url = mfsUrl.getFullUrl(fileType,context,metaDataOptionName);\n\nreturn apogee.net.jsonRequest(url,options);","supplementalCode":"","description":""}},"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":{"valid":false,"data":null},"description":""}},"state":{"name":"state","type":"apogee.JsonTable","updateData":{"data":{"active":false,"previousTask":[]},"description":""}},"taskResult":{"name":"taskResult","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var resultValue;\n\nvar taskResult = {};\nif((!liveUploadFile)||(!commitResponse)) {\n    return \"WAITING\";\n}\nelse if(commitResponse.length > 0) {\n    data = {};\n    data.commitResponse = commitResponse;\n    //taskAppModule.taskCompleted(apogeeMessenger,[\"submit\"],[\"completed\"],data);\n    resultValue = \"SUCCESS\";\n}\nelse {\n    alert(\"Error making commit: \" + commitResponse.msg);\n    resultValue = \"ERROR\";\n}\n\n//for error or success - clear the commit request\nvar updateInfo = [];\nupdateInfo.push([\"liveUploadFile\",null]);\nupdateInfo.push([\"commitMessage\",null]);\napogeeMessenger.compoundDataUpdate(updateInfo);\n    \nreturn resultValue;","supplementalCode":"","description":""}},"context":{"name":"context","type":"apogee.JsonTable","updateData":{"data":"public","description":""}},"fileType":{"name":"fileType","type":"apogee.JsonTable","updateData":{"data":"strings","description":""}},"liveUploadFile":{"name":"liveUploadFile","type":"apogee.JsonTable","updateData":{"data":null,"description":""}},"metaDataOptionName":{"name":"metaDataOptionName","type":"apogee.JsonTable","updateData":{"data":"Standard","description":""}}}}}}},"components":{"micemetarDataAccess":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":216,"y":34}},"children":{"createRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":560,"height":321},"posInfo":{"x":32,"y":389},"state":-1,"viewType":"Code"}},"recordsToCreateInstructions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":834,"height":391},"posInfo":{"x":30,"y":472},"state":-1,"viewType":"Code"}},"createCommitBody":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":568,"height":400},"posInfo":{"x":629,"y":225},"state":-1,"viewType":"Code"}},"createRequestOptions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":523,"height":254},"posInfo":{"x":863,"y":473},"state":0,"viewType":"Code"}},"host":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":353,"height":71},"posInfo":{"x":927,"y":45},"state":0,"viewType":"Text"}},"commitUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":433,"height":107},"posInfo":{"x":14,"y":98},"state":-1,"viewType":"Text"}},"requestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":450,"height":68},"posInfo":{"x":921,"y":306},"state":0,"viewType":"Formula"}},"dataSetInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":882,"height":611},"posInfo":{"x":63,"y":665},"state":0,"viewType":"JSON"}},"version":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":197,"height":91},"posInfo":{"x":523,"y":367},"state":0,"viewType":"Text"}},"createUpdateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":886,"height":655},"posInfo":{"x":36,"y":248},"state":-1,"viewType":"Code"}},"createCreateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":994,"height":643},"posInfo":{"x":35,"y":209},"state":-1,"viewType":"Code"}},"getFieldErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":512,"height":68},"posInfo":{"x":761,"y":616},"state":-1,"viewType":"Code"}},"getRecordErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":81},"posInfo":{"x":762,"y":664},"state":-1,"viewType":"Code"}},"createDeleteInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":678,"height":540},"posInfo":{"x":36,"y":289},"state":-1,"viewType":"Code"}},"getRecordInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":480,"height":400},"posInfo":{"x":818,"y":427},"state":-1,"viewType":"Code"}},"combinedEntriesToInstructionList":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":721,"height":524},"posInfo":{"x":285,"y":131},"state":-1,"viewType":"Private"}},"getCommitPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":741,"height":400},"posInfo":{"x":374,"y":75},"state":-1,"viewType":"Code"}},"getRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":810,"height":400},"posInfo":{"x":492,"y":556},"state":0,"viewType":"Code"}}}},"login":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":79,"y":21}},"children":{"loginUrl":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":463,"height":86},"posInfo":{"x":26,"y":27},"state":0,"viewType":"Text"}},"loginControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":404,"height":129},"posInfo":{"x":28,"y":149},"state":0,"viewType":"Output"},"resource":{"html":"","css":"","setData":"this.loginUrl = data;","constructorAddition":"\n\n//this uses the updated version of test authorization that takes and returns a JSON\nthis.onClick = function() {\n    \n    //on click\n    var bodyJson = {};\n    bodyJson.userName = resource.userInput.value;\n    bodyJson.password = resource.passwordInput.value;\n    \n    //cleaer password field\n    resource.passwordInput.value = \"\";\n    \n    var options = {};\n    options.body = JSON.stringify(bodyJson);\n    options.method = \"POST\";\n    \n    var requestPromise = apogee.net.jsonRequest(this.loginUrl,options);\n    \n    //set the response\n    mode.getMessenger().asynchDataUpdate(\"sessionResponse\",requestPromise);\n}","init":"\nvar label1 = document.createElement(\"label\");\nlabel1.for = \"userInput\";\nlabel1.innerHTML = \"User:\"\nelement.appendChild(label1);\n\nvar input1 = document.createElement(\"input\");\ninput1.id = \"userInput\";\nresource.userInput = input1;\nelement.appendChild(input1);\n\nelement.appendChild(document.createElement(\"br\"));\n\nvar label2 = document.createElement(\"label\");\nlabel2.for = \"passwordInput\";\nlabel2.innerHTML = \"Password:\"\nelement.appendChild(label2);\n\nvar input2 = document.createElement(\"input\");\ninput2.id = \"passwordInput\";\ninput2.type = \"password\";\nresource.passwordInput = input2;\nelement.appendChild(input2);\n\nelement.appendChild(document.createElement(\"br\"));\n\nvar button = document.createElement(\"button\");\nbutton.innerHTML = \"Login\";\nelement.appendChild(button);\n\nvar instance = this;\nbutton.onclick = function() {\n    instance.onClick();\n}\n\n\n"}},"sessionResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":626,"height":366},"posInfo":{"x":28,"y":49},"state":0,"viewType":"Text"}},"sessionKey":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":597,"height":43},"posInfo":{"x":28,"y":466},"state":0,"viewType":"Text"}},"paramTable":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":606,"height":129},"posInfo":{"x":34,"y":551},"state":0,"viewType":"Text"}}}},"loadContext":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":82,"y":74}},"children":{"contextControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":349,"height":73},"posInfo":{"x":68,"y":53},"state":0,"viewType":"Output"},"resource":{"html":"Context: <input type=\"text\" id=\"context_text\"></input>\n<br><br>\n<input type=\"button\" id=\"context_submit\" value=\"Submit\"></input>","onLoad":"this.textInput = document.getElementById(\"context_text\");\nthis.submitButton = document.getElementById(\"context_submit\");\nthis.initialized = true;\n\nvar instance = this;\nthis.submitButton.onclick = function() {\n    instance.onSubmit();\n}","constructorAddition":"this.textInput = null;\nthis.submitButton = null;\nthis.newLogingButton = null;\nthis.initialized = false;\n\nthis.onSubmit = function() {\n    if(!this.initialized) return;\n    \n    var context = this.textInput.value.trim();\n    if(context.length === 0) {\n        alert(\"Invalid context value.\");\n        return;\n    }\n    \n    var messenger = mode.getMessenger();\n    messenger.dataUpdate(\"context\",context);\n}"}},"context":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":305,"height":63},"posInfo":{"x":465,"y":62},"state":0,"viewType":"Text"}}}},"loadMetaFileRecords":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":76,"y":136}},"children":{"fileTypeList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":555,"height":325},"posInfo":{"x":27,"y":103},"state":-1,"viewType":"Text"}},"fileTypeEntryList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":742,"height":473},"posInfo":{"x":563,"y":93},"state":-1,"viewType":"Text"}},"metaFileResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":799,"height":449},"posInfo":{"x":304,"y":34},"state":-1,"viewType":"Text"}},"metaFileList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":560,"height":289},"posInfo":{"x":27,"y":27},"state":-1,"viewType":"Text"}},"metaFileSelector":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":335,"height":80},"posInfo":{"x":51,"y":287},"state":0,"viewType":"Output"},"resource":{"html":"<select id=\"load_metaFileSelect\"></select>\n<br><br>\n<input type=\"button\" value=\"Submit\" id=\"load_submitButton\"></input>\n<input type=\"button\" value=\"Cancel\" id=\"load_cancelButton\"></input>","onLoad":"this.selectMetaFileElement = document.getElementById(\"load_metaFileSelect\");\nthis.submitButton = document.getElementById(\"load_submitButton\");\nthis.cancelButton = document.getElementById(\"load_cancelButton\");\n\nvar instance = this;\nthis.submitButton.onclick = function() {\n    instance.onSubmitClick();\n}\nthis.cancelButton.onclick = function() {\n    instance.onCancelClick();\n}\n\nthis.initialized = true;\n\nif(this.cachedData) {\n    this.setData(this.cachedData);\n    this.cachedData = null;\n}","setData":"if(!data) return;\nif(!this.initialized) {\n    this.cachedData = data;\n    return;\n}\n\nvar INVALID_ID = 0;\n\napogeeapp.ui.removeAllChildren(this.selectMetaFileElement);\n\n//add a dummy entry\nvar option = document.createElement(\"option\");\noption.text = \"<none selected>\";\n\noption.value = INVALID_ID;\nif(INVALID_ID == data.currentMetaFileId) option.selected = true;\nthis.selectMetaFileElement.add(option);\n\nfor(var fileDesc in data.metaFiles) {\n    var id = data.metaFiles[fileDesc];\n    var option = document.createElement(\"option\");\n    option.text = fileDesc;\n    option.value = id;\n    if(id == data.currentMetaFileId) option.selected = true;\n    this.selectMetaFileElement.add(option);\n}\n","constructorAddition":"\nthis.onSubmitClick = function() {\n    \n    if(!this.selectMetaFileElement) {\n        alert(\"Error; UI not initialized\");\n        return;\n    }\n    \n    if(this.selectMetaFileElement.length === 0) {\n        alert(\"Invalid selection!\");\n        return;\n    }\n    \n    var selectedIdString = this.selectMetaFileElement.value;\n    if(!isFinite(selectedIdString)) {\n        alert(\"Invalid selection!\");\n        return;\n    }\n    \n    var metaFileId = Number(selectedIdString);\n    \n    //create the compound update\n    var updateInfo = [];\n    mode.getMessenger().dataUpdate(\"selectedMetaFileId\",metaFileId);\n}\n\nthis.onCancelClick = function() {\n    mode.getMessenger().dataUpdate(\"selectedMetaFileId\",\"\");\n}\n\n"}},"INVALID_ID":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":220,"height":70},"posInfo":{"x":53,"y":604},"state":0,"viewType":"Text"}},"selectedMetaFileId":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":270,"height":102},"posInfo":{"x":50,"y":438},"state":0,"viewType":"Text"}},"fileEntryLookupTable":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":727,"height":521},"posInfo":{"x":533,"y":226},"state":-1,"viewType":"JSON"}},"getFileEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":488,"height":244},"posInfo":{"x":568,"y":150},"state":-1,"viewType":"Code"}},"fileTypeLookupTable":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":660,"height":300},"posInfo":{"x":25,"y":149},"state":-1,"viewType":"Text"}},"getFileTypeName":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":23,"y":193},"state":-1,"viewType":"Code"}},"metaFileRecord":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":646,"height":259},"posInfo":{"x":499,"y":529},"state":-1,"viewType":"Text"}},"supportingRecords":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":536,"height":442},"posInfo":{"x":491,"y":575},"state":-1,"viewType":"Formula"}},"propRulesFileEntryLookupTable":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":790,"height":352},"posInfo":{"x":548,"y":326},"state":-1,"viewType":"Formula"}},"getRecordNameLookupKey":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":726,"height":423},"posInfo":{"x":549,"y":281},"state":-1,"viewType":"Code"}},"getPropRuleFileEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":620,"height":400},"posInfo":{"x":544,"y":371},"state":-1,"viewType":"Code"}}}},"fileReconstruct":{"type":"apogeeapp.app.FolderComponent","children":{"reconstruct":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":239,"y":167}},"children":{"themeMap":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":922,"height":686},"posInfo":{"x":310,"y":21},"state":-1,"viewType":"Private"}},"inputColors":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":632,"height":400},"posInfo":{"x":306,"y":69},"state":-1,"viewType":"Code"}},"strings":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":712,"height":528},"posInfo":{"x":576,"y":23},"state":-1,"viewType":"Code"}},"theme":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":641,"height":400},"posInfo":{"x":79,"y":21},"state":-1,"viewType":"Code"}},"presetOverride":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":1043,"height":625},"posInfo":{"x":77,"y":155},"state":-1,"viewType":"Code"}},"presets":{"type":"apogeeapp.app.FolderFunctionComponent","windowState":{"posInfo":{"x":75,"y":231}},"children":{"firstStepFile":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":937,"height":654},"posInfo":{"x":32,"y":112},"state":-1,"viewType":"Formula"}},"newFile":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":1001,"height":744},"posInfo":{"x":39,"y":165},"state":-1,"viewType":"Formula"}},"namedKeys":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":444,"y":122},"state":-1,"viewType":"Text"}},"typeRemap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":445,"y":79},"state":-1,"viewType":"Text"}},"tagRename":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":444,"y":33},"state":-1,"viewType":"Text"}},"baseFile":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":42},"posInfo":{"x":37,"y":18},"state":0,"viewType":"Text"}}}}}},"baseFile":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":785,"height":615},"posInfo":{"x":423,"y":21},"state":-1,"viewType":"JSON"}},"outFileType":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":315,"height":37},"posInfo":{"x":29,"y":31},"state":0,"viewType":"Text"}},"outputFile":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":716,"height":607},"posInfo":{"x":416,"y":93},"state":0,"viewType":"Text"}}}},"upload":{"type":"apogeeapp.app.FolderComponent","children":{"mfsUrl":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":657,"y":47}},"children":{"urlPatterns":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":653,"height":471},"posInfo":{"x":28,"y":149},"state":-1,"viewType":"JSON"}},"getUrl":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":636,"height":292},"posInfo":{"x":444,"y":331},"state":-1,"viewType":"Notes"}},"mfsBaseUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":405,"height":50},"posInfo":{"x":14,"y":12},"state":0,"viewType":"Text"}},"getUrlWithParams":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":576,"height":400},"posInfo":{"x":443,"y":381},"state":-1,"viewType":"Code"}},"getUploadType":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":583,"height":114},"posInfo":{"x":445,"y":207},"state":-1,"viewType":"Code"}},"getCommunityIdentifier":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":369,"height":61},"posInfo":{"x":444,"y":247},"state":-1,"viewType":"Code"}},"COMMUNITY_PREFIX":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":28,"y":197},"state":-1,"viewType":"Text"}},"getCustomerIdentifier":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":741,"height":21},"posInfo":{"x":446,"y":288},"state":-1,"viewType":"Code"}},"customerAuthToPathName":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":28,"y":105},"state":-1,"viewType":"Text"}},"getFullUrl":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":571,"height":400},"posInfo":{"x":30,"y":290},"state":-1,"viewType":"Code"}}}},"uploadFile":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":273,"height":179},"posInfo":{"x":23,"y":19},"state":0,"viewType":"Text"}},"submitControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":356,"height":256},"posInfo":{"x":24,"y":307},"state":0,"viewType":"Output"},"resource":{"html":"<textarea id=\"submit_messageInput\"></textarea><br>\n<input type=\"button\" id=\"submit_commitButton\" value=\"Commit\"></input>\n<input type=\"button\" id=\"submit_cancelButton\" value=\"Cancel\"></input>","onLoad":"this.submitButton = document.getElementById(\"submit_commitButton\");\nthis.cancelButton = document.getElementById(\"submit_cancelButton\");\nthis.messageInput = document.getElementById(\"submit_messageInput\");\nthis.initialized = true;\n\nvar instance = this;\nthis.submitButton.onclick = function() {\n    instance.onSubmit();\n}\nthis.cancelButton.onclick = function() {\n    instance.onCancel();\n}","constructorAddition":"this.messageInput = null;\nthis.submitButton = null;\nthis.cancelButton = null;\nthis.initialized = false;\n\nthis.onSubmit = function() {\n    \n    if(!this.initialized) {\n        return;\n    }\n    \n    var commitMessage = this.messageInput.value.trim();\n    if((!commitMessage)||(commitMessage.length === 0)) {\n        alert(\"You must enter a commit message!\");\n        return;\n    }\n    this.messageInput.value = \"\";\n    \n    if((!this.uploadFile)||(this.uploadFile.length === 0)) {\n        alert(\"There is no data to commit.\");\n        return;\n    }\n    \n    var updateInfo = [];\n    updateInfo.push([ \"commitMessage\",commitMessage]);\n    updateInfo.push([\"liveUploadFile\",this.uploadFile]);\n    mode.getMessenger().compoundDataUpdate(updateInfo,true);\n}\n\nthis.onCancel = function() {\n    console.log(this.previousTask);\n    taskAppModule.taskCanceled(mode.getMessenger(),[\"submit\"],this.previousTask);\n}","setData":"if(!data) return;\n\nthis.uploadFile = data.uploadFile;\nthis.previousTask = data.previousTask;","css":"#submit_messageInput {\n    height: 200px;\n    width: 300px;\n}"}},"commitMessage":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":271,"height":99},"posInfo":{"x":812,"y":9},"state":-1,"viewType":"Text"}},"commitResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":843,"height":315},"posInfo":{"x":817,"y":116},"state":-1,"viewType":"Text"}},"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":303,"height":81},"posInfo":{"x":797,"y":399},"state":0,"viewType":"Text"}},"state":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":290,"height":92},"posInfo":{"x":444,"y":401},"state":0,"viewType":"Text"}},"taskResult":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":281,"height":89},"posInfo":{"x":806,"y":194},"state":0,"viewType":"JSON"}},"context":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":32},"posInfo":{"x":330,"y":112},"state":0,"viewType":"Text"}},"fileType":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":57},"posInfo":{"x":329,"y":11},"state":0,"viewType":"Text"}},"liveUploadFile":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":817,"y":57},"state":-1,"viewType":"Text"}},"metaDataOptionName":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":315,"height":50},"posInfo":{"x":332,"y":201},"state":0,"viewType":"Text"}}}}}}