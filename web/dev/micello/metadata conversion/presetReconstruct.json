{
	"fileType": "apogee workspace",
	"jsLinks": [],
	"cssLinks": [],
	"workspace": {
		"fileType": "apogee workspace",
		"version": 0.2,
		"data": {
			"name": "recreatePresetsFile",
			"type": "apogee.Folder",
			"children": {
				"loadMetaFileRecords": {
					"name": "loadMetaFileRecords",
					"type": "apogee.Folder",
					"children": {
						"fileTypeSearch": {
							"name": "fileTypeSearch",
							"type": "apogee.JsonTable",
							"updateData": {
								"data": {
									"search": "file_type_list"
								},
								"description": ""
							}
						},
						"metaFileSearch": {
							"name": "metaFileSearch",
							"type": "apogee.JsonTable",
							"updateData": {
								"argList": [],
								"functionBody": "var value;\nvar searchDef = {};\nsearchDef.search = \"meta_file\";\nsearchDef.id = metaFileId;\nreturn searchDef;\nreturn value;\n\n",
								"supplementalCode": "",
								"description": ""
							}
						},
						"fileTypeList": {
							"name": "fileTypeList",
							"type": "apogee.JsonTable",
							"updateData": {
								"argList": [],
								"functionBody": "var value;\nvar requestOptions = micemetarecipeDataAccess.createRequestOptions(fileTypeSearch);\nvalue = apogee.net.jsonRequest(micemetarecipeDataAccess.requestUrl,requestOptions);\nreturn value;\n\n",
								"supplementalCode": "",
								"description": ""
							}
						},
						"fileTypeEntrySearch": {
							"name": "fileTypeEntrySearch",
							"type": "apogee.JsonTable",
							"updateData": {
								"argList": [],
								"functionBody": "var value;\nvar searchDef = {};\nsearchDef.search = \"file_type_entries\";\nsearchDef.id = fileTypeId;\nreturn searchDef;\nreturn value;\n\n",
								"supplementalCode": "",
								"description": ""
							}
						},
						"fileTypeEntryList": {
							"name": "fileTypeEntryList",
							"type": "apogee.JsonTable",
							"updateData": {
								"argList": [],
								"functionBody": "var value;\nvar requestOptions = micemetarecipeDataAccess.createRequestOptions(fileTypeEntrySearch);\nvalue = apogee.net.jsonRequest(micemetarecipeDataAccess.requestUrl,requestOptions);\nreturn value;\n\n",
								"supplementalCode": "",
								"description": ""
							}
						},
						"recordStore": {
							"name": "recordStore",
							"type": "apogee.JsonTable",
							"updateData": {
								"argList": [],
								"functionBody": "var value;\nvar map = {};\n\naddSearchResponse(fileTypeList,map);\naddSearchResponse(fileTypeEntryList,map);\naddSearchResponse(metaFileSearch,map);\naddSearchResponse(metaFileResponse,map);\n\nreturn map;\nreturn value;\n\n",
								"supplementalCode": "function addSearchResponse(searchResponse,outputMap) {\n    if((!searchResponse)||(!searchResponse.success)||(!searchResponse.data)) {\n        return \"\";\n    }\n    \n    var searchResponseData = searchResponse.data;\n    \n    if(searchResponseData.Response) {\n        addRecordList(searchResponseData.Response,outputMap);\n    }\n    if(searchResponseData.Records) {\n        addRecordList(searchResponseData.Records,outputMap);\n    }\n    \n}\n\nfunction addRecordList(recordList,outputMap) {\n    for(var i = 0; i < recordList.length; i++) {\n        var record = recordList[i];\n        \n        var typeSection = outputMap[record.Type];\n        if(!typeSection) {\n            typeSection = {};\n            outputMap[record.Type] = typeSection;\n        }\n        \n        //if there is already a record, just overwrite it. They should be the same.\n        typeSection[record.Id] = record;\n    }\n}",
								"description": ""
							}
						},
						"metaFileEntryList": {
							"name": "metaFileEntryList",
							"type": "apogee.JsonTable",
							"updateData": {
								"argList": [],
								"functionBody": "var entryRecordList = [];\n\nvar recipeEntries = recordStore.recipe_entry;\n\nfor(var key in recipeEntries) {\n    var entryRecord = recipeEntries[key];\n    if(entryRecord.Fields.meta_file_id == 1) {\n        var fileEntryRecord = getRecord(\"file_entry\",entryRecord.Fields.file_entry_id);\n        var entryData = createMetaFileEntry(\n                fileEntryRecord,\n                entryRecord.Fields.insertion_info,\n                entryRecord.Fields.ordr\n            );\n        entryRecordList.push(entryData); \n    }\n}\n\nreturn entryRecordList;\n\n",
								"supplementalCode": "",
								"description": ""
							}
						},
						"context": {
							"name": "context",
							"type": "apogee.JsonTable",
							"updateData": {
								"data": "public",
								"description": ""
							}
						},
						"metaFileId": {
							"name": "metaFileId",
							"type": "apogee.JsonTable",
							"updateData": {
								"data": 1,
								"description": ""
							}
						},
						"fileTypeId": {
							"name": "fileTypeId",
							"type": "apogee.JsonTable",
							"updateData": {
								"data": 1,
								"description": ""
							}
						},
						"metaFileListSearch": {
							"name": "metaFileListSearch",
							"type": "apogee.JsonTable",
							"updateData": {
								"argList": [],
								"functionBody": "var value;\nvar searchDef = {};\nsearchDef.search = \"meta_file_list\";\nsearchDef.file_context = context;\nreturn searchDef;\nreturn value;\n\n",
								"supplementalCode": "",
								"description": ""
							}
						},
						"metaFileResponse": {
							"name": "metaFileResponse",
							"type": "apogee.JsonTable",
							"updateData": {
								"argList": [],
								"functionBody": "var value;\nif(metaFileId === 0) {\n    return undefined;\n}\n\nvar requestOptions = micemetarecipeDataAccess.createRequestOptions(metaFileSearch);\nvalue = apogee.net.jsonRequest(micemetarecipeDataAccess.requestUrl,requestOptions);\nreturn value;\n\n",
								"supplementalCode": "",
								"description": ""
							}
						},
						"metaFileList": {
							"name": "metaFileList",
							"type": "apogee.JsonTable",
							"updateData": {
								"argList": [],
								"functionBody": "var value;\nif(context === 0) {\n    return undefined;\n}\n\nvar requestOptions = micemetarecipeDataAccess.createRequestOptions(metaFileListSearch);\nvalue = apogee.net.jsonRequest(micemetarecipeDataAccess.requestUrl,requestOptions);\nreturn value;\n\n",
								"supplementalCode": "",
								"description": ""
							}
						},
						"getRecord": {
							"name": "getRecord",
							"type": "apogee.FunctionTable",
							"updateData": {
								"argList": [
									"recordType",
									"recordId"
								],
								"functionBody": "typeSection = recordStore[recordType];\nif(!typeSection) {\n    throw new Error(\"Type not found!\");\n}\n\nreturn typeSection[recordId];\n",
								"supplementalCode": "",
								"description": ""
							}
						},
						"fileTypeIds": {
							"name": "fileTypeIds",
							"type": "apogee.JsonTable",
							"updateData": {
								"argList": [],
								"functionBody": "var value;\nvar output = {};\n\nvar fileTypeRecords = fileTypeList.data.Response;\nfor(var i = 0; i < fileTypeRecords.length; i++) {\n    var record = fileTypeRecords[i];\n    output[record.Fields.file_type_name] = record.Id;\n}\n\nreturn output;\nreturn value;\n\n",
								"supplementalCode": "",
								"description": ""
							}
						},
						"metaFileIds": {
							"name": "metaFileIds",
							"type": "apogee.JsonTable",
							"updateData": {
								"argList": [],
								"functionBody": "var value;\nvar output = {};\n\nvar metaFileRecords = metaFileList.data.Response;\nfor(var i = 0; i < metaFileRecords.length; i++) {\n    var record = metaFileRecords[i];\n    var fileTypeRecord = getRecord(\"file_type\",record.Fields.file_type_id);\n    var fileType = fileTypeRecord.Fields.file_type_name;\n    var metaName = record.Fields.name;\n    output[fileType + \":\" + metaName] = record.Id;\n}\n\nreturn output;\nreturn value;\n\n",
								"supplementalCode": "",
								"description": ""
							}
						},
						"version": {
							"name": "version",
							"type": "apogee.JsonTable",
							"updateData": {
								"data": "1.0",
								"description": ""
							}
						},
						"dependencies": {
							"name": "dependencies",
							"type": "apogee.JsonTable",
							"updateData": {
								"data": "- micemetarecipeDataAccess - in root folder",
								"description": ""
							}
						},
						"releaseNotes": {
							"name": "releaseNotes",
							"type": "apogee.JsonTable",
							"updateData": {
								"data": "1.0: initial release",
								"description": ""
							}
						},
						"createMetaFileEntry": {
							"name": "createMetaFileEntry",
							"type": "apogee.FunctionTable",
							"updateData": {
								"argList": [
									"fileEntryRecord",
									"insertionInfo",
									"ordr"
								],
								"functionBody": "\nvar fileEntryTypeRecord = getRecord(\"file_entry_type\",fileEntryRecord.Fields.file_entry_type_id);\n\nvar entryData = {};\nentryData.fileEntryId = fileEntryRecord.Id;\nentryData.section = fileEntryTypeRecord.Fields.section;\nentryData.name = fileEntryTypeRecord.Fields.name;\nentryData.keyString = fileEntryTypeRecord.Fields.key_string;\nentryData.entry = fileEntryRecord.Fields.entry_data;\nentryData.insertionInfo = insertion_info;\nentryData.order = ordr;\n\nreturn entryData;",
								"supplementalCode": "",
								"description": ""
							}
						}
					}
				},
				"micemetarecipeDataAccess": {
					"name": "micemetarecipeDataAccess",
					"type": "apogee.Folder",
					"children": {
						"createRecord": {
							"name": "createRecord",
							"type": "apogee.FunctionTable",
							"updateData": {
								"argList": [
									"recordInfo",
									"fieldMap"
								],
								"functionBody": "var record = {};\n\nrecord.Id = getId();\nrecord.Type = recordInfo.name;\nrecord.Fields = fieldMap;\nrecord.readPerm = READ_PERM;\nrecord.editPerm = EDIT_PERM;\n\nreturn record;",
								"supplementalCode": "var READ_PERM = 2;\nvar EDIT_PERM = 15;\n\nvar nextId = -1;\n\nfunction getId() {\n    return nextId--;\n}",
								"description": "This method creates a record given the field values and record info \nfrom the data set info. It creates and ID and uses standard permissions."
							}
						},
						"recordsToCreateInstructions": {
							"name": "recordsToCreateInstructions",
							"type": "apogee.FunctionTable",
							"updateData": {
								"argList": [
									"recordList"
								],
								"functionBody": "var instructions = [];\n\nfor(var i = 0; i < recordList.length; i++) {\n    var createRecord = recordList[i];\n    var createRecordInfo = dataAccess.dataSetInfo.records[createRecord.Type];\n    if(!createRecordInfo) {\n        throw new Error(\"Record type not found: \" + createRecord.Type);\n    }\n    \n    var instruction = getInstruction(createRecord,createRecordInfo);\n    instructions.push(instruction);\n}\n\nreturn instructions;",
								"supplementalCode": "function getFieldErrString(recordInfo,id,field) {\n    return recordInfo.name + \" \" + id + \" - \" + field.name;\n}\n\nfunction getInstruction(createRecord,createRecordInfo) {\n    var instruction = {};\n    instruction.Type = \"Create\";\n    instruction.Record = createRecordInfo.name;\n    instruction.Id = createRecord.Id;\n    \n    instruction.targetReadPerm = createRecord.readPerm;\n    instruction.targetEditPerm = createRecord.editPerm;\n    \n    var targetData = {};\n    instruction.Target = targetData;\n    \n    for(var i = 0; i < createRecordInfo.fields.length; i++) {\n        var field = createRecordInfo.fields[i];\n        var targetValue;\n        var targetValue = createRecord.Fields[field.name];\n        if(targetValue === undefined) {\n            //use default\n            targetValue = field.defaultValue;\n        }\n        \n        if(targetValue === undefined) {\n            throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecordInfo,createRecord.Id,field));\n        }\n        \n        if(targetValue === null) {\n            if(!field.nullOk) {\n                throw new Error(\"Illegal null value: \" + getFieldErrString(createRecordInfo,createRecord.Id,field));\n            }\n        }\n        \n        targetData[field.name] = targetValue;\n    }\n    \n    return instruction;\n}",
								"description": "This creates a list of create instructions to go along with a list of records to be created.\n\nThere is the option to assign the ID or to leave it as undefined, in which case\nan automatically incremented ID will be assigned. (For consistency in the data\nset, either all records should be preassigned or all records should be \nautomatically assigned."
							}
						},
						"createCommitBody": {
							"name": "createCommitBody",
							"type": "apogee.FunctionTable",
							"updateData": {
								"argList": [
									"instructionList",
									"commitMessage"
								],
								"functionBody": "var commit = {};\nvar actions = [];\n\nif(commitMessage.length === 0) throw new Error(\"Commit message missing!\");\n\ncommit.Name = dataSetInfo.name;\ncommit.Message = commitMessage;\ncommit.Actions = actions;\n\n//single action with commits\nvar action = {};\naction.Title = \"bulk create commit\";\naction.Instr = instructionList;\nactions.push(action);\n\nreturn commit",
								"supplementalCode": "",
								"description": "This creates a body for a commit request, given a list of instructions and a commit message."
							}
						},
						"createRequestOptions": {
							"name": "createRequestOptions",
							"type": "apogee.FunctionTable",
							"updateData": {
								"argList": [
									"bodyJson"
								],
								"functionBody": "var header = {};\nheader[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\nheader.sessionKey = sessionKey;\nheader[\"proto-version\"] = \"4.0\";\nheader[\"db-version\"] = dataSetInfo.version;\n\nrequestInfo = {};\nrequestInfo.header = header;\nrequestInfo.method = \"POST\";\nrequestInfo.body = JSON.stringify(bodyJson);\n\nreturn requestInfo;\n",
								"supplementalCode": "",
								"description": "This creates the requestOptions, suitable for apogee.net.jsonRequest, to go with an type of request to the workingset (micemetarequest) server."
							}
						},
						"sessionKey": {
							"name": "sessionKey",
							"type": "apogee.JsonTable",
							"updateData": {
								"data": "SESS0f6c4c2238a670b8138b63d9fd03cc22=5kevg21qi6l6e21jmnkg79b8t3",
								"description": ""
							}
						},
						"host": {
							"name": "host",
							"type": "apogee.JsonTable",
							"updateData": {
								"data": "http://localhost:8080/micemetarecipews",
								"description": ""
							}
						},
						"commitUrl": {
							"name": "commitUrl",
							"type": "apogee.JsonTable",
							"updateData": {
								"argList": [],
								"functionBody": "var value;\nvalue = host + \"/commit\";\nreturn value;\n\n",
								"supplementalCode": "",
								"description": ""
							}
						},
						"requestUrl": {
							"name": "requestUrl",
							"type": "apogee.JsonTable",
							"updateData": {
								"argList": [],
								"functionBody": "var value;\nvalue = host + \"/cannedsearch\";\nreturn value;\n\n",
								"supplementalCode": "",
								"description": ""
							}
						},
						"dataSetInfo": {
							"name": "dataSetInfo",
							"type": "apogee.JsonTable",
							"updateData": {
								"data": {
									"records": {
										"file_entry_type": {
											"idField": "file_entry_type_id",
											"name": "file_entry_type",
											"foreignList": [
												{
													"remoteRecord": "file_entry",
													"name": "file_entry_list",
													"isUnique": false,
													"remoteField": "file_entry_type_id",
													"restrictDelete": true,
													"orderField": "ordr"
												}
											],
											"fields": [
												{
													"defaultValue": 0,
													"name": "ordr",
													"nullOk": false,
													"fieldClass": "java.lang.Integer"
												},
												{
													"defaultValue": null,
													"name": "file_type_id",
													"nullOk": false,
													"fieldClass": "com.micello.micemetarecipe.data.FileType"
												},
												{
													"defaultValue": null,
													"name": "section",
													"nullOk": true,
													"fieldClass": "org.json.JSONArray"
												},
												{
													"defaultValue": null,
													"name": "key_string",
													"nullOk": false,
													"fieldClass": "java.lang.String"
												},
												{
													"defaultValue": null,
													"name": "name",
													"nullOk": false,
													"fieldClass": "java.lang.String"
												}
											],
											"recordClass": "com.micello.micemetarecipe.data.FileEntryType"
										},
										"com_file_entry": {
											"idField": "com_file_entry_id",
											"name": "com_file_entry",
											"foreignList": [],
											"fields": [
												{
													"defaultValue": 0,
													"name": "ordr",
													"nullOk": false,
													"fieldClass": "java.lang.Integer"
												},
												{
													"defaultValue": null,
													"name": "com_file_id",
													"nullOk": false,
													"fieldClass": "com.micello.micemetarecipe.data.ComFile"
												},
												{
													"defaultValue": null,
													"name": "meta_file_id",
													"nullOk": false,
													"fieldClass": "com.micello.micemetarecipe.data.MetaFile"
												},
												{
													"defaultValue": null,
													"name": "file_group",
													"nullOk": false,
													"fieldClass": "java.lang.String"
												}
											],
											"recordClass": "com.micello.micemetarecipe.data.ComFileEntry"
										},
										"file_type": {
											"idField": "file_type_id",
											"name": "file_type",
											"foreignList": [
												{
													"remoteRecord": "file_entry_type",
													"name": "file_entry_type_list",
													"isUnique": false,
													"remoteField": "file_type_id",
													"restrictDelete": true,
													"orderField": "ordr"
												}
											],
											"fields": [
												{
													"defaultValue": null,
													"name": "file_type_name",
													"nullOk": true,
													"fieldClass": "java.lang.String"
												}
											],
											"recordClass": "com.micello.micemetarecipe.data.FileType"
										},
										"file_entry": {
											"idField": "file_entry_id",
											"name": "file_entry",
											"foreignList": [],
											"fields": [
												{
													"defaultValue": 0,
													"name": "ordr",
													"nullOk": false,
													"fieldClass": "java.lang.Integer"
												},
												{
													"defaultValue": null,
													"name": "file_entry_type_id",
													"nullOk": false,
													"fieldClass": "com.micello.micemetarecipe.data.FileEntryType"
												},
												{
													"defaultValue": null,
													"name": "entry_context",
													"nullOk": false,
													"fieldClass": "java.lang.String"
												},
												{
													"defaultValue": null,
													"name": "option_name",
													"nullOk": false,
													"fieldClass": "java.lang.String"
												},
												{
													"defaultValue": null,
													"name": "entry_data",
													"nullOk": false,
													"fieldClass": "org.json.JSONObject"
												}
											],
											"recordClass": "com.micello.micemetarecipe.data.FileEntry"
										},
										"recipe_entry": {
											"idField": "recipe_entry_id",
											"name": "recipe_entry",
											"foreignList": [],
											"fields": [
												{
													"defaultValue": 0,
													"name": "ordr",
													"nullOk": false,
													"fieldClass": "java.lang.Integer"
												},
												{
													"defaultValue": null,
													"name": "meta_file_id",
													"nullOk": false,
													"fieldClass": "com.micello.micemetarecipe.data.MetaFile"
												},
												{
													"defaultValue": null,
													"name": "file_entry_id",
													"nullOk": false,
													"fieldClass": "com.micello.micemetarecipe.data.FileEntry"
												},
												{
													"defaultValue": null,
													"name": "insertion_info",
													"nullOk": true,
													"fieldClass": "org.json.JSONObject"
												}
											],
											"recordClass": "com.micello.micemetarecipe.data.RecipeEntry"
										},
										"com_file": {
											"idField": "com_file_id",
											"name": "com_file",
											"foreignList": [
												{
													"remoteRecord": "com_file_entry",
													"name": "com_file_entry_list",
													"isUnique": false,
													"remoteField": "com_file_id",
													"restrictDelete": true,
													"orderField": "ordr"
												}
											],
											"fields": [
												{
													"defaultValue": null,
													"name": "file_context",
													"nullOk": false,
													"fieldClass": "java.lang.String"
												},
												{
													"defaultValue": null,
													"name": "name",
													"nullOk": false,
													"fieldClass": "java.lang.String"
												}
											],
											"recordClass": "com.micello.micemetarecipe.data.ComFile"
										},
										"meta_file": {
											"idField": "meta_file_id",
											"name": "meta_file",
											"foreignList": [
												{
													"remoteRecord": "recipe_entry",
													"name": "recipe_entry_list",
													"isUnique": false,
													"remoteField": "meta_file_id",
													"restrictDelete": true,
													"orderField": "ordr"
												}
											],
											"fields": [
												{
													"defaultValue": null,
													"name": "file_type_id",
													"nullOk": false,
													"fieldClass": "com.micello.micemetarecipe.data.FileType"
												},
												{
													"defaultValue": null,
													"name": "file_context",
													"nullOk": false,
													"fieldClass": "java.lang.String"
												},
												{
													"defaultValue": null,
													"name": "name",
													"nullOk": false,
													"fieldClass": "java.lang.String"
												}
											],
											"recordClass": "com.micello.micemetarecipe.data.MetaFile"
										}
									},
									"name": "Micemetarecipe",
									"version": "5.0"
								},
								"description": ""
							}
						},
						"version": {
							"name": "version",
							"type": "apogee.JsonTable",
							"updateData": {
								"data": "1.0",
								"description": ""
							}
						},
						"releaseNotes": {
							"name": "releaseNotes",
							"type": "apogee.JsonTable",
							"updateData": {
								"data": "",
								"description": "1.0: initial release"
							}
						},
						"depedencies": {
							"name": "depedencies",
							"type": "apogee.JsonTable",
							"updateData": {
								"data": "none",
								"description": ""
							}
						}
					}
				},
				"tableToPreset": {
					"name": "tableToPreset",
					"type": "apogee.Folder",
					"children": {
						"getPathString": {
							"name": "getPathString",
							"type": "apogee.FunctionTable",
							"updateData": {
								"argList": [
									"path"
								],
								"functionBody": "return path.join(\"|\");",
								"supplementalCode": "",
								"description": ""
							}
						},
						"addEntryToTree": {
							"name": "addEntryToTree",
							"type": "apogee.FunctionTable",
							"updateData": {
								"argList": [
									"entry",
									"tree"
								],
								"functionBody": "var presetEntry = createPresetEntry(entry);\n    \nvar parentPath = entry.parentPath;\nif(parentPath.length === 0) {\n    if(!keyInList(presetEntry,tree)) {\n        tree.push(presetEntry);    \n    }\n}\nelse {\n    var parentPresetEntry = getEntryAtPath(tree,parentPath);\n    if(parentPresetEntry) {\n        addToParentEntry(presetEntry,entry,parentPresetEntry);\n    }\n    else {\n        throw new Error(\"parent entry not found: \" + getPathString(parentPath));\n    }\n}",
								"supplementalCode": "\n//this gets the entry from the tree at the given path\nfunction getEntryAtPath(tree,path) {\n    if(path.length === 0) {\n        throw new Error(\"Code error - looking for an entry at an empty path\");\n    }\n    \n    var currentIndex = 0;\n    var keyList = tree;\n    return getEntryFromKeyList(keyList,path,currentIndex);\n    \n}\n\n//this is one of two recursive functions to get an entry from a path\nfunction getEntryFromKeyList(keyList,path,currentIndex) {\n    if(!keyList) return null;\n    \n    var keyEntry;\n    var key = path[currentIndex];\n    for(var i = 0; i < keyList.length; i++) {\n        keyEntry = keyList[i];\n        if(keyEntry.k == key) {\n            if(currentIndex == path.length-1) {\n                return keyEntry;\n            }\n            else if(keyEntry.input == \"multikey\") {\n                return getEntryFromKeyList(keyEntry.ks,path,currentIndex + 1);\n            }\n            else {\n                return getEntryFromValues(keyEntry.v,path,currentIndex + 1);\n            }\n        }\n    }\n}\n\n//this is one of two recursive functions to get an entry from a path\nfunction getEntryFromValues(values,path,currentIndex) {\n    if(!values) return null;\n    \n    var value = path[currentIndex];\n    var valueEntry = values[value];\n    \n    if(valueEntry) {\n        if(currentIndex == path.length-1) {\n            return valueEntry;\n        }\n        else {\n            return getEntryFromKeyList(valueEntry.ks,path,currentIndex + 1);\n        }\n    }\n    else {\n        return null;\n    }\n\n}\n\n//this adds a child entry to a parent\nfunction addToParentEntry(childPresetEntry,childInputEntry,parentPresetEntry) {\n    if(parentPresetEntry.k) {\n        if(parentPresetEntry.input == \"multikey\") {\n            insertKey(childPresetEntry,parentPresetEntry);\n        }\n        else {\n            insertValue(childInputEntry.v,childPresetEntry,parentPresetEntry);\n        }\n    }\n    else {\n        if(childPresetEntry.k) {\n            insertKey(childPresetEntry,parentPresetEntry);\n        }\n        else {\n            throw new Error(\"Error - only keys can be added to values.\");\n        }\n    }\n}\n\n//This adds a child key to a parent value\nfunction insertKey(childPresetEntry,parentPresetEntry) {\n    var keys = parentPresetEntry.ks;\n    if(!keys) {\n        keys = [];\n        parentPresetEntry.ks = keys;\n    }\n    if(!keyInList(childPresetEntry,keys)) {\n        keys.push(childPresetEntry);\n    }\n}\n\n//This function tests if a key entry is in a list\nfunction keyInList(presetEntry,entryList) {\n    var matchFunction = function(entry) {\n        return (presetEntry.k == entry.k);\n    }\n    var index = entryList.findIndex(matchFunction);\n    return (index >= 0);\n}\n\n//this adds a child value to a parent key\nfunction insertValue(value,childPresetEntry,parentPresetEntry) {\n    var values = parentPresetEntry.v;\n    if(!values) {\n        values = {};\n        parentPresetEntry.v = values;\n    }\n    if(!valueInMap(value,values)) {\n        values[value] = childPresetEntry;\n    }\n}\n\n//This function tests if a value is in a map\nfunction valueInMap(value,entryMap) {\n    return (entryMap[value] !== undefined);\n}\n\n//This creates a preset entry for the give input entry\nfunction createPresetEntry(entry) {\n    var presetEntry = {};\n    \n    //common optional fields\n    //not used for tree - include with VERBOSE flag\n    if(VERBOSE) {\n        if(entry.desc) {\n            presetEntry.desc = entry.desc;\n        }\n        if(entry.dep !== undefined) {\n            presetEntry.dep = entry.dep;\n        }\n    }\n    \n    if(entry.type == \"key\") {\n        //main fields\n        presetEntry.k = entry.k;\n        presetEntry.input = entry.input\n        \n        //optional field\n        if(entry.required !== undefined) {\n            presetEntry.required = entry.required;\n        }\n        if(entry.is_array !== undefined) {\n            presetEntry.is_array = entry.is_array;\n        }\n        if(entry.has_lang !== undefined) {\n            presetEntry.has_lang = entry.has_lang;\n        }\n        if(entry.prop) {\n            presetEntry.prop = entry.prop;\n        }\n        \n        //dependent fields\n        if(entry.fixed_value !== undefined) {\n            //on input type fixed\n            presetEntry.fixed_value = entry.fixed_value;\n        }\n        if(entry.name !== undefined) {\n            //optionally on named keys reference\n            presetEntry.name = entry.name;\n        }\n    }\n    else if(entry.type == \"value\") {\n        //no main or optional to add here\n    }\n    else {\n        throw new Error(\"Unknown type\");\n    }\n    \n    return presetEntry;\n    \n}",
								"description": ""
							}
						},
						"loadEntriesFromEntryList": {
							"name": "loadEntriesFromEntryList",
							"type": "apogee.FunctionTable",
							"updateData": {
								"argList": [
									"presetTable",
									"entryList"
								],
								"functionBody": "var selectedPresetTable = {};\n\nfor(var treeName in entryList) {\n    var treeList = entryList[treeName];\n    var treeTable = {};\n    selectedPresetTable[treeName] = treeTable;\n    \n    var sourceTreeTable = presetTable[treeName];\n    \n    for(var i = 0; i < treeList.length; i++) {\n        var pathString = treeList[i];\n        var entry = sourceTreeTable[pathString];\n        \n        if(!entry) {\n            throw new Error(\"Entry not found: \" + pathString);\n        }\n        \n        addEntryToTreeTable(pathString,entry,treeTable,treeName);\n    }\n}\n\nreturn selectedPresetTable;",
								"supplementalCode": "function addEntryToTreeTable(tableKey,entry,treeTable,treeName) {\n    \n    if(!treeTable[tableKey]) {\n        //add parents\n        addParentsToTreeTable(entry,treeTable,treeName);\n        \n        //add entry\n        treeTable[tableKey] = entry;\n        \n        //add dependents\n        var childList = dependentEntries[treeName][key];\n        if(childList) {\n            for(var i = 0; i < childList.length; i++) {\n                var childEntry = childList[i];\n                addEntryToTreeTable(childEntry,treeTable,treeName);\n            }\n        }\n    }\n}\n\nfunction addParentsToTreeTable(entry,treeTable,treeName) {\n    if((entry.parentPath !== undefined)&&(entry.parentPath.length > 0)) {\n        var tableKey = getPathString(entry.parentPath);\n        var parentEntry = presetTable[treeName][tableKey];\n        if(!parentEntry) {\n            throw new Error(\"missing parent entry: \" + tableKey);\n        }\n        \n        addEntryToTreeTable(tableKey,parentEntry,treeTable,treeName);\n    }\n}\n",
								"description": ""
							}
						},
						"VERBOSE": {
							"name": "VERBOSE",
							"type": "apogee.JsonTable",
							"updateData": {
								"data": true,
								"description": ""
							}
						},
						"presetFileTypeId": {
							"name": "presetFileTypeId",
							"type": "apogee.JsonTable",
							"updateData": {
								"argList": [],
								"functionBody": "return loadMetaFileRecords.fileTypeIds[\"presets\"];",
								"supplementalCode": "",
								"description": ""
							}
						},
						"presetOptionName": {
							"name": "presetOptionName",
							"type": "apogee.JsonTable",
							"updateData": {
								"argList": [],
								"functionBody": "var metaFileRecord = loadMetaFileRecords.getRecord(\"meta_file\",loadMetaFileRecords.metaFileId);\nreturn metaFileRecord.Fields.name;",
								"supplementalCode": "",
								"description": ""
							}
						},
						"allOptionDependentEntries": {
							"name": "allOptionDependentEntries",
							"type": "apogee.JsonTable",
							"updateData": {
								"argList": [],
								"functionBody": "var output = [];\n\nvar entryList = loadMetaFileRecords.fileTypeEntryList.data.Records;\n\nfor(var i = 0; i < entryList.length; i++) {\n    var entry = entryList[i];\n    if((entry.Type == \"file_entry\")&&(entry.Fields.option_name == presetOptionName)) {\n        var entryData = entry.Fields.entry_data;\n        //dependent entries are dep = true and input = fixed\n        if((entryData.dep === true)||(entryData.input == \"fixed\")) {\n            output.push(entry);\n        }\n    }\n}\n\nreturn output;",
								"supplementalCode": "",
								"description": ""
							}
						},
						"parentDependentMap": {
							"name": "parentDependentMap",
							"type": "apogee.JsonTable",
							"updateData": {
								"argList": [],
								"functionBody": "output = {};\n\nfor(var i = 0; i < allOptionDependentEntries.length; i++) {\n    var depEntry = allOptionDependentEntries[i];\n    var parentPath = depEntry.Fields.entry_data.parentPath;\n    var parentPathString = getPathString(parentPath);\n    \n    var parentDepList = output[parentPathString];\n    if(!parentDepList) {\n        parentDepList = [];\n        output[parentPathString] = parentDepList;\n    }\n    \n    //create an entry with a dummy order and insertion info\n    var metaFileEntry = loadMetaFileRecords.createMetaFileEntry(\n            depEntry,\n            null,\n            -1\n        );\n    parentDepList.push(metaFileEntry);\n}\n\nreturn output;",
								"supplementalCode": "",
								"description": ""
							}
						}
					}
				},
				"presets": {
					"name": "presets",
					"type": "apogee.JsonTable",
					"updateData": {
						"argList": [],
						"functionBody": "\nvar output = {};\n\nfor(var i = 0; i < finalMetaFileEntryList.length; i++) {\n    var inEntryInfo = finalMetaFileEntryList[i];\n    var tree = getTree(output,inEntryInfo.section)\n    tableToPreset.addEntryToTree(inEntryInfo.entry,tree);\n}\n\n//cludge - fix the named keys - tree should have single top level entry\nvar namedKeys = output.named_keys;\nif(namedKeys) {\n    for(var treeName in namedKeys) {\n        var tree = namedKeys[treeName];\n        //should have 0 or 1 entries\n        if(tree.length > 1) {\n            throw new Error(\"Named keys should have one top level tree: Too many in \" + treeName);\n        }\n        else if(tree.length === 1) {\n            namedKeys[treeName] = tree[0];\n        }\n    }\n}\n\nreturn output;\n\n",
						"supplementalCode": "function getTree(output,section) {\n    var parentGroup = output[section[0]];\n    if(!parentGroup) {\n        parentGroup = {};\n        output[section[0]] = parentGroup;\n    }\n    \n    var tree = parentGroup[section[1]];\n    if(!tree) {\n        tree = [];\n        parentGroup[section[1]] = tree;\n    }\n    \n    return tree;\n    \n} ",
						"description": ""
					}
				},
				"oldPresets": {
					"name": "oldPresets",
					"type": "apogee.JsonTable",
					"updateData": {
						"data": {
							"property_trees": {
								"community_map": [
									{
										"k": "com_type",
										"input": "enum",
										"required": true,
										"v": {
											"Academic Building": {},
											"Airport": {},
											"Apartment Complex": {},
											"Bus Station": {},
											"Business Campus": {},
											"Campground": {},
											"Casino": {},
											"College Campus Building": {},
											"Convention Center": {},
											"Dormitory": {},
											"Government": {},
											"High School": {},
											"Hospital": {},
											"Hotel": {},
											"Industry": {},
											"Library": {},
											"Metro Station": {},
											"Museum": {},
											"Other": {},
											"Parking Garage": {},
											"Religious Building": {},
											"Retail": {},
											"School": {},
											"Shopping Center": {},
											"Shopping Mall": {},
											"Sports Center": {},
											"Stadium": {},
											"Theater": {},
											"Theme Park": {},
											"Train Station": {},
											"Urban Park": {}
										}
									},
									{
										"k": "name",
										"input": "text",
										"required": true,
										"has_lang": true
									},
									{
										"k": "default_lang",
										"input": "named_key",
										"required": true,
										"name": "lang"
									},
									{
										"k": "post address",
										"input": "named_group"
									},
									{
										"k": "theme_map",
										"input": "text",
										"has_lang": false
									}
								],
								"community_entity": [
									{
										"k": "name",
										"input": "text",
										"required": true,
										"has_lang": true
									},
									{
										"desc": "This is a name used by the customer for the venue.",
										"k": "alt_name",
										"input": "text",
										"required": true,
										"has_lang": true
									},
									{
										"k": "entity1",
										"input": "named_group"
									},
									{
										"k": "entity2",
										"input": "named_group"
									}
								],
								"drawing": [
									{
										"k": "map_type",
										"input": "enum",
										"required": true,
										"v": {
											"Airport": {},
											"Airport Terminal": {},
											"Casino": {},
											"College Building": {},
											"College Campus": {},
											"Convention": {},
											"Hospital": {},
											"Retail": {},
											"School Building": {},
											"School Campus": {},
											"Shopping Mall": {},
											"Station": {}
										}
									},
									{
										"k": "name",
										"input": "text",
										"required": true,
										"has_lang": true
									}
								],
								"level": [
									{
										"desc": "This is the full name of the level. If it is longer than TBD characters a short name should also be added.",
										"k": "name",
										"input": "text",
										"required": true,
										"has_lang": false
									},
									{
										"desc": "This is a short name for the level. It is used if the full name is longer than TBD characters.",
										"k": "short name",
										"input": "text",
										"has_lang": false
									},
									{
										"k": "elev_m",
										"input": "text"
									},
									{
										"k": "elev_rel_m",
										"input": "text"
									},
									{
										"k": "type",
										"input": "enum",
										"required": true,
										"v": {
											"indoor": {},
											"outdoor": {}
										}
									}
								],
								"geometry": [
									{
										"k": "geom_type",
										"input": "multikey",
										"required": true,
										"ks": [
											{
												"desc": "This represents an area. There are alternate keys representing also representing specific types of areas.",
												"k": "area",
												"input": "enum",
												"v": {
													"aisle": {},
													"baggage claim": {
														"desc": "This is the area where baggage is retrieved. It should not be confused with a baggage carousel."
													},
													"copy/print": {},
													"immigration and customs": {},
													"meeting point": {},
													"parcel": {},
													"passport control": {},
													"pet relief area": {},
													"rest area": {},
													"section": {},
													"security section": {},
													"smoke": {},
													"true": {
														"desc": "This field represents a generic area."
													}
												}
											},
											{
												"k": "barrier",
												"input": "enum",
												"v": {
													"fence": {},
													"gate": {},
													"obstruction": {},
													"railing": {}
												}
											},
											{
												"desc": "This represents machinery, either fixed like a heater or portable like a computer.",
												"k": "equipment",
												"input": "enum",
												"v": {
													"cash register": {},
													"computer": {},
													"printer": {},
													"copy machine": {},
													"water heater": {},
													"true": {
														"desc": "This represents a generic machine."
													}
												}
											},
											{
												"desc": "This object represents the objects that construct a building. It can include physical objects like a wall or areas like a room.",
												"k": "facility",
												"input": "enum",
												"v": {
													"bathroom": {
														"desc": "A bathroom can have the gender property specified. Alternatively, the gender unspecified should represent both bathrooms. It can alternatively be used for the case of unisex bathroom in cases where the label unisex is obvious.",
														"ks": [
															{
																"k": "gender",
																"input": "enum",
																"v": {
																	"female": {},
																	"male": {},
																	"unisex": {
																		"desc": "This is for a bathroom for both genders."
																	},
																	"family": {
																		"desc": "This is for an explicitly classified family bathroom."
																	}
																}
															},
															{
																"k": "changing station",
																"input": "boolean"
															},
															{
																"k": "disabled access",
																"input": "boolean"
															},
															{
																"desc": "This is appended to a bathroom when it is mapped as a room object instead of as a unit",
																"k": "as room",
																"input": "boolean"
															}
														]
													},
													"column": {},
													"door": {},
													"doorway": {
														"desc": "This is the open space in the wall where a door goes when plotted as an area. In the case of a line format wall, this doorway may be omitted if a door is present."
													},
													"elevator": {
														"desc": "This represents a single elevator."
													},
													"elevator bank": {
														"desc": "This represents a collection of elevators. It can be used instead of drawing multiple elevators."
													},
													"escalator": {
														"ks": [
															{
																"dep": true,
																"k": "to",
																"input": "enum",
																"v": {
																	"above": {
																		"dep": true
																	},
																	"below": {
																		"dep": true
																	},
																	"both": {
																		"dep": true
																	}
																}
															},
															{
																"dep": true,
																"k": "from",
																"input": "enum",
																"v": {
																	"above": {
																		"dep": true
																	},
																	"below": {
																		"dep": true
																	},
																	"both": {
																		"dep": true
																	}
																}
															}
														]
													},
													"floor opening": {},
													"hallway": {
														"ks": [
															{
																"desc": "This flag can be added to the portion of a hallway that forms a vestibule.",
																"k": "vestibule",
																"input": "boolean"
															}
														]
													},
													"hall area": {
														"desc": "This is a large open area of hallway, not included intersections."
													},
													"inaccessible space": {},
													"landing": {
														"desc": "This is the area between stair flights. In some cases it can also be used for the area at the top or bottom of a stairway."
													},
													"opening": {
														"desc": "This is used to illustrate an entrance on objects without doorways, such as an escalator or ramp"
													},
													"patio": {
														"desc": "This is an outdoor area, covered or uncovered, connected or disconnected with a building. This is closely related to a porch."
													},
													"platform": {},
													"porch": {
														"desc": "This is an covered outdoor area with a floor and typically open sides, connected to a building. This is closely related to a patio."
													},
													"ramp": {
														"ks": [
															{
																"k": "disabled access",
																"input": "boolean"
															}
														]
													},
													"room": {
														"ks": [
															{
																"k": "use",
																"input": "enum",
																"v": {
																	"lost and found": {},
																	"meditation room": {},
																	"auditorium": {},
																	"cafeteria": {},
																	"classroom": {},
																	"conference room": {},
																	"foyer": {
																		"desc": "This is an area at the entryway, often with access to other floors. It is closely related to a lobby but different."
																	},
																	"lab": {},
																	"library": {},
																	"locker room": {},
																	"lobby": {
																		"desc": "This is an area where the main information or clerk desk is located. It is closely related to a foyer but different."
																	},
																	"office": {}
																}
															},
															{
																"k": "changing station",
																"input": "boolean"
															}
														]
													},
													"stairs": {
														"desc": "This represents a stairs object. It will typically be rendered with an icon."
													},
													"stairwell": {
														"desc": "This is the room that houses a stairway. It is typically rendered without an icon."
													},
													"step": {
														"desc": "This represents a single step on a stairway."
													},
													"unit": {
														"ks": [
															{
																"desc": "This represents a type of unit. As soon as entity categorization is fully used, this designation will be used only for units with a specific purpose. Several entries will be removed.",
																"k": "class",
																"input": "enum",
																"v": {
																	"car rental": {},
																	"cocktails": {},
																	"coffee": {},
																	"fitness center": {},
																	"food and drink": {},
																	"gym": {},
																	"money changer": {},
																	"movie theatre": {},
																	"restaurant": {},
																	"retail": {},
																	"shoe shine": {},
																	"ticketing, check-in": {},
																	"transit hotel": {}
																}
															},
															{
																"k": "use",
																"input": "enum",
																"v": {
																	"information": {},
																	"customer service": {},
																	"medical": {},
																	"police/security": {}
																}
															}
														]
													},
													"wall": {},
													"window": {},
													"window opening": {
														"desc": "This is the hole in the wall where a window goes."
													},
													"moving walkway": {
														"ks": [
															{
																"dep": true,
																"k": "to",
																"input": "boolean"
															},
															{
																"dep": true,
																"k": "from",
																"input": "boolean"
															}
														]
													},
													"element": {
														"desc": "This is a generic building element object, like a wall or door (although they have their own classifications)."
													},
													"area": {
														"desc": "This is a generic area in a building, simliar to a room or hallway."
													},
													"detail": {
														"desc": "This is a generic detail or contents layer object in a building, like a step."
													}
												}
											},
											{
												"desc": "This is a fixed object, or else one that is heavy and difficult to move.",
												"k": "fixture",
												"input": "enum",
												"v": {
													"baggage carousel": {
														"desc": "This represents the baggae carousel fixture."
													},
													"bin": {
														"desc": "This represents a bin that is a fixture."
													},
													"booth": {},
													"checkout": {},
													"countertop": {},
													"cubicle": {},
													"kiosk": {},
													"partition": {},
													"rack": {
														"desc": "This represents a rack that is a fixture."
													},
													"ramp": {
														"ks": [
															{
																"k": "disabled access",
																"input": "boolean"
															}
														]
													},
													"shelf": {
														"desc": "This represents a shelf that is a fixture."
													},
													"stage": {},
													"stall": {},
													"true": {
														"desc": "This represents a generic fixture"
													}
												}
											},
											{
												"desc": "This represents a movable ojbect, like furniture.",
												"k": "furnishing",
												"input": "enum",
												"v": {
													"bin": {
														"desc": "This represents a bin that is a furnishing."
													},
													"desk": {},
													"seat": {
														"ks": [
															{
																"k": "disabled access",
																"input": "boolean"
															}
														]
													},
													"shelf": {
														"desc": "This represents a shelf that is a furnishing."
													},
													"table": {},
													"true": {
														"desc": "This represents a generic furnishing."
													}
												}
											},
											{
												"desc": "This represents a marker. It can be either physical, like a traffic line, or nonphysical, like a text label.",
												"k": "marker",
												"input": "enum",
												"v": {
													"disabled access": {
														"ks": [
															{
																"k": "nonphysical",
																"input": "fixed",
																"fixed_value": "true"
															}
														]
													},
													"entrance": {
														"ks": [
															{
																"k": "nonphysical",
																"input": "fixed",
																"fixed_value": "true"
															}
														]
													},
													"large text": {
														"ks": [
															{
																"k": "nonphysical",
																"input": "fixed",
																"fixed_value": "true"
															}
														]
													},
													"small text": {
														"ks": [
															{
																"k": "nonphysical",
																"input": "fixed",
																"fixed_value": "true"
															}
														]
													},
													"traffic marker": {
														"ks": [
															{
																"k": "nonphysical",
																"input": "fixed",
																"fixed_value": "false"
															}
														]
													},
													"true": {
														"ks": [
															{
																"k": "nonphysical",
																"input": "boolean"
															}
														]
													}
												}
											},
											{
												"desc": "This represents a meta data object. It is not a part of the map.",
												"k": "meta",
												"input": "enum",
												"v": {
													"coordinates": {
														"ks": [
															{
																"k": "external_ref_object",
																"input": "named_group"
															}
														]
													},
													"source": {
														"ks": [
															{
																"k": "external_ref_object",
																"input": "named_group"
															}
														]
													},
													"guide": {},
													"level outline": {},
													"ground intersect": {}
												}
											},
											{
												"desc": "This is a generic object.",
												"k": "object",
												"input": "enum",
												"v": {
													"true": {},
													"invalid": {},
													"unknown": {}
												}
											},
											{
												"k": "recreation",
												"input": "enum",
												"v": {
													"athletic field": {
														"ks": [
															{
																"k": "sport",
																"input": "enum",
																"v": {
																	"baseball": {},
																	"basketball": {},
																	"cricket": {},
																	"field hockey": {},
																	"football": {},
																	"hockey": {},
																	"soccer": {},
																	"tennis": {}
																}
															},
															{
																"k": "surface",
																"input": "enum",
																"v": {
																	"grass": {},
																	"asphalt": {},
																	"concrete": {},
																	"clay": {},
																	"gravel": {},
																	"sand": {},
																	"dirt": {},
																	"rubber": {},
																	"artificial turf": {}
																}
															}
														]
													},
													"playground": {}
												}
											},
											{
												"desc": "This is a safety or emergency response service or object.",
												"k": "safety",
												"input": "enum",
												"v": {
													"defibrillator": {},
													"emergency exit": {},
													"eyewash": {},
													"fire extinguisher": {},
													"fire hose": {},
													"fire pull": {},
													"first aid": {},
													"true": {
														"desc": "This is a generic safety object."
													}
												}
											},
											{
												"desc": "This is a service or amenity.",
												"k": "service",
												"input": "enum",
												"v": {
													"atm": {
														"ks": [
															{
																"dep": true,
																"k": "currency",
																"input": "enum",
																"v": {
																	"general": {},
																	"yen": {},
																	"dollar": {}
																}
															}
														]
													},
													"bike rack": {},
													"changing station": {},
													"flight monitor": {},
													"locker": {},
													"luggage cart": {},
													"mail": {},
													"massage chair": {},
													"paid parking": {},
													"power": {},
													"showers": {},
													"santa": {},
													"stroller": {},
													"telephone": {},
													"tv": {},
													"valet parking": {},
													"vending machine": {},
													"wifi": {},
													"true": {
														"desc": "This is a generic service"
													}
												}
											},
											{
												"k": "sign",
												"input": "enum",
												"v": {
													"stop sign": {},
													"yield sign": {},
													"true": {
														"desc": "This is a generic sign."
													}
												}
											},
											{
												"k": "signal",
												"input": "enum",
												"v": {
													"traffic light": {},
													"true": {
														"desc": "This is a generic signal."
													}
												}
											},
											{
												"desc": "This represents a building or other structure.",
												"k": "structure",
												"input": "enum",
												"v": {
													"building": {
														"ks": [
															{
																"desc": "This is intended for unmapped buildings only, if the level count is available.",
																"k": "levels",
																"input": "text"
															}
														]
													},
													"parking structure": {
														"ks": [
															{
																"desc": "This is intended for unmapped buildings only, if the level count is available.",
																"k": "levels",
																"input": "text"
															}
														]
													},
													"subbuilding": {
														"desc": "This represents a part of a building which will be treated as an independent building."
													},
													"tent": {
														"desc": "This is intended for durable tents."
													},
													"true": {
														"desc": "This represents a generic structure."
													}
												}
											},
											{
												"k": "traffic",
												"input": "enum",
												"v": {
													"crosswalk": {},
													"parking lot": {},
													"parking spot": {
														"ks": [
															{
																"k": "disabled access",
																"input": "boolean"
															}
														]
													},
													"railway": {},
													"railway rail": {},
													"railway tie": {},
													"road": {
														"ks": [
															{
																"k": "cat",
																"input": "enum",
																"v": {
																	"access road": {},
																	"alley": {},
																	"municipal road": {},
																	"parking access": {},
																	"service road": {},
																	"uncategorized": {}
																}
															},
															{
																"desc": "This is used for one way roads. The direction refers to the direction relative to the direction the road path is drawn. Applicable to line and linear area roads only.",
																"k": "one way",
																"input": "enum",
																"v": {
																	"fwd": {},
																	"rev": {}
																}
															}
														]
													},
													"road intersection": {
														"desc": "This is used at in intersection when area roads are drawn."
													},
													"walkway": {
														"ks": [
															{
																"k": "covered",
																"input": "boolean"
															}
														]
													},
													"walkway intersection": {
														"desc": "This is used at in intersection when area walkways are drawn.",
														"ks": [
															{
																"k": "covered",
																"input": "boolean"
															}
														]
													}
												}
											},
											{
												"k": "transit",
												"input": "enum",
												"v": {
													"bus": {},
													"ground transportation": {},
													"taxi": {},
													"train": {}
												}
											},
											{
												"k": "vegetation",
												"input": "enum",
												"v": {
													"earth": {},
													"garden": {},
													"grass": {},
													"greenery": {},
													"tree": {}
												}
											},
											{
												"k": "vehicle",
												"input": "enum",
												"v": {
													"airplane": {}
												}
											},
											{
												"k": "water",
												"input": "enum",
												"v": {
													"true": {}
												}
											}
										]
									},
									{
										"k": "name",
										"input": "text",
										"has_lang": true
									},
									{
										"k": "short name",
										"input": "text",
										"has_lang": true
									},
									{
										"k": "style keys",
										"input": "named_group"
									},
									{
										"desc": "This is a textual description of the location, such as wold be given in a directory to help users find the object.",
										"k": "location",
										"input": "text",
										"has_lang": true
									},
									{
										"desc": "This is used to give an additional information on an object, such as the type of object when it is not included in the classification.",
										"k": "info",
										"input": "text",
										"has_lang": true
									}
								],
								"entity": [
									{
										"k": "name",
										"input": "text",
										"required": true,
										"has_lang": true
									},
									{
										"k": "short name",
										"input": "text",
										"has_lang": true
									},
									{
										"k": "entity1",
										"input": "named_group"
									},
									{
										"k": "post address",
										"input": "named_group"
									},
									{
										"k": "entity2",
										"input": "named_group"
									},
									{
										"desc": "This field is used for storing geometry address information, before the geometry address is created. It should not be used for a descriptive location.",
										"k": "location",
										"input": "text"
									},
									{
										"k": "category",
										"input": "text",
										"is_array": true,
										"has_lang": true,
										"prop": {
											"detail": "true"
										}
									},
									{
										"k": "tags",
										"input": "text",
										"is_array": true,
										"has_lang": true,
										"prop": {
											"detail": "true"
										}
									},
									{
										"k": "style keys",
										"input": "named_group"
									}
								],
								"chain": [
									{
										"k": "name",
										"input": "text",
										"required": true,
										"has_lang": true
									},
									{
										"k": "short name",
										"input": "text",
										"has_lang": true
									},
									{
										"k": "entity1",
										"input": "named_group"
									}
								],
								"link": [
									{
										"k": "nav_class",
										"input": "multikey",
										"required": true,
										"prop": {
											"linkType": "class"
										},
										"ks": [
											{
												"k": "aisle",
												"input": "enum",
												"v": {
													"major": {},
													"minor": {}
												}
											},
											{
												"k": "corridor",
												"input": "enum",
												"v": {
													"major": {},
													"minor": {}
												}
											},
											{
												"k": "entry",
												"input": "enum",
												"v": {
													"doorway": {},
													"opening": {},
													"area": {}
												}
											},
											{
												"k": "level change",
												"input": "enum",
												"v": {
													"elevator": {},
													"escalator": {},
													"stairs": {},
													"ramp": {},
													"transition": {}
												}
											},
											{
												"k": "mechanical",
												"input": "enum",
												"v": {
													"moving walkway": {}
												}
											},
											{
												"k": "path",
												"input": "enum",
												"v": {
													"major": {},
													"minor": {}
												}
											},
											{
												"k": "traffic",
												"input": "enum",
												"v": {
													"parking lot": {},
													"shoulder": {},
													"street": {},
													"crosswalk": {}
												}
											},
											{
												"k": "walkway",
												"input": "enum",
												"v": {
													"major": {},
													"minor": {}
												}
											}
										]
									},
									{
										"k": "name",
										"input": "text",
										"has_lang": true,
										"prop": {
											"linkType": "class"
										}
									},
									{
										"k": "group",
										"input": "text",
										"prop": {
											"linkType": "class"
										}
									},
									{
										"k": "intersection",
										"input": "boolean",
										"prop": {
											"linkType": "class"
										}
									},
									{
										"k": "crossing",
										"input": "boolean",
										"prop": {
											"linkType": "class"
										}
									},
									{
										"k": "diversion",
										"input": "boolean",
										"prop": {
											"linkType": "class"
										}
									},
									{
										"k": "flag",
										"input": "text",
										"prop": {
											"linkType": "class"
										}
									},
									{
										"k": "start_to_image",
										"input": "text",
										"prop": {
											"linkType": "start",
											"reverse": "end_to_image"
										}
									},
									{
										"k": "start_from_image",
										"input": "text",
										"prop": {
											"linkType": "start",
											"reverse": "end_from_image"
										}
									},
									{
										"k": "end_to_image",
										"input": "text",
										"prop": {
											"linkType": "end",
											"reverse": "start_to_image"
										}
									},
									{
										"k": "end_from_image",
										"input": "text",
										"prop": {
											"linkType": "end",
											"reverse": "start_from_image"
										}
									},
									{
										"k": "start_to_desc",
										"input": "text",
										"prop": {
											"linkType": "start",
											"reverse": "end_to_desc"
										}
									},
									{
										"k": "start_from_desc",
										"input": "text",
										"prop": {
											"linkType": "start",
											"reverse": "end_from_desc"
										}
									},
									{
										"k": "end_to_desc",
										"input": "text",
										"prop": {
											"linkType": "end",
											"reverse": "start_to_desc"
										}
									},
									{
										"k": "end_from_desc",
										"input": "text",
										"prop": {
											"linkType": "end",
											"reverse": "start_from_desc"
										}
									}
								],
								"node": [
									{
										"k": "name",
										"input": "text",
										"has_lang": true
									},
									{
										"k": "intersection",
										"input": "boolean"
									}
								]
							},
							"named_groups": {
								"post address": [
									{
										"k": "country",
										"input": "enum",
										"v": {
											"AD": {},
											"AE": {},
											"AF": {},
											"AG": {},
											"AI": {},
											"AL": {},
											"AM": {},
											"AN": {},
											"AO": {},
											"AQ": {},
											"AR": {},
											"AS": {},
											"AT": {},
											"AU": {
												"ks": [
													{
														"k": "main admin region",
														"input": "fixed"
													},
													{
														"k": "territory",
														"input": "enum",
														"v": {
															"NSW": {},
															"QLD": {},
															"SA": {},
															"TAS": {},
															"VIC": {},
															"WA": {}
														}
													}
												]
											},
											"AW": {},
											"AX": {},
											"AZ": {},
											"BA": {},
											"BB": {},
											"BD": {},
											"BE": {},
											"BF": {},
											"BG": {},
											"BH": {},
											"BI": {},
											"BJ": {},
											"BM": {},
											"BN": {},
											"BO": {},
											"BR": {},
											"BS": {},
											"BT": {},
											"BV": {},
											"BW": {},
											"BY": {},
											"BZ": {},
											"CA": {
												"ks": [
													{
														"k": "main admin region",
														"input": "fixed"
													},
													{
														"k": "province",
														"input": "enum",
														"v": {
															"AB": {},
															"BC": {},
															"MB": {},
															"NB": {},
															"NL": {},
															"NS": {},
															"ON": {},
															"PE": {},
															"QC": {},
															"SK": {}
														}
													}
												]
											},
											"CC": {},
											"CD": {},
											"CF": {},
											"CG": {},
											"CH": {},
											"CI": {},
											"CK": {},
											"CL": {},
											"CM": {},
											"CN": {},
											"CO": {},
											"CR": {},
											"CV": {},
											"CX": {},
											"CY": {},
											"CZ": {},
											"DE": {},
											"DJ": {},
											"DK": {},
											"DM": {},
											"DO": {},
											"DZ": {},
											"EC": {},
											"EE": {},
											"EG": {},
											"EH": {},
											"ER": {},
											"ES": {},
											"ET": {},
											"FI": {},
											"FJ": {},
											"FK": {},
											"FM": {},
											"FO": {},
											"FR": {},
											"GA": {},
											"GB": {},
											"GD": {},
											"GE": {},
											"GF": {},
											"GH": {},
											"GI": {},
											"GL": {},
											"GM": {},
											"GN": {},
											"GP": {},
											"GQ": {},
											"GR": {},
											"GT": {},
											"GU": {},
											"GW": {},
											"GY": {},
											"HK": {},
											"HM": {},
											"HN": {},
											"HR": {},
											"HT": {},
											"HU": {},
											"ID": {},
											"IE": {},
											"IL": {},
											"IN": {},
											"IO": {},
											"IQ": {},
											"IS": {},
											"IT": {},
											"JM": {},
											"JO": {},
											"JP": {
												"ks": [
													{
														"k": "main admin region",
														"input": "fixed"
													},
													{
														"k": "prefecture",
														"input": "enum",
														"v": {
															"Aichi": {},
															"Akita": {},
															"Aomori": {},
															"Chiba": {},
															"Ehime": {},
															"Fukui": {},
															"Fukuoka": {},
															"Fukushima": {},
															"Gifu": {},
															"Gunma": {},
															"Hiroshima": {},
															"Hokkaido": {},
															"Hyōgo": {},
															"Ibaraki": {},
															"Ishikawa": {},
															"Iwate": {},
															"Kagawa": {},
															"Kagoshima": {},
															"Kanagawa": {},
															"Kōchi": {},
															"Kumamoto": {},
															"Kyoto": {},
															"Mie": {},
															"Miyagi": {},
															"Miyazaki": {},
															"Nagano": {},
															"Nagasaki": {},
															"Nara": {},
															"Niigata": {},
															"Ōita": {},
															"Okayama": {},
															"Okinawa": {},
															"Osaka": {},
															"Saga": {},
															"Saitama": {},
															"Shiga": {},
															"Shimane": {},
															"Shizuoka": {},
															"Tochigi": {},
															"Tokushima": {},
															"Tokyo": {},
															"Tottori": {},
															"Toyama": {},
															"Wakayama": {},
															"Yamagata": {},
															"Yamaguchi": {},
															"Yamanashi": {}
														}
													}
												]
											},
											"KE": {},
											"KG": {},
											"KH": {},
											"KI": {},
											"KM": {},
											"KN": {},
											"KR": {},
											"KW": {},
											"KY": {},
											"KZ": {},
											"LA": {},
											"LB": {},
											"LC": {},
											"LI": {},
											"LK": {},
											"LR": {},
											"LS": {},
											"LT": {},
											"LU": {},
											"LV": {},
											"LY": {},
											"MA": {},
											"MC": {},
											"MD": {},
											"MG": {},
											"MH": {},
											"MK": {},
											"ML": {},
											"MM": {},
											"MN": {},
											"MO": {},
											"MQ": {},
											"MR": {},
											"MS": {},
											"MT": {},
											"MU": {},
											"MV": {},
											"MW": {},
											"MX": {},
											"MY": {},
											"MZ": {},
											"NA": {},
											"NC": {},
											"NE": {},
											"NF": {},
											"NG": {},
											"NI": {},
											"NL": {},
											"NO": {},
											"NP": {},
											"NR": {},
											"NU": {},
											"NZ": {},
											"OM": {},
											"PA": {},
											"PE": {},
											"PF": {},
											"PG": {},
											"PH": {},
											"PK": {},
											"PL": {},
											"PM": {},
											"PN": {},
											"PR": {},
											"PS": {},
											"PT": {},
											"PW": {},
											"PY": {},
											"QA": {},
											"RE": {},
											"RO": {},
											"RU": {},
											"RW": {},
											"SA": {},
											"SB": {},
											"SC": {},
											"SE": {},
											"SG": {},
											"SH": {},
											"SI": {},
											"SJ": {},
											"SK": {},
											"SL": {},
											"SM": {},
											"SN": {},
											"SO": {},
											"SR": {},
											"ST": {},
											"SV": {},
											"SZ": {},
											"TC": {},
											"TD": {},
											"TF": {},
											"TG": {},
											"TH": {},
											"TJ": {},
											"TK": {},
											"TM": {},
											"TN": {},
											"TO": {},
											"TR": {},
											"TT": {},
											"TV": {},
											"TW": {},
											"TZ": {},
											"UA": {},
											"UG": {},
											"UM": {},
											"US": {
												"ks": [
													{
														"k": "main admin region",
														"input": "fixed"
													},
													{
														"k": "state",
														"input": "enum",
														"v": {
															"AK": {},
															"AL": {},
															"AR": {},
															"AZ": {},
															"CA": {},
															"CO": {},
															"CT": {},
															"DC": {},
															"DE": {},
															"FL": {},
															"GA": {},
															"HI": {},
															"IA": {},
															"ID": {},
															"IL": {},
															"IN": {},
															"KS": {},
															"KY": {},
															"LA": {},
															"MA": {},
															"MD": {},
															"ME": {},
															"MI": {},
															"MN": {},
															"MO": {},
															"MS": {},
															"MT": {},
															"NC": {},
															"ND": {},
															"NE": {},
															"NH": {},
															"NJ": {},
															"NM": {},
															"NV": {},
															"NY": {},
															"OH": {},
															"OK": {},
															"OR": {},
															"PA": {},
															"RI": {},
															"SC": {},
															"SD": {},
															"TN": {},
															"TX": {},
															"UT": {},
															"VA": {},
															"VT": {},
															"WA": {},
															"WI": {},
															"WV": {},
															"WY": {}
														}
													}
												]
											},
											"UY": {},
											"UZ": {},
											"VC": {},
											"VE": {},
											"VG": {},
											"VI": {},
											"VN": {},
											"VU": {},
											"WF": {},
											"WS": {},
											"YE": {},
											"YT": {},
											"ZA": {},
											"ZM": {},
											"ZW": {}
										}
									},
									{
										"k": "main admin region",
										"input": "multikey",
										"ks": [
											{
												"k": "state",
												"input": "text",
												"has_lang": true
											},
											{
												"k": "province",
												"input": "text",
												"has_lang": true
											},
											{
												"k": "prefecture",
												"input": "text",
												"has_lang": true
											},
											{
												"k": "territory",
												"input": "text",
												"has_lang": true
											}
										]
									},
									{
										"k": "postal code",
										"input": "text"
									},
									{
										"k": "city",
										"input": "text",
										"has_lang": true
									},
									{
										"k": "street address",
										"input": "text",
										"has_lang": true
									}
								],
								"names": [
									{
										"k": "name",
										"input": "named_key"
									},
									{
										"k": "short name",
										"input": "text",
										"has_lang": true
									}
								],
								"entity1": [
									{
										"k": "phone",
										"input": "text",
										"prop": {
											"detail": "true"
										}
									},
									{
										"k": "email",
										"input": "text",
										"prop": {
											"detail": "true"
										}
									},
									{
										"k": "url",
										"input": "text",
										"prop": {
											"detail": "true"
										}
									},
									{
										"k": "fax",
										"input": "text",
										"prop": {
											"detail": "true"
										}
									},
									{
										"k": "description",
										"input": "text",
										"has_lang": true,
										"prop": {
											"detail": "true"
										}
									},
									{
										"k": "naics",
										"input": "text",
										"is_array": true,
										"prop": {
											"detail": "true"
										}
									}
								],
								"entity2": [
									{
										"k": "hours",
										"input": "text",
										"has_lang": true,
										"prop": {
											"detail": "true"
										}
									},
									{
										"k": "storeid",
										"input": "text"
									},
									{
										"k": "prop_owner",
										"input": "text"
									},
									{
										"k": "product",
										"input": "text",
										"has_lang": true,
										"prop": {
											"detail": "true"
										}
									}
								],
								"style keys": [
									{
										"k": "$icon",
										"input": "text",
										"has_lang": false
									},
									{
										"k": "$style",
										"input": "text",
										"has_lang": false
									},
									{
										"k": "$image_url",
										"input": "text",
										"has_lang": false
									},
									{
										"k": "$label_text",
										"input": "text",
										"has_lang": false
									},
									{
										"k": "$body_color",
										"input": "text",
										"has_lang": false
									},
									{
										"k": "$outline_color",
										"input": "text",
										"has_lang": false
									},
									{
										"k": "$outline_width",
										"input": "text",
										"has_lang": false
									},
									{
										"k": "$text_color",
										"input": "text",
										"has_lang": false
									}
								],
								"external_ref_object": [
									{
										"k": "ref",
										"input": "text",
										"has_lang": false
									},
									{
										"k": "xscale",
										"input": "text",
										"has_lang": false
									},
									{
										"k": "yscale",
										"input": "text",
										"has_lang": false
									},
									{
										"k": "units",
										"input": "enum",
										"v": {
											"m": {},
											"km": {},
											"cm": {},
											"ft": {},
											"yd": {},
											"in": {},
											"mile": {}
										}
									},
									{
										"k": "publish",
										"input": "boolean"
									}
								]
							},
							"named_keys": {
								"address keys": {
									"k": "address keys",
									"input": "enum",
									"v": {
										"$id": {},
										"Booth": {},
										"Gate": {},
										"Meeting Room": {},
										"Unit": {},
										"#": {},
										"Section": {},
										"Space": {},
										"Region": {},
										"Zone": {},
										"Area": {},
										"Field": {},
										"Level": {},
										"Stair": {},
										"Escalator": {},
										"Elevator": {},
										"Door": {},
										"Ramp": {},
										"Cubicle": {},
										"Office": {},
										"Bathroom": {},
										"Entrance": {},
										"Store": {},
										"Apartment": {},
										"Apt": {},
										"Room": {},
										"Rm": {},
										"Suite": {},
										"Terminal": {},
										"Concourse": {},
										"Hanger": {},
										"Hall": {},
										"Aisle": {},
										"Shelf": {},
										"Bin": {},
										"Department": {},
										"Rack": {},
										"End Cap": {},
										"Display": {},
										"Row": {},
										"Box": {},
										"Seat": {},
										"Concession": {},
										"Locker": {},
										"Desk": {},
										"Chair": {},
										"Street": {},
										"Road": {},
										"Zip Code": {},
										"City": {},
										"Neighborhood": {},
										"Address": {},
										"Address 2": {},
										"State": {},
										"Country": {},
										"Exhibit": {},
										"Painting": {},
										"Sculpture": {},
										"Lane": {},
										"Exit": {},
										"Intersection": {},
										"Lot": {},
										"Mall": {},
										"Building": {},
										"Moving Walkway": {}
									}
								},
								"lang": {
									"k": "lang",
									"input": "enum",
									"v": {
										"en": {},
										"ja": {},
										"zh": {},
										"de": {},
										"fr": {},
										"es": {},
										"it": {},
										"ar": {},
										"da": {},
										"he": {},
										"hi": {},
										"id": {},
										"ko": {},
										"nl": {},
										"pt": {},
										"ro": {},
										"sv": {},
										"ru": {},
										"tr": {},
										"gu": {},
										"pl": {},
										"cs": {},
										"sk": {},
										"th": {}
									}
								}
							}
						},
						"description": ""
					}
				},
				"oldNormalized": {
					"name": "oldNormalized",
					"type": "apogee.JsonTable",
					"updateData": {
						"argList": [],
						"functionBody": "return apogee.util.getNormalizedCopy(oldPresets);",
						"supplementalCode": "",
						"description": ""
					}
				},
				"newNormalized": {
					"name": "newNormalized",
					"type": "apogee.JsonTable",
					"updateData": {
						"argList": [],
						"functionBody": "return apogee.util.getNormalizedCopy(presets);",
						"supplementalCode": "",
						"description": ""
					}
				},
				"finalMetaFileEntryList": {
					"name": "finalMetaFileEntryList",
					"type": "apogee.JsonTable",
					"updateData": {
						"argList": [],
						"functionBody": "var output = [];\n\nvar includedEntryIdSet = {};\n\nvar inEntryList = loadMetaFileRecords.metaFileEntryList;\nfor(var i = 0; i < inEntryList.length; i++) {\n    var inEntryInfo = inEntryList[i];\n    addEntryToList(inEntryInfo,output,includedEntryIdSet);\n}\n\nreturn output;",
						"supplementalCode": "function addEntryToList(inEntryInfo,outputList,includedEntryIdSet) {\n    \n    if(includedEntryIdSet[inEntryInfo.fileEntryId] === undefined) {\n        outputList.push(inEntryInfo);\n        includedEntryIdSet[inEntryInfo.fileEntryId] = true;\n        \n        var entryPathString = inEntryInfo.keyString;\n        \n        var depList = tableToPreset.parentDependentMap[entryPathString];\n        if(depList) {\n            for(var i = 0; i < depList.length; i++) {\n                depEntryInfo = depList[i];\n                addEntryToList(depEntryInfo,outputList,includedEntryIdSet);\n            }\n        }\n    }\n}",
						"description": "This includes the entries from the recipe file plus and dependent entries"
					}
				}
			}
		}
	},
	"components": {
		"loadMetaFileRecords": {
			"type": "apogeeapp.app.FolderComponent",
			"windowState": {
				"posInfo": {
					"x": 72,
					"y": 49
				}
			},
			"children": {
				"fileTypeSearch": {
					"type": "apogeeapp.app.JsonTableComponent",
					"windowState": {
						"sizeInfo": {
							"width": 297,
							"height": 82
						},
						"posInfo": {
							"x": 30,
							"y": 21
						},
						"state": -1,
						"viewType": "Text"
					}
				},
				"metaFileSearch": {
					"type": "apogeeapp.app.JsonTableComponent",
					"windowState": {
						"sizeInfo": {
							"width": 334,
							"height": 117
						},
						"posInfo": {
							"x": 699,
							"y": 41
						},
						"state": -1,
						"viewType": "Text"
					}
				},
				"fileTypeList": {
					"type": "apogeeapp.app.JsonTableComponent",
					"windowState": {
						"sizeInfo": {
							"width": 447,
							"height": 106
						},
						"posInfo": {
							"x": 28,
							"y": 66
						},
						"state": -1,
						"viewType": "Formula"
					}
				},
				"fileTypeEntrySearch": {
					"type": "apogeeapp.app.JsonTableComponent",
					"windowState": {
						"sizeInfo": {
							"width": 347,
							"height": 110
						},
						"posInfo": {
							"x": 51,
							"y": 326
						},
						"state": -1,
						"viewType": "Text"
					}
				},
				"fileTypeEntryList": {
					"type": "apogeeapp.app.JsonTableComponent",
					"windowState": {
						"sizeInfo": {
							"width": 637,
							"height": 480
						},
						"posInfo": {
							"x": 48,
							"y": 373
						},
						"state": -1,
						"viewType": "Text"
					}
				},
				"recordStore": {
					"type": "apogeeapp.app.JsonTableComponent",
					"windowState": {
						"sizeInfo": {
							"width": 739,
							"height": 542
						},
						"posInfo": {
							"x": 45,
							"y": 508
						},
						"state": -1,
						"viewType": "Text"
					}
				},
				"metaFileEntryList": {
					"type": "apogeeapp.app.JsonTableComponent",
					"windowState": {
						"sizeInfo": {
							"width": 757,
							"height": 401
						},
						"posInfo": {
							"x": 639,
							"y": 160
						},
						"state": 0,
						"viewType": "Text"
					}
				},
				"context": {
					"type": "apogeeapp.app.JsonTableComponent",
					"windowState": {
						"sizeInfo": {
							"width": 218,
							"height": 89
						},
						"posInfo": {
							"x": 1203,
							"y": 20
						},
						"state": 0,
						"viewType": "Text"
					}
				},
				"metaFileId": {
					"type": "apogeeapp.app.JsonTableComponent",
					"windowState": {
						"sizeInfo": {
							"width": 227,
							"height": 89
						},
						"posInfo": {
							"x": 1210,
							"y": 261
						},
						"state": 0,
						"viewType": "Text"
					}
				},
				"fileTypeId": {
					"type": "apogeeapp.app.JsonTableComponent",
					"windowState": {
						"sizeInfo": {
							"width": 229,
							"height": 97
						},
						"posInfo": {
							"x": 1206,
							"y": 144
						},
						"state": 0,
						"viewType": "Text"
					}
				},
				"metaFileListSearch": {
					"type": "apogeeapp.app.JsonTableComponent",
					"windowState": {
						"sizeInfo": {
							"width": 323,
							"height": 98
						},
						"posInfo": {
							"x": 329,
							"y": 21
						},
						"state": -1,
						"viewType": "Text"
					}
				},
				"metaFileResponse": {
					"type": "apogeeapp.app.JsonTableComponent",
					"windowState": {
						"sizeInfo": {
							"width": 495,
							"height": 325
						},
						"posInfo": {
							"x": 702,
							"y": 95
						},
						"state": -1,
						"viewType": "Text"
					}
				},
				"metaFileList": {
					"type": "apogeeapp.app.JsonTableComponent",
					"windowState": {
						"sizeInfo": {
							"width": 647,
							"height": 300
						},
						"posInfo": {
							"x": 329,
							"y": 67
						},
						"state": -1,
						"viewType": "Formula"
					}
				},
				"getRecord": {
					"type": "apogeeapp.app.FunctionComponent",
					"windowState": {
						"sizeInfo": {
							"width": 400,
							"height": 33
						},
						"posInfo": {
							"x": 38,
							"y": 556
						},
						"state": -1,
						"viewType": "Code"
					}
				},
				"fileTypeIds": {
					"type": "apogeeapp.app.JsonTableComponent",
					"windowState": {
						"sizeInfo": {
							"width": 259,
							"height": 163
						},
						"posInfo": {
							"x": 28,
							"y": 117
						},
						"state": 0,
						"viewType": "Text"
					}
				},
				"metaFileIds": {
					"type": "apogeeapp.app.JsonTableComponent",
					"windowState": {
						"sizeInfo": {
							"width": 294,
							"height": 196
						},
						"posInfo": {
							"x": 323,
							"y": 118
						},
						"state": 0,
						"viewType": "Text"
					}
				},
				"version": {
					"type": "apogeeapp.app.TextComponent",
					"windowState": {
						"sizeInfo": {
							"width": 218,
							"height": 73
						},
						"posInfo": {
							"x": 447,
							"y": 467
						},
						"state": 0,
						"viewType": "Text"
					}
				},
				"dependencies": {
					"type": "apogeeapp.app.TextComponent",
					"windowState": {
						"sizeInfo": {
							"width": 395,
							"height": 93
						},
						"posInfo": {
							"x": 445,
							"y": 639
						},
						"state": 0,
						"viewType": "Text"
					}
				},
				"releaseNotes": {
					"type": "apogeeapp.app.TextComponent",
					"windowState": {
						"sizeInfo": {
							"width": 239,
							"height": 76
						},
						"posInfo": {
							"x": 445,
							"y": 550
						},
						"state": 0,
						"viewType": "Text"
					}
				},
				"createMetaFileEntry": {
					"type": "apogeeapp.app.FunctionComponent",
					"windowState": {
						"sizeInfo": {
							"width": 713,
							"height": 400
						},
						"posInfo": {
							"x": 687,
							"y": 441
						},
						"state": 0,
						"viewType": "Code"
					}
				}
			}
		},
		"micemetarecipeDataAccess": {
			"type": "apogeeapp.app.FolderComponent",
			"windowState": {
				"posInfo": {
					"x": 73,
					"y": 108
				}
			},
			"children": {
				"createRecord": {
					"type": "apogeeapp.app.FunctionComponent"
				},
				"recordsToCreateInstructions": {
					"type": "apogeeapp.app.FunctionComponent"
				},
				"createCommitBody": {
					"type": "apogeeapp.app.FunctionComponent"
				},
				"createRequestOptions": {
					"type": "apogeeapp.app.FunctionComponent"
				},
				"sessionKey": {
					"type": "apogeeapp.app.JsonTableComponent"
				},
				"host": {
					"type": "apogeeapp.app.JsonTableComponent"
				},
				"commitUrl": {
					"type": "apogeeapp.app.JsonTableComponent"
				},
				"requestUrl": {
					"type": "apogeeapp.app.JsonTableComponent"
				},
				"dataSetInfo": {
					"type": "apogeeapp.app.JsonTableComponent"
				},
				"version": {
					"type": "apogeeapp.app.TextComponent"
				},
				"releaseNotes": {
					"type": "apogeeapp.app.TextComponent"
				},
				"depedencies": {
					"type": "apogeeapp.app.TextComponent"
				}
			}
		},
		"tableToPreset": {
			"type": "apogeeapp.app.FolderComponent",
			"windowState": {
				"posInfo": {
					"x": 261,
					"y": 52
				}
			},
			"children": {
				"getPathString": {
					"type": "apogeeapp.app.FunctionComponent",
					"windowState": {
						"sizeInfo": {
							"width": 400,
							"height": 400
						},
						"posInfo": {
							"x": 60,
							"y": 56
						},
						"state": -1,
						"viewType": "Code"
					}
				},
				"addEntryToTree": {
					"type": "apogeeapp.app.FunctionComponent",
					"windowState": {
						"sizeInfo": {
							"width": 400,
							"height": 400
						},
						"posInfo": {
							"x": 59,
							"y": 155
						},
						"state": -1,
						"viewType": "Code"
					}
				},
				"loadEntriesFromEntryList": {
					"type": "apogeeapp.app.FunctionComponent",
					"windowState": {
						"sizeInfo": {
							"width": 400,
							"height": 400
						},
						"posInfo": {
							"x": 59,
							"y": 105
						},
						"state": -1,
						"viewType": "Code"
					}
				},
				"VERBOSE": {
					"type": "apogeeapp.app.JsonTableComponent",
					"windowState": {
						"sizeInfo": {
							"width": 300,
							"height": 300
						},
						"posInfo": {
							"x": 693,
							"y": 52
						},
						"state": 0,
						"viewType": "Text"
					}
				},
				"presetFileTypeId": {
					"type": "apogeeapp.app.JsonTableComponent",
					"windowState": {
						"sizeInfo": {
							"width": 259,
							"height": 84
						},
						"posInfo": {
							"x": 1117,
							"y": 139
						},
						"state": 0,
						"viewType": "Text"
					}
				},
				"presetOptionName": {
					"type": "apogeeapp.app.JsonTableComponent",
					"windowState": {
						"sizeInfo": {
							"width": 262,
							"height": 110
						},
						"posInfo": {
							"x": 1119,
							"y": 240
						},
						"state": 0,
						"viewType": "Text"
					}
				},
				"allOptionDependentEntries": {
					"type": "apogeeapp.app.JsonTableComponent",
					"windowState": {
						"sizeInfo": {
							"width": 704,
							"height": 439
						},
						"posInfo": {
							"x": 72,
							"y": 306
						},
						"state": -1,
						"viewType": "Text"
					}
				},
				"parentDependentMap": {
					"type": "apogeeapp.app.JsonTableComponent",
					"windowState": {
						"sizeInfo": {
							"width": 559,
							"height": 351
						},
						"posInfo": {
							"x": 71,
							"y": 351
						},
						"state": -1,
						"viewType": "Text"
					}
				}
			}
		},
		"presets": {
			"type": "apogeeapp.app.JsonTableComponent",
			"windowState": {
				"sizeInfo": {
					"width": 834,
					"height": 411
				},
				"posInfo": {
					"x": 628,
					"y": 54
				},
				"state": 0,
				"viewType": "Text"
			}
		},
		"oldPresets": {
			"type": "apogeeapp.app.JsonTableComponent",
			"windowState": {
				"sizeInfo": {
					"width": 300,
					"height": 300
				},
				"posInfo": {
					"x": 34,
					"y": 441
				},
				"state": 0,
				"viewType": "Text"
			}
		},
		"oldNormalized": {
			"type": "apogeeapp.app.JsonTableComponent",
			"windowState": {
				"sizeInfo": {
					"width": 537,
					"height": 300
				},
				"posInfo": {
					"x": 32,
					"y": 539
				},
				"state": 0,
				"viewType": "Text"
			}
		},
		"newNormalized": {
			"type": "apogeeapp.app.JsonTableComponent",
			"windowState": {
				"sizeInfo": {
					"width": 522,
					"height": 318
				},
				"posInfo": {
					"x": 586,
					"y": 537
				},
				"state": 0,
				"viewType": "Text"
			}
		},
		"finalMetaFileEntryList": {
			"type": "apogeeapp.app.JsonTableComponent",
			"windowState": {
				"sizeInfo": {
					"width": 576,
					"height": 112
				},
				"posInfo": {
					"x": 36,
					"y": 189
				},
				"state": 0,
				"viewType": "Notes"
			}
		}
	}
}