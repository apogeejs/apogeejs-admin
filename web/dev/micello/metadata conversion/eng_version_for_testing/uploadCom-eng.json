{"fileType":"apogee app js workspace","version":"0.40","references":[{"url":"http://localhost:8383/lib/modules/taskApp/taskAppModule.js","entryType":"js link"},{"url":"http://localhost:8383/lib/controls/configurableForm/ConfigurableForm.js","entryType":"js link"},{"url":"http://localhost:8383/lib/controls/configurableForm/ConfigurableForm.css","entryType":"css link"}],"workspace":{"fileType":"apogee workspace","version":0.2,"name":"uploadComFile","data":{"name":"Model","type":"apogee.Folder","children":{"tasks":{"name":"tasks","type":"apogee.Folder","children":{"login":{"name":"login","type":"apogee.Folder","children":{"loginUrl":{"name":"loginUrl","type":"apogee.JsonTable","updateData":{"data":"http://eng.micello.com/TestAuthorization/loginjson","description":""}},"loginControl":{"name":"loginControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return loginUrl;","supplementalCode":"","description":""}},"sessionResponse":{"name":"sessionResponse","type":"apogee.JsonTable","updateData":{"data":"","description":""}},"state":{"name":"state","type":"apogee.JsonTable","updateData":{"data":{"active":false,"previousTask":[]},"description":""}},"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":{"valid":false,"data":null},"description":""}},"taskResult":{"name":"taskResult","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\nvar sessionKey;\nif(sessionResponse) {\n    if(sessionResponse.responseCode === 1) {\n        data = {};\n        data.sessionKey = sessionResponse.sessionKey;\n        data.paramTable = sessionResponse.paramTable;\n        output.data = data;\n        taskAppModule.taskCompleted(apogeeMessenger,[\"login\"],[\"loadCid\"],data);\n        return \"SUCCESS\";\n    }\n    else {\n        alert(\"There was an error: \" + JSON.stringify(sessionResponse));\n        return \"ERROR\";\n    }\n}\nelse {\n    return \"INCOMPLETE\";\n}","supplementalCode":"","description":""}}}},"upload":{"name":"upload","type":"apogee.Folder","children":{"uploadFile":{"name":"uploadFile","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((loadCid.result.valid)&&(selectCidPostProcess.outputFile)) {\n    return selectCidPostProcess.outputFile;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"submitControl":{"name":"submitControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var data = {};\ndata.uploadFile = uploadFile;\ndata.previousTask = state.previousTask;\n\nreturn data;","supplementalCode":"","description":""}},"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":{"valid":false,"data":null},"description":""}},"state":{"name":"state","type":"apogee.JsonTable","updateData":{"data":{"active":false,"previousTask":null},"description":""}},"taskResult":{"name":"taskResult","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var resultValue;\n\nvar taskResult = {};\nif(!liveUploadFile) {\n    return \"WAITING\";\n}\nelse if(uploadResponse.length > 0) {\n    data = {};\n    data.uploadResponse = uploadResponse;\n    taskAppModule.taskCompleted(apogeeMessenger,[\"upload\"],[\"completed\"],data);\n    resultValue = \"SUCCESS\";\n}\nelse {\n    alert(\"Error making commit: \" + uploadResponse.msg);\n    resultValue = \"ERROR\";\n}\n\n//for error or success - clear the commit request\nvar updateInfo = [];\nupdateInfo.push([\"liveUploadFile\",null]);\napogeeMessenger.compoundDataUpdate(updateInfo);\n    \nreturn resultValue;","supplementalCode":"","description":""}},"liveUploadFile":{"name":"liveUploadFile","type":"apogee.JsonTable","updateData":{"data":null,"description":""}},"url":{"name":"url","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((loadCid.result.valid)&&(selectCidPostProcess.outputUrl)) {\n    return selectCidPostProcess.outputUrl;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"uploadResponse":{"name":"uploadResponse","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!liveUploadFile) return null;\n\nvar options = {};\noptions.method = \"POST\";\noptions.body = JSON.stringify(liveUploadFile);\n\nreturn apogee.net.jsonRequest(url,options);","supplementalCode":"","description":""}}}},"currentTask":{"name":"currentTask","type":"apogee.JsonTable","updateData":{"data":["loadCid"],"description":""}},"commonData":{"name":"commonData","type":"apogee.Folder","children":{"fileTypeList":{"name":"fileTypeList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var sessionKey = getSessionKey();\nif(!sessionKey) return null;\n\nvar fileTypeSearch = {};\nfileTypeSearch.search = \"file_type_list\";\n\nreturn micemetarDataAccess.getRequestPromise(fileTypeSearch,sessionKey);\n\n","supplementalCode":"","description":""}},"fileTypeLookupTable":{"name":"fileTypeLookupTable","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!fileTypeList) return null;\n\nvar lookupTable = {};\n\nvar isFileType = (record) => record.Type == \"file_type\";\nvar addToLookupTable = (record) => lookupTable[record.Id] = record.Fields.file_type_name;\n\nfileTypeList.data.Response.filter(isFileType).forEach(addToLookupTable);\n\nreturn lookupTable;","supplementalCode":"","description":""}},"getFileTypeName":{"name":"getFileTypeName","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeId"],"functionBody":"return fileTypeLookupTable[fileTypeId];","supplementalCode":"","description":""}},"getSessionKey":{"name":"getSessionKey","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"if(login.result.valid) {\n    return login.result.data.sessionKey;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"getParamTable":{"name":"getParamTable","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"if(login.result.valid) {\n    return login.result.data.paramTable;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"fileInfo":{"name":"fileInfo","type":"apogee.Folder","children":{"getUploadType":{"name":"getUploadType","type":"apogee.FunctionTable","updateData":{"argList":["context"],"functionBody":"if(context == \"public\") return \"global\";\nelse if(context.startsWith(\"com_\")) return \"community\";\nelse if(context.startsWith(\"~\")) return \"customer\";\nelse throw new Error(\"Upload type not known for context \" + context);","supplementalCode":"","description":""}},"getCommunityIdentifier":{"name":"getCommunityIdentifier","type":"apogee.FunctionTable","updateData":{"argList":["context"],"functionBody":"var prefixLength = COMMUNITY_PREFIX.length;\r\nreturn context.substr(prefixLength);","supplementalCode":"","description":""}},"COMMUNITY_PREFIX":{"name":"COMMUNITY_PREFIX","type":"apogee.JsonTable","updateData":{"data":"com_","description":""}},"getCustomerIdentifier":{"name":"getCustomerIdentifier","type":"apogee.FunctionTable","updateData":{"argList":["context"],"functionBody":"var name = customerAuthToPathName[context];\n\nif(name === undefined) throw new Error(\"Customer name not found for: \" + context);\n\nreturn name;","supplementalCode":"","description":""}},"customerAuthToPathName":{"name":"customerAuthToPathName","type":"apogee.JsonTable","updateData":{"data":{"~micello":"micello","~illumina":"illumina","~encana":"encana","~vantiv":"vantiv","~penumbra":"penumbra","~invensense":"invensense","~demo":"demo","~caliberhomeloans":"caliberhomeloans","~interceptpharma":"interceptpharma","~megenergy":"megenergy","~hdsupply":"hdsupply","~jabil":"jabil","~teva":"teva","~oshkosh":"oshkosh","~cherokeenation":"cherokeenation","~schneiderelectric":"schneiderelectric","~moneygram":"moneygram","~cancerinstitute":"cancerinstitute","~myseat":"myseat","~mbrdi":"mbrdi","~petsmart":"petsmart","~steelcase":"steelcase","~fcccanada":"fcccanada","~xilinx":"xilinx","~buildingdna":"buildingdna","~karauction":"karauction","~ferring":"ferring","~shelterinsurance":"shelterinsurance","~giftofhope":"giftofhope","~fcc":"fcc","~silverstorm":"silverstorm","~hulu":"hulu","~cdphp":"cdphp","~paclife":"paclife","~pnmac":"pnmac","~hpe":"hpe","~deltaairlines":"deltaairlines"},"description":""}},"urlFormatLookupTable":{"name":"urlFormatLookupTable","type":"apogee.JsonTable","updateData":{"data":{"NOTES":["{0} is for the file name, {1} is for the identifier, either cid or customer name"],"community":{"propertyRules":"/map/{1}/overrides/presets","themeRules":"/map/{1}/overrides/thememap","theme":"/map/{1}/overrides/theme/{0}","strings":"/map/{1}/overrides/strings","inputColors":"/map/{1}/overrides/inputcolors"},"customer":{"propertyRules":"/customer/{1}/overrides/{0}/presets","themeRules":"/customer/{1}/overrides/{0}/thememap","theme":"/customer/{1}/overrides/{0}/theme","strings":"/customer/{1}/overrides/{0}/strings","inputColors":"/customer/{1}/overrides/{0}/inputcolors"},"global":{"propertyRules":"/meta/presets/v5/{0}","themeRules":"/meta/thememap/v5/{0}","theme":"/meta/theme/v5/{0}","strings":"/meta/strings/v5/{0}","inputColors":"/meta/miceditor/inputcolors/v5/{0}"}},"description":""}},"overrideSectionLookupTable":{"name":"overrideSectionLookupTable","type":"apogee.JsonTable","updateData":{"data":{"propertyRules":"presetOverrides","themeRules":"themeMapOverrides","theme":"themeOverrides","strings":"stringsOverrides","inputColors":"inputColorOverrides"},"description":""}},"getUrlParams":{"name":"getUrlParams","type":"apogee.FunctionTable","updateData":{"argList":["url"],"functionBody":"var paramTable = getParamTable();\nif(!paramTable) {\n    throw new Error(\"Param table needed for MFS upload\");\n}\n\nvar isMatchingKey = (paramEntry) => url.startsWith(paramEntry.urlPattern);\n\nvar paramEntry = paramTable.find(isMatchingKey);\nvar paramString;\n\nif((paramEntry)&&(paramEntry.params.length > 0)) {\n    var appendParam = (inParamString,paramData) => {\n        var seperator;\n        if(inParamString == \"\") {\n            seperator = \"?\";\n        }\n        else {\n            seperator = \"&\";\n        }\n        return inParamString + seperator + paramData[0] + \"=\" + paramData[1];\n    }\n    \n    paramString = paramEntry.params.reduce(appendParam,\"\");\n}\nelse {\n    paramString = \"\";\n}\n\nreturn paramString;\n\n","supplementalCode":"","description":""}},"comFileUrlFormatString":{"name":"comFileUrlFormatString","type":"apogee.JsonTable","updateData":{"data":"/map/{0}/overrides","description":"The input parameter is CID"}},"getMetaFileUrl":{"name":"getMetaFileUrl","type":"apogee.FunctionTable","updateData":{"argList":["uploadType","fileType","fileOptionName","identifier"],"functionBody":"var urlFormatString = urlFormatLookupTable[uploadType][fileType]; \n\nreturn mfsMetaBaseUrl + apogee.util.formatString(urlFormatString,fileOptionName,identifier);","supplementalCode":"","description":""}},"getComFileUrl":{"name":"getComFileUrl","type":"apogee.FunctionTable","updateData":{"argList":["cid"],"functionBody":"var url = mfsUploadBaseUrl + apogee.util.formatString(comFileUrlFormatString,cid);\n\nvar queryParams = getUrlParams(url);\n\nreturn url + queryParams;","supplementalCode":"","description":""}},"getMetaFileInfo":{"name":"getMetaFileInfo","type":"apogee.FunctionTable","updateData":{"argList":["fileType","context","name","parentInfoList"],"functionBody":"var uploadType = getUploadType(context);\nvar identifier;\n\nswitch(uploadType) {\n    case \"community\":\n        identifier = getCommunityIdentifier(context);\n        break;\n        \n    case \"customer\":\n        identifier = getCustomerIdentifier(context);\n        break;\n        \n    case \"global\":\n        identifier = null;\n        break;\n}\n\nvar fileInfo = {};\nfileInfo.url = getMetaFileUrl(uploadType,fileType,name,identifier);\nfileInfo.overrideSection = overrideSectionLookupTable[fileType];\n\nif(fileType == \"theme\") {\n    fileInfo.subsections = parentInfoList.map( parentInfo => parentInfo.name);\n}\n\nreturn fileInfo;\n","supplementalCode":"","description":""}},"mfsMetaBaseUrl":{"name":"mfsMetaBaseUrl","type":"apogee.JsonTable","updateData":{"data":"http://eng.micello.com/mfs/ms/v1/mfile","description":""}},"mfsUploadBaseUrl":{"name":"mfsUploadBaseUrl","type":"apogee.JsonTable","updateData":{"data":"http://eng.micello.com/mfs/ms/v1/mfile","description":""}}}},"customerInfo":{"name":"customerInfo","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"const url = \"http://eng.micello.com/apogee/data/customerJson.json\"\nreturn apogee.net.jsonRequest(url);","supplementalCode":"","description":""}}}},"completed":{"name":"completed","type":"apogee.Folder","children":{"resetControl":{"name":"resetControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return upload.result;","supplementalCode":"","description":""}},"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":{"valid":false,"data":null},"description":""}},"state":{"name":"state","type":"apogee.JsonTable","updateData":{"data":{"active":false,"previousTask":null},"description":""}}}},"loadCid":{"name":"loadCid","type":"apogee.Folder","children":{"state":{"name":"state","type":"apogee.JsonTable","updateData":{"data":{"active":false,"previousTask":null},"description":""}},"result":{"name":"result","type":"apogee.JsonTable","updateData":{"data":{"valid":false,"data":null},"description":""}},"cidControl":{"name":"cidControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return null;","supplementalCode":"","description":""}}}},"selectCidPostProcess":{"name":"selectCidPostProcess","type":"apogee.Folder","children":{"sessionKey":{"name":"sessionKey","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return commonData.getSessionKey();","supplementalCode":"","description":""}},"cid":{"name":"cid","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(loadCid.result.valid) {\n    return loadCid.result.data.cid;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"comFileResponse":{"name":"comFileResponse","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!sessionKey) return null;\nif(!cid) return null;\n\nvar context = commonData.fileInfo.COMMUNITY_PREFIX + cid;\n\nvar searchDef = {};\nsearchDef.search = \"community_files_extended\";\nsearchDef.file_context = context;\n\nreturn micemetarDataAccess.getRequestPromise(searchDef,sessionKey);\n\n\n\n\n\n\n","supplementalCode":"","description":""}},"comFileRecord":{"name":"comFileRecord","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!comFileResponse) {\n    return null;\n}\n\nif(!comFileResponse.success) {\n    throw new Error(\"Com File request error\");\n}\n\nif(comFileResponse.data.Response.length === 0) {\n    throw new Error(\"Com file not found\");\n}\n\nif(comFileResponse.data.Response.length > 1) {\n    throw new Error(\"Too many com files!\");\n}\n\nreturn comFileResponse.data.Response[0];","supplementalCode":"","description":""}},"metaFileRecordMap":{"name":"metaFileRecordMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!comFileResponse) return null;\n\nvar output = {};\n\nvar isMetaFile = entry => entry.Type == \"meta_file\";\nvar addToMap = record => output[record.Id] = record;\n\ncomFileResponse.data.Records.filter(isMetaFile).forEach(addToMap);\n\nreturn output;","supplementalCode":"","description":""}},"getMetaFileRecord":{"name":"getMetaFileRecord","type":"apogee.FunctionTable","updateData":{"argList":["recordId"],"functionBody":"return metaFileRecordMap[recordId];\n","supplementalCode":"","description":""}},"metaFileInfo":{"name":"metaFileInfo","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!comFileResponse) return null;\n\nvar metaFileInfoList = comFileOverrideEntries.map(getMetaFile)\n        .map(getMetaFileInfoInput)\n        .map(getMetaFileInfo);\n\nreturn metaFileInfoList;","supplementalCode":"const getMetaFile = comFileEntry => getMetaFileRecord(comFileEntry.Fields.meta_file_id);\n\nconst getMetaFileInfoInput = metaFile  => {\n    var info = {};\n    info.fileType = commonData.getFileTypeName(metaFile.Fields.file_type_id);\n    info.context = metaFile.Fields.file_context;\n    info.name = metaFile.Fields.name;\n    info.parentInfoList = getMetaParentInfo(metaFile.Id);\n    return info;\n}\n\nconst getMetaParentInfo = metaId => {\n    var parentList = getMetaParentList(metaId);\n    var parentInfoList = parentList.map(getParentInfo);\n    return parentInfoList\n}\n\nconst getParentInfo = parentEntry => {\n    var parentMetaFile = getMetaFileRecord(parentEntry.Fields.parent_file_id);\n    var parentInfo = {};\n    parentInfo.parentFileType = commonData.getFileTypeName(parentMetaFile.Fields.file_type_id);\n    parentInfo.name = parentMetaFile.Fields.name;\n    return parentInfo;\n}\n\nconst getMetaFileInfo = metaFileInfoInput => commonData.fileInfo.getMetaFileInfo(metaFileInfoInput.fileType,\n    metaFileInfoInput.context,\n    metaFileInfoInput.name,\n    metaFileInfoInput.parentInfoList);","description":""}},"outputFile":{"name":"outputFile","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!comFileResponse) return null;\n\nvar output = {};\n\n//add the cid\noutput.cid = cid;\n\n//populate the urls\nvar addToOutput = (metaFileInfoEntry) => {\n    var section = output[metaFileInfoEntry.overrideSection];\n    \n    if(metaFileInfoEntry.subsections) {\n        if(!section) {\n            section = {};\n            output[metaFileInfoEntry.overrideSection] = section;\n        }\n        \n        var addSubsectionEntry = subsectionName => {\n            var subsection = section[subsectionName];\n            if(!subsection) {\n                subsection = [];\n                section[subsectionName] = subsection;\n            }\n            \n            //make sure there are no repeats\n            if(subsection.indexOf(metaFileInfoEntry.url) < 0) {\n                subsection.push(metaFileInfoEntry.url);\n            }\n        }\n        \n        // add url for each subsection\n        metaFileInfoEntry.subsections.forEach(addSubsectionEntry);\n        \n    }\n    else {\n        if(!section) {\n            section = [];\n            output[metaFileInfoEntry.overrideSection] = section;\n        }\n        \n        //add url to the section\n        section.push(metaFileInfoEntry.url);\n    }\n}\n\nif(metaFileInfo.length > 0) {\n    metaFileInfo.forEach(addToOutput);\n}\nelse {\n    output.none = true;\n}\n\nreturn output;","supplementalCode":"","description":""}},"comFileOverrideEntries":{"name":"comFileOverrideEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!comFileResponse) return null;\n\nvar isComFileEntry = entry => entry.Type == \"com_file_entry\";\nvar isOverride = entry => entry.Fields.file_group == \"overrides\";\n\nreturn comFileResponse.data.Records.filter(isComFileEntry).filter(isOverride);","supplementalCode":"","description":""}},"outputUrl":{"name":"outputUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!cid) return null;\n\nreturn commonData.fileInfo.getComFileUrl(cid);","supplementalCode":"","description":""}},"metaParentListMap":{"name":"metaParentListMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!comFileResponse) return null;\n\nvar output = {};\n\nvar isMetaParent = entry => entry.Type == \"meta_parent_entry\";\nvar addToMap = record => {\n    var list = output[record.Fields.meta_file_id];\n    if(!list) {\n        list = [];\n        output[record.Fields.meta_file_id] = list;\n    }\n    list.push(record);\n}\ncomFileResponse.data.Records.filter(isMetaParent).forEach(addToMap);\n\nreturn output;","supplementalCode":"","description":""}},"getMetaParentList":{"name":"getMetaParentList","type":"apogee.FunctionTable","updateData":{"argList":["metaId"],"functionBody":"return metaParentListMap[metaId];","supplementalCode":"","description":""}}}}}},"micemetarDataAccess":{"name":"micemetarDataAccess","type":"apogee.Folder","children":{"createRecord":{"name":"createRecord","type":"apogee.FunctionTable","updateData":{"argList":["recordType","fieldMap"],"functionBody":"var record = {};\n\nrecord.Id = getId();\nrecord.Type = recordType;\nrecord.Fields = fieldMap;\nrecord.read_perm = READ_PERM;\nrecord.edit_perm = EDIT_PERM;\n\nreturn record;","supplementalCode":"var READ_PERM = 2;\nvar EDIT_PERM = 15;\n\n//this will be illegal at some point\nvar nextId = -1;\n\nfunction getId() {\n    return nextId--;\n}","description":"This method creates a record given the field values and record info \nfrom the data set info. It creates and ID and uses standard permissions."}},"recordsToCreateInstructions":{"name":"recordsToCreateInstructions","type":"apogee.FunctionTable","updateData":{"argList":["recordList"],"functionBody":"var instructions = [];\n\nfor(var i = 0; i < recordList.length; i++) {\n    var createRecord = recordList[i];\n    var instruction = createCreateInstruction(createRecord);\n    instructions.push(instruction);\n}\n\nreturn instructions;","supplementalCode":"","description":"This creates a list of create instructions to go along with a list of records to be created.\n\nThere is the option to assign the ID or to leave it as undefined, in which case\nan automatically incremented ID will be assigned. (For consistency in the data\nset, either all records should be preassigned or all records should be \nautomatically assigned."}},"createCommitBody":{"name":"createCommitBody","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage"],"functionBody":"var commit = {};\nvar actions = [];\n\nif(commitMessage.length === 0) throw new Error(\"Commit message missing!\");\n\ncommit.Name = dataSetInfo.name;\ncommit.Message = commitMessage;\ncommit.Actions = actions;\n\n//single action with commits\nvar action = {};\naction.Title = \"bulk create commit\";\naction.Instr = instructionList;\nactions.push(action);\n\nreturn commit","supplementalCode":"","description":"This creates a body for a commit request, given a list of instructions and a commit message."}},"createRequestOptions":{"name":"createRequestOptions","type":"apogee.FunctionTable","updateData":{"argList":["bodyJson","sessionKey"],"functionBody":"var header = {};\nheader[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\nheader.sessionKey = sessionKey;\nheader[\"proto-version\"] = \"4.0\";\nheader[\"db-version\"] = dataSetInfo.version;\n\nrequestInfo = {};\nrequestInfo.header = header;\nif(bodyJson) {\n    requestInfo.method = \"POST\";\n    requestInfo.body = JSON.stringify(bodyJson);\n}\n\nreturn requestInfo;\n","supplementalCode":"","description":"This creates the requestOptions, suitable for apogee.net.jsonRequest, to go with an type of request to the workingset (micemetarequest) server."}},"host":{"name":"host","type":"apogee.JsonTable","updateData":{"data":"http://localhost:8080/micemetarws","description":""}},"commitUrl":{"name":"commitUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvalue = host + \"/commit\";\nreturn value;\n\n","supplementalCode":"","description":""}},"requestUrl":{"name":"requestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return host + \"/cannedsearch\";\n\n","supplementalCode":"","description":""}},"dataSetInfo":{"name":"dataSetInfo","type":"apogee.JsonTable","updateData":{"data":{"name":"Micemetar","records":{"com_file_entry":{"foreignList":[],"idField":"com_file_entry_id","name":"com_file_entry","recordClass":"com.micello.micemetar.data.ComFileEntry","fields":[{"fieldClass":"java.lang.Integer","name":"ordr","nullOk":false,"defaultValue":0},{"fieldClass":"com.micello.micemetar.data.ComFile","name":"com_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.MetaFile","name":"meta_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"file_group","nullOk":false,"defaultValue":null}]},"com_file":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"com_file_id","remoteRecord":"com_file_entry","orderField":"ordr","name":"com_file_entry_list"}],"idField":"com_file_id","name":"com_file","recordClass":"com.micello.micemetar.data.ComFile","fields":[{"fieldClass":"java.lang.String","name":"file_context","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"name","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"ref","nullOk":true,"defaultValue":null}]},"file_entry":{"foreignList":[],"idField":"file_entry_id","name":"file_entry","recordClass":"com.micello.micemetar.data.FileEntry","fields":[{"fieldClass":"java.lang.String","name":"entry_context","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"entry_name","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.FileType","name":"file_type_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"entry_section","nullOk":true,"defaultValue":null},{"fieldClass":"java.lang.String","name":"entry_key","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"option_name","nullOk":false,"defaultValue":null},{"fieldClass":"org.json.JSONObject","name":"entry_data","nullOk":false,"defaultValue":null}]},"file_type":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"file_type_id","remoteRecord":"file_entry","name":"file_entry_list"}],"idField":"file_type_id","name":"file_type","recordClass":"com.micello.micemetar.data.FileType","fields":[{"fieldClass":"java.lang.String","name":"file_type_name","nullOk":true,"defaultValue":null}]},"meta_file":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"meta_file_id","remoteRecord":"recipe_entry","orderField":"ordr","name":"recipe_entry_list"}],"idField":"meta_file_id","name":"meta_file","recordClass":"com.micello.micemetar.data.MetaFile","fields":[{"fieldClass":"com.micello.micemetar.data.FileType","name":"file_type_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"file_context","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"name","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"use_type","nullOk":false,"defaultValue":null},{"fieldClass":"org.json.JSONObject","name":"ref","nullOk":true,"defaultValue":null}]},"recipe_entry":{"foreignList":[],"idField":"recipe_entry_id","name":"recipe_entry","recordClass":"com.micello.micemetar.data.RecipeEntry","fields":[{"fieldClass":"java.lang.Integer","name":"ordr","nullOk":false,"defaultValue":0},{"fieldClass":"com.micello.micemetar.data.MetaFile","name":"meta_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.FileEntry","name":"file_entry_id","nullOk":false,"defaultValue":null},{"fieldClass":"org.json.JSONObject","name":"insertion_info","nullOk":true,"defaultValue":null}]}},"version":"5.0"},"description":""}},"createUpdateInstruction":{"name":"createUpdateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["initialRecord","targetRecord"],"functionBody":"if(initialRecord.Id != targetRecord.Id) {\n    throw new Error(\"Record ID mismatch in create update instruction for target record: \" + getRecordErrString(targetRecord));\n}\n\nif(initialRecord.Type != targetRecord.Type) {\n    throw new Error(\"Inital and target record types do not match. Target record: \" + getRecordErrString(targetRecord));\n}\n\nvar recordsDifferent = false;\n\nvar recordInfo = getRecordInfo(initialRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Update\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = initialRecord.Id;\n\ninstruction.initialReadPerm = initialRecord.read_perm;\ninstruction.initialEditPerm = initialRecord.edit_perm;\n\nif(initialRecord.readPerm != targetRecord.readPerm) {\n    instruction.targetReadPerm = targetRecord.read_perm;\n    recordsDifferent = true;\n}\n\nif(initialRecord.editPerm != targetRecord.editPerm) {\n    instruction.targetEditPerm = targetRecord.edit_perm;\n    recordsDifferent = true;\n}\n\nvar initialData = {};\ninstruction.Initial = initialData;\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    \n    var initialValue;\n    var targetValue;\n    \n    var initialValue = initialRecord.Fields[field.name];\n    var targetValue = targetRecord.Fields[field.name];\n    \n    //validate target values\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(targetRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(targetRecord,field));\n        }\n    }\n    \n    if(!fieldsMatch(initialValue,targetValue,field)) {\n        initialData[field.name] = initialValue;\n        targetData[field.name] = targetValue;\n        recordsDifferent = true;\n    }\n}\n\nif(recordsDifferent) {\n    return instruction;\n}\nelse {\n    return null;\n}\n","supplementalCode":"function fieldsMatch(initialValue,targetValue,fieldInfo) {\n    if(fieldInfo.fieldClass === \"java.lang.String\") {\n        //compare strings with \"==\"\n        return (initialValue == targetValue);\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"java.lang\")) {\n        //compare other basic values with \"===\"\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"com.micello\")) {\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONObject\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONArray\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else {\n        throw new Error(\"unrecognized field type: \" + fieldInfo.fieldClass);\n    }\n}\n\nfunction compareJsonData(a,b) {\n    var an = apogee.util.getNormalizedObjectCopy(a);\n    var bn = apogee.util.getNormalizedObjectCopy(b);\n    var aString = JSON.stringify(an);\n    var bString = JSON.stringify(bn);\n    return aString == bString;\n}\n    ","description":"This function creates an update instruction given an initial and target record. If the records are the same then NULL is returned. (No update is needed.)"}},"createCreateInstruction":{"name":"createCreateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["createRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(createRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Create\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = createRecord.Id;\n\ninstruction.targetReadPerm = createRecord.read_perm;\ninstruction.targetEditPerm = createRecord.edit_perm;\n\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var targetValue;\n    var targetValue = createRecord.Fields[field.name];\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(createRecord,field));\n        }\n    }\n    \n    targetData[field.name] = targetValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getFieldErrString":{"name":"getFieldErrString","type":"apogee.FunctionTable","updateData":{"argList":["record","fieldInfo"],"functionBody":"return getRecordErrString(record) + \" - \" + fieldInfo.name;","supplementalCode":"","description":""}},"getRecordErrString":{"name":"getRecordErrString","type":"apogee.FunctionTable","updateData":{"argList":["record"],"functionBody":"return record.Type + \" \" + record.Id;","supplementalCode":"","description":""}},"createDeleteInstruction":{"name":"createDeleteInstruction","type":"apogee.FunctionTable","updateData":{"argList":["deleteRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(deleteRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Delete\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = deleteRecord.Id;\n\ninstruction.initialReadPerm = deleteRecord.read_perm;\ninstruction.initialEditPerm = deleteRecord.edit_perm;\n\nvar initialData = {};\ninstruction.Initial = initialData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var initialValue = deleteRecord.Fields[field.name];\n    \n    initialData[field.name] = initialValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getRecordInfo":{"name":"getRecordInfo","type":"apogee.FunctionTable","updateData":{"argList":["recordType"],"functionBody":"var recordInfo = dataSetInfo.records[recordType];\n\nif(!recordInfo) {\n    throw new Error(\"Record type not found in getRecordInfo: \" + recordType);\n}\n\nreturn recordInfo;","supplementalCode":"","description":""}},"combinedEntriesToInstructionList":{"name":"combinedEntriesToInstructionList","type":"apogee.FunctionTable","updateData":{"argList":["combinedEntries"],"functionBody":"var output = [];\nfor(var key in combinedEntries) {\n    var entry = combinedEntries[key];\n    var instruction = getInstructionForCombinedEntry(entry);\n    if(instruction) {\n        output.push(instruction);\n    }\n}\n\nreturn output;","supplementalCode":"function getInstructionForCombinedEntry(combinedEntry) {\n    var newEntry = combinedEntry.newEntry;\n    var oldEntry = combinedEntry.oldEntry;\n    \n    if(newEntry) {\n        if(!oldEntry) {\n            console.log(\"Create: \" + newEntry.Id);\n            return createCreateInstruction(newEntry);\n        }\n        else {\n            //this will return null for matching records\n            console.log(\"Update(maybe): \" + newEntry.Id);\n            return createUpdateInstruction(oldEntry,newEntry);\n        }\n    }\n    else if(oldEntry) {\n        console.log(\"Delete: \" + oldEntry.Id);\n        return createDeleteInstruction(oldEntry);\n    }\n    \n    return null;\n}\n\nfunction entriesDifferent(entry1,entry2) {\n    var string1 = JSON.stringify(apogee.util.getNormalizedCopy(entry1));\n    var string2 = JSON.stringify(apogee.util.getNormalizedCopy(entry2));\n    return (string1 == string2);\n}","description":"This function takes a combined entry map of the format:\n\n{\n  \"some-identifier\":{\n    \"oldEntry\":{original record entry, if applicable},\n    \"newEntry\":{new record entry, if applicable}\n  },\n  ...\n}\n\nIt returns an instruction list.\n\n"}},"getCommitPromise":{"name":"getCommitPromise","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage","sessionKey"],"functionBody":"var commitBody = createCommitBody(instructionList,commitMessage);\nvar requestOptions = createRequestOptions(commitBody,sessionKey);\nreturn apogee.net.jsonRequest(commitUrl,requestOptions);","supplementalCode":"","description":""}},"getRequestPromise":{"name":"getRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn apogee.net.jsonRequest(requestUrl,requestOptions);","supplementalCode":"","description":""}},"customRequestUrl":{"name":"customRequestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return host + \"/request\";","supplementalCode":"","description":""}},"getCustomRequestPromise":{"name":"getCustomRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn apogee.net.jsonRequest(customRequestUrl,requestOptions);","supplementalCode":"","description":""}}}}}}},"components":{"type":"apogeeapp.app.FolderComponent","treeState":1,"children":{"tasks":{"type":"apogeeapp.app.FolderComponent","treeState":1,"children":{"login":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":79,"y":21}},"tabOpen":true,"treeState":-1,"children":{"loginUrl":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":460,"height":32},"posInfo":{"x":26,"y":27},"state":0,"viewType":"Text"}},"loginControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":402,"height":71},"posInfo":{"x":30,"y":111},"state":0,"viewType":"Output"},"resource":{"html":"","css":"","setData":"this.loginUrl = data;","constructorAddition":"\n\n//this uses the updated version of test authorization that takes and returns a JSON\nthis.onClick = function() {\n    \n    //on click\n    var bodyJson = {};\n    bodyJson.userName = resource.userInput.value;\n    bodyJson.password = resource.passwordInput.value;\n    \n    //cleaer password field\n    resource.passwordInput.value = \"\";\n    \n    var options = {};\n    options.body = JSON.stringify(bodyJson);\n    options.method = \"POST\";\n    \n    var requestPromise = apogee.net.jsonRequest(this.loginUrl,options);\n    \n    //set the response\n    mode.getMessenger().asynchDataUpdate(\"sessionResponse\",requestPromise);\n}","init":"\nvar label1 = document.createElement(\"label\");\nlabel1.for = \"userInput\";\nlabel1.innerHTML = \"User:\"\nelement.appendChild(label1);\n\nvar input1 = document.createElement(\"input\");\ninput1.id = \"userInput\";\nresource.userInput = input1;\nelement.appendChild(input1);\n\nelement.appendChild(document.createElement(\"br\"));\n\nvar label2 = document.createElement(\"label\");\nlabel2.for = \"passwordInput\";\nlabel2.innerHTML = \"Password:\"\nelement.appendChild(label2);\n\nvar input2 = document.createElement(\"input\");\ninput2.id = \"passwordInput\";\ninput2.type = \"password\";\nresource.passwordInput = input2;\nelement.appendChild(input2);\n\nelement.appendChild(document.createElement(\"br\"));\n\nvar button = document.createElement(\"button\");\nbutton.innerHTML = \"Login\";\nelement.appendChild(button);\n\nvar instance = this;\nbutton.onclick = function() {\n    instance.onClick();\n}\n\n\n"},"destroyOnInactive":false},"sessionResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":626,"height":366},"posInfo":{"x":30,"y":284},"state":-1,"viewType":"Data"},"dataView":"Plain"},"state":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":292,"height":71},"posInfo":{"x":575,"y":43},"state":-1,"viewType":"Data"},"dataView":"Plain"},"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":273,"height":77},"posInfo":{"x":576,"y":93},"state":-1,"viewType":"Data"},"dataView":"Plain"},"taskResult":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":649,"height":266},"posInfo":{"x":32,"y":343},"state":-1,"viewType":"Data"},"dataView":"Plain"}}},"upload":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":25,"y":25}},"treeState":-1,"children":{"uploadFile":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":802,"height":386},"posInfo":{"x":66,"y":320},"state":0,"viewType":"Data"},"dataView":"Plain"},"submitControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":364,"height":69},"posInfo":{"x":52,"y":66},"state":0,"viewType":"Output"},"resource":{"html":"Press upload to upload the file to the given MFS url.<br>\n<input type=\"button\" id=\"submit_commitButton\" value=\"Upload\"></input>\n<input type=\"button\" id=\"submit_cancelButton\" value=\"Cancel\"></input>","onLoad":"this.submitButton = document.getElementById(\"submit_commitButton\");\nthis.cancelButton = document.getElementById(\"submit_cancelButton\");\nthis.initialized = true;\n\nvar instance = this;\nthis.submitButton.onclick = function() {\n    instance.onSubmit();\n}\nthis.cancelButton.onclick = function() {\n    instance.onCancel();\n}","constructorAddition":"this.submitButton = null;\nthis.cancelButton = null;\nthis.initialized = false;\n\nthis.onSubmit = function() {\n    \n    if(!this.initialized) {\n        return;\n    }\n    \n    if((!this.uploadFile)||(this.uploadFile.length === 0)) {\n        alert(\"There is no data to commit.\");\n        return;\n    }\n    \n    var updateInfo = [];\n    updateInfo.push([\"liveUploadFile\",this.uploadFile]);\n    mode.getMessenger().compoundDataUpdate(updateInfo,true);\n}\n\nthis.onCancel = function() {\n    console.log(this.previousTask);\n    taskAppModule.taskCanceled(mode.getMessenger(),[\"submit\"],this.previousTask);\n}","setData":"if(!data) return;\n\nthis.uploadFile = data.uploadFile;\nthis.previousTask = data.previousTask;","css":""},"destroyOnInactive":false},"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":418,"height":120},"posInfo":{"x":887,"y":171},"state":0,"viewType":"Data"},"dataView":"Plain"},"state":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":290,"height":106},"posInfo":{"x":889,"y":19},"state":0,"viewType":"Data"},"dataView":"Plain"},"taskResult":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":654,"height":437},"posInfo":{"x":526,"y":159},"state":-1,"viewType":"Formula"},"dataView":"Plain"},"liveUploadFile":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":529,"y":45},"state":-1,"viewType":"Data"},"dataView":"Plain"},"url":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":778,"height":43},"posInfo":{"x":68,"y":199},"state":0,"viewType":"Data"},"dataView":"Plain"},"uploadResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":843,"height":315},"posInfo":{"x":526,"y":88},"state":-1,"viewType":"Formula"},"dataView":"Plain"}}},"currentTask":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":50,"y":50},"state":0,"viewType":"Text"},"dataView":"Plain"},"commonData":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":75,"y":75}},"treeState":-1,"children":{"fileTypeList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":555,"height":325},"posInfo":{"x":35,"y":53},"state":-1,"viewType":"JSON"},"dataView":"Plain"},"fileTypeLookupTable":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":660,"height":300},"posInfo":{"x":32,"y":99},"state":-1,"viewType":"JSON"},"dataView":"Plain"},"getFileTypeName":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":31,"y":150},"state":-1,"viewType":"Code"}},"getSessionKey":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":429,"height":110},"posInfo":{"x":36,"y":279},"state":-1,"viewType":"Code"}},"getParamTable":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":361,"height":115},"posInfo":{"x":35,"y":331},"state":-1,"viewType":"Code"}},"fileInfo":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":657,"y":47}},"treeState":-1,"children":{"getUploadType":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":583,"height":114},"posInfo":{"x":511,"y":15},"state":-1,"viewType":"Code"}},"getCommunityIdentifier":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":369,"height":61},"posInfo":{"x":515,"y":89},"state":-1,"viewType":"Code"}},"COMMUNITY_PREFIX":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":934,"y":85},"state":-1,"viewType":"Data"},"dataView":"Plain"},"getCustomerIdentifier":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":741,"height":21},"posInfo":{"x":516,"y":129},"state":-1,"viewType":"Code"}},"customerAuthToPathName":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":775,"height":506},"posInfo":{"x":16,"y":194},"state":-1,"viewType":"Data"},"dataView":"Plain"},"urlFormatLookupTable":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":706,"height":452},"posInfo":{"x":605,"y":321},"state":-1,"viewType":"Data"},"dataView":"Plain"},"overrideSectionLookupTable":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":420,"height":132},"posInfo":{"x":934,"y":30},"state":-1,"viewType":"Data"},"dataView":"Plain"},"getUrlParams":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":812,"height":517},"posInfo":{"x":607,"y":364},"state":-1,"viewType":"Code"}},"comFileUrlFormatString":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":380,"height":63},"posInfo":{"x":605,"y":279},"state":-1,"viewType":"Data"},"dataView":"Plain"},"getMetaFileUrl":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":741,"height":400},"posInfo":{"x":605,"y":496},"state":-1,"viewType":"Code"}},"getComFileUrl":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":715,"height":400},"posInfo":{"x":605,"y":453},"state":-1,"viewType":"Code"}},"getMetaFileInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":671,"height":436},"posInfo":{"x":43,"y":266},"state":-1,"viewType":"Code"}},"mfsMetaBaseUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":405,"height":39},"posInfo":{"x":16,"y":108},"state":0,"viewType":"Data"},"dataView":"Plain"},"mfsUploadBaseUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":405,"height":50},"posInfo":{"x":15,"y":10},"state":0,"viewType":"Data"},"dataView":"Plain"}}},"customerInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":619,"height":300},"posInfo":{"x":366,"y":51},"state":-1,"viewType":"Text"},"dataView":"Plain"}}},"completed":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":100,"y":100}},"treeState":-1,"children":{"resetControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":534,"height":93},"posInfo":{"x":62,"y":16},"state":0,"viewType":"Output"},"resource":{"html":"<div id=\"reset_message\"></div>\n<input type=\"button\" id=\"completed_reset\" value=\"Reset\"></input>","onLoad":"this.resetButton = document.getElementById(\"completed_reset\");\nthis.msgLabel = document.getElementById(\"reset_message\");\n\nthis.initialized = true;\n\nvar instance = this;\nthis.resetButton.onclick = function() {\n    instance.onReset();\n}\n\nif(this.cachedData) {\n    this.setData(this.cachedData);\n    this.cachedData = null;\n}","constructorAddition":"this.onReset = function() {\n\n    var clearTaskList = [\n        [\"loadCid\"],\n        [\"upload\"],\n        [\"completed\"]\n    ];\n    taskAppModule.clearTasksAndRestartFrom(mode.getMessenger(),clearTaskList,[\"loadCid\"]);\n}","setData":"if(!this.initialized) {\n    this.cachedData = data;\n    return;\n}\n\nvar msg;\nif(data.valid) {\n    if((data.data.uploadResponse)&&(data.data.uploadResponse.length === 1)) {\n        msg = \"File created: \" + data.data.uploadResponse[0];\n    }\n    else {\n        msg = \"Unkonwn response: \" + JSON.stringify(data.data);\n    }\n}\nelse {\n    msg = \"No upload attemped.\"\n}\n\nthis.msgLabel.innerHTML = msg;\n\n\n"},"destroyOnInactive":false},"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":253,"height":77},"posInfo":{"x":711,"y":14},"state":0,"viewType":"Data"},"dataView":"Plain"},"state":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":290,"height":136},"posInfo":{"x":713,"y":133},"state":0,"viewType":"Data"},"dataView":"Plain"}}},"loadCid":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":82,"y":74}},"treeState":-1,"children":{"state":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":286,"height":74},"posInfo":{"x":831,"y":28},"state":0,"viewType":"Data"},"dataView":"Plain"},"result":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":289,"height":71},"posInfo":{"x":830,"y":152},"state":0,"viewType":"Data"},"dataView":"Plain"},"cidControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":445,"height":122},"posInfo":{"x":50,"y":54},"state":0,"viewType":"Output"},"resource":{"html":"CID: <input type=\"text\" id=\"cid_text\"></input>\n<br><br>\n<input type=\"button\" id=\"cid_submit\" value=\"Submit\"></input>\n<input type=\"button\" id=\"cid_cancel\" value=\"Cancel\"></input>","onLoad":"this.textInput = document.getElementById(\"cid_text\");\nthis.submitButton = document.getElementById(\"cid_submit\");\nthis.cancelButton = document.getElementById(\"cid_cancel\");\nthis.initialized = true;\n\nvar instance = this;\nthis.submitButton.onclick = () => instance.onSubmit();\nthis.cancelButton.onclick = () => instance.onCancel();","constructorAddition":"this.textInput = null;\nthis.submitButton = null;\nthis.newLogingButton = null;\nthis.initialized = false;\n\nthis.onSubmit = function() {\n    if(!this.initialized) return;\n    \n    var cidString = this.textInput.value.trim();\n    if(cidString.length === 0) {\n        alert(\"Invalid CID value.\");\n        return;\n    }\n    \n    if(!isFinite(cidString)) {\n        alert(\"Invalid CID value\");\n        return;\n    }\n    \n    var data = {}\n    data.cid = Number(cidString);\n    \n    taskAppModule.taskCompleted(mode.getMessenger(),[\"loadCid\"],[\"upload\"],data);\n}\n\nthis.onCancel = function() {\n    taskAppModule.taskCanceled(mode.getMessenger(),[\"loadCid\"],[\"login\"]);\n}"},"destroyOnInactive":false}}},"selectCidPostProcess":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":125,"y":125}},"treeState":-1,"children":{"sessionKey":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":503,"height":37},"posInfo":{"x":34,"y":23},"state":-1,"viewType":"Data"},"dataView":"Plain"},"cid":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":148,"height":29},"posInfo":{"x":38,"y":68},"state":0,"viewType":"Data"},"dataView":"Plain"},"comFileResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":913,"height":449},"posInfo":{"x":342,"y":36},"state":-1,"viewType":"Data"},"dataView":"JSON"},"comFileRecord":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":646,"height":259},"posInfo":{"x":343,"y":86},"state":-1,"viewType":"Data"},"dataView":"Plain"},"metaFileRecordMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":665,"height":313},"posInfo":{"x":343,"y":176},"state":0,"viewType":"Data"},"dataView":"Plain"},"getMetaFileRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":488,"height":244},"posInfo":{"x":666,"y":180},"state":-1,"viewType":"Code"}},"metaFileInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":854,"height":572},"posInfo":{"x":57,"y":258},"state":-1,"viewType":"Data"},"dataView":"Plain"},"outputFile":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":802,"height":650},"posInfo":{"x":56,"y":376},"state":-1,"viewType":"Data"},"dataView":"Plain"},"comFileOverrideEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":756,"height":660},"posInfo":{"x":344,"y":133},"state":-1,"viewType":"Data"},"dataView":"Plain"},"outputUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":774,"height":300},"posInfo":{"x":59,"y":321},"state":-1,"viewType":"Formula"},"dataView":"Plain"},"metaParentListMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":872,"height":448},"posInfo":{"x":344,"y":224},"state":-1,"viewType":"Data"},"dataView":"JSON"},"getMetaParentList":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":668,"y":229},"state":-1,"viewType":"Code"}}}}}},"micemetarDataAccess":{"type":"apogeeapp.app.FolderComponent","treeState":-1,"children":{"createRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":560,"height":321},"posInfo":{"x":33,"y":368},"state":-1,"viewType":"Private"}},"recordsToCreateInstructions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":834,"height":391},"posInfo":{"x":30,"y":472},"state":-1,"viewType":"Code"}},"createCommitBody":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":568,"height":400},"posInfo":{"x":629,"y":225},"state":-1,"viewType":"Code"}},"createRequestOptions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":523,"height":254},"posInfo":{"x":822,"y":379},"state":-1,"viewType":"Code"}},"host":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":353,"height":71},"posInfo":{"x":15,"y":13},"state":0,"viewType":"Data"},"dataView":"Plain"},"commitUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":433,"height":107},"posInfo":{"x":14,"y":98},"state":-1,"viewType":"Data"},"dataView":"Plain"},"requestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":450,"height":68},"posInfo":{"x":14,"y":58},"state":-1,"viewType":"Formula"},"dataView":"Plain"},"dataSetInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":882,"height":611},"posInfo":{"x":317,"y":144},"state":-1,"viewType":"Data"},"dataView":"Plain"},"createUpdateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":1002,"height":655},"posInfo":{"x":37,"y":247},"state":-1,"viewType":"Code"}},"createCreateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":994,"height":643},"posInfo":{"x":39,"y":209},"state":-1,"viewType":"Code"}},"getFieldErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":512,"height":68},"posInfo":{"x":761,"y":616},"state":-1,"viewType":"Code"}},"getRecordErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":81},"posInfo":{"x":762,"y":664},"state":-1,"viewType":"Code"}},"createDeleteInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":678,"height":540},"posInfo":{"x":36,"y":289},"state":-1,"viewType":"Code"}},"getRecordInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":480,"height":400},"posInfo":{"x":818,"y":427},"state":-1,"viewType":"Code"}},"combinedEntriesToInstructionList":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":721,"height":524},"posInfo":{"x":31,"y":516},"state":-1,"viewType":"Private"}},"getCommitPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":569,"height":109},"posInfo":{"x":316,"y":26},"state":-1,"viewType":"Code"}},"getRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":546,"height":89},"posInfo":{"x":315,"y":67},"state":-1,"viewType":"Code"}},"customRequestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":17,"y":142},"state":-1,"viewType":"Formula"},"dataView":"Plain"},"getCustomRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":668,"height":88},"posInfo":{"x":317,"y":104},"state":-1,"viewType":"Code"}}}}}},"activeTabMember":"Model.tasks.login"}