{"fileType":"apogee app js workspace","version":"0.40","references":[],"workspace":{"fileType":"apogee workspace","version":0.2,"name":"updateMicentityDB","data":{"name":"Model","type":"apogee.Folder","children":{"micentityDataAccess":{"name":"micentityDataAccess","type":"apogee.Folder","children":{"createRecord":{"name":"createRecord","type":"apogee.FunctionTable","updateData":{"argList":["recordType","fieldMap"],"functionBody":"var record = {};\n\nvar recordInfo = getRecordInfo(recordType);\n\nrecord.Id = getId();\nrecord.Type = recordInfo.name;\nrecord.Fields = fieldMap;\nrecord.read_perm = READ_PERM;\nrecord.edit_perm = EDIT_PERM;\n\nreturn record;","supplementalCode":"var READ_PERM = 2;\nvar EDIT_PERM = 15;\n\nvar nextId = -1;\n\nfunction getId() {\n    return nextId--;\n}","description":"This method creates a record given the field values and record info \nfrom the data set info. It creates and ID and uses standard permissions."}},"recordsToCreateInstructions":{"name":"recordsToCreateInstructions","type":"apogee.FunctionTable","updateData":{"argList":["recordList"],"functionBody":"var instructions = [];\n\nfor(var i = 0; i < recordList.length; i++) {\n    var createRecord = recordList[i];\n    var instruction = createCreateInstruction(createRecord);\n    instructions.push(instruction);\n}\n\nreturn instructions;","supplementalCode":"","description":"This creates a list of create instructions to go along with a list of records to be created.\n\nThere is the option to assign the ID or to leave it as undefined, in which case\nan automatically incremented ID will be assigned. (For consistency in the data\nset, either all records should be preassigned or all records should be \nautomatically assigned."}},"createCommitBody":{"name":"createCommitBody","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage"],"functionBody":"var commit = {};\nvar actions = [];\n\nif(commitMessage.length === 0) throw new Error(\"Commit message missing!\");\n\ncommit.Name = dataSetInfo.name;\ncommit.Message = commitMessage;\ncommit.Actions = actions;\n\n//single action with commits\nvar action = {};\naction.Title = \"bulk create commit\";\naction.Instr = instructionList;\nactions.push(action);\n\nreturn commit","supplementalCode":"","description":"This creates a body for a commit request, given a list of instructions and a commit message."}},"createRequestOptions":{"name":"createRequestOptions","type":"apogee.FunctionTable","updateData":{"argList":["bodyJson","sessionKey"],"functionBody":"var header = {};\nheader[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\nheader.sessionKey = sessionKey;\nheader[\"proto-version\"] = \"4.0\";\nheader[\"db-version\"] = dataSetInfo.version;\n\nrequestInfo = {};\nrequestInfo.header = header;\nif(bodyJson) {\n    requestInfo.method = \"POST\";\n    requestInfo.body = JSON.stringify(bodyJson);\n}\n\nreturn requestInfo;\n","supplementalCode":"","description":"This creates the requestOptions, suitable for apogee.net.jsonRequest, to go with an type of request to the workingset (micemetarequest) server."}},"host":{"name":"host","type":"apogee.JsonTable","updateData":{"data":"https://factory.micello.com/micentityws","description":""}},"commitUrl":{"name":"commitUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvalue = host + \"/commit\";\nreturn value;\n\n","supplementalCode":"","description":""}},"requestUrl":{"name":"requestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvalue = host + \"/cannedsearch\";\nreturn value;\n\n","supplementalCode":"","description":""}},"createUpdateInstruction":{"name":"createUpdateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["initialRecord","targetRecord"],"functionBody":"if(initialRecord.Id != targetRecord.Id) {\n    throw new Error(\"Record ID mismatch in create update instruction for target record: \" + getRecordErrString(targetRecord));\n}\n\nif(initialRecord.Type != targetRecord.Type) {\n    throw new Error(\"Inital and target record types do not match. Target record: \" + getRecordErrString(targetRecord));\n}\n\nvar recordsDifferent = false;\n\nvar recordInfo = getRecordInfo(initialRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Update\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = initialRecord.Id;\n\ninstruction.initialReadPerm = initialRecord.read_perm;\ninstruction.initialEditPerm = initialRecord.edit_perm;\n\nif(initialRecord.readPerm != targetRecord.readPerm) {\n    instruction.targetReadPerm = targetRecord.read_perm;\n    recordsDifferent = true;\n}\n\nif(initialRecord.editPerm != targetRecord.editPerm) {\n    instruction.targetEditPerm = targetRecord.edit_perm;\n    recordsDifferent = true;\n}\n\nvar initialData = {};\ninstruction.Initial = initialData;\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    \n    var initialValue;\n    var targetValue;\n    \n    var initialValue = initialRecord.Fields[field.name];\n    var targetValue = targetRecord.Fields[field.name];\n    \n    //validate target values\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(targetRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(targetRecord,field));\n        }\n    }\n    \n    if(!fieldsMatch(initialValue,targetValue,field)) {\n        initialData[field.name] = initialValue;\n        targetData[field.name] = targetValue;\n        recordsDifferent = true;\n    }\n}\n\nif(recordsDifferent) {\n    return instruction;\n}\nelse {\n    return null;\n}\n","supplementalCode":"function fieldsMatch(initialValue,targetValue,fieldInfo) {\n    if(fieldInfo.fieldClass === \"java.lang.String\") {\n        //compare strings with \"==\"\n        return (initialValue == targetValue);\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"java.lang\")) {\n        //compare other basic values with \"===\"\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"com.micello\")) {\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONObject\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONArray\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else {\n        throw new Error(\"unrecognized field type: \" + fieldInfo.fieldClass);\n    }\n}\n\nfunction compareJsonData(a,b) {\n    var an = apogee.util.getNormalizedObjectCopy(a);\n    var bn = apogee.util.getNormalizedObjectCopy(b);\n    var aString = JSON.stringify(an);\n    var bString = JSON.stringify(bn);\n    return aString == bString;\n}\n    ","description":"This function creates an update instruction given an initial and target record. If the records are the same then NULL is returned. (No update is needed.)"}},"createCreateInstruction":{"name":"createCreateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["createRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(createRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Create\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = createRecord.Id;\n\ninstruction.targetReadPerm = createRecord.read_perm;\ninstruction.targetEditPerm = createRecord.edit_perm;\n\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var targetValue;\n    var targetValue = createRecord.Fields[field.name];\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(createRecord,field));\n        }\n    }\n    \n    targetData[field.name] = targetValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getFieldErrString":{"name":"getFieldErrString","type":"apogee.FunctionTable","updateData":{"argList":["record","fieldInfo"],"functionBody":"return getRecordErrString(record) + \" - \" + fieldInfo.name;","supplementalCode":"","description":""}},"getRecordErrString":{"name":"getRecordErrString","type":"apogee.FunctionTable","updateData":{"argList":["record"],"functionBody":"return record.Type + \" \" + record.Id;","supplementalCode":"","description":""}},"createDeleteInstruction":{"name":"createDeleteInstruction","type":"apogee.FunctionTable","updateData":{"argList":["deleteRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(deleteRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Delete\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = deleteRecord.Id;\n\ninstruction.initialReadPerm = deleteRecord.read_perm;\ninstruction.initialEditPerm = deleteRecord.edit_perm;\n\nvar initialData = {};\ninstruction.Initial = initialData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var initialValue = deleteRecord.Fields[field.name];\n    \n    initialData[field.name] = initialValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getRecordInfo":{"name":"getRecordInfo","type":"apogee.FunctionTable","updateData":{"argList":["recordType"],"functionBody":"var recordInfo = dataSetInfo.records[recordType];\n\nif(!recordInfo) {\n    throw new Error(\"Record type not found in getRecordInfo: \" + recordType);\n}\n\nreturn recordInfo;","supplementalCode":"","description":""}},"combinedEntriesToInstructionList":{"name":"combinedEntriesToInstructionList","type":"apogee.FunctionTable","updateData":{"argList":["combinedEntries"],"functionBody":"var output = [];\nfor(var key in combinedEntries) {\n    var entry = combinedEntries[key];\n    var instruction = getInstructionForCombinedEntry(entry);\n    if(instruction) {\n        output.push(instruction);\n    }\n}\n\nreturn output;","supplementalCode":"function getInstructionForCombinedEntry(combinedEntry) {\n    var newEntry = combinedEntry.newEntry;\n    var oldEntry = combinedEntry.oldEntry;\n    \n    if(newEntry) {\n        if(!oldEntry) {\n            console.log(\"Create: \" + newEntry.Id);\n            return createCreateInstruction(newEntry);\n        }\n        else {\n            //this will return null for matching records\n            console.log(\"Update(maybe): \" + newEntry.Id);\n            return createUpdateInstruction(oldEntry,newEntry);\n        }\n    }\n    else if(oldEntry) {\n        console.log(\"Delete: \" + oldEntry.Id);\n        return createDeleteInstruction(oldEntry);\n    }\n    \n    return null;\n}\n\nfunction entriesDifferent(entry1,entry2) {\n    var string1 = JSON.stringify(apogee.util.getNormalizedCopy(entry1));\n    var string2 = JSON.stringify(apogee.util.getNormalizedCopy(entry2));\n    return (string1 == string2);\n}","description":"This function takes a combined entry map of the format:\n\n{\n  \"some-identifier\":{\n    \"oldEntry\":{original record entry, if applicable},\n    \"newEntry\":{new record entry, if applicable}\n  },\n  ...\n}\n\nIt returns an instruction list.\n\n"}},"getCommitPromise":{"name":"getCommitPromise","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage","sessionKey"],"functionBody":"var commitBody = createCommitBody(instructionList,commitMessage);\nvar requestOptions = createRequestOptions(commitBody,sessionKey);\nvalue = apogee.net.jsonRequest(commitUrl,requestOptions);\nreturn value;","supplementalCode":"","description":""}},"getRequestPromise":{"name":"getRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nvalue = apogee.net.jsonRequest(requestUrl,requestOptions);\nreturn value;","supplementalCode":"","description":""}},"dataSetInfo":{"name":"dataSetInfo","type":"apogee.JsonTable","updateData":{"data":{"name":"Micentity","records":{"chain":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"chain_id","remoteRecord":"chain_prop","orderField":"ordr","name":"props"}],"idField":"chain_id","name":"chain","recordClass":"com.micello.micentity.data.Chain","fields":[]},"entity":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"entity_id","remoteRecord":"entity_address","orderField":"address_order","name":"address_list"},{"restrictDelete":true,"isUnique":false,"remoteField":"entity_id","remoteRecord":"entity_prop","orderField":"ordr","name":"props"}],"idField":"entity_id","name":"entity","recordClass":"com.micello.micentity.data.Entity","fields":[{"fieldClass":"com.micello.micentity.data.CommunityEntity","name":"community_id","nullOk":false},{"fieldClass":"com.micello.micentity.data.Chain","name":"chain_id","nullOk":true},{"fieldClass":"java.lang.Boolean","name":"deleted","nullOk":false,"defaultValue":false}]},"chain_prop":{"foreignList":[],"idField":"chain_prop_id","name":"chain_prop","recordClass":"com.micello.micentity.data.ChainProp","fields":[{"fieldClass":"java.lang.Integer","name":"ordr","nullOk":false,"defaultValue":0},{"fieldClass":"com.micello.micentity.data.Chain","name":"chain_id","nullOk":false},{"fieldClass":"java.lang.String","name":"key_name","nullOk":false},{"fieldClass":"java.lang.String","name":"key_value","nullOk":true},{"fieldClass":"java.lang.String","name":"lang","nullOk":true}]},"community":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"community_id","remoteRecord":"entity","name":"entities"},{"restrictDelete":true,"isUnique":false,"remoteField":"community_id","remoteRecord":"entity_address","name":"entity_addresses"},{"restrictDelete":true,"isUnique":false,"remoteField":"community_id","remoteRecord":"community_prop","orderField":"ordr","name":"community_props"}],"idField":"community_id","name":"community","recordClass":"com.micello.micentity.data.CommunityEntity","fields":[]},"src_entity_prop":{"foreignList":[],"idField":"src_entity_prop_id","name":"src_entity_prop","recordClass":"com.micello.micentity.data.SourceEntityProp","fields":[{"fieldClass":"java.lang.Integer","name":"ordr","nullOk":false,"defaultValue":0},{"fieldClass":"com.micello.micentity.data.SourceEntity","name":"src_entity_id","nullOk":false},{"fieldClass":"java.lang.String","name":"key_name","nullOk":false},{"fieldClass":"java.lang.String","name":"key_value","nullOk":true},{"fieldClass":"java.lang.String","name":"lang","nullOk":true}]},"entity_prop":{"foreignList":[],"idField":"entity_prop_id","name":"entity_prop","recordClass":"com.micello.micentity.data.EntityProp","fields":[{"fieldClass":"java.lang.Integer","name":"ordr","nullOk":false,"defaultValue":0},{"fieldClass":"com.micello.micentity.data.Entity","name":"entity_id","nullOk":false},{"fieldClass":"java.lang.String","name":"key_name","nullOk":false},{"fieldClass":"java.lang.String","name":"key_value","nullOk":true},{"fieldClass":"java.lang.String","name":"lang","nullOk":true}]},"collection":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"collection_id","remoteRecord":"staging_entity_address","name":"staging_addresses"},{"restrictDelete":true,"isUnique":false,"remoteField":"collection_id","remoteRecord":"src_entity","name":"src_entities"}],"idField":"collection_id","name":"collection","recordClass":"com.micello.micentity.data.DataCollection","fields":[{"fieldClass":"java.lang.Long","name":"community_id","nullOk":false},{"fieldClass":"java.lang.String","name":"source_type","nullOk":false},{"fieldClass":"java.lang.String","name":"source_name","nullOk":false},{"fieldClass":"java.lang.String","name":"operator","nullOk":true},{"fieldClass":"java.lang.String","name":"notes","nullOk":true},{"fieldClass":"java.lang.Float","name":"score","nullOk":false},{"fieldClass":"java.lang.Long","name":"collection_time","nullOk":false},{"fieldClass":"java.lang.Long","name":"prev_time","nullOk":true},{"fieldClass":"java.lang.Boolean","name":"is_complete","nullOk":false},{"fieldClass":"java.lang.Boolean","name":"no_update","nullOk":false,"defaultValue":false},{"fieldClass":"java.lang.Boolean","name":"is_verified","nullOk":false,"defaultValue":false},{"fieldClass":"java.lang.Boolean","name":"in_process","nullOk":false}]},"staging_entity_address":{"foreignList":[],"idField":"staging_address_id","name":"staging_entity_address","recordClass":"com.micello.micentity.data.StagingEntityAddress","fields":[{"fieldClass":"com.micello.micentity.data.DataCollection","name":"collection_id","nullOk":false},{"fieldClass":"java.lang.Long","name":"entity_id","nullOk":true},{"fieldClass":"java.lang.String","name":"address_key","nullOk":false},{"fieldClass":"java.lang.String","name":"address_value","nullOk":false},{"fieldClass":"java.lang.String","name":"address_parent","nullOk":true},{"fieldClass":"java.lang.String","name":"location","nullOk":true},{"fieldClass":"java.lang.Boolean","name":"is_identifier","nullOk":false,"defaultValue":true},{"fieldClass":"java.lang.Long","name":"change_timestamp","nullOk":true}]},"community_prop":{"foreignList":[],"idField":"community_prop_id","name":"community_prop","recordClass":"com.micello.micentity.data.CommunityEntityProp","fields":[{"fieldClass":"java.lang.Integer","name":"ordr","nullOk":false,"defaultValue":0},{"fieldClass":"com.micello.micentity.data.CommunityEntity","name":"community_id","nullOk":false},{"fieldClass":"java.lang.String","name":"key_name","nullOk":false},{"fieldClass":"java.lang.String","name":"key_value","nullOk":true},{"fieldClass":"java.lang.String","name":"lang","nullOk":true}]},"src_entity":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"src_entity_id","remoteRecord":"src_entity_prop","orderField":"ordr","name":"props"}],"idField":"src_entity_id","name":"src_entity","recordClass":"com.micello.micentity.data.SourceEntity","fields":[{"fieldClass":"com.micello.micentity.data.DataCollection","name":"collection_id","nullOk":false},{"fieldClass":"com.micello.micentity.data.Entity","name":"entity_id","nullOk":false}]},"entity_address":{"foreignList":[],"idField":"entity_address_id","name":"entity_address","recordClass":"com.micello.micentity.data.EntityAddress","fields":[{"fieldClass":"com.micello.micentity.data.CommunityEntity","name":"community_id","nullOk":false},{"fieldClass":"java.lang.Integer","name":"address_order","nullOk":false,"defaultValue":0},{"fieldClass":"java.lang.Integer","name":"address_number","nullOk":false,"defaultValue":0},{"fieldClass":"com.micello.micentity.data.Entity","name":"entity_id","nullOk":false},{"fieldClass":"java.lang.String","name":"address_key","nullOk":false},{"fieldClass":"java.lang.String","name":"address_value","nullOk":false},{"fieldClass":"java.lang.Boolean","name":"is_identifier","nullOk":false,"defaultValue":true}]}},"version":"5.0"},"description":""}},"getEntityRequest":{"name":"getEntityRequest","type":"apogee.FunctionTable","updateData":{"argList":["cid","sessionKey"],"functionBody":"var requestBody = {};\nrequestBody.search = \"community_entity\";\nrequestBody.id = cid;\n\nvar requestOptions = createRequestOptions(requestBody,sessionKey);\n\nvar requestUrl = host + \"/cannedsearch\";\nreturn apogee.net.jsonRequest(requestUrl,requestOptions);","supplementalCode":"","description":""}},"getCustomCommitPromise":{"name":"getCustomCommitPromise","type":"apogee.FunctionTable","updateData":{"argList":["instructionlist","commitMessage","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn apogee.net.jsonRequest(customRequestUrl,requestOptions);","supplementalCode":"","description":""}}}},"commit":{"name":"commit","type":"apogee.Folder","children":{"commitResponse":{"name":"commitResponse","type":"apogee.JsonTable","updateData":{"data":"","description":""}},"updatedRecords":{"name":"updatedRecords","type":"apogee.JsonTable","updateData":{"data":"","description":""}},"createdRecords":{"name":"createdRecords","type":"apogee.JsonTable","updateData":{"data":"","description":""}},"instructionList":{"name":"instructionList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var combinedEntries = {};\n\n//first handle updates\nif((preUpdatedRecords)&&(updatedRecords)) {\n    preUpdatedRecords.forEach( record => combinedEntries[record.Id] = {\"oldEntry\":record} );\n    updatedRecords.forEach( record => {\n        var base = combinedEntries[record.Id];\n        if(!base) throw new Error(\"No initial record for update record id = \" + record.Id);\n        base.newEntry = record;\n    })\n    \n    for(var id in combinedEntries) {\n        var combinedEntry = combinedEntries[id];\n        if(combinedEntry.newEntry === undefined) throw new Error(\"No target record for update record id = \" + id);\n    }\n}\n    \n//handle create\nif(createdRecords) {\n    createdRecords.forEach( record => {\n        if(combinedEntries[record.Id] !== undefined) throw new Error(\"Repeart entry for id = \" + record.Id);\n        combinedEntries[record.Id] = {\"newEntry\":record};\n    });\n}\n\nif(deletedRecords) {\n    deletedRecords.forEach( record => {\n        if(combinedEntries[record.Id] !== undefined) throw new Error(\"Repeart entry for id = \" + record.Id);\n        combinedEntries[record.Id] = {\"oldEntry\":record};\n    });\n}\n\nvar instructionList = micentityDataAccess.combinedEntriesToInstructionList(combinedEntries);\n\nreturn instructionList;","supplementalCode":"function updateObject(fileEntry) {\n    var newFileEntry = apogee.util.jsonCopy(fileEntry);\n    var featureTypePropData = newFileEntry.Fields.entry_data.properties[0];\n    if(featureTypePropData.key != \"featureType\") throw new Error(\"Not the feature type!\");\n    \n    featureTypePropData.legacyKey = \"object\";\n    featureTypePropData.legacyValue = \"true\";\n    \n    \n    \n    return newFileEntry;\n}\n\nfunction updateSpace(fileEntry) {\n    var newFileEntry = apogee.util.jsonCopy(fileEntry);\n    var featureTypePropData = newFileEntry.Fields.entry_data.properties[0];\n    if(featureTypePropData.key != \"featureType\") throw new Error(\"Not the feature type!\");\n    \n    featureTypePropData.legacyKey = \"area\";\n    featureTypePropData.legacyValue = \"space\";\n    \n    return newFileEntry;\n}\n\nfunction updateGeometryEntry(fileEntry) {\n    var newFileEntry = apogee.util.jsonCopy(fileEntry);\n    var featureTypePropData = newFileEntry.Fields.entry_data.properties[0];\n    if(featureTypePropData.key != \"featureType\") throw new Error(\"Not the feature type!\");\n    \n    var legacyKey = featureTypePropData.legacyKey;\n    var legacyValue = featureTypePropData.value;\n    \n    if(legacyValue == legacyKey) {\n        legacyValue = \"true\";\n    }\n    \n    featureTypePropData.legacyValue = legacyValue;\n    \n    return newFileEntry;\n}","description":""}},"deletedRecords":{"name":"deletedRecords","type":"apogee.JsonTable","updateData":{"data":"","description":""}},"preUpdatedRecords":{"name":"preUpdatedRecords","type":"apogee.JsonTable","updateData":{"data":"","description":""}},"submitForm":{"name":"submitForm","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"\n//on submit, make the commit and write the result to the commit result table\nvar onSubmit = formData => {\n    \n    var commitMessage = formData.commitMsg.trim();\n    if(commitMessage.length === 0) {\n        alert(\"You must enter a commit message!\");\n        return;\n    }\n    \n    if((!instructionList)||(instructionList.length === 0)) {\n        alert(\"There is no data to commit.\");\n        return;\n    }\n    \n    commitPromise = micentityDataAccess.getCommitPromise(instructionList,commitMessage,login.sessionKey);\n    \n    //set the response\n    apogeeMessenger.asynchDataUpdate(\"commitResponse\",commitPromise);\n};\n\n//use \"cancel\" action for \"clear\"\nvar onClear = () => {\n    //set the response\n    apogeeMessenger.dataUpdate(\"commitResponse\",\"\");\n}\n\n//make the layou\nvar layout = [];\n\n//commit msg\nentry = {};\nentry.type = \"textarea\";\nentry.label = \"Commit Msg: \";\nentry.cols = 50;\nentry.rows = 8;\nentry.key = \"commitMsg\";\nlayout.push(entry);\n\n\n//ad submit button to layout\nentry = {};\nentry.type = \"submit\";\nentry.onSubmit = onSubmit;\nentry.onCancel = onClear;\nentry.cancelLabel = \"Clear\";\nlayout.push(entry);\n\nreturn layout;","supplementalCode":"","description":""}}}},"login":{"name":"login","type":"apogee.Folder","children":{"loginUrl":{"name":"loginUrl","type":"apogee.JsonTable","updateData":{"data":"https://eng.micello.com/TestAuthorization/loginjson","description":""}},"sessionResponse":{"name":"sessionResponse","type":"apogee.JsonTable","updateData":{"data":"","description":""}},"sessionKey":{"name":"sessionKey","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(sessionResponse.sessionKey) {\n    return sessionResponse.sessionKey;\n}\nelse if(sessionResponse.responseCode < 0) {\n    throw new Error(\"Error in login: \" + sessionResponse.message);\n}\nelse {\n    return \"LOGIN NEEDED!\";\n}","supplementalCode":"","description":""}},"loginControl":{"name":"loginControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var onSubmit = (formData) => {\n    \n    if(formData.userName.length == 0) {\n        alert(\"A user name must be entered\");\n        return;\n    }\n    \n    //on click\n    var bodyJson = {};\n    bodyJson.userName = formData.userName;\n    bodyJson.password = formData.password;\n    \n    var options = {};\n    options.body = JSON.stringify(bodyJson);\n    options.method = \"POST\";\n    \n    var requestPromise = apogee.net.jsonRequest(loginUrl,options);\n    \n    //set the response\n    apogeeMessenger.asynchDataUpdate(\"sessionResponse\",requestPromise);\n    \n    //this clears the password...\n    apogeeMessenger.dataUpdate(\"savedUserName\",formData.userName);\n}\n\nvar layout = [];\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Login\";\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"User Name: \";\nentry.key = \"userName\";\nentry.value = savedUserName;\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Password: \";\nentry.password = true;\nentry.key = \"password\";\nlayout.push(entry);\n\n//suvbmit (no cancel)\nentry = {};\nentry.type = \"submit\";\nentry.onSubmit = onSubmit;\nlayout.push(entry);\n\nreturn layout;\n","supplementalCode":"","description":""}},"savedUserName":{"name":"savedUserName","type":"apogee.JsonTable","updateData":{"data":"","description":""}}}},"settingsReloadTrigger":{"name":"settingsReloadTrigger","type":"apogee.JsonTable","updateData":{"data":"","description":""}},"settings":{"name":"settings","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"\n//---------------------------------------\n//this is a cludge to make the form reload\n//we probably need a better way to do this\nvar dummy = settingsReloadTrigger;\n//----------------------------------------\n\nvar onSubmit = (formData) => {\n    \n    var loginUrl = formData.loginUrl.trim();\n    var dataUrl = formData.dataUrl.trim();\n    \n    if((loginUrl.length === 0)||(dataUrl.length === 0)) {\n        alert(\"The login URL and data URL must be set!\");\n        return;\n    }\n    \n    var updateList = [];\n    updateList.push([\"login.loginUrl\",formData.loginUrl]);\n    updateList.push([\"micentityDataAccess.host\",formData.dataUrl]);\n    apogeeMessenger.compoundDataUpdate(updateList);\n}\n\nvar onReset = () => {\n    apogeeMessenger.dataUpdate(\"settingsReloadTrigger\",\"\");\n}\n\nvar layout = [];\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Settings\";\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Login URL: \";\nentry.size = 80;\nentry.value = login.loginUrl;\nentry.key = \"loginUrl\";\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Data URL: \";\nentry.size = 80;\nentry.value = micentityDataAccess.host;\nentry.key = \"dataUrl\";\nlayout.push(entry);\n\n//suvbmit (no cancel)\nentry = {};\nentry.type = \"submit\";\nentry.onSubmit = onSubmit;\nentry.onCancel = onReset;\nentry.cancelLabel = \"Reset\";\nlayout.push(entry);\n\nreturn layout;\n","supplementalCode":"","description":""}},"working":{"name":"working","type":"apogee.Folder","children":{}}}}},"components":{"type":"apogeeapp.app.FolderComponent","tabOpen":true,"treeState":1,"children":{"micentityDataAccess":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":294,"y":29}},"treeState":-1,"children":{"createRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":560,"height":321},"posInfo":{"x":32,"y":420},"state":-1,"viewType":"Code"}},"recordsToCreateInstructions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":834,"height":391},"posInfo":{"x":32,"y":467},"state":-1,"viewType":"Code"}},"createCommitBody":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":568,"height":400},"posInfo":{"x":786,"y":273},"state":-1,"viewType":"Code"}},"createRequestOptions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":523,"height":254},"posInfo":{"x":786,"y":321},"state":-1,"viewType":"Code"}},"host":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":353,"height":71},"posInfo":{"x":18,"y":11},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"commitUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":433,"height":-4},"posInfo":{"x":22,"y":60},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"requestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":450,"height":4},"posInfo":{"x":22,"y":101},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"createUpdateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":886,"height":655},"posInfo":{"x":36,"y":247},"state":-1,"viewType":"Code"}},"createCreateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":994,"height":643},"posInfo":{"x":35,"y":209},"state":-1,"viewType":"Code"}},"getFieldErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":512,"height":68},"posInfo":{"x":761,"y":616},"state":-1,"viewType":"Code"}},"getRecordErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":81},"posInfo":{"x":762,"y":664},"state":-1,"viewType":"Code"}},"createDeleteInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":678,"height":540},"posInfo":{"x":36,"y":289},"state":-1,"viewType":"Code"}},"getRecordInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":480,"height":400},"posInfo":{"x":788,"y":372},"state":-1,"viewType":"Code"}},"combinedEntriesToInstructionList":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":721,"height":524},"posInfo":{"x":32,"y":512},"state":-1,"viewType":"Private"}},"getCommitPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":741,"height":400},"posInfo":{"x":292,"y":61},"state":-1,"viewType":"Code"}},"getRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":810,"height":400},"posInfo":{"x":292,"y":16},"state":-1,"viewType":"Code"}},"dataSetInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":1064,"height":611},"posInfo":{"x":291,"y":144},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"getEntityRequest":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":492,"height":400},"posInfo":{"x":34,"y":601},"state":-1,"viewType":"Code"}},"getCustomCommitPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":582,"height":400},"posInfo":{"x":292,"y":100},"state":-1,"viewType":"Code"}}}},"commit":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":25,"y":25}},"tabOpen":true,"treeState":-1,"children":{"commitResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":617,"height":218},"posInfo":{"x":664,"y":520},"state":0,"viewType":"Data"},"dataView":"Colorized"},"updatedRecords":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":536,"height":241},"posInfo":{"x":148,"y":52},"state":0,"viewType":"Data"},"dataView":"Colorized"},"createdRecords":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":536,"height":228},"posInfo":{"x":344,"y":176},"state":0,"viewType":"Data"},"dataView":"Colorized"},"instructionList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":869,"height":575},"posInfo":{"x":940,"y":380},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"deletedRecords":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":533,"height":245},"posInfo":{"x":849,"y":72},"state":0,"viewType":"Data"},"dataView":"Colorized"},"preUpdatedRecords":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":535,"height":237},"posInfo":{"x":34,"y":177},"state":0,"viewType":"Data"},"dataView":"Colorized"},"submitForm":{"type":"apogeeapp.app.DynamicForm","windowState":{"sizeInfo":{"width":559,"height":184},"posInfo":{"x":32,"y":512},"state":0,"viewType":"Output"}}}},"login":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":28,"y":120}},"tabOpen":true,"treeState":-1,"children":{"loginUrl":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":463,"height":46},"posInfo":{"x":41,"y":35},"state":0,"viewType":"Text"}},"sessionResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":697,"height":217},"posInfo":{"x":48,"y":356},"state":0,"viewType":"Data"},"dataView":"Colorized"},"sessionKey":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":383,"height":242},"posInfo":{"x":55,"y":628},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"loginControl":{"type":"apogeeapp.app.DynamicForm","windowState":{"sizeInfo":{"width":357,"height":177},"posInfo":{"x":41,"y":126},"state":0,"viewType":"Output"}},"savedUserName":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":272,"height":61},"posInfo":{"x":578,"y":20},"state":0,"viewType":"Data"},"dataView":"Colorized"}}},"settingsReloadTrigger":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":512,"y":29},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"settings":{"type":"apogeeapp.app.DynamicForm","windowState":{"sizeInfo":{"width":717,"height":203},"posInfo":{"x":35,"y":185},"state":0,"viewType":"Output"}},"working":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":25,"y":73}},"tabOpen":true,"children":{}}}},"activeTabMember":"Model.login"}