{"fileType":"apogee app js workspace","version":"0.40","references":[],"workspace":{"fileType":"apogee workspace","version":0.2,"name":"editMetaDataWebApp","data":{"name":"Model","type":"apogee.Folder","children":{"tasks":{"name":"tasks","type":"apogee.Folder","children":{"commonData":{"name":"commonData","type":"apogee.Folder","children":{"fileTypeList":{"name":"fileTypeList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var sessionKey = login.getSessionKey();\n\nvar fileTypeSearch = {};\nfileTypeSearch.search = \"file_type_list\";\n\nreturn micemetarDataAccess.getRequestPromise(fileTypeSearch,sessionKey);\n\n","supplementalCode":"","description":""}},"fileTypeIdToName":{"name":"fileTypeIdToName","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!fileTypeList) return apogee.util.INVALID_VALUE;\nif(!fileTypeList.success) throw new Error(\"Error loading file type list: \" + fileTypeList.msg);\n\nvar output = {};\n\nvar addToMap = (record) => {output[record.Id] = record.Fields.file_type_name;}\n\nfileTypeList.data.Response.forEach(addToMap);\n\nreturn output;","supplementalCode":"","description":""}},"fileTypeNameToId":{"name":"fileTypeNameToId","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!fileTypeList) return apogee.util.INVALID_VALUE;\nif(!fileTypeList.success) throw new Error(\"Error loading file type list: \" + fileTypeList.msg);\n\nvar output = {};\n\nvar addToMap = (record) => {output[record.Fields.file_type_name] = record.Id;}\n\nfileTypeList.data.Response.forEach(addToMap);\n\nreturn output;","supplementalCode":"","description":""}},"customerInfo":{"name":"customerInfo","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"const url = settings.data.customerFileUrl;\nreturn apogee.net.jsonRequest(url);","supplementalCode":"","description":""}},"INACTIVE_LAYOUT":{"name":"INACTIVE_LAYOUT","type":"apogee.JsonTable","updateData":{"data":{"lines":[{"type":"title","title":"inactive"}]},"description":""}},"DUMMY_DROPDOWN_ENTRY":{"name":"DUMMY_DROPDOWN_ENTRY","type":"apogee.JsonTable","updateData":{"data":"---","description":""}},"GLOBAL_CONTEXT":{"name":"GLOBAL_CONTEXT","type":"apogee.JsonTable","updateData":{"data":"public","description":""}},"CID_CONTEXT_PREFIX":{"name":"CID_CONTEXT_PREFIX","type":"apogee.JsonTable","updateData":{"data":"com_","description":""}},"DEFAULT_COM_FILE_NAME":{"name":"DEFAULT_COM_FILE_NAME","type":"apogee.JsonTable","updateData":{"data":"Standard","description":""}},"DEFAULT_META_FILE_NAME":{"name":"DEFAULT_META_FILE_NAME","type":"apogee.JsonTable","updateData":{"data":"Standard","description":""}},"getFileTypeName":{"name":"getFileTypeName","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeId"],"functionBody":"return fileTypeIdToName[fileTypeId];","supplementalCode":"","description":""}},"getFileTypeId":{"name":"getFileTypeId","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeName"],"functionBody":"return commonData.fileTypeNameToId[fileTypeName];","supplementalCode":"","description":""}}}},"login":{"name":"login","type":"apogee.Folder","children":{"loginUrl":{"name":"loginUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return settings.data.loginUrl;","supplementalCode":"","description":""}},"sessionResponse":{"name":"sessionResponse","type":"apogee.JsonTable","updateData":{"data":"","description":""}},"savedUserName":{"name":"savedUserName","type":"apogee.JsonTable","updateData":{"data":"","description":""}},"loginControl":{"name":"loginControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var onSubmit = (formData) => {\n    \n    //on click\n    var bodyJson = {};\n    bodyJson.userName = formData.userName;\n    bodyJson.password = formData.password;\n    \n    var options = {};\n    options.body = JSON.stringify(bodyJson);\n    options.method = \"POST\";\n    \n    var requestPromise = apogee.net.jsonRequest(loginUrl,options);\n    \n    //set the response\n    apogeeMessenger.asynchDataUpdate(\"sessionResponse\",requestPromise);\n    \n    //this clears the password...\n    apogeeMessenger.dataUpdate(\"savedUserName\",formData.userName);\n}\n\nvar onClear = () => {\n    var data = [];\n    data.push([\"savedUserName\",null]);\n    data.push([\"sessionResponse\",null]);\n    apogeeMessenger.compoundDataUpdate(data);\n}\n\nvar layout = [];\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Login\";\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"User Name: \";\nentry.key = \"userName\";\nentry.value = savedUserName;\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Password: \";\nentry.password = true;\nentry.key = \"password\";\nlayout.push(entry);\n\n//suvbmit\nentry = {};\nentry.type = \"submit\";\nentry.onSubmit = onSubmit;\nentry.onCancel = onClear;\nentry.cancelLabel = \"Clear\";\nlayout.push(entry);\n\nreturn layout;\n","supplementalCode":"","description":""}},"appendQueryParams":{"name":"appendQueryParams","type":"apogee.FunctionTable","updateData":{"argList":["inUrl"],"functionBody":"if((!sessionResponse)||(!sessionResponse.paramTable)) {\n    throw new Error(\"Param table not loaded!\");\n}\n\nvar isMatchingKey = (paramEntry) => inUrl.startsWith(paramEntry.urlPattern);\n\nvar paramEntry = sessionResponse.paramTable.find(isMatchingKey);\n\nif(paramEntry) {\n    if(paramEntry.params.length > 1) {\n        throw new Error(\"Code only supports 1 appended parameter. (Is an easy fi to add more)\")\n    }\n    else if(paramEntry.params.length === 1) {\n        return inUrl + \"?\" + paramEntry.params[0][0] + \"=\" + paramEntry.params[0][1];\n    }\n}\n      \n//no params to add\nreturn inUrl;\n","supplementalCode":"","description":""}},"getSessionKey":{"name":"getSessionKey","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"if((sessionResponse)&&(sessionResponse.sessionKey)) {\n    return sessionResponse.sessionKey;\n}\nelse {\n    return apogee.util.invalidFunctionReturn();\n}","supplementalCode":"","description":""}},"loginResult":{"name":"loginResult","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var msg;\n\nif(!sessionResponse) {\n    msg = \"Login Needed!\";\n    style = \"color:red\";\n}\nelse if(sessionResponse.responseCode == 1) {\n    msg = \"Login Success\";\n    style = \"color:blue\";\n}\nelse {\n    msg = \"Login Failure: \" + sessionResponse.message;\n    style = \"color:red\";\n}\n\nvar textEntry = {};\ntextEntry.type = \"htmlDisplay\";\ntextEntry.html = \"<span style='\" + style + \"' + >\" + msg + \"</span>\";\n\nreturn [textEntry];\n","supplementalCode":"","description":""}}}},"loadContext":{"name":"loadContext","type":"apogee.Folder","children":{"contexts":{"name":"contexts","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var data = {};\n\nvar cidCustomerContext;\n\nif((selectContext.data)&&(selectContext.data.fileScope)) {\n    switch(selectContext.data.fileScope) {\n        case \"general\":\n            data.fileContext = commonData.GLOBAL_CONTEXT;\n            break;\n            \n        case \"customer\":\n            if(selectContext.data.customerPanel) {\n                data.fileContext = selectContext.data.customerPanel.customerAuth;\n            }\n            break;\n            \n        case \"cid\":\n            if(selectContext.data.cidPanel) {\n                var cid = parseInt(selectContext.data.cidPanel.cid);\n                if((cid)&&(cid > 0)) {\n                    data.fileContext = commonData.CID_CONTEXT_PREFIX + cid\n                }\n                else {\n                    throw new Error(\"Invalid CID!\");\n                }\n                \n                if(selectContext.data.cidPanel.customerAuth != \"\") {\n                    cidCustomerContext = selectContext.data.cidPanel.customerAuth;\n                }\n            }\n            break;\n    }\n    \n    //add additoinal contexts\n    data.otherContexts = [];\n    \n    var addToOtherContexts = context => {\n        if(data.otherContexts.indexOf(context) < 0) {\n            data.otherContexts.push(context);\n        }\n    }\n    \n    if(selectContext.data.additionalContexts) {\n        var additionalContexts = selectContext.data.additionalContexts.split(/[\\s,]+/);\n        additionalContexts.forEach(addToOtherContexts);\n    }\n    \n    if(data.fileContext != commonData.GLOBAL_CONTEXT) {\n        addToOtherContexts(commonData.GLOBAL_CONTEXT);\n    }\n    \n    if(cidCustomerContext) {\n        if(data.otherContexts.indexOf(cidCustomerContext) < 0) {\n            data.otherContexts.push(cidCustomerContext);\n        }\n    }\n    \n    \n}\n\nif(data.fileContext) {\n    return data;\n}\nelse {\n    return apogee.util.INVALID_VALUE;\n}\n","supplementalCode":"","description":""}},"selectContext":{"name":"selectContext","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"\n//------------\n//create layout\n//------------\nvar layout = [];\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Select Metafile Context\";\nlayout.push(entry);\n\n//section\nvar DEFAULT_FILE_SCOPE = \"customer\";\nentry = {};\nentry.type = \"dropdown\";\nentry.label = \"File Scope: \";\nentry.key = \"fileScope\";\nentry.entries = FILE_SCOPE_NAMES;\n//---------------------\n//temp - set this to an invalid value so the user must enter something\n//as of when this was written, the initial form never has the save button\nentry.value = \"\"\n//--------------------\nlayout.push(entry);\n\n//panels\nvar childFormData;\n\n//==================\n//general scope panel\n//==================\nchildFormData = [];\n\nentry = {};\nentry.type = \"panel\";\nentry.formData = childFormData;\nentry.key = \"generalPanel\";\nentry.selector = {\n    parentKey: \"fileScope\",\n    parentValue: \"general\"\n}\n//entry.state = (entry.key == activePanelKey) ? apogeeapp.ui.ConfigurableElement.STATE_NORMAL : apogeeapp.ui.ConfigurableElement.STATE_INACTIVE;\nlayout.push(entry);\n\n//==================\n//customer scope panel\n//==================\nchildFormData = [];\n\n\n//customer name\nentry = {};\nentry.type = \"dropdown\";\nentry.label = \"Customer Name: \";\nentry.entries = _getCustomerList();\nentry.key = \"customerAuth\";\nchildFormData.push(entry);\n\nentry = {};\nentry.type = \"panel\";\nentry.formData = childFormData;\nentry.key = \"customerPanel\";\nentry.selector = {\n    parentKey: \"fileScope\",\n    parentValue: \"customer\"\n}\n//entry.state = (entry.key == activePanelKey) ? apogeeapp.ui.ConfigurableElement.STATE_NORMAL : apogeeapp.ui.ConfigurableElement.STATE_INACTIVE;\nlayout.push(entry);\n\n\n//==================\n//cid scope panel\n//==================\nchildFormData = [];\n\n//cid\nentry = {};\nentry.type = \"textField\";\nentry.label = \"CID: \";\nentry.key = \"cid\";\nchildFormData.push(entry);\n\n//customer name\nentry = {};\nentry.type = \"dropdown\";\nentry.label = \"Customer Name: \";\nentry.entries = _getCustomerListWithNullOption();\nentry.key = \"customerAuth\";\nchildFormData.push(entry);\n\nentry = {};\nentry.type = \"panel\";\nentry.formData = childFormData;\nentry.key = \"cidPanel\";\nentry.selector = {\n    parentKey: \"fileScope\",\n    parentValue: \"cid\"\n}\n//entry.state = (entry.key == activePanelKey) ? apogeeapp.ui.ConfigurableElement.STATE_NORMAL : apogeeapp.ui.ConfigurableElement.STATE_INACTIVE;\nlayout.push(entry);\n\n///////////////////////////////////////\n\n//additional\nentry = {};\nentry.type = \"textarea\";\nentry.label = \"Additional Contexts: \";\nentry.rows = 4;\nentry.cols = 30;\nentry.key = \"additionalContexts\";\nlayout.push(entry);\n\n\nreturn layout;\n","supplementalCode":"const FILE_SCOPE_NAMES = [[\"CID\",\"cid\"],[\"Customer\",\"customer\"],[\"General\",\"general\"]];\n\nfunction _getCustomerList() {\n    return commonData.customerInfo.map(entry => [entry.customerName,entry.authString]);\n}\n\nfunction _getCustomerListWithNullOption() {\n    var list = [];\n    list.push([commonData.DUMMY_DROPDOWN_ENTRY,\"\"]);\n    return list.concat(_getCustomerList());\n}","description":""}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":null,"description":""}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":"","description":""}}},"childrenNotWriteable":true},"getFileContext":{"name":"getFileContext","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"if(contexts) {\n    return contexts.fileContext;\n}\nelse {\n    return apogee.util.invalidFunctionReturn();\n}","supplementalCode":"","description":""}},"getOtherContexts":{"name":"getOtherContexts","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"if(contexts) {\n    return contexts.otherContexts;\n}\nelse {\n    return apogee.util.invalidFunctionReturn();\n}","supplementalCode":"","description":""}},"getAllContexts":{"name":"getAllContexts","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"var fileContext = getFileContext();\nvar otherContexts = getOtherContexts();\nif((fileContext)&&(otherContexts)) {\n    return [fileContext].concat(otherContexts);\n}\nelse {\n    return apogee.util.invalidFunctionReturn();\n}","supplementalCode":"","description":""}}}},"selectMetaFile":{"name":"selectMetaFile","type":"apogee.Folder","children":{"metaFileList":{"name":"metaFileList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var sessionKey = login.getSessionKey();\nvar context = loadContext.getFileContext();\n\nvar searchDef = {};\nsearchDef.search = \"meta_file_list\";\nsearchDef.file_context = context;\n\nreturn micemetarDataAccess.getRequestPromise(searchDef,sessionKey);\n\n","supplementalCode":"","description":""}},"metaFileFormEntries":{"name":"metaFileFormEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!metaFileList) {\n    return apogee.util.INVALID_VALUE;\n}\nelse if(!metaFileList.success) {\n    throw new Error(\"Error loading meta file list: \" + metaFileList.msg);\n}\nif(metaFileList && metaFileList.data && metaFileList.data.Response) {\n    return metaFileList.data.Response.map(_createFormEntry);\n}   \nelse {\n    return apogee.util.INVALID_VALUE;\n}","supplementalCode":"function _createFormEntry(record) {\n    var entry = [];\n    entry.push(_getRecordName(record));\n    entry.push(record.Id);\n    \n    return entry;\n}\n\nfunction _getRecordName(record) {\n    var fileType =  commonData.getFileTypeName(record.Fields.file_type_id);\n    var optionName = record.Fields.name;\n    \n    return fileType + \" (\" + optionName + \")\"\n}","description":""}},"selectMetaFile":{"name":"selectMetaFile","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"//------------\n//create layout\n//------------\nvar layout = [];\nvar entry;\n\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Select Metadata File\";\nlayout.push(entry);\n\n//input dependencies\nvar contexts = loadContext.getAllContexts();\nentry = {};\nentry.type = \"invisible\";\nentry.value = contexts;\nentry.key = \"contexts\"\nlayout.push(entry);\n\n//verify existing input dependencies are still the same\nif((contexts)&&(data)) {\n    var cachedContexts = data.contexts;\n    if((cachedContexts)&&(!_unorderedArrayMatch(contexts,cachedContexts))) {\n        _resetCachedData(apogeeMessenger);\n    }\n}\n\n//section\nvar DEFAULT_CREATE_OR_UPDATE = \"update\";\nentry = {};\nentry.type = \"radioButtonGroup\";\nentry.groupName = \"corg\";\nentry.key = \"createOrUpdate\";\nentry.entries = TASK_NAMES;\nentry.horizontal = true;\nentry.value = DEFAULT_CREATE_OR_UPDATE;\nlayout.push(entry);\n\n//horizontal rule\nentry = {};\nentry.type = \"htmlDisplay\";\nentry.html = \"<hr>\";\nlayout.push(entry);\n\n//panels\n\n\n//==================\n//create panel\n//==================\nchildFormData = [];\n\n//create\nentry = {};\nentry.type = \"dropdown\";\nentry.label = \"File Type: \";\nentry.entries = FILE_TYPES;\nentry.key = \"fileType\";\nchildFormData.push(entry);\n\nentry = {};\nentry.type = \"radioButtonGroup\";\nentry.groupName = \"boro\";\nentry.key = \"baseOrOverride\";\nentry.entries = [[\"Base\",\"base\"],[\"Override\",\"override\"]];\nentry.horizontal = true;\nentry.value = \"\";\nchildFormData.push(entry);\n\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Meta File Name: \";\nentry.key = \"name\";\nchildFormData.push(entry);\n\nentry = {};\nentry.type = \"panel\";\nentry.formData = childFormData;\nentry.key = \"createPanel\";\nentry.selector = {\n    parentKey: \"createOrUpdate\",\n    parentValue: \"create\"\n}\nlayout.push(entry);\n\n\n//==================\n//update panel\n//==================\nchildFormData = [];\n\n//update\nvar updateEntryOptions = [[\"---\",null]].concat(metaFileFormEntries);\nentry = {};\nentry.type = \"dropdown\";\nentry.label = \"Meta File: \";\nentry.entries = updateEntryOptions;\nentry.key = \"metaFileId\";\nentry.value = null;\nchildFormData.push(entry);\n\nentry = {};\nentry.type = \"panel\";\nentry.formData = childFormData;\nentry.key = \"updatePanel\";\nentry.selector = {\n    parentKey: \"createOrUpdate\",\n    parentValue: \"update\"\n}\nlayout.push(entry);\n\n///////////////////////////////////////\n\n//horizontal rule\nentry = {};\nentry.type = \"htmlDisplay\";\nentry.html = \"<hr>\";\nlayout.push(entry);\n\n\nreturn {layout:layout};\n","supplementalCode":"const TASK_NAMES = [[\"Create\",\"create\"],[\"Update\",\"update\"]];\n\nconst FILE_TYPES = [[\"Property Rules\",\"propertyRules\"],[\"Theme Rules\",\"themeRules\"],[\"Theme\",\"theme\"],[\"Strings\",\"strings\"],[\"Input Colors\",\"inputColors\"]];\n\nfunction _unorderedArrayMatch(contexts,cachedContexts) {\n    if(contexts.length != cachedContexts.length) return false;\n    if(contexts.some(context => cachedContexts.indexOf(context) < 0)) return false;\n    return true;\n}\n\nfunction _resetCachedData(apogeeMessenger) {\n    apogeeMessenger.dataUpdate(\"data\",null);\n}","description":""}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":null,"description":""}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"const FILE_TYPES = [\"propertyRules\",\"themeRules\",\"theme\",\"strings\",\"inputColors\"]; \n\nconsole.log(JSON.stringify(formValue));\n\n//If data valid, return true. If data is invalid, return an error message.\nif(formValue.createOrUpdate == \"create\") {\n    if(!formValue.createPanel) return \"Unknown form error!\";\n    \n    //check the file type is valid\n    var fileTypeIndex = FILE_TYPES.indexOf(formValue.createPanel.fileType);\n    if(fileTypeIndex < 0) return \"Please select a FILE TYPE\";\n    \n    //check base or override valid\n    var baseOrOverride = formValue.createPanel.baseOrOverride;\n    if((baseOrOverride != \"base\")&&(baseOrOverride != \"override\")) return \"Please select BASE or OVERRIDE\";\n\n    //check file name\n    var name = (formValue.createPanel.name).trim();\n    if((!name)||(name.length == 0)) return \"Please enter a META FILE NAME\";\n    \n}\nelse if(formValue.createOrUpdate == \"update\") {\n    if(!formValue.updatePanel) return \"Unknown form error!\";\n    \n    if((!formValue.updatePanel.metaFileId)||(!isFinite(formValue.updatePanel.metaFileId))) return \"Please select a FILE\";\n}\nelse {\n    return \"Please select CREATE or UPDATE\";    \n}\n\nreturn true;\n","supplementalCode":"","description":""}}},"childrenNotWriteable":true},"createMetaFileFields":{"name":"createMetaFileFields","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(createOrUpdate == \"create\") {\n    if(selectMetaFile.data.createPanel) {\n        var fields = {};\n        fields.file_type_id = commonData.getFileTypeId(selectMetaFile.data.createPanel.fileType);\n        fields.file_context = loadContext.getFileContext();\n        fields.name = selectMetaFile.data.createPanel.name;\n        fields.use_type = selectMetaFile.data.createPanel.baseOrOverride;\n        return fields;\n    }\n    else {\n        return apogee.util.INVALID_VALUE;\n    }\n    \n}\nelse if(createOrUpdate == \"update\") {\n    return {};\n}\nelse {\n    return apogee.util.INVALID_VALUE;\n}","supplementalCode":"","description":""}},"createOrUpdate":{"name":"createOrUpdate","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!selectMetaFile.data) {\n    return apogee.util.INVALID_VALUE;\n}\n\nswitch(selectMetaFile.data.createOrUpdate) {\n    case \"create\":\n    case \"update\":\n        return selectMetaFile.data.createOrUpdate;\n        \n    default:\n        return apogee.util.INVALID_VALUE;\n}","supplementalCode":"","description":""}},"activeMetaFileRecord":{"name":"activeMetaFileRecord","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((createOrUpdate == \"update\")&&\n    (selectMetaFile.data.updatePanel)&&\n    (metaFileList)&&\n    (metaFileList.success)) {\n        \n    var selectedId = parseInt(selectMetaFile.data.updatePanel.metaFileId);\n\n    return metaFileList.data.Response.find( record => (record.Id == selectedId));\n}\nelse if((createOrUpdate == \"create\")&&\n    (createMetaFileFields != null)) {\n    return micemetarDataAccess.createRecord(\"meta_file\",createMetaFileFields);\n}\nelse {\n    return apogee.util.INVALID_VALUE;\n}","supplementalCode":"","description":""}},"getCreateOrUpdate":{"name":"getCreateOrUpdate","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return createOrUpdate;","supplementalCode":"","description":""}},"getActiveMetaFileRecord":{"name":"getActiveMetaFileRecord","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return activeMetaFileRecord;","supplementalCode":"","description":""}},"metaFileDownload":{"name":"metaFileDownload","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var sessionKey = login.getSessionKey();\n\nif(createOrUpdate == \"update\") {\n    if(activeMetaFileRecord) {\n        var id = activeMetaFileRecord.Id;\n        \n        var searchDef = {};\n        searchDef.search = \"meta_file_short\";\n        searchDef.id = id;\n        \n        return micemetarDataAccess.getRequestPromise(searchDef,sessionKey);\n    }\n    else {\n        return apogee.util.INVALID_VALUE;\n    }\n}\nelse if(createOrUpdate == \"create\") {\n    return null;\n}\nelse {\n    return apogee.util.INVALID_VALUE;\n}","supplementalCode":"","description":""}},"initialParentEntryList":{"name":"initialParentEntryList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(createOrUpdate == \"update\") {\n\n    if((metaFileDownload)&&(metaFileDownload.success)) {\n        var isParentEntry = record => (record.Type == \"meta_parent_entry\");\n        return metaFileDownload.data.Records.filter(isParentEntry);\n    }\n    else {\n        return apogee.util.INVALID_VALUE;\n    }\n}\nelse if(createOrUpdate == \"create\") {\n    return [];\n}\nelse {\n    result = apogee.util.INVALID_VALUE;\n}","supplementalCode":"","description":""}},"initialRecipeEntryList":{"name":"initialRecipeEntryList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(createOrUpdate == \"update\") {\n\n    if((metaFileDownload)&&(metaFileDownload.success)) {\n        var isRecipeEntry = record => (record.Type == \"recipe_entry\");\n        return metaFileDownload.data.Records.filter(isRecipeEntry);\n    }\n    else {\n        return apogee.util.INVALID_VALUE;\n    }\n}\nelse if(createOrUpdate == \"create\") {\n    return [];\n}\nelse {\n    return apogee.util.INVALID_VALUE;\n}","supplementalCode":"","description":""}},"getInitialRecipeEntryList":{"name":"getInitialRecipeEntryList","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return initialRecipeEntryList;","supplementalCode":"","description":""}},"getInitialParentEntryList":{"name":"getInitialParentEntryList","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return initialParentEntryList;","supplementalCode":"","description":""}}}},"editMetaFile":{"name":"editMetaFile","type":"apogee.Folder","children":{"fileTypeEntryList":{"name":"fileTypeEntryList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var sessionKey = login.getSessionKey();\n\nvar activeMetaFileEntry = selectMetaFile.getActiveMetaFileRecord();\n\nvar searchDef = {};\nsearchDef.search = \"file_type_entries\";\nsearchDef.id = activeMetaFileEntry.Fields.file_type_id;\n\n//here we are loading all file entries for the given file type\n//we will filter by context later\n//as an alternative, we could load all contexts specifically\nreturn micemetarDataAccess.getRequestPromise(searchDef,sessionKey);\n\n","supplementalCode":"","description":""}},"insertionInfoOptions":{"name":"insertionInfoOptions","type":"apogee.JsonTable","updateData":{"data":{"themeRules":[{"title":"Priority 0","insertionInfo":{"orderedEntry":0}},{"title":"Priority 1","insertionInfo":{"orderedEntry":1}},{"title":"Priority 2","insertionInfo":{"orderedEntry":2}},{"title":"Priority 3","insertionInfo":{"orderedEntry":3}},{"title":"Priority 4","insertionInfo":{"orderedEntry":4}},{"title":"Priority 5","insertionInfo":{"orderedEntry":5}}],"default":[{"title":"","insertionInfo":null}]},"description":""}},"availableFileEntries":{"name":"availableFileEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((!fileTypeEntryList)||(!fileTypeEntryList.success)) return apogee.util.INVALID_VALUE;\n\nvar allContexts = loadContext.getAllContexts();\n\nvar activeMetaFileRecord = selectMetaFile.getActiveMetaFileRecord();\n\nvar isFileEntry = (record) => (record.Type == \"file_entry\");\nvar isProperType = (record) => (record.Fields.file_type_id == activeMetaFileRecord.Fields.file_type_id);\n\n\nvar allowedContextMap = _getAllowedContextMap(allContexts);\nvar isAllowedContext = record => allowedContextMap[record.Fields.entry_context]\n\n//we will take all entries from the file entry list making sure it is an actual\n//file entry and that it matches the allowed contexts from \"dependentContexts\"\nreturn fileTypeEntryList.data.Records.filter(isFileEntry).filter(isProperType).filter(isAllowedContext);","supplementalCode":"function _getAllowedContextMap(contextList) {\n    var allowedContextMap = {}; \n    contextList.forEach(context => allowedContextMap[context] = true);\n    return allowedContextMap;\n}","description":""}},"initialRecipeEntryInfo":{"name":"initialRecipeEntryInfo","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var activeMetaFileRecord = selectMetaFile.getActiveMetaFileRecord();\nvar recipeList = selectMetaFile.getInitialRecipeEntryList();\nif((activeMetaFileRecord)&&(recipeList)) {\n    var result = {};\n    result.fileEntryMapOfRecipeEntries = {};\n    result.metaFileId = activeMetaFileRecord.Id;\n    \n    var addToMap = record => result.fileEntryMapOfRecipeEntries[record.Fields.file_entry_id] = record;\n    \n    recipeList.forEach(addToMap);\n    return result;\n}\nelse {\n    return apogee.util.INVALID_VALUE;\n}","supplementalCode":"","description":""}},"activeInsertionInfoOptions":{"name":"activeInsertionInfoOptions","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var activeMetaFileRecord = selectMetaFile.getActiveMetaFileRecord();\n\nvar fileTypeName = commonData.getFileTypeName(activeMetaFileRecord.Fields.file_type_id);\n\nvar options = insertionInfoOptions[fileTypeName];\nif(options) return options;\n\noptions = insertionInfoOptions[\"default\"];\nreturn options;","supplementalCode":"","description":""}},"updatedEntries":{"name":"updatedEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var result = {};\nresult.created = [];\nresult.deleted = [];\nresult.updated = [];\n\nvar selectedFileEntryInfo = selectEntriesControl.data;\n\nif((selectedFileEntryInfo)&&(initialRecipeEntryInfo)\n    &&(selectedFileEntryInfo.selectedMap)\n    &&(selectedFileEntryInfo.metaFileId == initialRecipeEntryInfo.metaFileId)) {\n        \n    //create a single data structure that includes the file entry and existing recipe entries\n    var combinedEntries = _createCombinedEntries(initialRecipeEntryInfo,selectedFileEntryInfo.selectedMap);\n\n    //add meta file, if it is new\n    var activeMetaFile = selectMetaFile.getActiveMetaFileRecord();\n    if(activeMetaFile.Id < 0) {\n        result.created.push(activeMetaFile);\n    }\n\n    //add recipe entries\n    var addToResult = combinedEntry => {\n        if((combinedEntry.selected)&&(!combinedEntry.recipeEntry)) {\n            //newly selected record\n            var newRecord = _createRecipeEntry(selectedFileEntryInfo.metaFileId,combinedEntry.fileEntryId,combinedEntry.insertionInfo);\n            result.created.push(newRecord);\n        }\n        else if((!combinedEntry.selected)&&(combinedEntry.recipeEntry)) {\n            //non-selected recipe entry\n            //file entry removed from meta file\n            result.deleted.push(combinedEntry.recipeEntry);\n        }\n        else if((combinedEntry.selected)&&(combinedEntry.recipeEntry)) {\n            //check for a change in insertion info!\n            //different format here - save the initial and final record\n            if(!apogee.util.jsonEquals(combinedEntry.recipeEntry.Fields.insertion_info,combinedEntry.insertionInfo)) {\n                //modified insertion info\n                var oldRecord = combinedEntry.recipeEntry;\n                var newRecord = apogee.util.jsonCopy(oldRecord);\n                newRecord.Fields.insertion_info = combinedEntry.insertionInfo;\n                result.updated.push({\"oldEntry\":oldRecord,\"newEntry\":newRecord})\n            }\n        }\n    }\n\n\n    for(var fileEntryId in combinedEntries) {\n        addToResult(combinedEntries[fileEntryId]);\n    }\n}\n\nreturn result;","supplementalCode":"\nfunction _createCombinedEntries(initialRecipeEntryInfo,selectedMap) {\n    var combinedEntries = {};\n    \n    //add existing recipe entries to combined entries\n    for(var fileIdString in initialRecipeEntryInfo.fileEntryMapOfRecipeEntries) {\n        _addRecipeEntryToCombinedEntry(combinedEntries,initialRecipeEntryInfo.fileEntryMapOfRecipeEntries[fileIdString]);\n    }\n\n    //add selected file entries to combined entries\n    for(var fileIdString in selectedMap) {\n         _addFileEntryIdToCombinedEntry(combinedEntries,fileIdString,selectedMap[fileIdString]);\n    }\n    \n    return combinedEntries;\n}\n\nfunction _addRecipeEntryToCombinedEntry(combinedEntries, recipeEntry) {\n    var fileEntryId = recipeEntry.Fields.file_entry_id;\n    \n    var combinedEntry = combinedEntries[fileEntryId];\n    if(!combinedEntry) {\n        combinedEntry = {};\n        combinedEntry.fileEntryId = fileEntryId;\n        combinedEntries[fileEntryId] = combinedEntry;\n    }\n    \n    //make sure we don't already have a recipe for this (this shouldn't happen) \n    if(combinedEntry.recipeEntry) throw new Error(\"Something is wrong - repeat recipe entry!\");\n    \n    combinedEntry.recipeEntry = recipeEntry; \n}\n\nfunction _addFileEntryIdToCombinedEntry(combinedEntries,fileEntryId,selectedEntry) {\n\n    var combinedEntry = combinedEntries[fileEntryId];\n    if(!combinedEntry) {\n        combinedEntry = {};\n        combinedEntry.fileEntryId = fileEntryId;\n        combinedEntries[fileEntryId] = combinedEntry;\n    }\n    \n    combinedEntry.selected = true;\n    combinedEntry.insertionInfo = selectedEntry.insertionInfo;\n}\n\nfunction _createRecipeEntry(metaFileId,fileEntryId,insertionInfo) {\n    var fields = {};\n    fields.file_entry_id = fileEntryId;\n    fields.meta_file_id = metaFileId;\n    fields.insertion_info = insertionInfo;\n    \n    return micemetarDataAccess.createRecord(\"recipe_entry\",fields);\n}","description":""}},"getUpdatedRecipeEntries":{"name":"getUpdatedRecipeEntries","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return updatedEntries;","supplementalCode":"","description":""}},"selectEntriesControl":{"name":"selectEntriesControl","type":"apogee.Folder","children":{"input":{"name":"input","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if( (!availableFileEntries) ||\n    (!initialRecipeEntryInfo) ||\n    (!activeInsertionInfoOptions)) {\n    return null;\n}\n\nvar data = {};\ndata.availableFileEntries = availableFileEntries;\ndata.initialRecipeEntryInfo = initialRecipeEntryInfo;\ndata.activeInsertionInfoOptions = activeInsertionInfoOptions;\n\nreturn data;","supplementalCode":"","description":""}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":null,"description":""}}},"childrenNotWriteable":true}}},"commit":{"name":"commit","type":"apogee.Folder","children":{"commitResponse":{"name":"commitResponse","type":"apogee.JsonTable","updateData":{"data":"","description":""}},"instructionList":{"name":"instructionList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var activeMetaFileRecord = selectMetaFile.getActiveMetaFileRecord();\n\nvar combinedEntries = {};\n\n//add methods\nvar addCreatedToCombined = createdRecord => {\n    if(combinedEntries[createdRecord.Id]) throw new Error(\"Repeat entry for ID: \" + createdRecord.Id);\n    \n    combinedEntries[createdRecord.Id] = {\"newEntry\":createdRecord};\n}\n\nvar addDeletedToCombined = deletedRecord => {\n    if(combinedEntries[deletedRecord.Id]) throw new Error(\"Repeat entry for ID: \" + deletedRecord.Id);\n    \n    combinedEntries[deletedRecord.Id] = {\"oldEntry\":deletedRecord};\n}\n\nvar addUpdatedToCombined = updatedElement => {\n    var oldRecord = updatedElement.oldEntry;\n    var newRecord = updatedElement.newEntry;\n    if(oldRecord.Id != newRecord.Id) throw new Error(\"Mismatch in created records: \" + oldRecord.Id + \" != \" + newRecord.Id);\n    if(combinedEntries[oldRecord.Id]) throw new Error(\"Repeat entry for ID: \" + oldRecord.Id);\n    \n    combinedEntries[oldRecord.Id] = updatedElement;\n}\n\n//process created meta file\n// if(activeMetaFileRecord.Id < 0) {\n//     addCreatedToCombined(activeMetaFileRecord);\n// }\n\n//process the updated recipe entries\nvar updatedRecipeEntries = editMetaFile.getUpdatedRecipeEntries();\nupdatedRecipeEntries.created.forEach(addCreatedToCombined);\nupdatedRecipeEntries.deleted.forEach(addDeletedToCombined);\nupdatedRecipeEntries.updated.forEach(addUpdatedToCombined);\n\n//process udpate parent entries\nvar updatedParentEntries = selectParents.getUpdatedParentEntries();\nupdatedParentEntries.created.forEach(addCreatedToCombined);\nupdatedParentEntries.deleted.forEach(addDeletedToCombined);\n\n//create instruction list\nvar instructionList = micemetarDataAccess.combinedEntriesToInstructionList(combinedEntries);\n\nreturn instructionList;\n\n\n\n\n\nvar addCreatedToCombinedEntries = createRecord => {\n    var recordId;\n    if(updatedEntry.newEntry) {\n        recordId = updatedEntry.newEntry.Id;\n        \n        //make sure there is a record match!\n        if(updatedEntry.oldEntry) {\n            if(updatedEntry.oldEntry.Id != recordId) {\n                throw new Error(\"Record ID mismatch: \" + recordId + \", \" + updatedEntry.oldEntry.Id);\n            }\n        }\n    }\n    else if(updatedEntry.oldEntry) {\n        recordId = updatedEntry.oldEntry.Id;\n    }\n    \n    //make sure this is not a repeat\n    if(combinedEntries[recordId] !== undefined) {\n        throw new Error(\"Repeart entry for id = \" + recordId);\n    }\n    \n    combinedEntries[recordId] = updatedEntry;\n}","supplementalCode":"\n\n//////////////////////////////////////////////////////////////////////\n\nfunction updateObject(fileEntry) {\n    var newFileEntry = apogee.util.jsonCopy(fileEntry);\n    var featureTypePropData = newFileEntry.Fields.entry_data.properties[0];\n    if(featureTypePropData.key != \"featureType\") throw new Error(\"Not the feature type!\");\n    \n    featureTypePropData.legacyKey = \"object\";\n    featureTypePropData.legacyValue = \"true\";\n    \n    \n    \n    return newFileEntry;\n}\n\nfunction updateSpace(fileEntry) {\n    var newFileEntry = apogee.util.jsonCopy(fileEntry);\n    var featureTypePropData = newFileEntry.Fields.entry_data.properties[0];\n    if(featureTypePropData.key != \"featureType\") throw new Error(\"Not the feature type!\");\n    \n    featureTypePropData.legacyKey = \"area\";\n    featureTypePropData.legacyValue = \"space\";\n    \n    return newFileEntry;\n}\n\nfunction updateGeometryEntry(fileEntry) {\n    var newFileEntry = apogee.util.jsonCopy(fileEntry);\n    var featureTypePropData = newFileEntry.Fields.entry_data.properties[0];\n    if(featureTypePropData.key != \"featureType\") throw new Error(\"Not the feature type!\");\n    \n    var legacyKey = featureTypePropData.legacyKey;\n    var legacyValue = featureTypePropData.value;\n    \n    if(legacyValue == legacyKey) {\n        legacyValue = \"true\";\n    }\n    \n    featureTypePropData.legacyValue = legacyValue;\n    \n    return newFileEntry;\n}","description":""}},"submitForm":{"name":"submitForm","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"\n//on submit, make the commit and write the result to the commit result table\nvar onSubmit = formData => {\n    \n    var commitMessage = formData.commitMsg.trim();\n    if(commitMessage.length === 0) {\n        alert(\"You must enter a commit message!\");\n        return;\n    }\n    \n    if((!instructionList)||(instructionList.length === 0)) {\n        alert(\"There is no data to commit.\");\n        return;\n    }\n    \n    var sessionKey = login.getSessionKey();\n    if(!sessionKey) {\n        alert(\"Please login. There is not a valid session.\");\n        return;\n    }\n    \n    commitPromise = micemetarDataAccess.getCommitPromise(instructionList,commitMessage,sessionKey);\n    \n    //set the response\n    apogeeMessenger.asynchDataUpdate(\"commitResponse\",commitPromise);\n};\n\n//use \"cancel\" action for \"clear\"\nvar onClear = () => {\n    //set the response\n    apogeeMessenger.dataUpdate(\"commitResponse\",\"\");\n}\n\n//make the layou\nvar layout = [];\n\n//commit msg\nentry = {};\nentry.type = \"textarea\";\nentry.label = \"Commit Msg: \";\nentry.cols = 50;\nentry.rows = 8;\nentry.key = \"commitMsg\";\nlayout.push(entry);\n\n\n//ad submit button to layout\nentry = {};\nentry.type = \"submit\";\nentry.onSubmit = onSubmit;\nentry.onCancel = onClear;\nentry.cancelLabel = \"Clear\";\nlayout.push(entry);\n\nreturn layout;","supplementalCode":"","description":""}},"commitResult":{"name":"commitResult","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var msg;\nvar style;\n\nif(!commitResponse) {\n    msg = \"WAITING\";\n    style = \"color:blue\";\n}\nelse if(commitResponse.success === true) {\n    msg = \"Commit Success\";\n    style = \"color:blue\";\n}\nelse {\n    msg = \"Error making commit: \" + commitResponse.msg;\n    style = \"color:red\";\n}\n\nvar textEntry = {};\ntextEntry.type = \"htmlDisplay\";\ntextEntry.html = \"<span style='\" + style + \"' + >\" + msg + \"</span>\";\n\nreturn [textEntry];\n","supplementalCode":"","description":""}}}},"selectParents":{"name":"selectParents","type":"apogee.Folder","children":{"metaFileList":{"name":"metaFileList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var sessionKey = login.getSessionKey();\nvar dependentContexts = loadContext.getAllContexts();\n\n//request promise from context\nvar getRequestPromiseFromContext = (context) => {\n    var searchDef = {};\n    searchDef.search = \"meta_file_list\";\n    searchDef.file_context = context;\n    return micemetarDataAccess.getRequestPromise(searchDef,sessionKey);\n}\n\n//create promise list\npromiseList = dependentContexts.map(getRequestPromiseFromContext);\n\n//evaluate promise list\nreturn Promise.all(promiseList);\n","supplementalCode":"","description":""}},"availableMetaFiles":{"name":"availableMetaFiles","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = [];\n\nvar addToOutput = (response) => {\n    if(!response.success) throw new Error(\"Error loading meta files: \" + response.msg);\n    output = output.concat(response.data.Response)\n};\n\nmetaFileList.forEach(addToOutput);\n\nreturn output;","supplementalCode":"","description":""}},"configInfo":{"name":"configInfo","type":"apogee.JsonTable","updateData":{"data":{"baseParentType":{"propertyRules":null,"themeRules":"propertyRules","theme":"themeRules","inputColors":"propertyRules","strings":"themeRules"}},"description":""}},"depInfo":{"name":"depInfo","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var activeMetaFileEntry = selectMetaFile.getActiveMetaFileRecord();\n\nvar activeFileTypeId = activeMetaFileEntry.Fields.file_type_id;\nvar activeFileType = commonData.getFileTypeName(activeFileTypeId);\nvar useType = activeMetaFileEntry.Fields.use_type;\nvar parentFileType;\nvar parentFileTypeId;\n\nif(useType == \"base\") {\n    parentFileType = configInfo.baseParentType[activeFileType];\n    parentFileTypeId = commonData.getFileTypeId(parentFileType);\n}\nelse if(useType == \"override\") {\n    parentFileType = activeFileType;\n    parentFileTypeId = activeFileTypeId;\n}\nelse {\n    throw new Error(\"Unrecognized use type: \" + useType);\n}\n\nvar output = {};\noutput.parentFileType = parentFileType;\noutput.parentFileTypeId = parentFileTypeId;\n\nreturn output;\n","supplementalCode":"","description":""}},"relationForUseType":{"name":"relationForUseType","type":"apogee.JsonTable","updateData":{"data":{"base":"depends on","override":"overrides"},"description":""}},"selectParentFiles":{"name":"selectParentFiles","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var activeMetaFileEntry = selectMetaFile.getActiveMetaFileRecord();\nlines = [];\n\nif(!activeMetaFileEntry) {\n    entry = {};\n    entry.type = \"htmlDisplay\";\n    entry.html = \"<em>Meta file not selected</em>\"\n    lines.push(entry);\n    return lines;\n}\n\n//make sure cached data is valid - clear if not\nif((!data)||(data.cachedMetaId != activeMetaFileEntry.Id)) {\n    _resetInitialData();\n    return lines;\n}\n\n//set layout\nif((activeMetaFileEntry)&&(parentMetaFileOptions)) {\n    //title\n    lines.push(_getTitleLine(activeMetaFileEntry));\n\n    //body\n    var entries = [];\n    var addEntry = record => {\n        if(record.Id == activeMetaFileEntry.Id) return;\n        entries.push([_getRecordName(record),record.Id]);\n    };\n    parentMetaFileOptions.forEach(addEntry);\n    \n    var bodyLine = {};\n    bodyLine.type = \"checkboxGroup\";\n    bodyLine.key = \"parentIds\";\n    bodyLine.entries = entries;\n    \n    lines.push(bodyLine);\n    \n    //hidden - active meta id\n    var hiddenLine = {};\n    hiddenLine.type = \"invisible\";\n    hiddenLine.value = activeMetaFileEntry.Id;\n    hiddenLine.key = \"cachedMetaId\";\n    lines.push(hiddenLine);\n}\n\nreturn lines;","supplementalCode":"function _getTitleLine(activeMetaFileEntry) {\n    var parentType = activeMetaFileEntry.Fields.use_type;\n    var title;\n    if(parentType == \"base\") {\n        title = \"Select Base Parent Files\";\n    }\n    else if(parentType == \"override\") {\n        title = \"Select Overridden Parent Files\";\n    }\n    else {\n        alert(\"Unknown parent type: \" + parentType);\n        title = \"ERROR - Unknown parent type: \" + parentType;\n    }\n    \n    return {\n\t\t\"type\": \"heading\",\n\t\t\"level\": 2,\n\t\t\"text\": title\n\t};\n}\n\nfunction _getRecordName(record) {\n    return commonData.getFileTypeName(record.Fields.file_type_id) +\n        \" - \" + record.Fields.name + \n        \" - \" + record.Fields.file_context + \n        \" (\" + record.Fields.use_type + \")\";\n}\n\nfunction _resetInitialData() {\n    apogeeMessenger.dataUpdate(\"data\",initialParentInfo);\n}","description":""}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":null,"description":""}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":"","description":""}}},"childrenNotWriteable":true},"initialParentInfo":{"name":"initialParentInfo","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var info = {};\n\nvar activeMetaFileRecord = selectMetaFile.getActiveMetaFileRecord();\nvar initialParentList = selectMetaFile.getInitialParentEntryList();\n\ninfo.cachedMetaId = activeMetaFileRecord.Id;\ninfo.parentIds = initialParentList.map(parentRecord => String(parentRecord.Fields.parent_file_id));\n\nreturn info;","supplementalCode":"","description":""}},"parentMetaFileOptions":{"name":"parentMetaFileOptions","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var activeMetaFileRecord = selectMetaFile.getActiveMetaFileRecord();\n\nvar isParentFileType = record => record.Fields.file_type_id == depInfo.parentFileTypeId\nvar isNotSelectedFile = record => (record.Id != activeMetaFileRecord.metaFileId);\n\nreturn availableMetaFiles.filter(isParentFileType).filter(isNotSelectedFile);\n","supplementalCode":"","description":""}},"updatedParentIds":{"name":"updatedParentIds","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"result = {};\n\nif((!initialParentInfo) ||\n    (!initialParentInfo.parentIds) ||\n    (!selectParentFiles.data) ||\n    (!selectParentFiles.data.parentIds)) {\n    \n    return result;        \n}\n\nvar initialIds = initialParentInfo.parentIds;\nvar selectedIds = selectParentFiles.data.parentIds\n\n//get created and deleted\nresult.deletedParentIds = initialIds.filter(id => (selectedIds.indexOf(id) < 0));\nresult.addedParentIds = selectedIds.filter(id => (initialIds.indexOf(id) < 0));\n\nreturn result;","supplementalCode":"","description":""}},"updatedParentEntryRecords":{"name":"updatedParentEntryRecords","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var result = {};\n\nvar initialParentEntryList = selectMetaFile.getInitialParentEntryList();\nvar activeMetaFileRecord = selectMetaFile.getActiveMetaFileRecord();\nvar metaFileId = activeMetaFileRecord.Id;\n\nvar relation = relationForUseType[activeMetaFileRecord.Fields.use_type];\n\n//deleted entries\nresult.deleted = initialParentEntryList.filter(entry => (updatedParentIds.deletedParentIds.indexOf(entry.Id) > 0) );\n\n//create entries\nresult.created = updatedParentIds.addedParentIds.map(parentFileId => {\n    var fields = {};\n    fields.meta_file_id = metaFileId;\n    fields.parent_file_id = parentFileId;\n    fields.relation = relation;\n    return micemetarDataAccess.createRecord(\"meta_parent_entry\",fields);\n})\n\n\nreturn result;","supplementalCode":"","description":""}},"getUpdatedParentEntries":{"name":"getUpdatedParentEntries","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return updatedParentEntryRecords;","supplementalCode":"","description":""}}}},"completed":{"name":"completed","type":"apogee.Folder","children":{"resetForm":{"name":"resetForm","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var onReset = function() {\n    var clearTaskList = [\n        [\"loadContext.selectContext.data\",null],\n        [\"selectMetaFile.selectMetaFile.data\",null],\n        [\"selectParents.selectParentFiles.data\",null],\n        [\"editMetaFile.selectEntriesControl.data\",null]\n    ];\n    apogeeMessenger.compoundDataUpdate(clearTaskList);\n}\n\n//make the layou\nvar layout = [];\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Reset\";\nlayout.push(entry);\n\n//aadd the reset button\nentry = {};\nentry.type = \"submit\";\nentry.onSubmit = onReset;\nentry.submitLabel = \"Reset Form\";\nlayout.push(entry);\n\nreturn layout;","supplementalCode":"","description":""}}}}}},"micemetarDataAccess":{"name":"micemetarDataAccess","type":"apogee.Folder","children":{"createRecord":{"name":"createRecord","type":"apogee.FunctionTable","updateData":{"argList":["recordType","fieldMap"],"functionBody":"var record = {};\n\nrecord.Id = getId();\nrecord.Type = recordType;\nrecord.Fields = fieldMap;\nrecord.read_perm = READ_PERM;\nrecord.edit_perm = EDIT_PERM;\n\nreturn record;","supplementalCode":"var READ_PERM = 2;\nvar EDIT_PERM = 15;\n\n//this will be illegal at some point\nvar nextId = -1;\n\nfunction getId() {\n    return nextId--;\n}","description":"This method creates a record given the field values and record info \nfrom the data set info. It creates and ID and uses standard permissions."}},"recordsToCreateInstructions":{"name":"recordsToCreateInstructions","type":"apogee.FunctionTable","updateData":{"argList":["recordList"],"functionBody":"var instructions = [];\n\nfor(var i = 0; i < recordList.length; i++) {\n    var createRecord = recordList[i];\n    var instruction = createCreateInstruction(createRecord);\n    instructions.push(instruction);\n}\n\nreturn instructions;","supplementalCode":"","description":"This creates a list of create instructions to go along with a list of records to be created.\n\nThere is the option to assign the ID or to leave it as undefined, in which case\nan automatically incremented ID will be assigned. (For consistency in the data\nset, either all records should be preassigned or all records should be \nautomatically assigned."}},"createCommitBody":{"name":"createCommitBody","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage"],"functionBody":"var commit = {};\nvar actions = [];\n\nif(commitMessage.length === 0) throw new Error(\"Commit message missing!\");\n\ncommit.Name = dataSetInfo.name;\ncommit.Message = commitMessage;\ncommit.Actions = actions;\n\n//single action with commits\nvar action = {};\naction.Title = \"bulk create commit\";\naction.Instr = instructionList;\nactions.push(action);\n\nreturn commit","supplementalCode":"","description":"This creates a body for a commit request, given a list of instructions and a commit message."}},"createRequestOptions":{"name":"createRequestOptions","type":"apogee.FunctionTable","updateData":{"argList":["bodyJson","sessionKey"],"functionBody":"var header = {};\nheader[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\nheader.sessionKey = sessionKey;\nheader[\"proto-version\"] = \"4.0\";\nheader[\"db-version\"] = dataSetInfo.version;\n\nrequestInfo = {};\nrequestInfo.header = header;\nif(bodyJson) {\n    requestInfo.method = \"POST\";\n    requestInfo.body = JSON.stringify(bodyJson);\n}\n\nreturn requestInfo;\n","supplementalCode":"","description":"This creates the requestOptions, suitable for apogee.net.jsonRequest, to go with an type of request to the workingset (micemetarequest) server."}},"host":{"name":"host","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return settings.data.metaDbHost;","supplementalCode":"","description":""}},"commitUrl":{"name":"commitUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvalue = host + \"/commit\";\nreturn value;\n\n","supplementalCode":"","description":""}},"requestUrl":{"name":"requestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return host + \"/cannedsearch\";\n\n","supplementalCode":"","description":""}},"dataSetInfo":{"name":"dataSetInfo","type":"apogee.JsonTable","updateData":{"data":{"name":"Micemetar","records":{"com_file_entry":{"foreignList":[],"idField":"com_file_entry_id","name":"com_file_entry","recordClass":"com.micello.micemetar.data.ComFileEntry","fields":[{"fieldClass":"java.lang.Integer","name":"ordr","nullOk":false,"defaultValue":0},{"fieldClass":"com.micello.micemetar.data.ComFile","name":"com_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.MetaFile","name":"meta_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"file_group","nullOk":false,"defaultValue":null}]},"com_file":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"com_file_id","remoteRecord":"com_file_entry","orderField":"ordr","name":"com_file_entry_list"}],"idField":"com_file_id","name":"com_file","recordClass":"com.micello.micemetar.data.ComFile","fields":[{"fieldClass":"java.lang.String","name":"file_context","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"name","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"ref","nullOk":true,"defaultValue":null}]},"community_com_file":{"foreignList":[],"idField":"community_com_file_id","name":"community_com_file","recordClass":"com.micello.micemetar.data.CommunityComFile","fields":[{"fieldClass":"java.lang.Integer","name":"cid","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.ComFile","name":"com_file_id","nullOk":false,"defaultValue":null}]},"meta_parent_entry":{"foreignList":[],"idField":"meta_parent_id","name":"meta_parent_entry","recordClass":"com.micello.micemetar.data.MetaParentEntry","fields":[{"fieldClass":"com.micello.micemetar.data.MetaFile","name":"meta_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.MetaFile","name":"parent_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"relation","nullOk":true,"defaultValue":null}]},"file_entry":{"foreignList":[],"idField":"file_entry_id","name":"file_entry","recordClass":"com.micello.micemetar.data.FileEntry","fields":[{"fieldClass":"java.lang.String","name":"entry_context","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"entry_name","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.FileType","name":"file_type_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"entry_section","nullOk":true,"defaultValue":null},{"fieldClass":"java.lang.String","name":"entry_key","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"option_name","nullOk":false,"defaultValue":null},{"fieldClass":"org.json.JSONObject","name":"entry_data","nullOk":false,"defaultValue":null}]},"file_type":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"file_type_id","remoteRecord":"file_entry","name":"file_entry_list"}],"idField":"file_type_id","name":"file_type","recordClass":"com.micello.micemetar.data.FileType","fields":[{"fieldClass":"java.lang.String","name":"file_type_name","nullOk":true,"defaultValue":null}]},"meta_file":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"meta_file_id","remoteRecord":"recipe_entry","orderField":"ordr","name":"recipe_entry_list"},{"restrictDelete":true,"isUnique":false,"remoteField":"meta_file_id","remoteRecord":"meta_parent_entry","name":"parent_entry_list"}],"idField":"meta_file_id","name":"meta_file","recordClass":"com.micello.micemetar.data.MetaFile","fields":[{"fieldClass":"com.micello.micemetar.data.FileType","name":"file_type_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"file_context","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"name","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"use_type","nullOk":false,"defaultValue":null}]},"recipe_entry":{"foreignList":[],"idField":"recipe_entry_id","name":"recipe_entry","recordClass":"com.micello.micemetar.data.RecipeEntry","fields":[{"fieldClass":"java.lang.Integer","name":"ordr","nullOk":false,"defaultValue":0},{"fieldClass":"com.micello.micemetar.data.MetaFile","name":"meta_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.FileEntry","name":"file_entry_id","nullOk":false,"defaultValue":null},{"fieldClass":"org.json.JSONObject","name":"insertion_info","nullOk":true,"defaultValue":null}]}},"version":"5.0"},"description":""}},"createUpdateInstruction":{"name":"createUpdateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["initialRecord","targetRecord"],"functionBody":"if(initialRecord.Id != targetRecord.Id) {\n    throw new Error(\"Record ID mismatch in create update instruction for target record: \" + getRecordErrString(targetRecord));\n}\n\nif(initialRecord.Type != targetRecord.Type) {\n    throw new Error(\"Inital and target record types do not match. Target record: \" + getRecordErrString(targetRecord));\n}\n\nvar recordsDifferent = false;\n\nvar recordInfo = getRecordInfo(initialRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Update\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = initialRecord.Id;\n\ninstruction.initialReadPerm = initialRecord.read_perm;\ninstruction.initialEditPerm = initialRecord.edit_perm;\n\nif(initialRecord.readPerm != targetRecord.readPerm) {\n    instruction.targetReadPerm = targetRecord.read_perm;\n    recordsDifferent = true;\n}\n\nif(initialRecord.editPerm != targetRecord.editPerm) {\n    instruction.targetEditPerm = targetRecord.edit_perm;\n    recordsDifferent = true;\n}\n\nvar initialData = {};\ninstruction.Initial = initialData;\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    \n    var initialValue;\n    var targetValue;\n    \n    var initialValue = initialRecord.Fields[field.name];\n    var targetValue = targetRecord.Fields[field.name];\n    \n    //validate target values\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(targetRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(targetRecord,field));\n        }\n    }\n    \n    if(!fieldsMatch(initialValue,targetValue,field)) {\n        initialData[field.name] = initialValue;\n        targetData[field.name] = targetValue;\n        recordsDifferent = true;\n    }\n}\n\nif(recordsDifferent) {\n    return instruction;\n}\nelse {\n    return null;\n}\n","supplementalCode":"function fieldsMatch(initialValue,targetValue,fieldInfo) {\n    if(fieldInfo.fieldClass === \"java.lang.String\") {\n        //compare strings with \"==\"\n        return (initialValue == targetValue);\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"java.lang\")) {\n        //compare other basic values with \"===\"\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"com.micello\")) {\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONObject\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONArray\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else {\n        throw new Error(\"unrecognized field type: \" + fieldInfo.fieldClass);\n    }\n}\n\nfunction compareJsonData(a,b) {\n    var an = apogee.util.getNormalizedObjectCopy(a);\n    var bn = apogee.util.getNormalizedObjectCopy(b);\n    var aString = JSON.stringify(an);\n    var bString = JSON.stringify(bn);\n    return aString == bString;\n}\n    ","description":"This function creates an update instruction given an initial and target record. If the records are the same then NULL is returned. (No update is needed.)"}},"createCreateInstruction":{"name":"createCreateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["createRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(createRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Create\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = createRecord.Id;\n\ninstruction.targetReadPerm = createRecord.read_perm;\ninstruction.targetEditPerm = createRecord.edit_perm;\n\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var targetValue;\n    var targetValue = createRecord.Fields[field.name];\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(createRecord,field));\n        }\n    }\n    \n    targetData[field.name] = targetValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getFieldErrString":{"name":"getFieldErrString","type":"apogee.FunctionTable","updateData":{"argList":["record","fieldInfo"],"functionBody":"return getRecordErrString(record) + \" - \" + fieldInfo.name;","supplementalCode":"","description":""}},"getRecordErrString":{"name":"getRecordErrString","type":"apogee.FunctionTable","updateData":{"argList":["record"],"functionBody":"return record.Type + \" \" + record.Id;","supplementalCode":"","description":""}},"createDeleteInstruction":{"name":"createDeleteInstruction","type":"apogee.FunctionTable","updateData":{"argList":["deleteRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(deleteRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Delete\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = deleteRecord.Id;\n\ninstruction.initialReadPerm = deleteRecord.read_perm;\ninstruction.initialEditPerm = deleteRecord.edit_perm;\n\nvar initialData = {};\ninstruction.Initial = initialData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var initialValue = deleteRecord.Fields[field.name];\n    \n    initialData[field.name] = initialValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getRecordInfo":{"name":"getRecordInfo","type":"apogee.FunctionTable","updateData":{"argList":["recordType"],"functionBody":"var recordInfo = dataSetInfo.records[recordType];\n\nif(!recordInfo) {\n    throw new Error(\"Record type not found in getRecordInfo: \" + recordType);\n}\n\nreturn recordInfo;","supplementalCode":"","description":""}},"combinedEntriesToInstructionList":{"name":"combinedEntriesToInstructionList","type":"apogee.FunctionTable","updateData":{"argList":["combinedEntries"],"functionBody":"var output = [];\nfor(var key in combinedEntries) {\n    var entry = combinedEntries[key];\n    var instruction = getInstructionForCombinedEntry(entry);\n    if(instruction) {\n        output.push(instruction);\n    }\n}\n\nreturn output;","supplementalCode":"function getInstructionForCombinedEntry(combinedEntry) {\n    var newEntry = combinedEntry.newEntry;\n    var oldEntry = combinedEntry.oldEntry;\n    \n    if(newEntry) {\n        if(!oldEntry) {\n            console.log(\"Create: \" + newEntry.Id);\n            return createCreateInstruction(newEntry);\n        }\n        else {\n            //this will return null for matching records\n            console.log(\"Update(maybe): \" + newEntry.Id);\n            return createUpdateInstruction(oldEntry,newEntry);\n        }\n    }\n    else if(oldEntry) {\n        console.log(\"Delete: \" + oldEntry.Id);\n        return createDeleteInstruction(oldEntry);\n    }\n    \n    return null;\n}\n\nfunction entriesDifferent(entry1,entry2) {\n    var string1 = JSON.stringify(apogee.util.getNormalizedCopy(entry1));\n    var string2 = JSON.stringify(apogee.util.getNormalizedCopy(entry2));\n    return (string1 == string2);\n}","description":"This function takes a combined entry map of the format:\n\n{\n  \"some-identifier\":{\n    \"oldEntry\":{original record entry, if applicable},\n    \"newEntry\":{new record entry, if applicable}\n  },\n  ...\n}\n\nIt returns an instruction list.\n\n"}},"getCommitPromise":{"name":"getCommitPromise","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage","sessionKey"],"functionBody":"var commitBody = createCommitBody(instructionList,commitMessage);\nvar requestOptions = createRequestOptions(commitBody,sessionKey);\nreturn apogee.net.jsonRequest(commitUrl,requestOptions);","supplementalCode":"","description":""}},"getRequestPromise":{"name":"getRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn apogee.net.jsonRequest(requestUrl,requestOptions);","supplementalCode":"","description":""}},"customRequestUrl":{"name":"customRequestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return host + \"/request\";","supplementalCode":"","description":""}},"getCustomRequestPromise":{"name":"getCustomRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn apogee.net.jsonRequest(customRequestUrl,requestOptions);","supplementalCode":"","description":""}}}},"settings":{"name":"settings","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var layout = [];\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Settings\";\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Login URL: \";\nentry.size = 80;\nentry.key = \"loginUrl\";\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Meta DB URL: \";\nentry.size = 80;\nentry.key = \"metaDbHost\";\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Customer File URL: \";\nentry.size = 80;\nentry.key = \"customerFileUrl\";\nlayout.push(entry);\n\n//suvbmit (no cancel)\nentry = {};\nentry.type = \"submit\";\nentry.onSubmit = onSubmit;\nentry.onCancel = onReset;\nentry.cancelLabel = \"Reset\";\nlayout.push(entry);\n\nreturn layout;\n","supplementalCode":"","description":""}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":{"loginUrl":"https://eng.micello.com/TestAuthorization/loginjson","metaDbHost":"https://eng.micello.com/micemetarws","customerFileUrl":"https://eng.micello.com/apogee/data/customerJson.json"},"description":""}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":"","description":""}}},"childrenNotWriteable":true}}}},"components":{"type":"apogeeapp.app.FolderComponent","treeState":1,"children":{"tasks":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":37,"y":37}},"treeState":1,"children":{"commonData":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":49,"y":379}},"treeState":-1,"children":{"fileTypeList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":727,"height":325},"posInfo":{"x":34,"y":97},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"fileTypeIdToName":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":722,"height":320},"posInfo":{"x":37,"y":294},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"fileTypeNameToId":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":685,"height":300},"posInfo":{"x":37,"y":253},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"customerInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":689,"height":321},"posInfo":{"x":46,"y":41},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"INACTIVE_LAYOUT":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":738,"y":319},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"DUMMY_DROPDOWN_ENTRY":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":737,"y":129},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"GLOBAL_CONTEXT":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":45},"posInfo":{"x":378,"y":218},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"CID_CONTEXT_PREFIX":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":34},"posInfo":{"x":378,"y":177},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"DEFAULT_COM_FILE_NAME":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":736,"y":33},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"DEFAULT_META_FILE_NAME":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":736,"y":77},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"getFileTypeName":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":37,"y":340},"state":-1,"viewType":"Code"}},"getFileTypeId":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":670,"height":400},"posInfo":{"x":35,"y":379},"state":-1,"viewType":"Code"}}}},"login":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":1595,"y":330}},"tabOpen":true,"treeState":-1,"children":{"loginUrl":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":465,"height":43},"posInfo":{"x":26,"y":27},"state":-1,"viewType":"Text"}},"sessionResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":697,"height":330},"posInfo":{"x":12,"y":357},"state":0,"viewType":"Data"},"dataView":"Colorized"},"savedUserName":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":284,"height":69},"posInfo":{"x":25,"y":75},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"loginControl":{"type":"apogeeapp.app.DynamicForm","windowState":{"sizeInfo":{"width":323,"height":181},"posInfo":{"x":24,"y":113},"state":0,"viewType":"Output"}},"appendQueryParams":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":845,"height":400},"posInfo":{"x":492,"y":45},"state":-1,"viewType":"Code"}},"getSessionKey":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":690,"height":180},"posInfo":{"x":494,"y":93},"state":-1,"viewType":"Code"}},"loginResult":{"type":"apogeeapp.app.DynamicForm","windowState":{"sizeInfo":{"width":456,"height":33},"posInfo":{"x":481,"y":241},"state":0,"viewType":"Output"}}}},"loadContext":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":206,"y":629}},"treeState":-1,"children":{"contexts":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":442,"height":165},"posInfo":{"x":714,"y":78},"state":0,"viewType":"Data"},"dataView":"Colorized"},"selectContext":{"type":"apogeeapp.app.FormDataComponent","windowState":{"sizeInfo":{"width":550,"height":276},"posInfo":{"x":9,"y":51},"state":0,"viewType":"Form"}},"getFileContext":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":760,"y":365},"state":-1,"viewType":"Code"}},"getOtherContexts":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":760,"y":322},"state":-1,"viewType":"Code"}},"getAllContexts":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":764,"y":411},"state":-1,"viewType":"Code"}}}},"selectMetaFile":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":250,"y":558}},"treeState":-1,"children":{"metaFileList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":574,"height":333},"posInfo":{"x":570,"y":407},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"metaFileFormEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":938,"height":504},"posInfo":{"x":65,"y":49},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"selectMetaFile":{"type":"apogeeapp.app.FormDataComponent","windowState":{"sizeInfo":{"width":422,"height":315},"posInfo":{"x":63,"y":251},"state":0,"viewType":"Form"}},"createMetaFileFields":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":647,"height":548},"posInfo":{"x":561,"y":208},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"createOrUpdate":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":463,"height":462},"posInfo":{"x":943,"y":269},"state":0,"viewType":"Formula"},"dataView":"Colorized"},"activeMetaFileRecord":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":814,"height":309},"posInfo":{"x":563,"y":249},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"getCreateOrUpdate":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":964,"y":292},"state":-1,"viewType":"Code"}},"getActiveMetaFileRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":968,"y":338},"state":-1,"viewType":"Code"}},"metaFileDownload":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":767,"height":496},"posInfo":{"x":970,"y":76},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"initialParentEntryList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":688,"height":493},"posInfo":{"x":977,"y":146},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"initialRecipeEntryList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":554,"height":370},"posInfo":{"x":975,"y":191},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"getInitialRecipeEntryList":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":969,"y":384},"state":-1,"viewType":"Code"}},"getInitialParentEntryList":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":19},"posInfo":{"x":974,"y":429},"state":-1,"viewType":"Code"}}}},"editMetaFile":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":203,"y":755}},"treeState":1,"children":{"fileTypeEntryList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":614,"height":428},"posInfo":{"x":23,"y":28},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"insertionInfoOptions":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":452,"height":719},"posInfo":{"x":1102,"y":55},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"availableFileEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":836,"height":521},"posInfo":{"x":21,"y":81},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"initialRecipeEntryInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":895,"height":561},"posInfo":{"x":21,"y":126},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"activeInsertionInfoOptions":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":756,"height":300},"posInfo":{"x":1100,"y":103},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"updatedEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":969,"height":629},"posInfo":{"x":20,"y":205},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"getUpdatedRecipeEntries":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":723,"y":93},"state":-1,"viewType":"Code"}},"selectEntriesControl":{"type":"apogeeapp.app.CustomDataComponent","windowState":{"sizeInfo":{"width":1056,"height":671},"posInfo":{"x":314,"y":75},"state":0,"viewType":"Form"},"resource":{"uiCode":"/* To FIX\r\n* - \"mode\" is passed in to the old \"constructor\". It should be saved as a member since it is now otherwise not accesible in other code\r\n* - add the start edit mode function to the \"mode\". And rename mode. Now it just holds the messenger.\r\n* - maybe bake a base class for the class we need to define and return.\r\n*/\r\n\r\n//=================================\r\n// Update methodsselectedEntry\r\n//=================================\r\n\r\n\r\n// a const\r\nvar NULL_SELECTION = \"----\";\r\n\r\nTYPE_SPECIFIC_FILTERS = {\r\n    \"propertyRules\":[\r\n        ],\r\n    \"themeRules\":[\r\n        [\"Option\",(fileEntry) => fileEntry.Fields.entry_data.propType]\r\n        ],\r\n    \"theme\":[\r\n        ],\r\n    \"strings\":[\r\n        ],\r\n    \"inputColors\":[\r\n        ]\r\n}\r\n\r\nconst TEXT_FILTER_DELAY = 250;\r\n\r\nconst CELL_ID_PREFIX = \"meta_entry_\";\r\nconst PREFIX_LENGTH = CELL_ID_PREFIX.length;\r\n\r\nconst EXPAND_IMAGE_URL = \"http://eng.micello.com/apogee/resources/expand.png\";\r\nconst CONTRACT_IMAGE_URL = \"http://eng.micello.com/apogee/resources/contract.png\";\r\n\r\n//=======================================\r\n// UI Form Class\r\n//=======================================\r\n\r\nvar MetaEditForm = class {\r\n\t\r\n\t//===========================\r\n\t// Constructor\r\n\t//===========================\r\n\r\n\tconstructor() {\r\n\t\t__customControlDebugHook();\r\n\r\n\t\tthis.selectedCell = null;\r\n\t\tthis.availableCell = null;\r\n\t\t\r\n\t\tthis.selectedCells = null;\r\n\r\n\t\tthis.availableFileEntries = null;\r\n\t\tthis.initialRecipeEntryInfo = null;\r\n\t\tthis.activeInsertionInfoOptions = null;\r\n\t\tthis.selectedMap = null;\r\n\t\tthis.activeMetaFileId = null;\r\n\t\r\n\t    this.admin = null;\r\n\t}\r\n\t\r\n\t\r\n\t//===========================\r\n\t// Public Methods\r\n\t//===========================\r\n\t\r\n\tinit(element,admin) {\r\n\t    this.admin = admin;        \r\n\t}\r\n\t\r\n\tsetData(data,element,admin) {\r\n\t\tif((!data)||(!data.input)) return;\r\n\r\n\t\t//set data\r\n\t\tthis.availableFileEntries = data.input.availableFileEntries;\r\n\t\tthis.initialRecipeEntryInfo = data.input.initialRecipeEntryInfo;\r\n\t\tthis.activeInsertionInfoOptions = data.input.activeInsertionInfoOptions;\r\n\t\t\r\n\t\tvar savedMetaFileId;\r\n    \tvar savedSelectedMap;\r\n\t\tif(data.data) {\r\n    \t\tsavedMetaFileId = data.data.metaFileId;\r\n    \t\tsavedSelectedMap = data.data.selectedMap;\r\n\t\t}\r\n\t\telse {\r\n\t\t    savedMetaFileId = null;\r\n    \t\tsavedSelectedMap = null;\r\n\t\t}\r\n    \t\t\r\n\t\t//check saved form data\r\n        if((!this.availableFileEntries)||(!this.initialRecipeEntryInfo)) {\r\n            //load empty data\r\n            this.selectedMap = this.createEmtpySelectedMap();\r\n            this.activeMetaFileId = null;\r\n            this.loadForm();\r\n        }\r\n        else {\r\n            this.activeMetaFileId = this.initialRecipeEntryInfo.metaFileId;\r\n            \r\n            if((savedMetaFileId != this.initialRecipeEntryInfo.metaFileId)||(!savedSelectedMap)) {\r\n                //if no saved data or wrong saved meta file id - reset\r\n                //reload saved formdata with initial file state\r\n                this.resetSelectedInfo();\r\n                //no form load here\r\n            }\r\n            else {\r\n                //make sure all saved entries are valid. if not, reload them\r\n                var validSelectedMap = this.getValidSelectedMap(savedSelectedMap);\r\n                if(validSelectedMap === savedSelectedMap) {\r\n                    //do a standard form load\r\n        \t\t\tthis.selectedMap = apogee.util.jsonCopy(savedSelectedMap);\r\n        \t\t\tthis.loadForm();\r\n                }\r\n                else {\r\n                    //we will reset the saved data\r\n                    //which triggers a reload\r\n                    this.reloadValidSavedSelectedMap(validSelectedMap);\r\n                    //no form load here\r\n                }\r\n            }\r\n        }\r\n\r\n\t};\r\n\t\r\n\tgetData(element,admin) {\r\n\r\n\t\tvar newSelectedFileEntryInfo = {};\r\n\t\tnewSelectedFileEntryInfo.metaFileId = this.initialRecipeEntryInfo.metaFileId;\r\n\t\tnewSelectedFileEntryInfo.selectedMap = apogee.util.jsonCopy(this.selectedMap);\r\n\r\n\t\treturn newSelectedFileEntryInfo;\r\n\t};\r\n\r\n\tonLoad(element,admin) {\r\n\t\tthis.parentSelectedCell = document.getElementById(\"editMeta4_parentSelectedCell\");\r\n\t\tthis.availableCell = document.getElementById(\"editMeta4_availableCell\");\r\n\t\t\r\n\t\tthis.filterCell = document.getElementById(\"editMeta4_filterCell\");\r\n\t\t\r\n\t\tthis.commitButton = document.getElementById(\"editMeta4_commitButton\");\r\n\t\tthis.resetButton = document.getElementById(\"editMeta4_resetButton\");\r\n\t\t\r\n\t\tthis.resetButton.onclick = () => this.onResetClicked();\r\n\t\t\r\n\t\tthis.availableCell.ondragover = (event) => this.allowDrop(event);\r\n\t\tthis.availableCell.ondrop = (event) => this.onAvailableDrop(event);\r\n\t}\r\n\t\r\n\t//===========================\r\n\t// Private Methods\r\n\t//===========================\r\n\t\r\n\t//-------------------\r\n\t// Event Handlers\r\n\t//-------------------\r\n\r\n\tonResetClicked() {\r\n\t\tthis.resetSelectedInfo();\r\n\t}\r\n\r\n\tonDataLoad() {\r\n\t\tthis.resetButton.disabled = false;\r\n\t}\r\n\r\n\tonDataReset() {\r\n\t\tthis.resetButton.disabled = true;\r\n\t}\r\n\r\n\tonDataUpdated() {\r\n\t\tthis.resetButton.disabled = false;\r\n\t\tthis.admin.startEditMode();\r\n\t}\r\n\r\n    //this returns a list of all file entry ids that are in the available entries\t\r\n\tgetValidSelectedMap(savedSelectedMap) {\r\n\t    var badIds = [];\r\n\t    for(var candidateFileEntryIdString in savedSelectedMap) {\r\n\t        var candidateFileEntryId = parseInt(candidateFileEntryIdString);\r\n\t        if(this.availableFileEntries.some( fileEntry => (fileEntry.Id === candidateFileEntryId) ) === false) {\r\n\t            badIds.push(candidateFileEntryId);\r\n\t        }\r\n\t    }\r\n\t    \r\n\t    if(badIds.length > 0) {\r\n\t        //saved has some invalid records\r\n\t        var newSelectedMap = apogee.util.jsonCopy(savedSelectedMap);\r\n\t        badIds.forEach( id => {delete newSelectedMap[id]});\r\n\t        return newSelectedMap;\r\n\t    }\r\n\t    else {\r\n\t        //saved is valid\r\n\t        return savedSelectedMap;\r\n\t    }\r\n\t}\r\n\t\r\n\t//this resets the saved data to only include valid selections. It will trigger a form reload.\r\n\treloadValidSavedSelectedMap(validSelectedMap) {\r\n\t    var newSelectedFileEntryInfo = {};\r\n\t\tnewSelectedFileEntryInfo.selectedMap = validSelectedMap;\r\n\t\tnewSelectedFileEntryInfo.metaFileId = this.initialRecipeEntryInfo.metaFileId;\r\n\t\t\r\n\t\t//set this data\r\n\t\tthis.admin.getMessenger().dataUpdate(\"data\",newSelectedFileEntryInfo);\r\n\t}\r\n\t\r\n\t//this creates an empty selected map for the case there is no data.\r\n\tcreateEmtpySelectedMap() {\r\n\t    var selectedMap = {};\r\n\t    return selectedMap;\r\n\t}\r\n\t\r\n\r\n//# update this for new saved format\r\n\tresetSelectedInfo() {\r\n\t\tvar selectedMap = {};\r\n\t\t\r\n\t\tif((this.availableFileEntries)&&(this.initialRecipeEntryInfo)&&(this.initialRecipeEntryInfo.fileEntryMapOfRecipeEntries)) {\r\n\t\t\t//initialize the selected info to the current values\r\n\t\t\tvar addToSelectedMap = fileEntry => {\r\n\t\t\t\t\r\n\t            var recipeEntry = this.initialRecipeEntryInfo.fileEntryMapOfRecipeEntries[fileEntry.Id];\r\n\t            if(recipeEntry) {\r\n\t                var selectedEntry = {};\r\n\t                selectedEntry.insertionInfo = recipeEntry.Fields.insertion_info;\r\n\t                \r\n\t                selectedMap[fileEntry.Id] = selectedEntry;\r\n\t            }\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.availableFileEntries.forEach(addToSelectedMap);\r\n\t\t}\r\n\t\t\r\n\t\tvar newSelectedFileEntryInfo = {};\r\n\t\tnewSelectedFileEntryInfo.selectedMap = selectedMap;\r\n\t\tnewSelectedFileEntryInfo.metaFileId = this.activeMetaFileId;\r\n\t\t\r\n\t\t//set this data\r\n\t\tthis.admin.getMessenger().dataUpdate(\"data\",newSelectedFileEntryInfo);\r\n\t\tthis.onDataReset();\r\n\t}\r\n\r\n\tloadForm() {\r\n\t\tthis.initializeFilters();\r\n\t\tthis.loadSelectedCells();\r\n\t\t\r\n\t\tthis.loadEntries();\r\n\t\t\r\n\t\tthis.onDataLoad();\r\n\t}\r\n\r\n\r\n//=====================================\r\n// Load Methods\r\n//=====================================\r\n\r\n\tloadEntries() {\r\n\t\t\r\n\t\t//make sure the selections are loaded\r\n\t\tif((!this.availableFileEntries)||(!this.initialRecipeEntryInfo)||(!this.selectedMap)) return;\r\n\t\t\r\n\t\t//populate the filter options\r\n\t\tthis.populateFilterOptions();\r\n\t\t\r\n\t\t//populate the display cells\r\n\t\tthis.clearSelectedCells();\r\n\t\tapogeeapp.ui.removeAllChildren(this.availableCell);\r\n\t\t\r\n\t\tvar addFileEntry = (fileEntry) => {\r\n\t\t    var fileEntryId = fileEntry.Id;\r\n\t\t    \r\n\t\t\tvar cellElement = this.createCell(fileEntry);\r\n\t\t\tif(this.isSelected(fileEntry)) {\r\n\t\t\t\tthis.selectedCell = this.getSelectedCell(fileEntry);\r\n\t\t\t\tthis.selectedCell.appendChild(cellElement);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.availableCell.appendChild(cellElement);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tvar filterText = this.freeTextFilterEntry.value;\r\n\t\tvar filterRegEx = new RegExp(filterText, \"i\");\r\n\t\tvar freeTextFilter = fileEntry => {\r\n\t\t\t//don't filter the selected cells\r\n\t\t\tif(this.isSelected(fileEntry)) return true;\r\n\t\t\t\r\n\t\t\tif(filterText.length > 0) {\r\n\t\t\t\treturn (fileEntry.Fields.entry_name.search(filterRegEx) >= 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n        var fileEntrySorter = (fileEntry1,fileEntry2) => this.fileEntrySorter(fileEntry1,fileEntry2);\r\n        var overallDropdownFilter = (fileEntry1,fileEntry2) => this.overallDropdownFilter(fileEntry1,fileEntry2);\r\n\r\n\t\tthis.availableFileEntries.filter(overallDropdownFilter).filter(freeTextFilter).sort(fileEntrySorter).forEach(addFileEntry);\r\n\t}\r\n\r\n\tcreateCell(fileEntry) {\r\n\t\t\r\n\t\tvar name = fileEntry.Fields.entry_name;\r\n\t\t\r\n\t\t//=============================\r\n\t\t//construction of list element\r\n\t\t//=============================\r\n\t\tvar div = document.createElement(\"div\");\r\n\t\tdiv.id = CELL_ID_PREFIX + fileEntry.Id;\r\n\t\tdiv.className = \"editMeta_listEntry\";\r\n\t\t\r\n\t\t//===============================\r\n\t\t//color object according to added/removed/no change\r\n\t\t//===============================\r\n\t\tif(this.isAdded(fileEntry)) {\r\n\t\t    //this has been added\r\n\t\t    div.className = \"editMeta_listEntry editMeta_listEntry_added\";\r\n\t\t}\r\n\t\telse if(this.isRemoved(fileEntry)) {\r\n\t\t    //this has been removed\r\n\t\t    div.className = \"editMeta_listEntry editMeta_listEntry_removed\";\r\n\t\t}\r\n\t\telse if(this.isUpdated(fileEntry)) {\r\n\t\t    //this is updated\r\n\t\t    div.className = \"editMeta_listEntry editMeta_listEntry_updated\";\r\n\t\t}\r\n\t\telse {\r\n\t\t    //this is unchanged\r\n\t\t    div.className = \"editMeta_listEntry\";\r\n\t\t}\r\n\t\t\r\n\t\t//draggable interface\r\n\t\tdiv.draggable = true;\r\n\t\tvar instance = this;\r\n\t\tdiv.ondragstart = (event) => this.onDragStart(event);\r\n\t\t\r\n\t\t//content\r\n\t\tvar minMaxButton = document.createElement(\"img\");\r\n\t\tminMaxButton.src = EXPAND_IMAGE_URL;\r\n\t\tdiv.appendChild(minMaxButton);\r\n\t\t\r\n\t\tdiv.appendChild(document.createTextNode(\" \"));\r\n\t\tvar textSpan = document.createElement(\"span\");\r\n\t\ttextSpan.className = \"editMeta_entryLabel\";\r\n\t\ttextSpan.appendChild(document.createTextNode(name));\r\n\t\tdiv.appendChild(textSpan);\r\n\t\t\r\n\t\tvar entryContentDiv = document.createElement(\"div\");\r\n\t\tentryContentDiv.className = \"editMeta_entryDataClosed\";\r\n\t\tdiv.appendChild(entryContentDiv);\r\n\t\t\r\n\t\tentryContentDiv.appendChild(document.createTextNode(\"Entry Data: \"));\r\n\t\tentryContentDiv.appendChild(document.createElement(\"br\"));\r\n\t\t\r\n\t\tvar preformatDisplay = document.createElement(\"pre\");\r\n\t\tpreformatDisplay.className = \"editMeta_preformatText\";\r\n\t\tvar temp = JSON.stringify(fileEntry.Fields.entry_data,null,\"  \");\r\n\t\ttemp = temp.replace(/</g,\"&lt;\");\r\n\t\ttemp = temp.replace(/>/g,\"&gt;\");\r\n\t\tpreformatDisplay.innerHTML = temp;\r\n\t\tentryContentDiv.appendChild(preformatDisplay);\r\n\t\t\r\n\t\t//content interaction\r\n\t\tminMaxButton.onclick = () => {\r\n\t\t\tif(minMaxButton.src == EXPAND_IMAGE_URL) {\r\n\t\t\t\tminMaxButton.src = CONTRACT_IMAGE_URL;\r\n\t\t\t\tentryContentDiv.className = \"editMeta_entryDataOpened\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tminMaxButton.src = EXPAND_IMAGE_URL;\r\n\t\t\t\tentryContentDiv.className = \"editMeta_entryDataClosed\";\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn div;\r\n\t}\r\n\r\n\t//=================================\r\n\t// selected cell management\r\n\t//=================================\r\n\r\n\tloadSelectedCells() {\r\n\t\tapogeeapp.ui.removeAllChildren(this.parentSelectedCell);\r\n\t\tthis.selectedCells = {};\r\n\t\t\r\n\t\tvar numberOptions = this.activeInsertionInfoOptions.length;\r\n\t\t\r\n\t\tif(numberOptions > 1) {\r\n\t\t\tvar selectedTable = document.createElement(\"table\");\r\n\t\t\tselectedTable.className = \"editMeta_table\";\r\n\t\t\tthis.parentSelectedCell.appendChild(selectedTable);\r\n\t\t\r\n\t\t\tvar insertUiEntry = (optionInfo,index) => {\r\n\t\t\t\t\r\n\t\t\t\tvar row = selectedTable.insertRow(index);\r\n\t\t\t\tvar cell = row.insertCell(0);\r\n\t\t\t\tcell.className = \"editMeta_option_container\";\r\n\t\t\t\t\r\n\t\t\t\t//option title\r\n\t\t\t\tvar titleDiv = document.createElement(\"div\");\r\n\t\t\t\ttitleDiv.className = \"editMeta_optionTitle\";\r\n\t\t\t\t\r\n\t\t\t\tvar hideButton = document.createElement(\"img\");\r\n\t\t\t\thideButton.src = CONTRACT_IMAGE_URL\r\n\t\t\t\ttitleDiv.appendChild(hideButton);\r\n\t\t\t\t\r\n\t\t\t\tvar showButton = document.createElement(\"img\");\r\n\t\t\t\tshowButton.src = EXPAND_IMAGE_URL;\r\n\t\t\t\tshowButton.style.display = \"none\";\r\n\t\t\t\ttitleDiv.appendChild(showButton);\r\n\t\t\t\t\r\n\t\t\t\tvar textElement = document.createElement(\"b\");\r\n\t\t\t\ttextElement.innerHTML = optionInfo.title;\r\n\t\t\t\ttitleDiv.appendChild(textElement);\r\n\t\t\t\t\r\n\t\t\t\tcell.appendChild(titleDiv);\r\n\t\t\t\t\r\n\t\t\t\t//option body\r\n\t\t\t\tvar bodyDiv = document.createElement(\"div\");\r\n\t\t\t\tbodyDiv.className = \"editMeta_optionDisplayDiv\";\r\n\t\t\t\tcell.appendChild(bodyDiv);\r\n\t\t\t\t\r\n\t\t\t\tvar insertionInfo = optionInfo.insertionInfo;\r\n\t\t\t\t\r\n\t\t\t\t//events\r\n\t\t\t\tbodyDiv.ondragover = (event) => { this.allowDrop(event); }\r\n\t\t\t\tbodyDiv.ondrop = (event) => { this.onSelectedDrop(event,insertionInfo); }\r\n\t\t\t\t\r\n\t\t\t\thideButton.onclick = () => this.hideSelectionRow(bodyDiv,hideButton,showButton);\r\n\t\t\t\tshowButton.onclick = () => this.showSelectionRow(bodyDiv,hideButton,showButton);\r\n\t\t\t\t\r\n\t\t\t\tvar key = this.getSelectionKey(insertionInfo);\r\n\t\t\t\tthis.selectedCells[key] = bodyDiv;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.activeInsertionInfoOptions.forEach(insertUiEntry);\r\n\t\t\t\r\n\t\t\t//clear event handlers from parent\r\n\t\t\tthis.parentSelectedCell.ondragover = undefined;\r\n\t\t\tthis.parentSelectedCell.ondrop = undefined;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvar selectedCell = this.parentSelectedCell;\r\n\t\t\tvar insertionInfo = this.activeInsertionInfoOptions[0].insertionInfo;\r\n\t\t\t\r\n\t\t\t//events\r\n\t\t\tselectedCell.ondragover = (event) => { this.allowDrop(event); }\r\n\t\t\tselectedCell.ondrop = (event) => { this.onSelectedDrop(event,insertionInfo); }\r\n\t\t\t\r\n\t\t\tvar key = this.getSelectionKey(insertionInfo);\r\n\t\t\tthis.selectedCells[key] = selectedCell;\r\n\t\t}\r\n\t}\r\n\r\n\tgetSelectedCell(fileEntry) {\r\n\t    var insertionInfo = this.getActiveInsertionInfo(fileEntry);\r\n\t\tvar key = this.getSelectionKey(insertionInfo);\r\n\t\tvar containerCell = this.selectedCells[key];\r\n\t\t\r\n\t\tif(!containerCell) {\r\n\t\t\tthrow new Error(\"Insertion info not found: \" + JSON.stringify(insertionInfo));\r\n\t\t}\r\n\t\t\r\n\t\treturn containerCell;\r\n\t}\r\n\r\n\tgetSelectionKey(insertionInfo) {\r\n\t\treturn insertionInfo != null ? insertionInfo.orderedEntry : \"default\";\r\n\t}\r\n\r\n\tclearSelectedCells() {\r\n\t\tfor(var key in this.selectedCells) {\r\n\t\t\tapogeeapp.ui.removeAllChildren(this.selectedCells[key]);\r\n\t\t}\r\n\t}\r\n\r\n\thideSelectionRow(bodyDiv,hideButton,showButton) {\r\n\t\tbodyDiv.style.display = \"none\";\r\n\t\thideButton.style.display = \"none\";\r\n\t\tshowButton.style.display = \"\";\r\n\t}\r\n\t\r\n\tshowSelectionRow(bodyDiv,hideButton,showButton) {\r\n\t\tbodyDiv.style.display = \"\";\r\n\t\thideButton.style.display = \"\";\r\n\t\tshowButton.style.display = \"none\";\r\n\t}\r\n\t//=================================\r\n\t// Drag and drop edit methods\r\n\t//=================================\r\n\r\n\tonDragStart(event) {\r\n\t\tevent.dataTransfer.setData(\"text\",event.target.id);\r\n\t}\r\n\r\n\tallowDrop(event) {\r\n\t\tevent.preventDefault();\r\n\t}\r\n\r\n\tonSelectedDrop(event, insertionInfo) {\r\n\t\tvar data = event.dataTransfer.getData(\"text\");\r\n\t\tvar fileEntryId = data.substring(PREFIX_LENGTH);\r\n\t\t\r\n\t\t//lookup or create the selected entry\r\n\t\tvar selectedEntry = this.selectedMap[fileEntryId];\r\n\t\tif(!selectedEntry) {\r\n\t\t    selectedEntry = {};\r\n\t\t    this.selectedMap[fileEntryId] = selectedEntry;\r\n\t\t}\r\n\t\t\r\n\t\tselectedEntry.insertionInfo = insertionInfo;\r\n\t\tthis.loadEntries();\r\n\r\n\t\tthis.onDataUpdated();\r\n\t}\r\n\r\n\tonAvailableDrop(event) {\r\n\t\tvar data = event.dataTransfer.getData(\"text\");\r\n\t\tvar fileEntryId = data.substring(PREFIX_LENGTH);\r\n\t\tvar selectedEntry = this.selectedMap[fileEntryId];\r\n\t\t\r\n\t\t//deselect if we drop it in available\r\n\t\tif(selectedEntry) {\r\n\t\t\tdelete this.selectedMap[fileEntryId];\r\n\t\t\tthis.loadEntries();\r\n\t\t}\r\n\t\t\r\n\t\tthis.onDataUpdated();\r\n\t}\r\n\t\r\n\t//=================================\r\n\t// utilities\r\n\t//=================================\r\n\t\r\n\tisRemoved(fileEntry) {\r\n        var recipeEntry = this.initialRecipeEntryInfo.fileEntryMapOfRecipeEntries[fileEntry.Id];\r\n\t\tvar selectedEntry = this.selectedMap[fileEntry.Id];\r\n\t\t\r\n        return ((!selectedEntry)&&(recipeEntry));\r\n    }\r\n    \r\n    isAdded(fileEntry) {\r\n        var recipeEntry = this.initialRecipeEntryInfo.fileEntryMapOfRecipeEntries[fileEntry.Id];\r\n\t\tvar selectedEntry = this.selectedMap[fileEntry.Id];\r\n\t\t\r\n        return ((selectedEntry)&&(!recipeEntry));\r\n    }\r\n    \r\n    isSelected(fileEntry) {\r\n        var selectedEntry = this.selectedMap[fileEntry.Id];\r\n\t\r\n\t\t//don't filter selected cells\r\n\t\treturn (selectedEntry !== undefined);\r\n    }\r\n    \r\n    isUpdated(fileEntry) {\r\n        return !apogee.util.jsonEquals(this.getActiveInsertionInfo(fileEntry),this.getInitialInsertionInfo(fileEntry));\r\n    }\r\n\t\t\r\n\tgetActiveInsertionInfo(fileEntry) {\r\n\t    var selectedEntry = this.selectedMap[fileEntry.Id];\r\n\t    if(selectedEntry) return selectedEntry.insertionInfo;\r\n\t    else return null;\r\n\t}\r\n\t\r\n\tgetInitialInsertionInfo(fileEntry) {\r\n\t    var recipeEntry = this.initialRecipeEntryInfo.fileEntryMapOfRecipeEntries[fileEntry.Id];\r\n\t    if(recipeEntry) return recipeEntry.Fields.insertion_info;\r\n\t    else return null;\r\n\t}\r\n\r\n\r\n\t//=================================\r\n\t// Filters\r\n\t//=================================\r\n\t\r\n\t//create the overrall filter function\r\n\toverallDropdownFilter(fileEntry) {\r\n\t    if(this.isSelected(fileEntry)) return true;\r\n\t\t\r\n\t\tvar resultOk = true;\r\n\t\tvar fileEntry = fileEntry;\r\n\r\n\t\tvar singleFilterPass = (filterStruct) => {\r\n\t\t\tif(filterStruct.selectionActive) {\r\n\t\t\t\t return (filterStruct.filterFunction(fileEntry) == filterStruct.selection);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn this.filterStructs.every(singleFilterPass);\r\n\t}\r\n\r\n\t/* This initializes the filters */\r\n\tinitializeFilters() {\r\n\r\n\t\t//define the filters\r\n\t\tvar baseFilterList = [\r\n\t\t\t[\"Section\",(fileEntry) => fileEntry.Fields.entry_section],\r\n\t\t];\r\n\t\t\r\n\t\tvar typeSpecificFilters = this.getTypeSpecificFilters(this.metaFileType);\r\n\t\t\r\n\t\tvar filterList = typeSpecificFilters ? baseFilterList.concat(typeSpecificFilters) : baseFilterList;\r\n\t\t\r\n\t\t//create the working filter struct\r\n\t\tvar createFilterStruct = (filterListEntry) => {\r\n\t\t\tvar struct = {};\r\n\t\t\tstruct.filterFunction = filterListEntry[1];\r\n\t\t\tstruct.title = filterListEntry[0];\r\n\t\t\tstruct.optionSet = null;\r\n\t\t\tstruct.selectionActive = false;\r\n\t\t\tstruct.selection = null;\r\n\t\t\tstruct.selectElement = null;\r\n\t\t\treturn struct;\r\n\t\t}\r\n\t\tthis.filterStructs = filterList.map(createFilterStruct); \r\n\t\t\r\n\t\t//create the fiter display elements\r\n\t\tapogeeapp.ui.removeAllChildren(this.filterCell);\r\n\t\tvar createFilterEntry = (filterStruct) => {\r\n\t\t\tthis.filterCell.appendChild(this.getFilterElement(filterStruct));\r\n\t\t}\r\n\t\tthis.filterStructs.forEach(createFilterEntry);\r\n\t\t\r\n\t\t//add the free text filter\r\n\t\tthis.filterCell.appendChild(this.createFreeTextFilterElement());\r\n\t}\r\n\r\n\t/** This creates a dom element for the filter select */\r\n\tgetFilterElement(filterStruct) {\r\n\t\tvar container = document.createElement(\"div\");\r\n\t\tcontainer.className = \"editMeta_filterContainerClass\";\r\n\t\t\r\n\t\tcontainer.appendChild(document.createTextNode(filterStruct.title));\r\n\t\t\r\n\t\tvar selectElement = document.createElement(\"select\");\r\n\t\tfilterStruct.selectElement = selectElement;\r\n\t\tcontainer.appendChild(selectElement);\r\n\t\t\r\n\t\t//handler = make selection and reload file entries\r\n\t\tfilterStruct.selectElement.onchange = (event) => {\r\n\t\t\tif(selectElement.value == NULL_SELECTION) {\r\n\t\t\t\tfilterStruct.selectionActive = false;\r\n\t\t\t\tfilterStruct.selection = null;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tfilterStruct.selectionActive = true;\r\n\t\t\t\tfilterStruct.selection = selectElement.value;\r\n\t\t\t}\r\n\t\t\tthis.loadEntries();\r\n\t\t};\r\n\t\t\r\n\t\treturn container;\r\n\t}\r\n\r\n\r\n\r\n\t/** This creates a dom element for the filter select */\r\n\tcreateFreeTextFilterElement() {\r\n\t\tvar container = document.createElement(\"div\");\r\n\t\tcontainer.className = \"editMeta_filterContainerClass\";\r\n\t\t\r\n\t\tcontainer.appendChild(document.createTextNode(\"Free text\"));\r\n\t\t\r\n\t\tthis.freeTextFilterEntry = document.createElement(\"input\");\r\n\t\tthis.freeTextFilterEntry.type = \"text\";\r\n\t\tthis.freeTextFilterEntry.oninput = () => this.onFilterKeyTyped();\r\n\t\tcontainer.appendChild(this.freeTextFilterEntry);\r\n\t\t\r\n\t\treturn container;\r\n\t}\r\n\r\n\r\n\t/** This method populates the options into the filter struct. */\r\n\tpopulateFilterSelect(filterStruct) {\r\n\t\tapogeeapp.ui.removeAllChildren(filterStruct.selectElement);\r\n\t\t\r\n\t\tfilterStruct.selectElement.add(apogeeapp.ui.createElement(\"option\",{\"text\":NULL_SELECTION}));\r\n\t\t\r\n\t\tfor(var option in filterStruct.optionSet) {\r\n\t\t\tfilterStruct.selectElement.add(apogeeapp.ui.createElement(\"option\",{\"text\":option}));\r\n\t\t}\r\n\t\t\r\n\t\tif(filterStruct.selectionActive) {\r\n\t\t\tfilterStruct.selectElement.value = filterStruct.selection;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfilterStruct.selectElement.value = NULL_SELECTION;\r\n\t\t}\r\n\t}\r\n\r\n\t/** This method populates the allowed options for each filter in the list. It does this\r\n\t * sequentially, meaning the options for later filters depend on the current selection in previous filters. */\r\n\tpopulateFilterOptions() {\r\n\t\t\r\n\t\t//the create options function, for use with reduce\r\n\t\tvar createOptionsAndFilterList = (filterStruct) => {\r\n\t\t    \r\n\t\t    //filter out list for next filter, if selection active\r\n\t\t\tvar fileEntryList = this.availableFileEntries.filter( (fileEntry) => {\r\n\t\t\t\tif(filterStruct.selectionActive) {\r\n\t\t\t\t\t return (filterStruct.filterFunction(fileEntry) == filterStruct.selection);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t//populate filter option set\r\n\t\t\tvar addToOptionSet = (optionSet,fileEntry) => {\r\n\t\t\t\tvar value = filterStruct.filterFunction(fileEntry);\r\n\t\t\t\toptionSet[value] = true;\r\n\t\t\t\treturn optionSet;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfilterStruct.optionSet = fileEntryList.reduce(addToOptionSet,{});\r\n\t\t\t\r\n\t\t\t//update selection active = clear it if it was set to something that was not an option\r\n\t\t\tif(filterStruct.selectionActive) {\r\n\t\t\t\tif(!filterStruct.optionSet[filterStruct.selection]) {\r\n\t\t\t\t\tfilterStruct.selectionActive = false;\r\n\t\t\t\t\tfilterStruct.selection = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//populate the ui element for these new options\r\n\t\t\tthis.populateFilterSelect(filterStruct);\r\n\t\t}\r\n\t\t\r\n\t\tthis.filterStructs.forEach(createOptionsAndFilterList)\r\n\t}\r\n\r\n\tgetTypeSpecificFilters(metaFileType) {\r\n\t\treturn TYPE_SPECIFIC_FILTERS[metaFileType];\r\n\t}\r\n\t\r\n\tfileEntrySorter(fileEntry1,fileEntry2) {\r\n        //order the changed entries at the top\r\n        var changed1 = (this.isRemoved(fileEntry1)||this.isAdded(fileEntry1)||(this.isUpdated(fileEntry1)));\r\n        var changed2 = (this.isRemoved(fileEntry2)||this.isAdded(fileEntry2)||(this.isUpdated(fileEntry2)));\r\n        if((changed1)&&(!changed2)) return -1;\r\n        if((!changed1)&&(changed2)) return 1;\r\n        \r\n        return fileEntry1.Fields.entry_name.localeCompare(fileEntry2.Fields.entry_name);\r\n    }\r\n\r\n\r\n\t//text filter methods\r\n\tonFilterKeyTyped() {\r\n\t\tif(this.filterTimer) {\r\n\t\t\tclearTimeout(this.filterTimer);\r\n\t\t\tthis.filterTimer = null;\r\n\t\t}\r\n\t\t\r\n\t\tthis.filterTimer = setTimeout(() => this.updateTextFilter(),TEXT_FILTER_DELAY);\r\n\t}\r\n\r\n\tupdateTextFilter() {\r\n\t\t//clear timer\r\n\t\tthis.filterTimer = null;\r\n\t\t\r\n\t\t//reload the entries\r\n\t\tthis.loadEntries();\r\n\t}\r\n\r\n\t\r\n\t\r\n\t\r\n};\r\n\r\nreturn new MetaEditForm();\r\n","css":".editMeta_table {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    border-collapse: collapse;\n}\n.editMeta_selectedColumn {\n    width: 45%;\n}\n.editMeta_centerColumn {\n    width: 5%;\n}\n.editMeta_availableColumn {\n    width: 45%;\n}\n\n\n.editMeta_listCell {\n    vertical-align: top;\n    height: 100%;\n    overflow: hidden;\n}\n.editMeta_displayDiv {\n    height: 100%;\n    overflow: auto; \n    border: 1px solid black;\n    background-color: white;\n}\n\n.editMeta_option_container {\n    border: 1px solid black;\n    overflow: auto; \n}\n.editMeta_optionTitle {\n    border: 1px solid black;\n    background-color: lightgray;\n    height: 20px;\n}\n.editMeta_optionDisplayDiv {\n    height: 400px;\n    border: 1px solid black;\n    background-color: white;\n}\n\n.editMeta_filterContainerClass {\n    display: inline;\n    margin: 5px;\n}\n\n.editMeta_listEntry {\n  border: 1px solid darkgray;\n  padding: 2px;\n}\n.editMeta_listEntry_added {\n  background-color: #ccffcc;\n}\n.editMeta_listEntry_removed {\n  background-color: #ffcccc;\n}\n.editMeta_listEntry_updated {\n  background-color: #ffffcc;\n}\n.editMeta_entryLabel {\n    font-weight: bold;\n}\n.editMeta_entryDataOpened {\n}\n.editMeta_entryDataClosed {\n  display:none;\n}\n.editMeta_preformatText {\n  border: 1px solid gray;\n  background-color: #e0e0e0;\n  color: blue;\n}\n.editMeta_alertText {\n    font-weight: bold;\n    color: red;\n}","html":"<table class=\"editMeta_table\">\n    <tr>\n        <td colspan=\"3\">\n            <h2>Edit Metafile</h2>\n        </td>\n    </tr>\n     <tr>\n        <td id=\"editMeta4_filterCell\" colspan=\"3\">\n            put filters here...\n        </td>\n    </tr>\n    <tr>\n        <td class=\"editMeta_selectedColumn\">\n            <h3>Selected</h3>\n        </td>\n        <td class=\"editMeta_centerColumn\">&nbsp;</td>\n        <td class=\"editMeta_availableColumn\">\n            <h3>Available</h3>\n        </td>\n    </tr>\n    <tr>\n        <td class=\"editMeta_listCell\">\n            <div id=\"editMeta4_parentSelectedCell\" class=\"editMeta_displayDiv\"></div>\n        </td>\n        <td>&nbsp;</td>\n        <td class=\"editMeta_listCell\">\n            <div id=\"editMeta4_availableCell\" class=\"editMeta_displayDiv\"></div>\n        </td>\n    </tr>\n    <tr>\n        <td colspan=\"3\">\n            <input type=\"button\" value=\"Reset\" id=\"editMeta4_resetButton\">\n        </td>\n    </tr>\n</table>\n"},"destroyOnInactive":false}}},"commit":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":51,"y":103}},"treeState":1,"children":{"commitResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":617,"height":218},"posInfo":{"x":735,"y":212},"state":0,"viewType":"Data"},"dataView":"Colorized"},"instructionList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":477,"height":346},"posInfo":{"x":132,"y":370},"state":0,"viewType":"Data"},"dataView":"Colorized"},"submitForm":{"type":"apogeeapp.app.DynamicForm","windowState":{"sizeInfo":{"width":550,"height":212},"posInfo":{"x":48,"y":44},"state":0,"viewType":"Output"}},"commitResult":{"type":"apogeeapp.app.DynamicForm","windowState":{"sizeInfo":{"width":348,"height":58},"posInfo":{"x":734,"y":85},"state":0,"viewType":"Output"}}}},"selectParents":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":41,"y":99}},"treeState":-1,"children":{"metaFileList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":1082,"height":334},"posInfo":{"x":39,"y":72},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"availableMetaFiles":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":743,"height":320},"posInfo":{"x":46,"y":118},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"configInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":387,"height":232},"posInfo":{"x":954,"y":86},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"depInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":593,"height":394},"posInfo":{"x":956,"y":132},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"relationForUseType":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":1042,"y":247},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"selectParentFiles":{"type":"apogeeapp.app.FormDataComponent","windowState":{"sizeInfo":{"width":645,"height":200},"posInfo":{"x":358,"y":268},"state":0,"viewType":"Form"}},"initialParentInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":732,"height":459},"posInfo":{"x":463,"y":38},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"parentMetaFileOptions":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":1007,"height":430},"posInfo":{"x":23,"y":243},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"updatedParentIds":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":453,"height":261},"posInfo":{"x":23,"y":288},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"updatedParentEntryRecords":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":863,"height":365},"posInfo":{"x":22,"y":482},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"getUpdatedParentEntries":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":462,"y":114},"state":-1,"viewType":"Code"}}}},"completed":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":384,"y":69}},"treeState":-1,"children":{"resetForm":{"type":"apogeeapp.app.DynamicForm","windowState":{"sizeInfo":{"width":264,"height":168},"posInfo":{"x":96,"y":44},"state":0,"viewType":"Output"}}}}}},"micemetarDataAccess":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":168,"y":67}},"treeState":-1,"children":{"createRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":560,"height":321},"posInfo":{"x":33,"y":368},"state":-1,"viewType":"Private"}},"recordsToCreateInstructions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":834,"height":391},"posInfo":{"x":30,"y":472},"state":-1,"viewType":"Code"}},"createCommitBody":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":568,"height":400},"posInfo":{"x":629,"y":225},"state":-1,"viewType":"Code"}},"createRequestOptions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":523,"height":254},"posInfo":{"x":822,"y":379},"state":-1,"viewType":"Code"}},"host":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":353,"height":71},"posInfo":{"x":15,"y":6},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"commitUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":433,"height":107},"posInfo":{"x":14,"y":98},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"requestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":450,"height":68},"posInfo":{"x":14,"y":58},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"dataSetInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":882,"height":611},"posInfo":{"x":317,"y":144},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"createUpdateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":1002,"height":655},"posInfo":{"x":37,"y":247},"state":-1,"viewType":"Code"}},"createCreateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":994,"height":643},"posInfo":{"x":39,"y":209},"state":-1,"viewType":"Code"}},"getFieldErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":512,"height":68},"posInfo":{"x":761,"y":616},"state":-1,"viewType":"Code"}},"getRecordErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":81},"posInfo":{"x":762,"y":664},"state":-1,"viewType":"Code"}},"createDeleteInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":678,"height":540},"posInfo":{"x":36,"y":289},"state":-1,"viewType":"Code"}},"getRecordInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":480,"height":400},"posInfo":{"x":818,"y":427},"state":-1,"viewType":"Code"}},"combinedEntriesToInstructionList":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":721,"height":524},"posInfo":{"x":31,"y":516},"state":-1,"viewType":"Private"}},"getCommitPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":569,"height":109},"posInfo":{"x":316,"y":26},"state":-1,"viewType":"Code"}},"getRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":546,"height":89},"posInfo":{"x":315,"y":67},"state":-1,"viewType":"Code"}},"customRequestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":17,"y":142},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"getCustomRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":668,"height":88},"posInfo":{"x":317,"y":104},"state":-1,"viewType":"Code"}}}},"settings":{"type":"apogeeapp.app.FormDataComponent","windowState":{"sizeInfo":{"width":793,"height":410},"posInfo":{"x":28,"y":141},"state":0,"viewType":"Form"}}}},"activeTabMember":"Model.tasks.login"}