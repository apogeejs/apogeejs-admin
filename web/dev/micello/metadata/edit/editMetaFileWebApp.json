{"fileType":"apogee app js workspace","version":"0.40","references":[],"workspace":{"fileType":"apogee workspace","version":0.2,"name":"editMetaDataWebApp","data":{"name":"Model","type":"apogee.Folder","children":{"tasks":{"name":"tasks","type":"apogee.Folder","children":{"commonData":{"name":"commonData","type":"apogee.Folder","children":{"fileTypeList":{"name":"fileTypeList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var sessionKey = login.getSessionKey();\nif(!sessionKey) return null;\n\nvar fileTypeSearch = {};\nfileTypeSearch.search = \"file_type_list\";\n\nreturn micemetarDataAccess.getRequestPromise(fileTypeSearch,sessionKey);\n\n","supplementalCode":"","description":""}},"fileTypeIdToName":{"name":"fileTypeIdToName","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!fileTypeList) return null;\nif(!fileTypeList.success) throw new Error(\"Error loading file type list: \" + fileTypeList.msg);\n\nvar output = {};\n\nvar addToMap = (record) => {output[record.Id] = record.Fields.file_type_name;}\n\nfileTypeList.data.Response.forEach(addToMap);\n\nreturn output;","supplementalCode":"","description":""}},"fileTypeNameToId":{"name":"fileTypeNameToId","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!fileTypeList) return null;\n\nvar output = {};\n\nvar addToMap = (record) => {output[record.Fields.file_type_name] = record.Id;}\n\nfileTypeList.data.Response.forEach(addToMap);\n\nreturn output;","supplementalCode":"","description":""}},"customerInfo":{"name":"customerInfo","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"const url = settings.data.customerFileUrl;\nreturn apogee.net.jsonRequest(url);","supplementalCode":"","description":""}},"INACTIVE_LAYOUT":{"name":"INACTIVE_LAYOUT","type":"apogee.JsonTable","updateData":{"data":{"lines":[{"type":"title","title":"inactive"}]},"description":""}},"DUMMY_DROPDOWN_ENTRY":{"name":"DUMMY_DROPDOWN_ENTRY","type":"apogee.JsonTable","updateData":{"data":"---","description":""}},"GLOBAL_CONTEXT":{"name":"GLOBAL_CONTEXT","type":"apogee.JsonTable","updateData":{"data":"public","description":""}},"CID_CONTEXT_PREFIX":{"name":"CID_CONTEXT_PREFIX","type":"apogee.JsonTable","updateData":{"data":"com_","description":""}},"DEFAULT_COM_FILE_NAME":{"name":"DEFAULT_COM_FILE_NAME","type":"apogee.JsonTable","updateData":{"data":"Standard","description":""}},"DEFAULT_META_FILE_NAME":{"name":"DEFAULT_META_FILE_NAME","type":"apogee.JsonTable","updateData":{"data":"Standard","description":""}},"getFileTypeName":{"name":"getFileTypeName","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeId"],"functionBody":"return fileTypeIdToName[fileTypeId];","supplementalCode":"","description":""}},"getFileTypeId":{"name":"getFileTypeId","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeName"],"functionBody":"return commonData.fileTypeNameToId[fileTypeName];","supplementalCode":"","description":""}}}},"login":{"name":"login","type":"apogee.Folder","children":{"loginUrl":{"name":"loginUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return settings.data.loginUrl;","supplementalCode":"","description":""}},"sessionResponse":{"name":"sessionResponse","type":"apogee.JsonTable","updateData":{"data":"","description":""}},"savedUserName":{"name":"savedUserName","type":"apogee.JsonTable","updateData":{"data":"","description":""}},"loginControl":{"name":"loginControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var onSubmit = (formData) => {\n    \n    //on click\n    var bodyJson = {};\n    bodyJson.userName = formData.userName;\n    bodyJson.password = formData.password;\n    \n    var options = {};\n    options.body = JSON.stringify(bodyJson);\n    options.method = \"POST\";\n    \n    var requestPromise = apogee.net.jsonRequest(loginUrl,options);\n    \n    //set the response\n    apogeeMessenger.asynchDataUpdate(\"sessionResponse\",requestPromise);\n    \n    //this clears the password...\n    apogeeMessenger.dataUpdate(\"savedUserName\",formData.userName);\n}\n\nvar onClear = () => {\n    var data = [];\n    data.push([\"savedUserName\",null]);\n    data.push([\"sessionResponse\",null]);\n    apogeeMessenger.compoundDataUpdate(data);\n}\n\nvar layout = [];\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Login\";\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"User Name: \";\nentry.key = \"userName\";\nentry.value = savedUserName;\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Password: \";\nentry.password = true;\nentry.key = \"password\";\nlayout.push(entry);\n\n//suvbmit\nentry = {};\nentry.type = \"submit\";\nentry.onSubmit = onSubmit;\nentry.onCancel = onClear;\nentry.cancelLabel = \"Clear\";\nlayout.push(entry);\n\nreturn layout;\n","supplementalCode":"","description":""}},"appendQueryParams":{"name":"appendQueryParams","type":"apogee.FunctionTable","updateData":{"argList":["inUrl"],"functionBody":"if((!sessionResponse)||(!sessionResponse.paramTable)) {\n    throw new Error(\"Param table not loaded!\");\n}\n\nvar isMatchingKey = (paramEntry) => inUrl.startsWith(paramEntry.urlPattern);\n\nvar paramEntry = sessionResponse.paramTable.find(isMatchingKey);\n\nif(paramEntry) {\n    if(paramEntry.params.length > 1) {\n        throw new Error(\"Code only supports 1 appended parameter. (Is an easy fi to add more)\")\n    }\n    else if(paramEntry.params.length === 1) {\n        return inUrl + \"?\" + paramEntry.params[0][0] + \"=\" + paramEntry.params[0][1];\n    }\n}\n      \n//no params to add\nreturn inUrl;\n","supplementalCode":"","description":""}},"getSessionKey":{"name":"getSessionKey","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"if((sessionResponse)&&(sessionResponse.sessionKey)) {\n    return sessionResponse.sessionKey;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"loginResult":{"name":"loginResult","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var msg;\n\nif(!sessionResponse) {\n    msg = \"Login Needed!\";\n    style = \"color:red\";\n}\nelse if(sessionResponse.responseCode == 1) {\n    msg = \"Login Success\";\n    style = \"color:blue\";\n}\nelse {\n    msg = \"Login Failure: \" + sessionResponse.message;\n    style = \"color:red\";\n}\n\nvar textEntry = {};\ntextEntry.type = \"htmlDisplay\";\ntextEntry.html = \"<span style='\" + style + \"' + >\" + msg + \"</span>\";\n\nreturn [textEntry];\n","supplementalCode":"","description":""}}}},"loadContext":{"name":"loadContext","type":"apogee.Folder","children":{"contexts":{"name":"contexts","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var data = {};\n\nvar cidCustomerContext;\n\nif((selectContext.data)&&(selectContext.data.fileScope)) {\n    switch(selectContext.data.fileScope) {\n        case \"general\":\n            data.fileContext = commonData.GLOBAL_CONTEXT;\n            break;\n            \n        case \"customer\":\n            if(selectContext.data.customerPanel) {\n                data.fileContext = selectContext.data.customerPanel.customerAuth;\n            }\n            break;\n            \n        case \"cid\":\n            if(selectContext.data.cidPanel) {\n                var cid = parseInt(selectContext.data.cidPanel.cid);\n                if((cid)&&(cid > 0)) {\n                    data.fileContext = commonData.CID_CONTEXT_PREFIX + cid\n                }\n                else {\n                    throw new Error(\"Invalid CID!\");\n                }\n                \n                if(selectContext.data.cidPanel.customerAuth != \"\") {\n                    cidCustomerContext = selectContext.data.cidPanel.customerAuth;\n                }\n            }\n            break;\n    }\n    \n    //add additoinal contexts\n    data.otherContexts = [];\n    \n    var addToOtherContexts = context => {\n        if(data.otherContexts.indexOf(context) < 0) {\n            data.otherContexts.push(context);\n        }\n    }\n    \n    if(selectContext.data.additionalContexts) {\n        var additionalContexts = selectContext.data.additionalContexts.split(/[\\s,]+/);\n        additionalContexts.forEach(addToOtherContexts);\n    }\n    \n    if(data.fileContext != commonData.GLOBAL_CONTEXT) {\n        addToOtherContexts(commonData.GLOBAL_CONTEXT);\n    }\n    \n    if(cidCustomerContext) {\n        if(data.otherContexts.indexOf(cidCustomerContext) < 0) {\n            data.otherContexts.push(cidCustomerContext);\n        }\n    }\n    \n    \n}\n\nif(data.fileContext) {\n    return data;\n}\nelse {\n    return null;\n}\n","supplementalCode":"","description":""}},"selectContext":{"name":"selectContext","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"\n//------------\n//create layout\n//------------\nvar layout = [];\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Select Metafile Context\";\nlayout.push(entry);\n\n//section\nvar DEFAULT_FILE_SCOPE = \"customer\";\nentry = {};\nentry.type = \"dropdown\";\nentry.label = \"File Scope: \";\nentry.key = \"fileScope\";\nentry.entries = FILE_SCOPE_NAMES;\n//---------------------\n//temp - set this to an invalid value so the user must enter something\n//as of when this was written, the initial form never has the save button\nentry.value = \"\"\n//--------------------\nlayout.push(entry);\n\n//panels\nvar childFormData;\n\n//==================\n//general scope panel\n//==================\nchildFormData = [];\n\nentry = {};\nentry.type = \"panel\";\nentry.formData = childFormData;\nentry.key = \"generalPanel\";\nentry.selector = {\n    parentKey: \"fileScope\",\n    parentValue: \"general\"\n}\n//entry.state = (entry.key == activePanelKey) ? apogeeapp.ui.ConfigurableElement.STATE_NORMAL : apogeeapp.ui.ConfigurableElement.STATE_INACTIVE;\nlayout.push(entry);\n\n//==================\n//customer scope panel\n//==================\nchildFormData = [];\n\n\n//customer name\nentry = {};\nentry.type = \"dropdown\";\nentry.label = \"Customer Name: \";\nentry.entries = _getCustomerList();\nentry.key = \"customerAuth\";\nchildFormData.push(entry);\n\nentry = {};\nentry.type = \"panel\";\nentry.formData = childFormData;\nentry.key = \"customerPanel\";\nentry.selector = {\n    parentKey: \"fileScope\",\n    parentValue: \"customer\"\n}\n//entry.state = (entry.key == activePanelKey) ? apogeeapp.ui.ConfigurableElement.STATE_NORMAL : apogeeapp.ui.ConfigurableElement.STATE_INACTIVE;\nlayout.push(entry);\n\n\n//==================\n//cid scope panel\n//==================\nchildFormData = [];\n\n//cid\nentry = {};\nentry.type = \"textField\";\nentry.label = \"CID: \";\nentry.key = \"cid\";\nchildFormData.push(entry);\n\n//customer name\nentry = {};\nentry.type = \"dropdown\";\nentry.label = \"Customer Name: \";\nentry.entries = _getCustomerListWithNullOption();\nentry.key = \"customerAuth\";\nchildFormData.push(entry);\n\nentry = {};\nentry.type = \"panel\";\nentry.formData = childFormData;\nentry.key = \"cidPanel\";\nentry.selector = {\n    parentKey: \"fileScope\",\n    parentValue: \"cid\"\n}\n//entry.state = (entry.key == activePanelKey) ? apogeeapp.ui.ConfigurableElement.STATE_NORMAL : apogeeapp.ui.ConfigurableElement.STATE_INACTIVE;\nlayout.push(entry);\n\n///////////////////////////////////////\n\n//additional\nentry = {};\nentry.type = \"textarea\";\nentry.label = \"Additional Contexts: \";\nentry.rows = 4;\nentry.cols = 30;\nentry.key = \"additionalContexts\";\nlayout.push(entry);\n\n\nreturn layout;\n","supplementalCode":"const FILE_SCOPE_NAMES = [[\"CID\",\"cid\"],[\"Customer\",\"customer\"],[\"General\",\"general\"]];\n\nfunction _getCustomerList() {\n    return commonData.customerInfo.map(entry => [entry.customerName,entry.authString]);\n}\n\nfunction _getCustomerListWithNullOption() {\n    var list = [];\n    list.push([commonData.DUMMY_DROPDOWN_ENTRY,\"\"]);\n    return list.concat(_getCustomerList());\n}","description":""}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":null,"description":""}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":"","description":""}}},"childrenNotWriteable":true},"getFileContext":{"name":"getFileContext","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"if(contexts) {\n    return contexts.fileContext;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"getOtherContexts":{"name":"getOtherContexts","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"if(contexts) {\n    return contexts.otherContexts;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"getAllContexts":{"name":"getAllContexts","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"var fileContext = getFileContext();\nvar otherContexts = getOtherContexts();\nif((fileContext)&&(otherContexts)) {\n    return [fileContext].concat(otherContexts);\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}}}},"selectMetaFile":{"name":"selectMetaFile","type":"apogee.Folder","children":{"metaFileList":{"name":"metaFileList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var sessionKey = login.getSessionKey();\nif(!sessionKey) return null;\n\nvar context = loadContext.getFileContext();\nif(!context) return null;\n\nvar searchDef = {};\nsearchDef.search = \"meta_file_list\";\nsearchDef.file_context = context;\n\nreturn micemetarDataAccess.getRequestPromise(searchDef,sessionKey);\n\n","supplementalCode":"","description":""}},"metaFileFormEntries":{"name":"metaFileFormEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(metaFileList && metaFileList.data && metaFileList.data.Response) {\n    return metaFileList.data.Response.map(_createFormEntry);\n}   \nelse {\n    return null;\n}","supplementalCode":"function _createFormEntry(record) {\n    var entry = [];\n    entry.push(_getRecordName(record));\n    entry.push(record.Id);\n    \n    return entry;\n}\n\nfunction _getRecordName(record) {\n    var fileType =  commonData.getFileTypeName(record.Fields.file_type_id);\n    var optionName = record.Fields.name;\n    \n    return fileType + \" (\" + optionName + \")\"\n}","description":""}},"selectMetaFile":{"name":"selectMetaFile","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"//------------\n//create layout\n//------------\nvar layout = [];\nvar entry;\n\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Select Metadata File\";\nlayout.push(entry);\n\n//section\nvar DEFAULT_CREATE_OR_UPDATE = \"update\";\nentry = {};\nentry.type = \"radioButtonGroup\";\nentry.groupName = \"corg\";\nentry.key = \"createOrUpdate\";\nentry.entries = TASK_NAMES;\nentry.horizontal = true;\nentry.value = DEFAULT_CREATE_OR_UPDATE;\nlayout.push(entry);\n\n//horizontal rule\nentry = {};\nentry.type = \"htmlDisplay\";\nentry.html = \"<hr>\";\nlayout.push(entry);\n\n//panels\n\n\n//==================\n//create panel\n//==================\nchildFormData = [];\n\n//create\nentry = {};\nentry.type = \"dropdown\";\nentry.label = \"File Type: \";\nentry.entries = FILE_TYPES;\nentry.key = \"fileType\";\nchildFormData.push(entry);\n\nentry = {};\nentry.type = \"radioButtonGroup\";\nentry.groupName = \"boro\";\nentry.key = \"baseOrOverride\";\nentry.entries = [[\"Base\",\"base\"],[\"Override\",\"override\"]];\nentry.horizontal = true;\nentry.value = \"\";\nchildFormData.push(entry);\n\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Meta File Name: \";\nentry.key = \"name\";\nchildFormData.push(entry);\n\nentry = {};\nentry.type = \"panel\";\nentry.formData = childFormData;\nentry.key = \"createPanel\";\nentry.selector = {\n    parentKey: \"createOrUpdate\",\n    parentValue: \"create\"\n}\nlayout.push(entry);\n\n\n//==================\n//update panel\n//==================\nchildFormData = [];\n\n//create\nentry = {};\nentry.type = \"dropdown\";\nentry.label = \"Meta File: \";\nentry.entries = metaFileFormEntries;\nentry.key = \"metaFileId\";\nchildFormData.push(entry);\n\nentry = {};\nentry.type = \"panel\";\nentry.formData = childFormData;\nentry.key = \"updatePanel\";\nentry.selector = {\n    parentKey: \"createOrUpdate\",\n    parentValue: \"update\"\n}\nlayout.push(entry);\n\n///////////////////////////////////////\n\n//horizontal rule\nentry = {};\nentry.type = \"htmlDisplay\";\nentry.html = \"<hr>\";\nlayout.push(entry);\n\n\nreturn {layout:layout};\n","supplementalCode":"const TASK_NAMES = [[\"Create\",\"create\"],[\"Update\",\"update\"]];\n\nconst FILE_TYPES = [[\"Property Rules\",\"propertyRules\"],[\"Theme Rules\",\"themeRules\"],[\"Theme\",\"theme\"],[\"Strings\",\"strings\"],[\"Input Colors\",\"inputColors\"]];\n","description":""}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":null,"description":""}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":"","description":""}}},"childrenNotWriteable":true},"createMetaFileFields":{"name":"createMetaFileFields","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((createOrUpdate == \"create\")&&\n    (selectMetaFile.data.createPanel)) {\n    \n    var fields = {};\n    fields.file_type_id = commonData.getFileTypeId(selectMetaFile.data.createPanel.fileType);\n    fields.file_context = loadContext.getFileContext();\n    fields.name = selectMetaFile.data.createPanel.name;\n    fields.use_type = selectMetaFile.data.createPanel.baseOrOverride;\n    return fields;\n    \n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"createOrUpdate":{"name":"createOrUpdate","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!selectMetaFile.data) {\n    return null;\n}\n\nswitch(selectMetaFile.data.createOrUpdate) {\n    case \"create\":\n    case \"update\":\n        return selectMetaFile.data.createOrUpdate;\n        \n    default:\n        return null;\n}","supplementalCode":"","description":""}},"activeMetaFileRecord":{"name":"activeMetaFileRecord","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((createOrUpdate == \"update\")&&\n    (selectMetaFile.data.updatePanel)&&\n    (metaFileList)&&\n    (metaFileList.success)) {\n        \n    var selectedId = parseInt(selectMetaFile.data.updatePanel.metaFileId);\n\n    return metaFileList.data.Response.find( record => (record.Id == selectedId));\n}\nelse if((createOrUpdate == \"create\")&&\n    (createMetaFileFields != null)) {\n    return micemetarDataAccess.createRecord(\"meta_file\",createMetaFileFields);\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"getCreateOrUpdate":{"name":"getCreateOrUpdate","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return createOrUpdate;","supplementalCode":"","description":""}},"getActiveMetaFileRecord":{"name":"getActiveMetaFileRecord","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return activeMetaFileRecord;","supplementalCode":"","description":""}},"metaFileDownload":{"name":"metaFileDownload","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var sessionKey = login.getSessionKey();\nif(!sessionKey) return null;\n\nif(createOrUpdate == \"update\") {\n    if(activeMetaFileRecord) {\n        var id = activeMetaFileRecord.Id;\n        \n        var searchDef = {};\n        searchDef.search = \"meta_file_short\";\n        searchDef.id = id;\n        \n        return micemetarDataAccess.getRequestPromise(searchDef,sessionKey);\n    }\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"initialParentEntryList":{"name":"initialParentEntryList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var result;\n\nif(createOrUpdate == \"update\") {\n\n    if((metaFileDownload)&&(metaFileDownload.success)) {\n        var isParentEntry = record => (record.Type == \"meta_parent_entry\");\n        return metaFileDownload.data.Records.filter(isParentEntry);\n    }\n    else {\n        return null;\n    }\n}\nelse if(createOrUpdate == \"create\") {\n    return [];\n}\nelse {\n    result = null;\n}\n\nreturn result;","supplementalCode":"","description":""}},"initialRecipeEntryList":{"name":"initialRecipeEntryList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var result;\n\nif(createOrUpdate == \"update\") {\n\n    if((metaFileDownload)&&(metaFileDownload.success)) {\n        var isRecipeEntry = record => (record.Type == \"recipe_entry\");\n        return metaFileDownload.data.Records.filter(isRecipeEntry);\n    }\n    else {\n        return null;\n    }\n}\nelse if(createOrUpdate == \"create\") {\n    return [];\n}\nelse {\n    result = null;\n}\n\nreturn result;","supplementalCode":"","description":""}},"getInitialRecipeEntryList":{"name":"getInitialRecipeEntryList","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return initialRecipeEntryList;","supplementalCode":"","description":""}},"getInitialParentEntryList":{"name":"getInitialParentEntryList","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return initialParentEntryList;","supplementalCode":"","description":""}}}},"editMetaFile":{"name":"editMetaFile","type":"apogee.Folder","children":{"selectEntriesControl":{"name":"selectEntriesControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if( (!availableFileEntries) ||\n    (!initialRecipeEntryInfo) ||\n    (!activeInsertionInfoOptions)) {\n    return null;\n}\n\nvar data = {};\ndata.availableFileEntries = availableFileEntries;\ndata.initialRecipeEntryInfo = initialRecipeEntryInfo;\ndata.activeInsertionInfoOptions = activeInsertionInfoOptions;\ndata.selectedFileEntryInfo = selectedFileEntryInfo;\n\nreturn data;","supplementalCode":"","description":""}},"fileTypeEntryList":{"name":"fileTypeEntryList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var sessionKey = login.getSessionKey();\nif(!sessionKey) return null;\n\nvar activeMetaFileEntry = selectMetaFile.getActiveMetaFileRecord();\nif(!activeMetaFileEntry)  return null;\n\nvar searchDef = {};\nsearchDef.search = \"file_type_entries\";\nsearchDef.id = activeMetaFileEntry.Fields.file_type_id;\n\n//here we are loading all file entries for the given file type\n//we will filter by context later\n//as an alternative, we could load all contexts specifically\nreturn micemetarDataAccess.getRequestPromise(searchDef,sessionKey);\n\n","supplementalCode":"","description":""}},"insertionInfoOptions":{"name":"insertionInfoOptions","type":"apogee.JsonTable","updateData":{"data":{"themeRules":[{"title":"Priority 0","insertionInfo":{"orderedEntry":0}},{"title":"Priority 1","insertionInfo":{"orderedEntry":1}},{"title":"Priority 2","insertionInfo":{"orderedEntry":2}},{"title":"Priority 3","insertionInfo":{"orderedEntry":3}},{"title":"Priority 4","insertionInfo":{"orderedEntry":4}},{"title":"Priority 5","insertionInfo":{"orderedEntry":5}}],"default":[{"title":"","insertionInfo":null}]},"description":""}},"availableFileEntries":{"name":"availableFileEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((!fileTypeEntryList)||(!fileTypeEntryList.success)) return null;\n\nvar allContexts = loadContext.getAllContexts();\nif(!allContexts) return null;\n\nvar activeMetaFileRecord = selectMetaFile.getActiveMetaFileRecord();\nif(!activeMetaFileRecord) return null;\n\nvar isFileEntry = (record) => (record.Type == \"file_entry\");\nvar isProperType = (record) => (record.Fields.file_type_id == activeMetaFileRecord.Fields.file_type_id);\n\n\nvar allowedContextMap = _getAllowedContextMap(allContexts);\nvar isAllowedContext = record => allowedContextMap[record.Fields.entry_context]\n\n//we will take all entries from the file entry list making sure it is an actual\n//file entry and that it matches the allowed contexts from \"dependentContexts\"\nreturn fileTypeEntryList.data.Records.filter(isFileEntry).filter(isProperType).filter(isAllowedContext);","supplementalCode":"function _getAllowedContextMap(contextList) {\n    var allowedContextMap = {}; \n    contextList.forEach(context => allowedContextMap[context] = true);\n    return allowedContextMap;\n}","description":""}},"initialRecipeEntryInfo":{"name":"initialRecipeEntryInfo","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var activeMetaFileRecord = selectMetaFile.getActiveMetaFileRecord();\nvar recipeList = selectMetaFile.getInitialRecipeEntryList();\nif((activeMetaFileRecord)&&(recipeList)) {\n    var result = {};\n    result.fileEntryMapOfRecipeEntries = {};\n    result.metaFileId = activeMetaFileRecord.Id;\n    \n    var addToMap = record => result.fileEntryMapOfRecipeEntries[record.Fields.file_entry_id] = record;\n    \n    recipeList.forEach(addToMap);\n    return result;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"selectedFileEntryInfo":{"name":"selectedFileEntryInfo","type":"apogee.JsonTable","updateData":{"data":null,"description":""}},"activeInsertionInfoOptions":{"name":"activeInsertionInfoOptions","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var activeMetaFileRecord = selectMetaFile.getActiveMetaFileRecord();\nif(!activeMetaFileRecord) return null;\n\nvar fileTypeName = commonData.getFileTypeName(activeMetaFileRecord.Fields.file_type_id);\n\nvar options = insertionInfoOptions[fileTypeName];\nif(options) return options;\n\noptions = insertionInfoOptions[\"default\"];\nreturn options;","supplementalCode":"","description":""}},"updatedEntries":{"name":"updatedEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var result = {};\nresult.created = [];\nresult.deleted = [];\nresult.updated = [];\n\nif((selectedFileEntryInfo)&&(selectedFileEntryInfo.combinedEntries)&&(selectedFileEntryInfo.metaFileId)) {\n\n    //add meta file, if it is new\n    var activeMetaFile = selectMetaFile.getActiveMetaFileRecord();\n    if(activeMetaFile.Id < 0) {\n        result.created.push(activeMetaFile);\n    }\n\n    //add recipe entries\n    var addToResult = combinedEntry => {\n        if((combinedEntry.selected)&&(!combinedEntry.recipeEntry)) {\n            //newly selected record\n            var newRecord = _createRecipeEntry(selectedFileEntryInfo.metaFileId,combinedEntry.fileEntry,combinedEntry.insertionInfo);\n            result.created.push(newRecord);\n        }\n        else if((!combinedEntry.selected)&&(combinedEntry.recipeEntry)) {\n            //non-selected recipe entry\n            //file entry removed from meta file\n            result.deleted.push(combinedEntry.recipeEntry);\n        }\n        else if((combinedEntry.selected)&&(combinedEntry.recipeEntry)) {\n            //check for a change in insertion info!\n            //different format here - save the initial and final record\n            if(!apogee.util.jsonEquals(combinedEntry.recipeEntry.Fields.insertion_info,combinedEntry.insertionInfo)) {\n                //modified insertion info\n                var oldRecord = combinedEntry.recipeEntry;\n                var newRecord = apogee.util.jsonCopy(oldRecord);\n                newRecord.Fields.insertion_info = combinedEntry.insertionInfo;\n                result.updated.push({\"oldEntry\":oldRecord,\"newEntry\":newRecord})\n            }\n        }\n    }\n\n\n    selectedFileEntryInfo.combinedEntries.forEach(addToResult);\n}\n\nreturn result;","supplementalCode":"function _createRecipeEntry(metaFileId,fileEntry,insertionInfo) {\n    var fields = {};\n    fields.file_entry_id = fileEntry.Id;\n    fields.meta_file_id = metaFileId;\n    fields.insertion_info = insertionInfo;\n    \n    return micemetarDataAccess.createRecord(\"recipe_entry\",fields);\n}","description":""}},"getUpdatedRecipeEntries":{"name":"getUpdatedRecipeEntries","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return updatedEntries;","supplementalCode":"","description":""}}}},"commit":{"name":"commit","type":"apogee.Folder","children":{"commitResponse":{"name":"commitResponse","type":"apogee.JsonTable","updateData":{"data":"","description":""}},"instructionList":{"name":"instructionList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var activeMetaFileRecord = selectMetaFile.getActiveMetaFileRecord();\nif(!activeMetaFileRecord) return null;\n\nvar combinedEntries = {};\n\n//add methods\nvar addCreatedToCombined = createdRecord => {\n    if(combinedEntries[createdRecord.Id]) throw new Error(\"Repeat entry for ID: \" + createdRecord.Id);\n    \n    combinedEntries[createdRecord.Id] = {\"newEntry\":createdRecord};\n}\n\nvar addDeletedToCombined = deletedRecord => {\n    if(combinedEntries[deletedRecord.Id]) throw new Error(\"Repeat entry for ID: \" + deletedRecord.Id);\n    \n    combinedEntries[deletedRecord.Id] = {\"oldEntry\":deletedRecord};\n}\n\nvar addUpdatedToCombined = updatedElement => {\n    var oldRecord = updatedElement.oldRecord;\n    var newRecord = updatedElement.newRecord;\n    if(oldRecord.Id != newRecord.Id) throw new Error(\"Mismatch in created records: \" + oldRecord.Id + \" != \" + newRecord.Id);\n    if(combinedEntries[oldRecord.Id]) throw new Error(\"Repeat entry for ID: \" + oldRecord.Id);\n    \n    combinedEntries[oldRecord.Id] = updatedElement;\n}\n\n//process created meta file\n// if(activeMetaFileRecord.Id < 0) {\n//     addCreatedToCombined(activeMetaFileRecord);\n// }\n\n//process the updated recipe entries\nvar updatedRecipeEntries = editMetaFile.getUpdatedRecipeEntries();\nupdatedRecipeEntries.created.forEach(addCreatedToCombined);\nupdatedRecipeEntries.deleted.forEach(addDeletedToCombined);\nupdatedRecipeEntries.updated.forEach(addUpdatedToCombined);\n\n//process udpate parent entries\nvar updatedParentEntries = selectParents.getUpdatedParentEntries();\nupdatedParentEntries.created.forEach(addCreatedToCombined);\nupdatedParentEntries.deleted.forEach(addDeletedToCombined);\n\n//create instruction list\nvar instructionList = micemetarDataAccess.combinedEntriesToInstructionList(combinedEntries);\n\nreturn instructionList;\n\n\n\n\n\nvar addCreatedToCombinedEntries = createRecord => {\n    var recordId;\n    if(updatedEntry.newEntry) {\n        recordId = updatedEntry.newEntry.Id;\n        \n        //make sure there is a record match!\n        if(updatedEntry.oldEntry) {\n            if(updatedEntry.oldEntry.Id != recordId) {\n                throw new Error(\"Record ID mismatch: \" + recordId + \", \" + updatedEntry.oldEntry.Id);\n            }\n        }\n    }\n    else if(updatedEntry.oldEntry) {\n        recordId = updatedEntry.oldEntry.Id;\n    }\n    \n    //make sure this is not a repeat\n    if(combinedEntries[recordId] !== undefined) {\n        throw new Error(\"Repeart entry for id = \" + recordId);\n    }\n    \n    combinedEntries[recordId] = updatedEntry;\n}","supplementalCode":"\n\n//////////////////////////////////////////////////////////////////////\n\nfunction updateObject(fileEntry) {\n    var newFileEntry = apogee.util.jsonCopy(fileEntry);\n    var featureTypePropData = newFileEntry.Fields.entry_data.properties[0];\n    if(featureTypePropData.key != \"featureType\") throw new Error(\"Not the feature type!\");\n    \n    featureTypePropData.legacyKey = \"object\";\n    featureTypePropData.legacyValue = \"true\";\n    \n    \n    \n    return newFileEntry;\n}\n\nfunction updateSpace(fileEntry) {\n    var newFileEntry = apogee.util.jsonCopy(fileEntry);\n    var featureTypePropData = newFileEntry.Fields.entry_data.properties[0];\n    if(featureTypePropData.key != \"featureType\") throw new Error(\"Not the feature type!\");\n    \n    featureTypePropData.legacyKey = \"area\";\n    featureTypePropData.legacyValue = \"space\";\n    \n    return newFileEntry;\n}\n\nfunction updateGeometryEntry(fileEntry) {\n    var newFileEntry = apogee.util.jsonCopy(fileEntry);\n    var featureTypePropData = newFileEntry.Fields.entry_data.properties[0];\n    if(featureTypePropData.key != \"featureType\") throw new Error(\"Not the feature type!\");\n    \n    var legacyKey = featureTypePropData.legacyKey;\n    var legacyValue = featureTypePropData.value;\n    \n    if(legacyValue == legacyKey) {\n        legacyValue = \"true\";\n    }\n    \n    featureTypePropData.legacyValue = legacyValue;\n    \n    return newFileEntry;\n}","description":""}},"submitForm":{"name":"submitForm","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"\n//on submit, make the commit and write the result to the commit result table\nvar onSubmit = formData => {\n    \n    var commitMessage = formData.commitMsg.trim();\n    if(commitMessage.length === 0) {\n        alert(\"You must enter a commit message!\");\n        return;\n    }\n    \n    if((!instructionList)||(instructionList.length === 0)) {\n        alert(\"There is no data to commit.\");\n        return;\n    }\n    \n    var sessionKey = login.getSessionKey();\n    if(!sessionKey) {\n        alert(\"Please login. There is not a valid session.\");\n        return;\n    }\n    \n    commitPromise = micemetarDataAccess.getCommitPromise(instructionList,commitMessage,sessionKey);\n    \n    //set the response\n    apogeeMessenger.asynchDataUpdate(\"commitResponse\",commitPromise);\n};\n\n//use \"cancel\" action for \"clear\"\nvar onClear = () => {\n    //set the response\n    apogeeMessenger.dataUpdate(\"commitResponse\",\"\");\n}\n\n//make the layou\nvar layout = [];\n\n//commit msg\nentry = {};\nentry.type = \"textarea\";\nentry.label = \"Commit Msg: \";\nentry.cols = 50;\nentry.rows = 8;\nentry.key = \"commitMsg\";\nlayout.push(entry);\n\n\n//ad submit button to layout\nentry = {};\nentry.type = \"submit\";\nentry.onSubmit = onSubmit;\nentry.onCancel = onClear;\nentry.cancelLabel = \"Clear\";\nlayout.push(entry);\n\nreturn layout;","supplementalCode":"","description":""}},"commitResult":{"name":"commitResult","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var msg;\nvar style;\n\nif(!commitResponse) {\n    msg = \"WAITING\";\n    style = \"color:blue\";\n}\nelse if(commitResponse.success === true) {\n    msg = \"Commit Success\";\n    style = \"color:blue\";\n}\nelse {\n    msg = \"Error making commit: \" + commitResponse.msg;\n    style = \"color:red\";\n}\n\nvar textEntry = {};\ntextEntry.type = \"htmlDisplay\";\ntextEntry.html = \"<span style='\" + style + \"' + >\" + msg + \"</span>\";\n\nreturn [textEntry];\n","supplementalCode":"","description":""}}}},"selectParents":{"name":"selectParents","type":"apogee.Folder","children":{"metaFileList":{"name":"metaFileList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var sessionKey = login.getSessionKey();\nif(!sessionKey) return null;\n\nvar dependentContexts = loadContext.getAllContexts();\nif(!dependentContexts)  return null;\n\n//request promise from context\nvar getRequestPromiseFromContext = (context) => {\n    var searchDef = {};\n    searchDef.search = \"meta_file_list\";\n    searchDef.file_context = context;\n    return micemetarDataAccess.getRequestPromise(searchDef,sessionKey);\n}\n\n//create promise list\npromiseList = dependentContexts.map(getRequestPromiseFromContext);\n\n//evaluate promise list\nreturn Promise.all(promiseList);\n","supplementalCode":"","description":""}},"availableMetaFiles":{"name":"availableMetaFiles","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!metaFileList) return null;\n\nvar output = [];\n\nvar addToOutput = (response) => {\n    if(!response.success) throw new Error(\"Error loading meta files: \" + response.msg);\n    output = output.concat(response.data.Response)\n};\n\nmetaFileList.forEach(addToOutput);\n\nreturn output;","supplementalCode":"","description":""}},"configInfo":{"name":"configInfo","type":"apogee.JsonTable","updateData":{"data":{"baseParentType":{"propertyRules":null,"themeRules":"propertyRules","theme":"themeRules","inputColors":"propertyRules","strings":"themeRules"}},"description":""}},"depInfo":{"name":"depInfo","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var activeMetaFileEntry = selectMetaFile.getActiveMetaFileRecord();\nif(!activeMetaFileEntry) return;\n\nvar activeFileTypeId = activeMetaFileEntry.Fields.file_type_id;\nvar activeFileType = commonData.getFileTypeName(activeFileTypeId);\nvar useType = activeMetaFileEntry.Fields.use_type;\nvar parentFileType;\nvar parentFileTypeId;\n\nif(useType == \"base\") {\n    parentFileType = configInfo.baseParentType[activeFileType];\n    parentFileTypeId = commonData.getFileTypeId(parentFileType);\n}\nelse if(useType == \"override\") {\n    parentFileType = activeFileType;\n    parentFileTypeId = activeFileTypeId;\n}\nelse {\n    throw new Error(\"Unrecognized use type: \" + useType);\n}\n\nvar output = {};\noutput.parentFileType = parentFileType;\noutput.parentFileTypeId = parentFileTypeId;\n\nreturn output;\n","supplementalCode":"","description":""}},"relationForUseType":{"name":"relationForUseType","type":"apogee.JsonTable","updateData":{"data":{"base":"depends on","override":"overrides"},"description":""}},"selectParentFiles":{"name":"selectParentFiles","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var activeMetaFileEntry = selectMetaFile.getActiveMetaFileRecord();\nlines = [];\n\nif(!activeMetaFileEntry) {\n    entry = {};\n    entry.type = \"htmlDisplay\";\n    entry.html = \"<em>Meta file not selected</em>\"\n    lines.push(entry);\n    return lines;\n}\n\n//make sure cached data is valid - clear if not\nif((!data)||(data.cachedMetaId != activeMetaFileEntry.Id)) {\n    _resetInitialData();\n    return lines;\n}\n\n//set layout\nif((activeMetaFileEntry)&&(parentMetaFileOptions)) {\n    //title\n    lines.push(_getTitleLine(activeMetaFileEntry));\n\n    //body\n    var entries = [];\n    var addEntry = record => {\n        entries.push([_getRecordName(record),record.Id]);\n    };\n    parentMetaFileOptions.forEach(addEntry);\n    \n    var bodyLine = {};\n    bodyLine.type = \"checkboxGroup\";\n    bodyLine.key = \"parentIds\";\n    bodyLine.entries = entries;\n    \n    lines.push(bodyLine);\n    \n    //hidden - active meta id\n    var hiddenLine = {};\n    hiddenLine.type = \"invisible\";\n    hiddenLine.value = activeMetaFileEntry.Id;\n    hiddenLine.key = \"cachedMetaId\";\n    lines.push(hiddenLine);\n}\n\nreturn lines;","supplementalCode":"function _getTitleLine(activeMetaFileEntry) {\n    var parentType = activeMetaFileEntry.Fields.use_type;\n    var title;\n    if(parentType == \"base\") {\n        title = \"Select Base Parent Files\";\n    }\n    else if(parentType == \"override\") {\n        title = \"Select Overridden Parent Files\";\n    }\n    else {\n        alert(\"Unknown parent type: \" + parentType);\n        title = \"ERROR - Unknown parent type: \" + parentType;\n    }\n    \n    return {\n\t\t\"type\": \"heading\",\n\t\t\"level\": 2,\n\t\t\"text\": title\n\t};\n}\n\nfunction _getRecordName(record) {\n    return commonData.getFileTypeName(record.Fields.file_type_id) +\n        \" - \" + record.Fields.name + \n        \" - \" + record.Fields.file_context + \n        \" (\" + record.Fields.use_type + \")\";\n}\n\nfunction _resetInitialData() {\n    apogeeMessenger.dataUpdate(\"data\",initialParentInfo);\n}","description":""}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":null,"description":""}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":"","description":""}}},"childrenNotWriteable":true},"initialParentInfo":{"name":"initialParentInfo","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var info = {};\n\nvar activeMetaFileRecord = selectMetaFile.getActiveMetaFileRecord();\nif(!activeMetaFileRecord) return null;\n\nvar initialParentList = selectMetaFile.getInitialParentEntryList();\nif(!initialParentList) return null;\n\ninfo.cachedMetaId = activeMetaFileRecord.Id;\n\ninfo.parentIds = initialParentList.map(parentRecord => String(parentRecord.Fields.parent_file_id));\n\nreturn info;","supplementalCode":"","description":""}},"parentMetaFileOptions":{"name":"parentMetaFileOptions","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((!availableMetaFiles)||(!depInfo)) return null;\n\n\nvar activeMetaFileRecord = selectMetaFile.getActiveMetaFileRecord();\nif(!activeMetaFileRecord) return null;\n\nvar isParentFileType = record => record.Fields.file_type_id == depInfo.parentFileTypeId\nvar isNotSelectedFile = record => (record.Id != activeMetaFileRecord.metaFileId);\n\nreturn availableMetaFiles.filter(isParentFileType).filter(isNotSelectedFile);\n","supplementalCode":"","description":""}},"updatedParentIds":{"name":"updatedParentIds","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"result = {};\n\nif((!initialParentInfo) ||\n    (!initialParentInfo.parentIds) ||\n    (!selectParentFiles.data) ||\n    (!selectParentFiles.data.parentIds)) {\n    \n    return result;        \n}\n\nvar initialIds = initialParentInfo.parentIds;\nvar selectedIds = selectParentFiles.data.parentIds\n\n//get created and deleted\nresult.deletedParentIds = initialIds.filter(id => (selectedIds.indexOf(id) < 0));\nresult.addedParentIds = selectedIds.filter(id => (initialIds.indexOf(id) < 0));\n\nreturn result;","supplementalCode":"","description":""}},"updatedParentEntryRecords":{"name":"updatedParentEntryRecords","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var result = {};\n\nvar initialParentEntryList = selectMetaFile.getInitialParentEntryList();\nvar activeMetaFileRecord = selectMetaFile.getActiveMetaFileRecord();\nvar metaFileId = activeMetaFileRecord.Id;\n\nvar relation = relationForUseType[activeMetaFileRecord.Fields.use_type];\n\n//deleted entries\nresult.deleted = initialParentEntryList.filter(entry => (updatedParentIds.deletedParentIds.indexOf(entry.Id) > 0) );\n\n//create entries\nresult.created = updatedParentIds.addedParentIds.map(parentFileId => {\n    var fields = {};\n    fields.meta_file_id = metaFileId;\n    fields.parent_file_id = parentFileId;\n    fields.relation = relation;\n    return micemetarDataAccess.createRecord(\"meta_parent_entry\",fields);\n})\n\n\nreturn result;","supplementalCode":"","description":""}},"getUpdatedParentEntries":{"name":"getUpdatedParentEntries","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return updatedParentEntryRecords;","supplementalCode":"","description":""}}}},"completed":{"name":"completed","type":"apogee.Folder","children":{"resetForm":{"name":"resetForm","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var onReset = function() {\n    var clearTaskList = [\n        [\"loadContext.selectContext.data\",null],\n        [\"selectMetaFile.selectMetaFile.data\",null],\n        [\"selectParents.selectParentFiles.data\",null],\n        [\"editMetaFile.selectedFileEntryInfo\",null]\n    ];\n    apogeeMessenger.compoundDataUpdate(clearTaskList);\n}\n\n//make the layou\nvar layout = [];\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Reset\";\nlayout.push(entry);\n\n//aadd the reset button\nentry = {};\nentry.type = \"submit\";\nentry.onSubmit = onReset;\nentry.submitLabel = \"Reset Form\";\nlayout.push(entry);\n\nreturn layout;","supplementalCode":"","description":""}}}}}},"micemetarDataAccess":{"name":"micemetarDataAccess","type":"apogee.Folder","children":{"createRecord":{"name":"createRecord","type":"apogee.FunctionTable","updateData":{"argList":["recordType","fieldMap"],"functionBody":"var record = {};\n\nrecord.Id = getId();\nrecord.Type = recordType;\nrecord.Fields = fieldMap;\nrecord.read_perm = READ_PERM;\nrecord.edit_perm = EDIT_PERM;\n\nreturn record;","supplementalCode":"var READ_PERM = 2;\nvar EDIT_PERM = 15;\n\n//this will be illegal at some point\nvar nextId = -1;\n\nfunction getId() {\n    return nextId--;\n}","description":"This method creates a record given the field values and record info \nfrom the data set info. It creates and ID and uses standard permissions."}},"recordsToCreateInstructions":{"name":"recordsToCreateInstructions","type":"apogee.FunctionTable","updateData":{"argList":["recordList"],"functionBody":"var instructions = [];\n\nfor(var i = 0; i < recordList.length; i++) {\n    var createRecord = recordList[i];\n    var instruction = createCreateInstruction(createRecord);\n    instructions.push(instruction);\n}\n\nreturn instructions;","supplementalCode":"","description":"This creates a list of create instructions to go along with a list of records to be created.\n\nThere is the option to assign the ID or to leave it as undefined, in which case\nan automatically incremented ID will be assigned. (For consistency in the data\nset, either all records should be preassigned or all records should be \nautomatically assigned."}},"createCommitBody":{"name":"createCommitBody","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage"],"functionBody":"var commit = {};\nvar actions = [];\n\nif(commitMessage.length === 0) throw new Error(\"Commit message missing!\");\n\ncommit.Name = dataSetInfo.name;\ncommit.Message = commitMessage;\ncommit.Actions = actions;\n\n//single action with commits\nvar action = {};\naction.Title = \"bulk create commit\";\naction.Instr = instructionList;\nactions.push(action);\n\nreturn commit","supplementalCode":"","description":"This creates a body for a commit request, given a list of instructions and a commit message."}},"createRequestOptions":{"name":"createRequestOptions","type":"apogee.FunctionTable","updateData":{"argList":["bodyJson","sessionKey"],"functionBody":"var header = {};\nheader[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\nheader.sessionKey = sessionKey;\nheader[\"proto-version\"] = \"4.0\";\nheader[\"db-version\"] = dataSetInfo.version;\n\nrequestInfo = {};\nrequestInfo.header = header;\nif(bodyJson) {\n    requestInfo.method = \"POST\";\n    requestInfo.body = JSON.stringify(bodyJson);\n}\n\nreturn requestInfo;\n","supplementalCode":"","description":"This creates the requestOptions, suitable for apogee.net.jsonRequest, to go with an type of request to the workingset (micemetarequest) server."}},"host":{"name":"host","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return settings.data.metaDbHost;","supplementalCode":"","description":""}},"commitUrl":{"name":"commitUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvalue = host + \"/commit\";\nreturn value;\n\n","supplementalCode":"","description":""}},"requestUrl":{"name":"requestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return host + \"/cannedsearch\";\n\n","supplementalCode":"","description":""}},"dataSetInfo":{"name":"dataSetInfo","type":"apogee.JsonTable","updateData":{"data":{"name":"Micemetar","records":{"com_file_entry":{"foreignList":[],"idField":"com_file_entry_id","name":"com_file_entry","recordClass":"com.micello.micemetar.data.ComFileEntry","fields":[{"fieldClass":"java.lang.Integer","name":"ordr","nullOk":false,"defaultValue":0},{"fieldClass":"com.micello.micemetar.data.ComFile","name":"com_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.MetaFile","name":"meta_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"file_group","nullOk":false,"defaultValue":null}]},"com_file":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"com_file_id","remoteRecord":"com_file_entry","orderField":"ordr","name":"com_file_entry_list"}],"idField":"com_file_id","name":"com_file","recordClass":"com.micello.micemetar.data.ComFile","fields":[{"fieldClass":"java.lang.String","name":"file_context","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"name","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"ref","nullOk":true,"defaultValue":null}]},"meta_parent_entry":{"foreignList":[],"idField":"meta_parent_id","name":"meta_parent_entry","recordClass":"com.micello.micemetar.data.MetaParentEntry","fields":[{"fieldClass":"com.micello.micemetar.data.MetaFile","name":"meta_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.MetaFile","name":"parent_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"relation","nullOk":true,"defaultValue":null}]},"file_entry":{"foreignList":[],"idField":"file_entry_id","name":"file_entry","recordClass":"com.micello.micemetar.data.FileEntry","fields":[{"fieldClass":"java.lang.String","name":"entry_context","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"entry_name","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.FileType","name":"file_type_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"entry_section","nullOk":true,"defaultValue":null},{"fieldClass":"java.lang.String","name":"entry_key","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"option_name","nullOk":false,"defaultValue":null},{"fieldClass":"org.json.JSONObject","name":"entry_data","nullOk":false,"defaultValue":null}]},"file_type":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"file_type_id","remoteRecord":"file_entry","name":"file_entry_list"}],"idField":"file_type_id","name":"file_type","recordClass":"com.micello.micemetar.data.FileType","fields":[{"fieldClass":"java.lang.String","name":"file_type_name","nullOk":true,"defaultValue":null}]},"meta_file":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"meta_file_id","remoteRecord":"recipe_entry","orderField":"ordr","name":"recipe_entry_list"},{"restrictDelete":true,"isUnique":false,"remoteField":"meta_file_id","remoteRecord":"meta_parent_entry","name":"parent_entry_list"}],"idField":"meta_file_id","name":"meta_file","recordClass":"com.micello.micemetar.data.MetaFile","fields":[{"fieldClass":"com.micello.micemetar.data.FileType","name":"file_type_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"file_context","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"name","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"use_type","nullOk":false,"defaultValue":null}]},"recipe_entry":{"foreignList":[],"idField":"recipe_entry_id","name":"recipe_entry","recordClass":"com.micello.micemetar.data.RecipeEntry","fields":[{"fieldClass":"java.lang.Integer","name":"ordr","nullOk":false,"defaultValue":0},{"fieldClass":"com.micello.micemetar.data.MetaFile","name":"meta_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.FileEntry","name":"file_entry_id","nullOk":false,"defaultValue":null},{"fieldClass":"org.json.JSONObject","name":"insertion_info","nullOk":true,"defaultValue":null}]}},"version":"5.0"},"description":""}},"createUpdateInstruction":{"name":"createUpdateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["initialRecord","targetRecord"],"functionBody":"if(initialRecord.Id != targetRecord.Id) {\n    throw new Error(\"Record ID mismatch in create update instruction for target record: \" + getRecordErrString(targetRecord));\n}\n\nif(initialRecord.Type != targetRecord.Type) {\n    throw new Error(\"Inital and target record types do not match. Target record: \" + getRecordErrString(targetRecord));\n}\n\nvar recordsDifferent = false;\n\nvar recordInfo = getRecordInfo(initialRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Update\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = initialRecord.Id;\n\ninstruction.initialReadPerm = initialRecord.read_perm;\ninstruction.initialEditPerm = initialRecord.edit_perm;\n\nif(initialRecord.readPerm != targetRecord.readPerm) {\n    instruction.targetReadPerm = targetRecord.read_perm;\n    recordsDifferent = true;\n}\n\nif(initialRecord.editPerm != targetRecord.editPerm) {\n    instruction.targetEditPerm = targetRecord.edit_perm;\n    recordsDifferent = true;\n}\n\nvar initialData = {};\ninstruction.Initial = initialData;\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    \n    var initialValue;\n    var targetValue;\n    \n    var initialValue = initialRecord.Fields[field.name];\n    var targetValue = targetRecord.Fields[field.name];\n    \n    //validate target values\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(targetRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(targetRecord,field));\n        }\n    }\n    \n    if(!fieldsMatch(initialValue,targetValue,field)) {\n        initialData[field.name] = initialValue;\n        targetData[field.name] = targetValue;\n        recordsDifferent = true;\n    }\n}\n\nif(recordsDifferent) {\n    return instruction;\n}\nelse {\n    return null;\n}\n","supplementalCode":"function fieldsMatch(initialValue,targetValue,fieldInfo) {\n    if(fieldInfo.fieldClass === \"java.lang.String\") {\n        //compare strings with \"==\"\n        return (initialValue == targetValue);\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"java.lang\")) {\n        //compare other basic values with \"===\"\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"com.micello\")) {\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONObject\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONArray\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else {\n        throw new Error(\"unrecognized field type: \" + fieldInfo.fieldClass);\n    }\n}\n\nfunction compareJsonData(a,b) {\n    var an = apogee.util.getNormalizedObjectCopy(a);\n    var bn = apogee.util.getNormalizedObjectCopy(b);\n    var aString = JSON.stringify(an);\n    var bString = JSON.stringify(bn);\n    return aString == bString;\n}\n    ","description":"This function creates an update instruction given an initial and target record. If the records are the same then NULL is returned. (No update is needed.)"}},"createCreateInstruction":{"name":"createCreateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["createRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(createRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Create\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = createRecord.Id;\n\ninstruction.targetReadPerm = createRecord.read_perm;\ninstruction.targetEditPerm = createRecord.edit_perm;\n\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var targetValue;\n    var targetValue = createRecord.Fields[field.name];\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(createRecord,field));\n        }\n    }\n    \n    targetData[field.name] = targetValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getFieldErrString":{"name":"getFieldErrString","type":"apogee.FunctionTable","updateData":{"argList":["record","fieldInfo"],"functionBody":"return getRecordErrString(record) + \" - \" + fieldInfo.name;","supplementalCode":"","description":""}},"getRecordErrString":{"name":"getRecordErrString","type":"apogee.FunctionTable","updateData":{"argList":["record"],"functionBody":"return record.Type + \" \" + record.Id;","supplementalCode":"","description":""}},"createDeleteInstruction":{"name":"createDeleteInstruction","type":"apogee.FunctionTable","updateData":{"argList":["deleteRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(deleteRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Delete\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = deleteRecord.Id;\n\ninstruction.initialReadPerm = deleteRecord.read_perm;\ninstruction.initialEditPerm = deleteRecord.edit_perm;\n\nvar initialData = {};\ninstruction.Initial = initialData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var initialValue = deleteRecord.Fields[field.name];\n    \n    initialData[field.name] = initialValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getRecordInfo":{"name":"getRecordInfo","type":"apogee.FunctionTable","updateData":{"argList":["recordType"],"functionBody":"var recordInfo = dataSetInfo.records[recordType];\n\nif(!recordInfo) {\n    throw new Error(\"Record type not found in getRecordInfo: \" + recordType);\n}\n\nreturn recordInfo;","supplementalCode":"","description":""}},"combinedEntriesToInstructionList":{"name":"combinedEntriesToInstructionList","type":"apogee.FunctionTable","updateData":{"argList":["combinedEntries"],"functionBody":"var output = [];\nfor(var key in combinedEntries) {\n    var entry = combinedEntries[key];\n    var instruction = getInstructionForCombinedEntry(entry);\n    if(instruction) {\n        output.push(instruction);\n    }\n}\n\nreturn output;","supplementalCode":"function getInstructionForCombinedEntry(combinedEntry) {\n    var newEntry = combinedEntry.newEntry;\n    var oldEntry = combinedEntry.oldEntry;\n    \n    if(newEntry) {\n        if(!oldEntry) {\n            console.log(\"Create: \" + newEntry.Id);\n            return createCreateInstruction(newEntry);\n        }\n        else {\n            //this will return null for matching records\n            console.log(\"Update(maybe): \" + newEntry.Id);\n            return createUpdateInstruction(oldEntry,newEntry);\n        }\n    }\n    else if(oldEntry) {\n        console.log(\"Delete: \" + oldEntry.Id);\n        return createDeleteInstruction(oldEntry);\n    }\n    \n    return null;\n}\n\nfunction entriesDifferent(entry1,entry2) {\n    var string1 = JSON.stringify(apogee.util.getNormalizedCopy(entry1));\n    var string2 = JSON.stringify(apogee.util.getNormalizedCopy(entry2));\n    return (string1 == string2);\n}","description":"This function takes a combined entry map of the format:\n\n{\n  \"some-identifier\":{\n    \"oldEntry\":{original record entry, if applicable},\n    \"newEntry\":{new record entry, if applicable}\n  },\n  ...\n}\n\nIt returns an instruction list.\n\n"}},"getCommitPromise":{"name":"getCommitPromise","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage","sessionKey"],"functionBody":"var commitBody = createCommitBody(instructionList,commitMessage);\nvar requestOptions = createRequestOptions(commitBody,sessionKey);\nreturn apogee.net.jsonRequest(commitUrl,requestOptions);","supplementalCode":"","description":""}},"getRequestPromise":{"name":"getRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn apogee.net.jsonRequest(requestUrl,requestOptions);","supplementalCode":"","description":""}},"customRequestUrl":{"name":"customRequestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return host + \"/request\";","supplementalCode":"","description":""}},"getCustomRequestPromise":{"name":"getCustomRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn apogee.net.jsonRequest(customRequestUrl,requestOptions);","supplementalCode":"","description":""}}}},"settings":{"name":"settings","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var layout = [];\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Settings\";\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Login URL: \";\nentry.size = 80;\nentry.key = \"loginUrl\";\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Meta DB URL: \";\nentry.size = 80;\nentry.key = \"metaDbHost\";\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Customer File URL: \";\nentry.size = 80;\nentry.key = \"customerFileUrl\";\nlayout.push(entry);\n\n//suvbmit (no cancel)\nentry = {};\nentry.type = \"submit\";\nentry.onSubmit = onSubmit;\nentry.onCancel = onReset;\nentry.cancelLabel = \"Reset\";\nlayout.push(entry);\n\nreturn layout;\n","supplementalCode":"","description":""}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":{"loginUrl":"http://eng.micello.com/TestAuthorization/loginjson","metaDbHost":"http://eng.micello.com/micemetarws","customerFileUrl":"http://eng.micello.com/apogee/data/customerJson.json"},"description":""}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":"","description":""}}},"childrenNotWriteable":true}}}},"components":{"type":"apogeeapp.app.FolderComponent","treeState":1,"children":{"tasks":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":37,"y":37}},"treeState":1,"children":{"commonData":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":49,"y":379}},"treeState":1,"children":{"fileTypeList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":727,"height":325},"posInfo":{"x":54,"y":611},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"fileTypeIdToName":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":722,"height":320},"posInfo":{"x":55,"y":699},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"fileTypeNameToId":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":685,"height":300},"posInfo":{"x":54,"y":662},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"customerInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":689,"height":321},"posInfo":{"x":30,"y":83},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"INACTIVE_LAYOUT":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":738,"y":319},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"DUMMY_DROPDOWN_ENTRY":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":737,"y":129},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"GLOBAL_CONTEXT":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":45},"posInfo":{"x":378,"y":220},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"CID_CONTEXT_PREFIX":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":34},"posInfo":{"x":378,"y":177},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"DEFAULT_COM_FILE_NAME":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":736,"y":33},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"DEFAULT_META_FILE_NAME":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":736,"y":77},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"getFileTypeName":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":57,"y":748},"state":-1,"viewType":"Code"}},"getFileTypeId":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":670,"height":400},"posInfo":{"x":57,"y":791},"state":-1,"viewType":"Code"}}}},"login":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":1595,"y":330}},"tabOpen":true,"treeState":-1,"children":{"loginUrl":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":465,"height":43},"posInfo":{"x":26,"y":27},"state":-1,"viewType":"Text"}},"sessionResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":697,"height":330},"posInfo":{"x":17,"y":355},"state":0,"viewType":"Data"},"dataView":"Colorized"},"savedUserName":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":284,"height":69},"posInfo":{"x":24,"y":72},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"loginControl":{"type":"apogeeapp.app.DynamicForm","windowState":{"sizeInfo":{"width":323,"height":181},"posInfo":{"x":24,"y":113},"state":0,"viewType":"Output"}},"appendQueryParams":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":845,"height":400},"posInfo":{"x":496,"y":43},"state":-1,"viewType":"Code"}},"getSessionKey":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":690,"height":180},"posInfo":{"x":493,"y":100},"state":-1,"viewType":"Code"}},"loginResult":{"type":"apogeeapp.app.DynamicForm","windowState":{"sizeInfo":{"width":468,"height":55},"posInfo":{"x":458,"y":236},"state":0,"viewType":"Output"}}}},"loadContext":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":206,"y":629}},"tabOpen":true,"treeState":-1,"children":{"contexts":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":699,"height":123},"posInfo":{"x":759,"y":89},"state":0,"viewType":"Data"},"dataView":"Colorized"},"selectContext":{"type":"apogeeapp.app.FormDataComponent","windowState":{"sizeInfo":{"width":550,"height":712},"posInfo":{"x":48,"y":94},"state":0,"viewType":"Form"}},"getFileContext":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":684,"y":315},"state":-1,"viewType":"Code"}},"getOtherContexts":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":688,"y":359},"state":-1,"viewType":"Code"}},"getAllContexts":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":691,"y":404},"state":-1,"viewType":"Code"}}}},"selectMetaFile":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":250,"y":558}},"tabOpen":true,"treeState":-1,"children":{"metaFileList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":574,"height":273},"posInfo":{"x":22,"y":47},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"metaFileFormEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":938,"height":504},"posInfo":{"x":21,"y":91},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"selectMetaFile":{"type":"apogeeapp.app.FormDataComponent","windowState":{"sizeInfo":{"width":476,"height":338},"posInfo":{"x":56,"y":297},"state":0,"viewType":"Form"}},"createMetaFileFields":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":647,"height":194},"posInfo":{"x":552,"y":101},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"createOrUpdate":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":336,"height":172},"posInfo":{"x":553,"y":50},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"activeMetaFileRecord":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":814,"height":309},"posInfo":{"x":565,"y":249},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"getCreateOrUpdate":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":1245,"y":305},"state":-1,"viewType":"Code"}},"getActiveMetaFileRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":1244,"y":346},"state":-1,"viewType":"Code"}},"metaFileDownload":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":767,"height":496},"posInfo":{"x":1268,"y":52},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"initialParentEntryList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":688,"height":493},"posInfo":{"x":1278,"y":148},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"initialRecipeEntryList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":554,"height":370},"posInfo":{"x":1278,"y":104},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"getInitialRecipeEntryList":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":1246,"y":387},"state":-1,"viewType":"Code"}},"getInitialParentEntryList":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":-167},"posInfo":{"x":1242,"y":428},"state":-1,"viewType":"Code"}}}},"editMetaFile":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":203,"y":755}},"tabOpen":true,"treeState":-1,"children":{"selectEntriesControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":1062,"height":731},"posInfo":{"x":328,"y":96},"state":-1,"viewType":"Output"},"resource":{"html":"<table class=\"editMeta_table\">\n    <tr>\n        <td colspan=\"3\">\n            <h2>Edit Metafile</h2>\n        </td>\n    </tr>\n     <tr>\n        <td id=\"editMeta_filterCell\" colspan=\"3\">\n            put filters here...\n        </td>\n    </tr>\n    <tr>\n        <td class=\"editMeta_selectedColumn\">\n            <h3>Selected</h3>\n        </td>\n        <td class=\"editMeta_centerColumn\">&nbsp;</td>\n        <td class=\"editMeta_availableColumn\">\n            <h3>Available</h3>\n        </td>\n    </tr>\n    <tr>\n        <td class=\"editMeta_listCell\">\n            <div id=\"editMeta_parentSelectedCell\" class=\"editMeta_displayDiv\"></div>\n        </td>\n        <td>&nbsp;</td>\n        <td class=\"editMeta_listCell\">\n            <div id=\"editMeta_availableCell\" class=\"editMeta_displayDiv\"></div>\n        </td>\n    </tr>\n    <tr>\n        <td colspan=\"3\">\n            <input type=\"button\" value=\"Save\" id=\"editMeta_commitButton\">\n            &nbsp;\n            <input type=\"button\" value=\"Reset\" id=\"editMeta_resetButton\">\n            &nbsp;\n            <span class=\"editMeta_alertText\" id=\"editMeta_alertField\">Data is not saved!</span>\n        </td>\n    </tr>\n</table>\n","css":".editMeta_table {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    border-collapse: collapse;\n}\n.editMeta_selectedColumn {\n    width: 45%;\n}\n.editMeta_centerColumn {\n    width: 5%;\n}\n.editMeta_availableColumn {\n    width: 45%;\n}\n\n\n.editMeta_listCell {\n    vertical-align: top;\n    height: 100%;\n    overflow: hidden;\n}\n.editMeta_displayDiv {\n    height: 100%;\n    overflow: auto; \n    border: 1px solid black;\n    background-color: white;\n}\n\n.editMeta_option_container {\n    border: 1px solid black;\n    overflow: auto; \n}\n.editMeta_optionTitle {\n    border: 1px solid black;\n    background-color: lightgray;\n    height: 20px;\n}\n.editMeta_optionDisplayDiv {\n    height: 400px;\n    border: 1px solid black;\n    background-color: white;\n}\n\n.editMeta_filterContainerClass {\n    display: inline;\n    margin: 5px;\n}\n\n.editMeta_listEntry {\n  border: 1px solid darkgray;\n  padding: 2px;\n}\n.editMeta_entryLabel {\n    font-weight: bold;\n}\n.editMeta_entryDataOpened {\n}\n.editMeta_entryDataClosed {\n  display:none;\n}\n.editMeta_preformatText {\n  border: 1px solid gray;\n  background-color: #e0e0e0;\n  color: blue;\n}\n.editMeta_alertText {\n    font-weight: bold;\n    color: red;\n}","setData":"if(!data) return;\n\n//store the data if we are not ready yet\nif(!this.initialized) {\n    this.cachedData = data;\n    return;\n}\n\n//set data\nthis.availableFileEntries = data.availableFileEntries;\nthis.initialRecipeEntryInfo = data.initialRecipeEntryInfo;\nthis.activeInsertionInfoOptions = data.activeInsertionInfoOptions;\nthis.workingSelectedFileEntryInfo = apogee.util.jsonCopy(data.selectedFileEntryInfo);\n\n//see if we need to reset the selected file entry info\nif(this.selectedInfoAndInitialInfoAgree()) {\n    this.loadForm();\n}\nelse {\n    this.resetSelectedInfo();\n}\n\n\n\n\n","constructorAddition":"const CELL_ID_PREFIX = \"meta_entry_\";\nconst PREFIX_LENGTH = CELL_ID_PREFIX.length;\n\nconst EXPAND_IMAGE_URL = \"http://eng.micello.com/apogee/resources/expand.png\";\nconst CONTRACT_IMAGE_URL = \"http://eng.micello.com/apogee/resources/contract.png\";\n\nthis.initialized = false;\nthis.selectedCell = null;\nthis.availableCell = null;\n\nthis.availableFileEntries = null;\nthis.initialRecipeEntryInfo = null;\nthis.activeInsertionInfoOptions = null;\nthis.workingSelectedFileEntryInfo = null;\n\n//this.combinedEntries = null\n// this.fileEntries = null;\n// this.initialRecipeEntries = null;\n// this.activeMetaFileEntry = null;\n// this.metaFileCreated = false;\n\nthis.onCommitClicked = function() {\n    var newSelectedFileEntryInfo = apogee.util.jsonCopy(this.workingSelectedFileEntryInfo);;\n    mode.getMessenger().dataUpdate(\"selectedFileEntryInfo\",newSelectedFileEntryInfo);\n}\n\nthis.onResetClicked = function() {\n    this.resetSelectedInfo();\n}\n\nthis.onDataLoad = function() {\n    this.commitButton.disabled = true;\n    this.resetButton.disabled = false;\n    this.alertField.style.display = \"none\";\n}\n\nthis.onDataReset = function() {\n    this.commitButton.disabled = true;\n    this.resetButton.disabled = true;\n    this.alertField.style.display = \"none\";\n}\n\nthis.onDataUpdated = function() {\n    this.commitButton.disabled = false;\n    this.resetButton.disabled = false;\n    this.alertField.style.display = \"\";\n}\n\n/////////////////////////////////////////////////////////////////////////\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////\n\n//This method checks for a match or mismatch between the cached meta file id and the input meta file id\nthis.selectedInfoAndInitialInfoAgree = function() {\n    if(this.initialRecipeEntryInfo) {\n        if(this.workingSelectedFileEntryInfo) {\n            return (this.initialRecipeEntryInfo.metaFileId == this.workingSelectedFileEntryInfo.metaFileId);\n        }\n        else {\n            return false;\n        }\n    }\n    else {\n        return (this.workingSelectedFileEntryInfo == null);\n    }\n}\n\nthis.resetSelectedInfo = function() {\n    var newSelectedFileEntryInfo;\n    \n    if((this.availableFileEntries)&&(this.initialRecipeEntryInfo)&&(this.initialRecipeEntryInfo.fileEntryMapOfRecipeEntries)) {\n        //initialize the selected info to the current values\n        var createCombinedEntry = fileEntry => {\n            var combinedEntry = {};\n            combinedEntry.fileEntry = fileEntry;\n            var recipeEntry = this.initialRecipeEntryInfo.fileEntryMapOfRecipeEntries[fileEntry.Id];\n            if(recipeEntry) {\n                combinedEntry.recipeEntry = recipeEntry;\n                combinedEntry.selected = true;\n                combinedEntry.insertionInfo = recipeEntry.Fields.insertion_info;\n            }\n            else {\n                combinedEntry.selected = false;\n            }\n            \n            return combinedEntry;\n        }\n        \n        newSelectedFileEntryInfo = {};\n        newSelectedFileEntryInfo.combinedEntries = this.availableFileEntries.map(createCombinedEntry);\n        newSelectedFileEntryInfo.metaFileId = this.initialRecipeEntryInfo.metaFileId;\n    }\n    else {\n        //clear selected info\n        newSelectedFileEntryInfo = null;\n    }\n    \n    //set this data\n    mode.getMessenger().dataUpdate(\"selectedFileEntryInfo\",newSelectedFileEntryInfo);\n    this.onDataReset();\n}\n\nthis.loadForm = function() {\n    this.initializeFilters();\n    this.loadSelectedCells();\n    \n    this.loadEntries();\n    \n    this.onDataLoad();\n}\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n\n//=====================================\n// Load Methods\n//=====================================\n\nthis.loadEntries = function() {\n    \n    //make sure the selections are loaded\n    if((!this.workingSelectedFileEntryInfo)||(!this.workingSelectedFileEntryInfo.combinedEntries)) return;\n    \n    //populate the filter options\n    this.populateFilterOptions();\n    \n    //populate the display cells\n    this.clearSelectedCells();\n    apogeeapp.ui.removeAllChildren(this.availableCell);\n    \n    var addCombinedEntry = (combinedEntry) => {\n        var cellElement = this.createCell(combinedEntry);\n        if(combinedEntry.selected) {\n            selectedCell = this.getSelectedCell(combinedEntry.insertionInfo);\n            selectedCell.appendChild(cellElement);\n        }\n        else {\n            this.availableCell.appendChild(cellElement);\n        }\n    }\n    \n    var filterText = this.freeTextFilterEntry.value;\n    var filterRegEx = new RegExp(filterText, \"i\");\n    var freeTextFilter = combinedEntry => {\n        //don't filter the selected cells\n        if(combinedEntry.selected) return true;\n        \n        if(filterText.length > 0) {\n            return (combinedEntry.fileEntry.Fields.entry_name.search(filterRegEx) >= 0);\n        }\n        else {\n            return true;\n        }\n    }\n\n    this.workingSelectedFileEntryInfo.combinedEntries.filter(this.overallDropdownFilter).filter(freeTextFilter).sort(fileEntrySorter).forEach(addCombinedEntry);\n    //this.workingSelectedFileEntryInfo.combinedEntries.filter(freeTextFilter).sort(fileEntrySorter).forEach(addCombinedEntry);\n}\n\nfunction fileEntrySorter(combinedEntry1,combinedEntry2) {\n    return combinedEntry1.fileEntry.Fields.entry_name.localeCompare(combinedEntry2.fileEntry.Fields.entry_name);\n}\n\nthis.createCell = function(combinedEntry) {\n    \n    var name = combinedEntry.fileEntry.Fields.entry_name;\n    \n    //=============================\n    //construction of list element\n    //=============================\n    var div = document.createElement(\"div\");\n    div.id = CELL_ID_PREFIX + combinedEntry.fileEntry.Id;\n    div.className = \"editMeta_listEntry\";\n    \n    //draggable interface\n    div.draggable = true;\n    var instance = this;\n    div.ondragstart = (event) => this.onDragStart(event);\n    \n    //content\n    var minMaxButton = document.createElement(\"img\");\n    minMaxButton.src = EXPAND_IMAGE_URL;\n    div.appendChild(minMaxButton);\n    \n    div.appendChild(document.createTextNode(\" \"));\n    var textSpan = document.createElement(\"span\");\n    textSpan.className = \"editMeta_entryLabel\";\n    textSpan.appendChild(document.createTextNode(name));\n    div.appendChild(textSpan);\n    \n    var entryContentDiv = document.createElement(\"div\");\n    entryContentDiv.className = \"editMeta_entryDataClosed\";\n    div.appendChild(entryContentDiv);\n    \n    entryContentDiv.appendChild(document.createTextNode(\"Entry Data: \"));\n    entryContentDiv.appendChild(document.createElement(\"br\"));\n    \n    var preformatDisplay = document.createElement(\"pre\");\n    preformatDisplay.className = \"editMeta_preformatText\";\n    var temp = JSON.stringify(combinedEntry.fileEntry.Fields.entry_data,null,\"  \");\n    temp = temp.replace(/</g,\"&lt;\");\n    temp = temp.replace(/>/g,\"&gt;\");\n    preformatDisplay.innerHTML = temp;\n    entryContentDiv.appendChild(preformatDisplay);\n    \n    //content interaction\n    minMaxButton.onclick = () => {\n        if(minMaxButton.src == EXPAND_IMAGE_URL) {\n            minMaxButton.src = CONTRACT_IMAGE_URL;\n            entryContentDiv.className = \"editMeta_entryDataOpened\";\n        }\n        else {\n            minMaxButton.src = EXPAND_IMAGE_URL;\n            entryContentDiv.className = \"editMeta_entryDataClosed\";\n        }\n    }\n    \n    return div;\n}\n\n//=================================\n// selected cell management\n//=================================\n\nthis.loadSelectedCells = function() {\n    apogeeapp.ui.removeAllChildren(this.parentSelectedCell);\n    this.selectedCells = {};\n    \n    var numberOptions = this.activeInsertionInfoOptions.length;\n    \n    if(numberOptions > 1) {\n        var selectedTable = document.createElement(\"table\");\n        selectedTable.className = \"editMeta_table\";\n        this.parentSelectedCell.appendChild(selectedTable);\n    \n        var insertUiEntry = (optionInfo,index) => {\n            \n            var row = selectedTable.insertRow(index);\n            var cell = row.insertCell(0);\n            cell.className = \"editMeta_option_container\";\n            \n            //option title\n            var titleDiv = document.createElement(\"div\");\n            titleDiv.className = \"editMeta_optionTitle\";\n            \n            var hideButton = document.createElement(\"img\");\n            hideButton.src = CONTRACT_IMAGE_URL\n            titleDiv.appendChild(hideButton);\n            \n            var showButton = document.createElement(\"img\");\n            showButton.src = EXPAND_IMAGE_URL;\n            showButton.style.display = \"none\";\n            titleDiv.appendChild(showButton);\n            \n            var textElement = document.createElement(\"b\");\n            textElement.innerHTML = optionInfo.title;\n            titleDiv.appendChild(textElement);\n            \n            cell.appendChild(titleDiv);\n            \n            //option body\n            var bodyDiv = document.createElement(\"div\");\n            bodyDiv.className = \"editMeta_optionDisplayDiv\";\n            cell.appendChild(bodyDiv);\n            \n            var insertionInfo = optionInfo.insertionInfo;\n            \n            //events\n            bodyDiv.ondragover = (event) => { this.allowDrop(event); }\n            bodyDiv.ondrop = (event) => { this.onSelectedDrop(event,insertionInfo); }\n            \n            hideButton.onclick = () => this.hideSelectionRow(bodyDiv,hideButton,showButton);\n            showButton.onclick = () => this.showSelectionRow(bodyDiv,hideButton,showButton);\n            \n            var key = this.getSelectionKey(insertionInfo);\n            this.selectedCells[key] = bodyDiv;\n        }\n        \n        this.activeInsertionInfoOptions.forEach(insertUiEntry);\n        \n        //clear event handlers from parent\n        this.parentSelectedCell.ondragover = undefined;\n        this.parentSelectedCell.ondrop = undefined;\n    }\n    else {\n        var selectedCell = this.parentSelectedCell;\n        var insertionInfo = this.activeInsertionInfoOptions[0].insertionInfo;\n        \n        //events\n        selectedCell.ondragover = (event) => { this.allowDrop(event); }\n        selectedCell.ondrop = (event) => { this.onSelectedDrop(event,insertionInfo); }\n        \n        var key = this.getSelectionKey(insertionInfo);\n        this.selectedCells[key] = selectedCell;\n    }\n}\n\nthis.getSelectedCell = function(insertionInfo) {\n    var key = this.getSelectionKey(insertionInfo);\n    var containerCell = this.selectedCells[key];\n    \n    if(!containerCell) {\n        throw new Error(\"Insertion info not found: \" + JSON.stringify(insertionInfo));\n    }\n    \n    return containerCell;\n}\n\nthis.getSelectionKey = function(insertionInfo) {\n    return insertionInfo != null ? insertionInfo.orderedEntry : \"default\";\n}\n\nthis.clearSelectedCells = function() {\n    for(var key in this.selectedCells) {\n        apogeeapp.ui.removeAllChildren(this.selectedCells[key]);\n    }\n}\n\nthis.hideSelectionRow = function(bodyDiv,hideButton,showButton) {\n    bodyDiv.style.display = \"none\";\n    hideButton.style.display = \"none\";\n    showButton.style.display = \"\";\n}\nthis.showSelectionRow = function(bodyDiv,hideButton,showButton) {\n    bodyDiv.style.display = \"\";\n    hideButton.style.display = \"\";\n    showButton.style.display = \"none\";\n}\n//=================================\n// Drag and drop edit methods\n//=================================\n\nthis.onDragStart = function(event) {\n    event.dataTransfer.setData(\"text\",event.target.id);\n}\n\nthis.allowDrop = function(event) {\n    event.preventDefault();\n}\n\nthis.onSelectedDrop = function(event, insertionInfo) {\n    var data = event.dataTransfer.getData(\"text\");\n    var combinedEntry = this.lookupCombinedEntry(data);\n    \n//    if(!combinedEntry.selected) {\n        combinedEntry.selected = true;\n        combinedEntry.insertionInfo = insertionInfo;\n        this.loadEntries();\n//    }\n\n    this.onDataUpdated();\n}\n\nthis.onAvailableDrop = function(event) {\n    var data = event.dataTransfer.getData(\"text\");\n    var combinedEntry = this.lookupCombinedEntry(data);\n    \n    if(combinedEntry.selected) {\n        combinedEntry.selected = false;\n        this.loadEntries();\n    }\n    \n    this.onDataUpdated();\n}\n\nthis.lookupCombinedEntry = function(divId) {\n    var fileEntryId = divId.substr(PREFIX_LENGTH);\n\n    var combinedEntry = this.workingSelectedFileEntryInfo.combinedEntries.find( (entry) => (entry.fileEntry.Id == fileEntryId) );\n    if(!combinedEntry) {\n        alert(\"Error: dragged object not found in data\");\n        return null;\n    }\n    \n    return combinedEntry;\n}\n\n//=================================\n// Update methods\n//=================================\n\n//shared functions between ui elements - we need these\n//because for now there is no way to add shared ui code.\n\nvar taskCompleted = function(messenger,currentTask,nextTask,data) {\n    var taskResult = {};\n    taskResult.state = \"SUCCESS\";\n    taskResult.data = data;\n    \n    var updateInfo = [];\n    updateInfo.push([\"taskResults.\" + currentTask,taskResult]);\n    updateInfo.push([\"tasks.activeTask\",nextTask]);\n    messenger.compoundDataUpdate(updateInfo);\n}\n\nvar taskCanceled = function(messenger,currentTask,prevTask) {\n    var clearData = {};\n    clearData.state = \"INCOMPLETE\";\n    \n    var updateInfo = [];\n    updateInfo.push([\"taskResults.\" + currentTask,clearData]);\n    updateInfo.push([\"taskResults.\" + prevTask,clearData]);\n    updateInfo.push([\"tasks.activeTask\",prevTask]);\n    messenger.compoundDataUpdate(updateInfo);\n}\n\n//=================================\n// Filters\n//=================================\n\n/* This initializes the filters */\nthis.initializeFilters = function() {\n\n    //define the filters\n    var baseFilterList = [\n        [\"Section\",(fileEntry) => fileEntry.Fields.entry_section],\n    ];\n    \n    var typeSpecificFilters = this.getTypeSpecificFilters(this.metaFileType);\n    \n    var filterList = typeSpecificFilters ? baseFilterList.concat(typeSpecificFilters) : baseFilterList;\n    \n    //create the working filter struct\n    var createFilterStruct = (filterListEntry) => {\n        var struct = {};\n        struct.filterFunction = filterListEntry[1];\n        struct.title = filterListEntry[0];\n        struct.optionSet = null;\n        struct.selectionActive = false;\n        struct.selection = null;\n        struct.selectElement = null;\n        return struct;\n    }\n    this.filterStructs = filterList.map(createFilterStruct); \n    \n    //create the overrall filter function\n    this.overallDropdownFilter = (combinedEntry) => {\n        //don't filter selected cells\n        if(combinedEntry.selected) return true;\n        \n        var resultOk = true;\n        var fileEntry = combinedEntry.fileEntry;\n\n        var singleFilterPass = (filterStruct) => {\n            if(filterStruct.selectionActive) {\n                 return (filterStruct.filterFunction(fileEntry) == filterStruct.selection);\n            }\n            else {\n                return true;\n            }\n        }\n        \n        return this.filterStructs.every(singleFilterPass);\n    }\n    \n    //create the fiter display elements\n    apogeeapp.ui.removeAllChildren(this.filterCell);\n    var createFilterEntry = (filterStruct) => {\n        this.filterCell.appendChild(this.getFilterElement(filterStruct));\n    }\n    this.filterStructs.forEach(createFilterEntry);\n    \n    //add the free text filter\n    this.filterCell.appendChild(this.createFreeTextFilterElement());\n}\n\n/** This creates a dom element for the filter select */\nthis.getFilterElement = function(filterStruct) {\n    var container = document.createElement(\"div\");\n    container.className = \"editMeta_filterContainerClass\";\n    \n    container.appendChild(document.createTextNode(filterStruct.title));\n    \n    var selectElement = document.createElement(\"select\");\n    filterStruct.selectElement = selectElement;\n    container.appendChild(selectElement);\n    \n    //handler = make selection and reload file entries\n    filterStruct.selectElement.onchange = (event) => {\n        if(selectElement.value == NULL_SELECTION) {\n            filterStruct.selectionActive = false;\n            filterStruct.selection = null;\n        }\n        else {\n            filterStruct.selectionActive = true;\n            filterStruct.selection = selectElement.value;\n        }\n        this.loadEntries();\n    };\n    \n    return container;\n}\n\nvar NULL_SELECTION = \"----\";\n\n/** This creates a dom element for the filter select */\nthis.createFreeTextFilterElement = function() {\n    var container = document.createElement(\"div\");\n    container.className = \"editMeta_filterContainerClass\";\n    \n    container.appendChild(document.createTextNode(\"Free text\"));\n    \n    this.freeTextFilterEntry = document.createElement(\"input\");\n    this.freeTextFilterEntry.type = \"text\";\n    this.freeTextFilterEntry.oninput = () => this.onFilterKeyTyped();\n    container.appendChild(this.freeTextFilterEntry);\n    \n    return container;\n}\n\n\n/** This method populates the options into the filter struct. */\nthis.populateFilterSelect = function(filterStruct) {\n    apogeeapp.ui.removeAllChildren(filterStruct.selectElement);\n    \n    filterStruct.selectElement.add(apogeeapp.ui.createElement(\"option\",{\"text\":NULL_SELECTION}));\n    \n    for(var option in filterStruct.optionSet) {\n        filterStruct.selectElement.add(apogeeapp.ui.createElement(\"option\",{\"text\":option}));\n    }\n    \n    if(filterStruct.selectionActive) {\n        filterStruct.selectElement.value = filterStruct.selection;\n    }\n    else {\n        filterStruct.selectElement.value = NULL_SELECTION;\n    }\n}\n\n/** This method populates the allowed options for each filter in the list. It does this\n * sequentially, meaning the options for later filters depend on the current selection in previous filters. */\nthis.populateFilterOptions = function() {\n    \n    var fileEntryList = this.workingSelectedFileEntryInfo.combinedEntries.map((combinedEntry) => combinedEntry.fileEntry);\n    \n    //the create options function, for use with reduce\n    var createOptionsAndFilterList = (filterStruct) => {\n        \n        \n        //populate filter option set\n        var addToOptionSet = (optionSet,fileEntry) => {\n            var value = filterStruct.filterFunction(fileEntry);\n            optionSet[value] = true;\n            return optionSet;\n        }\n        \n        filterStruct.optionSet = fileEntryList.reduce(addToOptionSet,{});\n        \n        //update selection active = clear it if it was set to something that was not an option\n        if(filterStruct.selectionActive) {\n            if(!filterStruct.optionSet[filterStruct.selection]) {\n                filterStruct.selectionActive = false;\n                filterStruct.selection = null;\n            }\n        }\n        \n        //filter out list for next filter, if selection active\n        fileEntryList = fileEntryList.filter( (fileEntry) => {\n            if(filterStruct.selectionActive) {\n                 return (filterStruct.filterFunction(fileEntry) == filterStruct.selection);\n            }\n            else {\n                return true;\n            }\n        });\n        \n        //populate the ui element for these new options\n        this.populateFilterSelect(filterStruct);\n    }\n    \n    this.filterStructs.forEach(createOptionsAndFilterList)\n}\n\nthis.getTypeSpecificFilters = function(metaFileType) {\n    return TYPE_SPECIFIC_FILTERS[metaFileType];\n}\n\nTYPE_SPECIFIC_FILTERS = {\n    \"propertyRules\":[\n        ],\n    \"themeRules\":[\n        [\"Option\",(fileEntry) => fileEntry.Fields.entry_data.propType]\n        ],\n    \"theme\":[\n        ],\n    \"strings\":[\n        ],\n    \"inputColors\":[\n        ]\n}\n\nconst TEXT_FILTER_DELAY = 250;\n\n//text filter methods\nthis.onFilterKeyTyped = function() {\n    if(this.filterTimer) {\n        clearTimeout(this.filterTimer);\n        this.filterTimer = null;\n    }\n    \n    this.filterTimer = setTimeout(() => this.updateTextFilter(),TEXT_FILTER_DELAY);\n}\n\nthis.updateTextFilter = function() {\n    //clear timer\n    this.filterTimer = null;\n    \n    //reload the entries\n    this.loadEntries();\n}\n","onLoad":"if(!this.initialized) {\n    this.parentSelectedCell = document.getElementById(\"editMeta_parentSelectedCell\");\n    this.selectedCells = null;\n    this.availableCell = document.getElementById(\"editMeta_availableCell\");\n    \n    this.filterCell = document.getElementById(\"editMeta_filterCell\");\n    \n    this.commitButton = document.getElementById(\"editMeta_commitButton\");\n    this.resetButton = document.getElementById(\"editMeta_resetButton\");\n    \n    this.alertField = document.getElementById(\"editMeta_alertField\");\n    \n    var instance = this;\n    \n    this.commitButton.onclick = () => instance.onCommitClicked();\n    this.resetButton.onclick = () => instance.onResetClicked();\n    \n    this.availableCell.ondragover = (event) => this.allowDrop(event);\n    this.availableCell.ondrop = (event) => this.onAvailableDrop(event);\n    \n    //finished\n    this.initialized = true;\n    \n    if(this.cachedData !== undefined) {\n        console.log(\"using cached data!\");\n        this.setData(this.cachedData);\n        this.cachedData = undefined;\n    }\n}"},"destroyOnInactive":false},"fileTypeEntryList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":614,"height":428},"posInfo":{"x":26,"y":18},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"insertionInfoOptions":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":452,"height":719},"posInfo":{"x":1173,"y":17},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"availableFileEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":836,"height":553},"posInfo":{"x":19,"y":70},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"initialRecipeEntryInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":895,"height":561},"posInfo":{"x":22,"y":147},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"selectedFileEntryInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":526,"height":656},"posInfo":{"x":25,"y":230},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"activeInsertionInfoOptions":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":756,"height":300},"posInfo":{"x":1168,"y":64},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"updatedEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":579,"height":326},"posInfo":{"x":560,"y":309},"state":0,"viewType":"Data"},"dataView":"Colorized"},"getUpdatedRecipeEntries":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":73,"y":547},"state":0,"viewType":"Code"}}}},"commit":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":51,"y":103}},"tabOpen":true,"treeState":-1,"children":{"commitResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":617,"height":218},"posInfo":{"x":659,"y":282},"state":0,"viewType":"Data"},"dataView":"Colorized"},"instructionList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":1052,"height":551},"posInfo":{"x":597,"y":111},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"submitForm":{"type":"apogeeapp.app.DynamicForm","windowState":{"sizeInfo":{"width":532,"height":219},"posInfo":{"x":19,"y":71},"state":0,"viewType":"Output"}},"commitResult":{"type":"apogeeapp.app.DynamicForm","windowState":{"sizeInfo":{"width":292,"height":61},"posInfo":{"x":993,"y":128},"state":0,"viewType":"Output"}}}},"selectParents":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":41,"y":99}},"tabOpen":true,"treeState":-1,"children":{"metaFileList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":1082,"height":334},"posInfo":{"x":48,"y":71},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"availableMetaFiles":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":743,"height":320},"posInfo":{"x":45,"y":118},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"configInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":387,"height":232},"posInfo":{"x":954,"y":86},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"depInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":593,"height":99},"posInfo":{"x":936,"y":168},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"relationForUseType":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":1096,"y":260},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"selectParentFiles":{"type":"apogeeapp.app.FormDataComponent","windowState":{"sizeInfo":{"width":574,"height":330},"posInfo":{"x":407,"y":313},"state":0,"viewType":"Form"}},"initialParentInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":282,"height":134},"posInfo":{"x":463,"y":38},"state":0,"viewType":"Data"},"dataView":"Colorized"},"parentMetaFileOptions":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":1007,"height":524},"posInfo":{"x":47,"y":171},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"updatedParentIds":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":453,"height":114},"posInfo":{"x":23,"y":288},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"updatedParentEntryRecords":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":863,"height":365},"posInfo":{"x":25,"y":482},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"getUpdatedParentEntries":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":466,"y":219},"state":-1,"viewType":"Code"}}}},"completed":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":384,"y":69}},"tabOpen":true,"treeState":-1,"children":{"resetForm":{"type":"apogeeapp.app.DynamicForm","windowState":{"sizeInfo":{"width":286,"height":150},"posInfo":{"x":96,"y":45},"state":0,"viewType":"Output"}}}}}},"micemetarDataAccess":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":168,"y":67}},"treeState":-1,"children":{"createRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":560,"height":321},"posInfo":{"x":33,"y":368},"state":-1,"viewType":"Private"}},"recordsToCreateInstructions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":834,"height":391},"posInfo":{"x":30,"y":472},"state":-1,"viewType":"Code"}},"createCommitBody":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":568,"height":400},"posInfo":{"x":629,"y":225},"state":-1,"viewType":"Code"}},"createRequestOptions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":523,"height":254},"posInfo":{"x":822,"y":379},"state":-1,"viewType":"Code"}},"host":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":353,"height":71},"posInfo":{"x":15,"y":6},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"commitUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":433,"height":107},"posInfo":{"x":14,"y":98},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"requestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":450,"height":68},"posInfo":{"x":14,"y":58},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"dataSetInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":882,"height":611},"posInfo":{"x":317,"y":144},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"createUpdateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":1002,"height":655},"posInfo":{"x":37,"y":247},"state":-1,"viewType":"Code"}},"createCreateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":994,"height":643},"posInfo":{"x":39,"y":209},"state":-1,"viewType":"Code"}},"getFieldErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":512,"height":68},"posInfo":{"x":761,"y":616},"state":-1,"viewType":"Code"}},"getRecordErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":81},"posInfo":{"x":762,"y":664},"state":-1,"viewType":"Code"}},"createDeleteInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":678,"height":540},"posInfo":{"x":36,"y":289},"state":-1,"viewType":"Code"}},"getRecordInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":480,"height":400},"posInfo":{"x":818,"y":427},"state":-1,"viewType":"Code"}},"combinedEntriesToInstructionList":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":721,"height":524},"posInfo":{"x":31,"y":516},"state":-1,"viewType":"Private"}},"getCommitPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":569,"height":109},"posInfo":{"x":316,"y":26},"state":-1,"viewType":"Code"}},"getRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":546,"height":89},"posInfo":{"x":315,"y":67},"state":-1,"viewType":"Code"}},"customRequestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":17,"y":142},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"getCustomRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":668,"height":88},"posInfo":{"x":317,"y":104},"state":-1,"viewType":"Code"}}}},"settings":{"type":"apogeeapp.app.FormDataComponent","windowState":{"sizeInfo":{"width":793,"height":410},"posInfo":{"x":28,"y":141},"state":0,"viewType":"Form"}}}},"activeTabMember":"Model.tasks.login"}