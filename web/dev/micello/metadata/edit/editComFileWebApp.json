{"fileType":"apogee app js workspace","version":"0.40","references":[],"workspace":{"fileType":"apogee workspace","version":0.2,"name":"editComFileWebApp","data":{"name":"Model","type":"apogee.Folder","children":{"tasks":{"name":"tasks","type":"apogee.Folder","children":{"getSessionKey":{"name":"getSessionKey","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"if(login.result.valid) {\n    return login.result.data.sessionKey;\n}\nelse {\n    return null;\n}\n","supplementalCode":"","description":""}},"currentTask":{"name":"currentTask","type":"apogee.JsonTable","updateData":{"data":["switcher","selectSequence"],"description":""}},"getFileTypeName":{"name":"getFileTypeName","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeId"],"functionBody":"return commonData.fileTypeIdToName[fileTypeId];","supplementalCode":"","description":""}},"commonData":{"name":"commonData","type":"apogee.Folder","children":{"fileTypeList":{"name":"fileTypeList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var sessionKey = login.getSessionKey();\nif(!sessionKey) return null;\n\nvar fileTypeSearch = {};\nfileTypeSearch.search = \"file_type_list\";\n\nreturn micemetarDataAccess.getRequestPromise(fileTypeSearch,sessionKey);\n\n","supplementalCode":"","description":""}},"fileTypeIdToName":{"name":"fileTypeIdToName","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!fileTypeList) return null;\nif(!fileTypeList.success) throw new Error(\"Error loading file type list: \" + fileTypeList.msg);\n\nvar output = {};\n\nvar addToMap = (record) => {output[record.Id] = record.Fields.file_type_name;}\n\nfileTypeList.data.Response.forEach(addToMap);\n\nreturn output;","supplementalCode":"","description":""}},"fileTypeNameToId":{"name":"fileTypeNameToId","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!fileTypeList) return null;\n\nvar output = {};\n\nvar addToMap = (record) => {output[record.Fields.file_type_name] = record.Id;}\n\nfileTypeList.data.Response.forEach(addToMap);\n\nreturn output;","supplementalCode":"","description":""}},"customerInfo":{"name":"customerInfo","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"const url = settings.data.customerFileUrl;\nreturn apogee.net.jsonRequest(url);","supplementalCode":"","description":""}},"INACTIVE_LAYOUT":{"name":"INACTIVE_LAYOUT","type":"apogee.JsonTable","updateData":{"data":{"lines":[{"type":"title","title":"inactive"}]},"description":""}},"DUMMY_DROPDOWN_ENTRY":{"name":"DUMMY_DROPDOWN_ENTRY","type":"apogee.JsonTable","updateData":{"data":"---","description":""}},"GLOBAL_CONTEXT":{"name":"GLOBAL_CONTEXT","type":"apogee.JsonTable","updateData":{"data":"public","description":""}},"CID_CONTEXT_PREFIX":{"name":"CID_CONTEXT_PREFIX","type":"apogee.JsonTable","updateData":{"data":"com_","description":""}},"DEFAULT_COM_FILE_NAME":{"name":"DEFAULT_COM_FILE_NAME","type":"apogee.JsonTable","updateData":{"data":"Standard","description":""}},"DEFAULT_META_FILE_NAME":{"name":"DEFAULT_META_FILE_NAME","type":"apogee.JsonTable","updateData":{"data":"Standard","description":""}},"getFileTypeName":{"name":"getFileTypeName","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeId"],"functionBody":"return fileTypeIdToName[fileTypeId];","supplementalCode":"","description":""}}}},"getFileTypeId":{"name":"getFileTypeId","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeName"],"functionBody":"return commonData.fileTypeNameToId[fileTypeName];","supplementalCode":"","description":""}},"editComFile":{"name":"editComFile","type":"apogee.Folder","children":{"comFileResponse":{"name":"comFileResponse","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"sessionKey = login.getSessionKey();\nif(!sessionKey) return null;\n\nvar cidContext = selectCid.getCidContext();\nif(!cidContext) return null;\n\nvar searchDef = {};\nsearchDef.search = \"community_files\";\nsearchDef.file_context = cidContext;\nreturn micemetarDataAccess.getRequestPromise(searchDef,sessionKey);\n\n\n\n\n\n\n\n","supplementalCode":"","description":""}},"metaFileList":{"name":"metaFileList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var sessionKey = login.getSessionKey();\nif(!sessionKey) return null;\n\nvar contextList = selectCid.getAllContexts();\nif(!contextList)  return null;\n\n//request promise from context\nvar getRequestPromiseFromContext = (context) => {\n    var searchDef = {};\n    searchDef.search = \"meta_file_list\";\n    searchDef.file_context = context;\n    return micemetarDataAccess.getRequestPromise(searchDef,sessionKey);\n}\n\n//create promise list\npromiseList = contextList.map(getRequestPromiseFromContext);\n\n//evaluate promise list\nreturn Promise.all(promiseList);\n","supplementalCode":"","description":""}},"existingComFileEntries":{"name":"existingComFileEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!comFileResponse) {\n    //empty list\n    return [];\n}\n\nif(!comFileResponse.success) {\n    throw new Error(\"Error loading meta file records: \" + comFileResponse.msg);\n}\n\nvar isComFileEntry = (record) => (record.Type == \"com_file_entry\");\n\nreturn comFileResponse.data.Records.filter(isComFileEntry);\n","supplementalCode":"","description":""}},"availableMetaFiles":{"name":"availableMetaFiles","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!metaFileList) return null;\n\nvar output = [];\n\nvar addToOutput = (response) => {\n    if(!response.success) throw new Error(\"Error loading meta files: \" + response.msg);\n    output = output.concat(response.data.Response)};\n\nmetaFileList.forEach(addToOutput);\n\nreturn output;","supplementalCode":"","description":""}},"comFile":{"name":"comFile","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!comFileResponse) {\n    return null;\n}\n\nif(!comFileResponse.success) {\n    throw new Error(\"Com File request error: \" + comFileResponse.msg);\n}\n\nif(comFileResponse.data.Response.length > 0) {\n    return comFileResponse.data.Response[0];   \n}\nelse {\n    \n    //meta file code;\n    var fields = {};\n    fields.file_context = commonData.CID_CONTEXT_PREFIX + selection.cid;\n    fields.name = commonData.DEFAULT_COM_FILE_NAME;\n    fields.ref = NEW_COM_FILE_REF;\n\n    return micemetarDataAccess.createRecord(\"com_file\",fields);\n}\n\n","supplementalCode":"","description":""}},"NEW_COM_FILE_REF":{"name":"NEW_COM_FILE_REF","type":"apogee.JsonTable","updateData":{"data":"legacy","description":""}},"sections":{"name":"sections","type":"apogee.JsonTable","updateData":{"data":{"propertyRules":{"label":"Property Rules","baseIsUnique":true},"themeRules":{"label":"Theme Rules","baseIsUnique":false},"theme":{"label":"Theme","baseIsUnique":false},"strings":{"label":"Strings","baseIsUnique":false},"inputColors":{"label":"Input Colors","baseIsUnique":false}},"description":""}},"refForUseType":{"name":"refForUseType","type":"apogee.JsonTable","updateData":{"data":{"base":"base","override":"overrides"},"description":""}},"editComFile":{"name":"editComFile","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var layout = [];\n\nlayout.push(getTitleLine(\"Select Community Meta Files\"));\n\nif(availableMetaFiles) {\n    addBodyLines(layout);\n}\n\nvar cid = selectCid.getCid();\nif(cid) {\n    var cidEntry = {};\n    cidEntry.type = \"invisible\";\n    cidEntry.key = \"cid\";\n    cidEntry.value = cid;\n    layout.push(cidEntry);\n    \n    if( !((data)&&(data.cid == cid)) ) {\n        //reload the data\n        _resetEntries();\n    }\n}\n\n//horizontal rule\nentry = {};\nentry.type = \"htmlDisplay\";\nentry.html = \"<hr>\";\nlayout.push(entry);\n\n//add a reset button\nvar resetEntry = {}\nresetEntry.type = \"submit\";\nresetEntry.onSubmit = _resetEntries;\nresetEntry.submitLabel = \"Reset Entries\";\nlayout.push(resetEntry);\n\nreturn layout;","supplementalCode":"//this function reinsteates the original data\nfunction _resetEntries() {\n    apogeeMessenger.dataUpdate(\"data\",initialEntries);\n}\n\nfunction getTitleLine(label) {\n    return {\n\t\t\"type\": \"heading\",\n\t\t\"level\": 2,\n\t\t\"text\": label\n\t};\n}\n\nfunction addBodyLines(lines) {\n    for(var fileType in sections) {\n        var sectionInfo = sections[fileType];\n        var fileTypeId = getFileTypeId(fileType);\n        \n        var isUniqueBase = sectionInfo.baseIsUnique;\n        var isUniqueOverides = false;\n        \n        lines.push(getTitleLine(sectionInfo.label));\n        lines.push(getSelectionGroupLine(fileType,fileTypeId,true,isUniqueBase));\n        lines.push(getSelectionGroupLine(fileType,fileTypeId,false,isUniqueOverrides));\n    }\n}\n\n\nfunction getSelectionGroupLine(fileType,fileTypeId,isBaseFile,isUnique) {\n    var isProperType = record => {\n        return ( (record.Fields.file_type_id == fileTypeId) &&\n            (record.Fields.use_type == (isBaseFile ? \"base\" : \"override\")) );\n    }\n    \n    var entries = [];\n    var addEntry = record => {\n        entries.push([getRecordName(record),record.Id]);\n    };\n    \n    availableMetaFiles.filter(isProperType).forEach(addEntry);\n    \n    var resultKey = getSelectionKey(fileType,(isBaseFile ? \"base\" : \"override\"));\n    \n    var line = {};\n    line.label = (isBaseFile ? \"Base Files\" : \"Override Files\");\n    if(isUnique) {\n        line.type = \"radioButtonGroup\";\n        line.groupName = \"selectCom_\" + resultKey\n    }\n    else {\n        line.type = \"checkboxGroup\";\n    }\n    line.key = resultKey;\n    line.entries = entries;\n    \n    return line;\n}\n\nfunction getRecordName(record) {\n    return record.Fields.name + \n        \" : \" + record.Fields.file_context;\n}\n","description":""}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":null,"description":""}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":"","description":""}}},"childrenNotWriteable":true},"initialEntries":{"name":"initialEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!availableMetaFiles) return null;\n\nvar map = {};\n\nvar addToMap = metaFileRecord => {\n    if(_isInExistingComFileEntries(metaFileRecord)) {\n        var fileType = commonData.getFileTypeName(metaFileRecord.Fields.file_type_id);\n        var baseOrOverride = metaFileRecord.Fields.use_type;\n        var mapKey = getSelectionKey(fileType,baseOrOverride);\n        \n        var list = map[mapKey];\n        if(!list) {\n            list = []\n            map[mapKey] = list;\n        }\n        \n        //add ID as a string, because that is what the edit form will do\n        list.push(String(metaFileRecord.Id));\n    }\n}\n\navailableMetaFiles.forEach(addToMap);\n\n//fix any base that is unique - see the sections file\nfor(var fileTypeKey in sections) {\n    var sectionInfo = sections[fileTypeKey];\n    if(sectionInfo.baseIsUnique) {\n        var baseKey = getSelectionKey(fileTypeKey,\"base\");\n        if((map[baseKey])&&(map[baseKey].length > 0)) {\n            map[baseKey] = map[baseKey][0];\n        }\n    }\n}\n\n\n//set the cid\nmap.cid = selectCid.getCid();\n\nreturn map;","supplementalCode":"//This method returns true if the meta file record is in the existing com file entries.\nfunction _isInExistingComFileEntries(metaFileRecord) {\n    return existingComFileEntries.find( comEntry => comEntry.Fields.meta_file_id == metaFileRecord.Id);\n}","description":""}},"getSelectionKey":{"name":"getSelectionKey","type":"apogee.FunctionTable","updateData":{"argList":["fileType","fileGroup"],"functionBody":"return fileType + \"_\" + fileGroup;","supplementalCode":"","description":""}},"removedComFileEntries":{"name":"removedComFileEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!availableMetaFiles) return null;\nif(!editComFile.data) return null;\n\nvar isNotSelected = comFileEntry => {\n    var metaFileId = comFileEntry.Fields.meta_file_id;\n    var isInSelection = _findInResult(metaFileId,editComFile.data);\n    return !isInSelection;\n}\n\nvar deletedEntryList = existingComFileEntries.filter(isNotSelected);\n\nreturn deletedEntryList;","supplementalCode":"function _findInResult(metaFileId) {\n    var metaFileIdString = String(metaFileId);\n    for(var key in editComFile.data) {\n        //ignore the cid field\n        if(key == \"cid\") continue;\n        \n        var result = editComFile.data[key];\n        if(result.constructor == Array) {\n            if(result.indexOf(metaFileIdString) >= 0) return true;\n        }\n        else {\n            if(result == metaFileIdString) return true;\n        }\n    }\n    \n    //if we are still here, it wasn't found\n    return false;\n}","description":""}},"updatedComFileEntries":{"name":"updatedComFileEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!editComFile.data) return null;\n\nvar result = {};\nresult.createdEntries = [];\nresult.existingEntries = [];\n\nif(editComFile.data.cid == selectCid.getCid()) {\n    \n    for(var fileType in sections) {\n        var sectionInfo = sections[fileType];\n        \n        //process base entries\n        var sectionBaseName = getSelectionKey(fileType,\"base\");\n        var sectionBaseValue = editComFile.data[sectionBaseName];\n        //for unique base, place into an array\n        if((sectionInfo.baseIsUnique)&&(sectionBaseValue)) {\n            sectionBaseValue = [sectionBaseValue];\n        }\n        //add to list\n        _addToNewComFileEntries(result,sectionBaseValue,fileType,true);\n        \n        //process override entries\n        var sectionOverridesName = getSelectionKey(fileType,\"override\");\n        var sectionOverridesValue = editComFile.data[sectionOverridesName];\n        //add to list\n        _addToNewComFileEntries(result,sectionOverridesValue,fileType,false);\n    }\n\n}\nelse {\n    //no saved data\n}\n\nreturn result;\n\n","supplementalCode":"function _addToNewComFileEntries(result,selectedIdList,fileType,isBase) {\n    if(selectedIdList) {\n        selectedIdList.forEach(metaFileId => _addRecordToComFileList(result,metaFileId,fileType,isBase));\n    }\n}\n\nfunction _addRecordToComFileList(result,metaFileId,fileType,isBase) {\n    //is this an existing entry\n    var comFileEntry = existingComFileEntries.find(comFileEntries => comFileEntries.Fields.meta_file_id == metaFileId);\n    \n    if(comFileEntry) {\n        //no change to existing record\n        result.existingEntries.push(comFileEntry);\n    }\n    else {\n        //process new entry\n        var fields = {};\n        //fields.ordr = WHAT SHOULD THIS BE!\n        fields.file_group = isBase ? \"base\" : \"override\";\n        fields.com_file_id = comFile.Id;\n        fields.meta_file_id = metaFileId;\n        \n        comFileEntry = micemetarDataAccess.createRecord(\"com_file_entry\",fields);\n        \n        result.createdEntries.push(comFileEntry);\n    }\n}","description":""}},"getDeletedComFileEntries":{"name":"getDeletedComFileEntries","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return removedComFileEntries;","supplementalCode":"","description":""}},"getCreatedComFileEntries":{"name":"getCreatedComFileEntries","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"if(updatedComFileEntries) {\n    return updatedComFileEntries.createdEntries;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"getCreatedComFile":{"name":"getCreatedComFile","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"if((comFile)&&(comFile.Id < 0)) {\n    return comFile;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}}}},"selectCid":{"name":"selectCid","type":"apogee.Folder","children":{"selectContext":{"name":"selectContext","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"\n//------------\n//create layout\n//------------\nvar layout = [];\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Select CID\";\nlayout.push(entry);\n\n//cid\nentry = {};\nentry.type = \"textField\";\nentry.label = \"CID: \";\nentry.key = \"cid\";\nlayout.push(entry);\n\n//customer name\nentry = {};\nentry.type = \"dropdown\";\nentry.label = \"Customer Name: \";\nentry.entries = _getCustomerListWithNullOption();\nentry.key = \"customerAuth\";\nlayout.push(entry);\n\n//additional\nentry = {};\nentry.type = \"textarea\";\nentry.label = \"Additional Contexts: \";\nentry.rows = 4;\nentry.cols = 30;\nentry.key = \"additionalContexts\";\nlayout.push(entry);\n\n\nreturn layout;\n","supplementalCode":"function _getCustomerList() {\n    return commonData.customerInfo.map(entry => [entry.customerName,entry.authString]);\n}\n\nfunction _getCustomerListWithNullOption() {\n    var list = [];\n    list.push([commonData.DUMMY_DROPDOWN_ENTRY,null]);\n    return list.concat(_getCustomerList());\n}","description":""}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":null,"description":""}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":"","description":""}}},"childrenNotWriteable":true},"getOtherContexts":{"name":"getOtherContexts","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"if(!selectContext.data) return null;\n\nvar customerName = selectContext.data.customerAuth;\nvar additionalContextList = selectContext.data.additionalContexts;\nvar publicContextList = [commonData.GLOBAL_CONTEXT];\n\nvar otherContexts = publicContextList;\nif(customerName) otherContexts = otherContexts.concat([customerName]);\nif(additonalContextList) otherContexts = otherContexts.concat(additonalContextList);\n\nreturn otherContexts;","supplementalCode":"","description":""}},"getAllContexts":{"name":"getAllContexts","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"var cidContext = getCidContext(cid);\nvar otherContexts = getOtherContexts();\nif((cidContext)&&(otherContexts)) {\n    return [cidContext].concat(otherContexts);\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"getCid":{"name":"getCid","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"if(selectContext.data) {\n    return selectContext.data.cid;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"getCidContext":{"name":"getCidContext","type":"apogee.FunctionTable","updateData":{"argList":["cid"],"functionBody":"var cid = getCid();\nif(cid) {\n    return commonData.CID_CONTEXT_PREFIX + cid;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}}}},"commit":{"name":"commit","type":"apogee.Folder","children":{"commitResponse":{"name":"commitResponse","type":"apogee.JsonTable","updateData":{"data":null,"description":""}},"instructionList":{"name":"instructionList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!editComFile) return null;\n\n\nvar combinedEntries = {};\n\n//com file (watch out - it would be bad if com file and com file entry have the same idea. But at least it is detected)\nvar comFile = editComFile.getCreatedComFile();\nif(comFile) {\n    combinedEntries[comFile.Id] = {\"newEntry\":comFile};\n}\n\n//com file entries\nvar createdComFileEntries = editComFile.getCreatedComFileEntries();\nvar deletedComFileEntries = editComFile.getDeletedComFileEntries();\n\nif(createdComFileEntries) {\n    createdComFileEntries.forEach( record => {\n        if(combinedEntries[record.Id] !== undefined) throw new Error(\"Repeart entry for id = \" + record.Id);\n        combinedEntries[record.Id] = {\"newEntry\":record};\n    });\n}\n\nif(deletedComFileEntries) {\n    deletedComFileEntries.forEach( record => {\n        if(combinedEntries[record.Id] !== undefined) throw new Error(\"Repeart entry for id = \" + record.Id);\n        combinedEntries[record.Id] = {\"oldEntry\":record};\n    });\n}\n\nvar instructionList = micemetarDataAccess.combinedEntriesToInstructionList(combinedEntries);\n\nreturn instructionList;","supplementalCode":"function updateObject(fileEntry) {\n    var newFileEntry = apogee.util.jsonCopy(fileEntry);\n    var featureTypePropData = newFileEntry.Fields.entry_data.properties[0];\n    if(featureTypePropData.key != \"featureType\") throw new Error(\"Not the feature type!\");\n    \n    featureTypePropData.legacyKey = \"object\";\n    featureTypePropData.legacyValue = \"true\";\n    \n    \n    \n    return newFileEntry;\n}\n\nfunction updateSpace(fileEntry) {\n    var newFileEntry = apogee.util.jsonCopy(fileEntry);\n    var featureTypePropData = newFileEntry.Fields.entry_data.properties[0];\n    if(featureTypePropData.key != \"featureType\") throw new Error(\"Not the feature type!\");\n    \n    featureTypePropData.legacyKey = \"area\";\n    featureTypePropData.legacyValue = \"space\";\n    \n    return newFileEntry;\n}\n\nfunction updateGeometryEntry(fileEntry) {\n    var newFileEntry = apogee.util.jsonCopy(fileEntry);\n    var featureTypePropData = newFileEntry.Fields.entry_data.properties[0];\n    if(featureTypePropData.key != \"featureType\") throw new Error(\"Not the feature type!\");\n    \n    var legacyKey = featureTypePropData.legacyKey;\n    var legacyValue = featureTypePropData.value;\n    \n    if(legacyValue == legacyKey) {\n        legacyValue = \"true\";\n    }\n    \n    featureTypePropData.legacyValue = legacyValue;\n    \n    return newFileEntry;\n}","description":""}},"submitForm":{"name":"submitForm","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"\n//on submit, make the commit and write the result to the commit result table\nvar onSubmit = formData => {\n    \n    var commitMessage = formData.commitMsg.trim();\n    if(commitMessage.length === 0) {\n        alert(\"You must enter a commit message!\");\n        return;\n    }\n    \n    if((!instructionList)||(instructionList.length === 0)) {\n        alert(\"There is no data to commit.\");\n        return;\n    }\n    \n    var sessionKey = login.getSessionKey();\n    if(!sessionKey) {\n        alert(\"Please login. There is not a valid session.\");\n        return;\n    }\n    \n    commitPromise = micemetarDataAccess.getCommitPromise(instructionList,commitMessage,sessionKey);\n    \n    //set the response\n    apogeeMessenger.asynchDataUpdate(\"commitResponse\",commitPromise);\n};\n\n//use \"cancel\" action for \"clear\"\nvar onClear = () => {\n    //set the response\n    apogeeMessenger.dataUpdate(\"commitResponse\",\"\");\n}\n\n//make the layou\nvar layout = [];\n\n//commit msg\nentry = {};\nentry.type = \"textarea\";\nentry.label = \"Commit Msg: \";\nentry.cols = 50;\nentry.rows = 8;\nentry.key = \"commitMsg\";\nlayout.push(entry);\n\n\n//ad submit button to layout\nentry = {};\nentry.type = \"submit\";\nentry.onSubmit = onSubmit;\nentry.onCancel = onClear;\nentry.cancelLabel = \"Clear\";\nlayout.push(entry);\n\nreturn layout;","supplementalCode":"","description":""}},"commitResult":{"name":"commitResult","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var msg;\nvar style;\n\nif(!commitResponse) {\n    msg = \"WAITING\";\n    style = \"color:blue\";\n}\nelse if(commitResponse.success === true) {\n    msg = \"Commit Success\";\n    style = \"color:blue\";\n}\nelse {\n    msg = \"Error making commit: \" + commitResponse.msg;\n    style = \"color:red\";\n}\n\nvar textEntry = {};\ntextEntry.type = \"htmlDisplay\";\ntextEntry.html = \"<span style='\" + style + \"' + >\" + msg + \"</span>\";\n\nreturn [textEntry];\n","supplementalCode":"","description":""}}}},"completed":{"name":"completed","type":"apogee.Folder","children":{"resetForm":{"name":"resetForm","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var onReset = function() {\n    var clearTaskList = [\n        [\"selectCid.selectContext.data\",null],\n        [\"editComFile.editComFile.data\",null],\n        [\"commit.commitResponse\",null]\n    ];\n    apogeeMessenger.compoundDataUpdate(clearTaskList);\n}\n\n//make the layou\nvar layout = [];\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Reset\";\nlayout.push(entry);\n\n//aadd the reset button\nentry = {};\nentry.type = \"submit\";\nentry.onSubmit = onReset;\nentry.submitLabel = \"Reset Form\";\nlayout.push(entry);\n\nreturn layout;","supplementalCode":"","description":""}}}}}},"micemetarDataAccess":{"name":"micemetarDataAccess","type":"apogee.Folder","children":{"createRecord":{"name":"createRecord","type":"apogee.FunctionTable","updateData":{"argList":["recordType","fieldMap"],"functionBody":"var record = {};\n\nrecord.Id = getId();\nrecord.Type = recordType;\nrecord.Fields = fieldMap;\nrecord.read_perm = READ_PERM;\nrecord.edit_perm = EDIT_PERM;\n\nreturn record;","supplementalCode":"var READ_PERM = 2;\nvar EDIT_PERM = 15;\n\n//this will be illegal at some point\nvar nextId = -1;\n\nfunction getId() {\n    return nextId--;\n}","description":"This method creates a record given the field values and record info \nfrom the data set info. It creates and ID and uses standard permissions."}},"recordsToCreateInstructions":{"name":"recordsToCreateInstructions","type":"apogee.FunctionTable","updateData":{"argList":["recordList"],"functionBody":"var instructions = [];\n\nfor(var i = 0; i < recordList.length; i++) {\n    var createRecord = recordList[i];\n    var instruction = createCreateInstruction(createRecord);\n    instructions.push(instruction);\n}\n\nreturn instructions;","supplementalCode":"","description":"This creates a list of create instructions to go along with a list of records to be created.\n\nThere is the option to assign the ID or to leave it as undefined, in which case\nan automatically incremented ID will be assigned. (For consistency in the data\nset, either all records should be preassigned or all records should be \nautomatically assigned."}},"createCommitBody":{"name":"createCommitBody","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage"],"functionBody":"var commit = {};\nvar actions = [];\n\nif(commitMessage.length === 0) throw new Error(\"Commit message missing!\");\n\ncommit.Name = dataSetInfo.name;\ncommit.Message = commitMessage;\ncommit.Actions = actions;\n\n//single action with commits\nvar action = {};\naction.Title = \"bulk create commit\";\naction.Instr = instructionList;\nactions.push(action);\n\nreturn commit","supplementalCode":"","description":"This creates a body for a commit request, given a list of instructions and a commit message."}},"createRequestOptions":{"name":"createRequestOptions","type":"apogee.FunctionTable","updateData":{"argList":["bodyJson","sessionKey"],"functionBody":"var header = {};\nheader[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\nheader.sessionKey = sessionKey;\nheader[\"proto-version\"] = \"4.0\";\nheader[\"db-version\"] = dataSetInfo.version;\n\nrequestInfo = {};\nrequestInfo.header = header;\nif(bodyJson) {\n    requestInfo.method = \"POST\";\n    requestInfo.body = JSON.stringify(bodyJson);\n}\n\nreturn requestInfo;\n","supplementalCode":"","description":"This creates the requestOptions, suitable for apogee.net.jsonRequest, to go with an type of request to the workingset (micemetarequest) server."}},"host":{"name":"host","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return settings.data.metaDbHost;","supplementalCode":"","description":""}},"commitUrl":{"name":"commitUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvalue = host + \"/commit\";\nreturn value;\n\n","supplementalCode":"","description":""}},"requestUrl":{"name":"requestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return host + \"/cannedsearch\";\n\n","supplementalCode":"","description":""}},"dataSetInfo":{"name":"dataSetInfo","type":"apogee.JsonTable","updateData":{"data":{"name":"Micemetar","records":{"com_file_entry":{"foreignList":[],"idField":"com_file_entry_id","name":"com_file_entry","recordClass":"com.micello.micemetar.data.ComFileEntry","fields":[{"fieldClass":"java.lang.Integer","name":"ordr","nullOk":false,"defaultValue":0},{"fieldClass":"com.micello.micemetar.data.ComFile","name":"com_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.MetaFile","name":"meta_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"file_group","nullOk":false,"defaultValue":null}]},"com_file":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"com_file_id","remoteRecord":"com_file_entry","orderField":"ordr","name":"com_file_entry_list"}],"idField":"com_file_id","name":"com_file","recordClass":"com.micello.micemetar.data.ComFile","fields":[{"fieldClass":"java.lang.String","name":"file_context","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"name","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"ref","nullOk":true,"defaultValue":null}]},"meta_parent_entry":{"foreignList":[],"idField":"meta_parent_id","name":"meta_parent_entry","recordClass":"com.micello.micemetar.data.MetaParentEntry","fields":[{"fieldClass":"com.micello.micemetar.data.MetaFile","name":"meta_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.MetaFile","name":"parent_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"relation","nullOk":true,"defaultValue":null}]},"file_entry":{"foreignList":[],"idField":"file_entry_id","name":"file_entry","recordClass":"com.micello.micemetar.data.FileEntry","fields":[{"fieldClass":"java.lang.String","name":"entry_context","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"entry_name","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.FileType","name":"file_type_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"entry_section","nullOk":true,"defaultValue":null},{"fieldClass":"java.lang.String","name":"entry_key","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"option_name","nullOk":false,"defaultValue":null},{"fieldClass":"org.json.JSONObject","name":"entry_data","nullOk":false,"defaultValue":null}]},"file_type":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"file_type_id","remoteRecord":"file_entry","name":"file_entry_list"}],"idField":"file_type_id","name":"file_type","recordClass":"com.micello.micemetar.data.FileType","fields":[{"fieldClass":"java.lang.String","name":"file_type_name","nullOk":true,"defaultValue":null}]},"meta_file":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"meta_file_id","remoteRecord":"recipe_entry","orderField":"ordr","name":"recipe_entry_list"},{"restrictDelete":true,"isUnique":false,"remoteField":"meta_file_id","remoteRecord":"meta_parent_entry","name":"parent_entry_list"}],"idField":"meta_file_id","name":"meta_file","recordClass":"com.micello.micemetar.data.MetaFile","fields":[{"fieldClass":"com.micello.micemetar.data.FileType","name":"file_type_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"file_context","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"name","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"use_type","nullOk":false,"defaultValue":null}]},"recipe_entry":{"foreignList":[],"idField":"recipe_entry_id","name":"recipe_entry","recordClass":"com.micello.micemetar.data.RecipeEntry","fields":[{"fieldClass":"java.lang.Integer","name":"ordr","nullOk":false,"defaultValue":0},{"fieldClass":"com.micello.micemetar.data.MetaFile","name":"meta_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.FileEntry","name":"file_entry_id","nullOk":false,"defaultValue":null},{"fieldClass":"org.json.JSONObject","name":"insertion_info","nullOk":true,"defaultValue":null}]}},"version":"5.0"},"description":""}},"createUpdateInstruction":{"name":"createUpdateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["initialRecord","targetRecord"],"functionBody":"if(initialRecord.Id != targetRecord.Id) {\n    throw new Error(\"Record ID mismatch in create update instruction for target record: \" + getRecordErrString(targetRecord));\n}\n\nif(initialRecord.Type != targetRecord.Type) {\n    throw new Error(\"Inital and target record types do not match. Target record: \" + getRecordErrString(targetRecord));\n}\n\nvar recordsDifferent = false;\n\nvar recordInfo = getRecordInfo(initialRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Update\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = initialRecord.Id;\n\ninstruction.initialReadPerm = initialRecord.read_perm;\ninstruction.initialEditPerm = initialRecord.edit_perm;\n\nif(initialRecord.readPerm != targetRecord.readPerm) {\n    instruction.targetReadPerm = targetRecord.read_perm;\n    recordsDifferent = true;\n}\n\nif(initialRecord.editPerm != targetRecord.editPerm) {\n    instruction.targetEditPerm = targetRecord.edit_perm;\n    recordsDifferent = true;\n}\n\nvar initialData = {};\ninstruction.Initial = initialData;\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    \n    var initialValue;\n    var targetValue;\n    \n    var initialValue = initialRecord.Fields[field.name];\n    var targetValue = targetRecord.Fields[field.name];\n    \n    //validate target values\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(targetRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(targetRecord,field));\n        }\n    }\n    \n    if(!fieldsMatch(initialValue,targetValue,field)) {\n        initialData[field.name] = initialValue;\n        targetData[field.name] = targetValue;\n        recordsDifferent = true;\n    }\n}\n\nif(recordsDifferent) {\n    return instruction;\n}\nelse {\n    return null;\n}\n","supplementalCode":"function fieldsMatch(initialValue,targetValue,fieldInfo) {\n    if(fieldInfo.fieldClass === \"java.lang.String\") {\n        //compare strings with \"==\"\n        return (initialValue == targetValue);\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"java.lang\")) {\n        //compare other basic values with \"===\"\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"com.micello\")) {\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONObject\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONArray\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else {\n        throw new Error(\"unrecognized field type: \" + fieldInfo.fieldClass);\n    }\n}\n\nfunction compareJsonData(a,b) {\n    var an = apogee.util.getNormalizedObjectCopy(a);\n    var bn = apogee.util.getNormalizedObjectCopy(b);\n    var aString = JSON.stringify(an);\n    var bString = JSON.stringify(bn);\n    return aString == bString;\n}\n    ","description":"This function creates an update instruction given an initial and target record. If the records are the same then NULL is returned. (No update is needed.)"}},"createCreateInstruction":{"name":"createCreateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["createRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(createRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Create\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = createRecord.Id;\n\ninstruction.targetReadPerm = createRecord.read_perm;\ninstruction.targetEditPerm = createRecord.edit_perm;\n\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var targetValue;\n    var targetValue = createRecord.Fields[field.name];\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(createRecord,field));\n        }\n    }\n    \n    targetData[field.name] = targetValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getFieldErrString":{"name":"getFieldErrString","type":"apogee.FunctionTable","updateData":{"argList":["record","fieldInfo"],"functionBody":"return getRecordErrString(record) + \" - \" + fieldInfo.name;","supplementalCode":"","description":""}},"getRecordErrString":{"name":"getRecordErrString","type":"apogee.FunctionTable","updateData":{"argList":["record"],"functionBody":"return record.Type + \" \" + record.Id;","supplementalCode":"","description":""}},"createDeleteInstruction":{"name":"createDeleteInstruction","type":"apogee.FunctionTable","updateData":{"argList":["deleteRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(deleteRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Delete\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = deleteRecord.Id;\n\ninstruction.initialReadPerm = deleteRecord.read_perm;\ninstruction.initialEditPerm = deleteRecord.edit_perm;\n\nvar initialData = {};\ninstruction.Initial = initialData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var initialValue = deleteRecord.Fields[field.name];\n    \n    initialData[field.name] = initialValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getRecordInfo":{"name":"getRecordInfo","type":"apogee.FunctionTable","updateData":{"argList":["recordType"],"functionBody":"var recordInfo = dataSetInfo.records[recordType];\n\nif(!recordInfo) {\n    throw new Error(\"Record type not found in getRecordInfo: \" + recordType);\n}\n\nreturn recordInfo;","supplementalCode":"","description":""}},"combinedEntriesToInstructionList":{"name":"combinedEntriesToInstructionList","type":"apogee.FunctionTable","updateData":{"argList":["combinedEntries"],"functionBody":"var output = [];\nfor(var key in combinedEntries) {\n    var entry = combinedEntries[key];\n    var instruction = getInstructionForCombinedEntry(entry);\n    if(instruction) {\n        output.push(instruction);\n    }\n}\n\nreturn output;","supplementalCode":"function getInstructionForCombinedEntry(combinedEntry) {\n    var newEntry = combinedEntry.newEntry;\n    var oldEntry = combinedEntry.oldEntry;\n    \n    if(newEntry) {\n        if(!oldEntry) {\n            console.log(\"Create: \" + newEntry.Id);\n            return createCreateInstruction(newEntry);\n        }\n        else {\n            //this will return null for matching records\n            console.log(\"Update(maybe): \" + newEntry.Id);\n            return createUpdateInstruction(oldEntry,newEntry);\n        }\n    }\n    else if(oldEntry) {\n        console.log(\"Delete: \" + oldEntry.Id);\n        return createDeleteInstruction(oldEntry);\n    }\n    \n    return null;\n}\n\nfunction entriesDifferent(entry1,entry2) {\n    var string1 = JSON.stringify(apogee.util.getNormalizedCopy(entry1));\n    var string2 = JSON.stringify(apogee.util.getNormalizedCopy(entry2));\n    return (string1 == string2);\n}","description":"This function takes a combined entry map of the format:\n\n{\n  \"some-identifier\":{\n    \"oldEntry\":{original record entry, if applicable},\n    \"newEntry\":{new record entry, if applicable}\n  },\n  ...\n}\n\nIt returns an instruction list.\n\n"}},"getCommitPromise":{"name":"getCommitPromise","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage","sessionKey"],"functionBody":"var commitBody = createCommitBody(instructionList,commitMessage);\nvar requestOptions = createRequestOptions(commitBody,sessionKey);\nreturn apogee.net.jsonRequest(commitUrl,requestOptions);","supplementalCode":"","description":""}},"getRequestPromise":{"name":"getRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn apogee.net.jsonRequest(requestUrl,requestOptions);","supplementalCode":"","description":""}},"customRequestUrl":{"name":"customRequestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return host + \"/request\";","supplementalCode":"","description":""}},"getCustomRequestPromise":{"name":"getCustomRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn apogee.net.jsonRequest(customRequestUrl,requestOptions);","supplementalCode":"","description":""}}}},"login":{"name":"login","type":"apogee.Folder","children":{"loginUrl":{"name":"loginUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return settings.data.loginUrl;","supplementalCode":"","description":""}},"sessionResponse":{"name":"sessionResponse","type":"apogee.JsonTable","updateData":{"data":"","description":""}},"savedUserName":{"name":"savedUserName","type":"apogee.JsonTable","updateData":{"data":"","description":""}},"loginControl":{"name":"loginControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var onSubmit = (formData) => {\n    \n    //on click\n    var bodyJson = {};\n    bodyJson.userName = formData.userName;\n    bodyJson.password = formData.password;\n    \n    var options = {};\n    options.body = JSON.stringify(bodyJson);\n    options.method = \"POST\";\n    \n    var requestPromise = apogee.net.jsonRequest(loginUrl,options);\n    \n    //set the response\n    apogeeMessenger.asynchDataUpdate(\"sessionResponse\",requestPromise);\n    \n    //this clears the password...\n    apogeeMessenger.dataUpdate(\"savedUserName\",formData.userName);\n}\n\nvar onClear = () => {\n    var data = [];\n    data.push([\"savedUserName\",null]);\n    data.push([\"sessionResponse\",null]);\n    apogeeMessenger.compoundDataUpdate(data);\n}\n\nvar layout = [];\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Login\";\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"User Name: \";\nentry.key = \"userName\";\nentry.value = savedUserName;\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Password: \";\nentry.password = true;\nentry.key = \"password\";\nlayout.push(entry);\n\n//suvbmit\nentry = {};\nentry.type = \"submit\";\nentry.onSubmit = onSubmit;\nentry.onCancel = onClear;\nentry.cancelLabel = \"Clear\";\nlayout.push(entry);\n\nreturn layout;\n","supplementalCode":"","description":""}},"appendQueryParams":{"name":"appendQueryParams","type":"apogee.FunctionTable","updateData":{"argList":["inUrl"],"functionBody":"if((!sessionResponse)||(!sessionResponse.paramTable)) {\n    throw new Error(\"Param table not loaded!\");\n}\n\nvar isMatchingKey = (paramEntry) => inUrl.startsWith(paramEntry.urlPattern);\n\nvar paramEntry = sessionResponse.paramTable.find(isMatchingKey);\n\nif(paramEntry) {\n    if(paramEntry.params.length > 1) {\n        throw new Error(\"Code only supports 1 appended parameter. (Is an easy fi to add more)\")\n    }\n    else if(paramEntry.params.length === 1) {\n        return inUrl + \"?\" + paramEntry.params[0][0] + \"=\" + paramEntry.params[0][1];\n    }\n}\n      \n//no params to add\nreturn inUrl;\n","supplementalCode":"","description":""}},"getSessionKey":{"name":"getSessionKey","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"if((sessionResponse)&&(sessionResponse.sessionKey)) {\n    return sessionResponse.sessionKey;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"loginResult":{"name":"loginResult","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var msg;\n\nif(!sessionResponse) {\n    msg = \"Login Needed!\";\n    style = \"color:red\";\n}\nelse if(sessionResponse.responseCode == 1) {\n    msg = \"Login Success\";\n    style = \"color:blue\";\n}\nelse {\n    msg = \"Login Failure: \" + sessionResponse.message;\n    style = \"color:red\";\n}\n\nvar textEntry = {};\ntextEntry.type = \"htmlDisplay\";\ntextEntry.html = \"<span style='\" + style + \"' + >\" + msg + \"</span>\";\n\nreturn [textEntry];\n","supplementalCode":"","description":""}}}},"settings":{"name":"settings","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var layout = [];\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Settings\";\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Login URL: \";\nentry.size = 80;\nentry.key = \"loginUrl\";\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Meta DB URL: \";\nentry.size = 80;\nentry.key = \"metaDbHost\";\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Customer File URL: \";\nentry.size = 80;\nentry.key = \"customerFileUrl\";\nlayout.push(entry);\n\n//suvbmit (no cancel)\nentry = {};\nentry.type = \"submit\";\nentry.onSubmit = onSubmit;\nentry.onCancel = onReset;\nentry.cancelLabel = \"Reset\";\nlayout.push(entry);\n\nreturn layout;\n","supplementalCode":"","description":""}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":{"loginUrl":"https://eng.micello.com/TestAuthorization/loginjson","metaDbHost":"https://eng.micello.com/micemetarws","customerFileUrl":"https://eng.micello.com/apogee/data/customerJson.json"},"description":""}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":"","description":""}}},"childrenNotWriteable":true}}}},"components":{"type":"apogeeapp.app.FolderComponent","treeState":1,"children":{"tasks":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":37,"y":37}},"treeState":1,"children":{"getSessionKey":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":447,"height":400},"posInfo":{"x":48,"y":440},"state":-1,"viewType":"Code"}},"currentTask":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":287,"height":92},"posInfo":{"x":48,"y":240},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"getFileTypeName":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":593,"height":400},"posInfo":{"x":47,"y":496},"state":-1,"viewType":"Code"}},"commonData":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":49,"y":379}},"treeState":-1,"children":{"fileTypeList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":727,"height":325},"posInfo":{"x":51,"y":531},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"fileTypeIdToName":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":722,"height":320},"posInfo":{"x":36,"y":461},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"fileTypeNameToId":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":685,"height":300},"posInfo":{"x":38,"y":412},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"customerInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":689,"height":321},"posInfo":{"x":38,"y":52},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"INACTIVE_LAYOUT":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":379,"y":31},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"DUMMY_DROPDOWN_ENTRY":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":373,"y":75},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"GLOBAL_CONTEXT":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":45},"posInfo":{"x":381,"y":126},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"CID_CONTEXT_PREFIX":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":34},"posInfo":{"x":378,"y":177},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"DEFAULT_COM_FILE_NAME":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":877,"y":76},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"DEFAULT_META_FILE_NAME":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":872,"y":127},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"getFileTypeName":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":25,"y":591},"state":-1,"viewType":"Code"}}}},"getFileTypeId":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":670,"height":400},"posInfo":{"x":45,"y":539},"state":-1,"viewType":"Code"}},"editComFile":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":51,"y":100}},"treeState":-1,"children":{"comFileResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":659,"height":293},"posInfo":{"x":63,"y":45},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"metaFileList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":1190,"height":668},"posInfo":{"x":49,"y":198},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"existingComFileEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":360,"height":695},"posInfo":{"x":62,"y":122},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"availableMetaFiles":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":882,"height":366},"posInfo":{"x":50,"y":240},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"comFile":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":688,"height":489},"posInfo":{"x":63,"y":81},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"NEW_COM_FILE_REF":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":1131,"y":30},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"sections":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":633,"height":363},"posInfo":{"x":1134,"y":111},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"refForUseType":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":292,"height":72},"posInfo":{"x":1133,"y":71},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"editComFile":{"type":"apogeeapp.app.FormDataComponent","windowState":{"sizeInfo":{"width":686,"height":958},"posInfo":{"x":367,"y":36},"state":0,"viewType":"Form"}},"initialEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":1005,"height":549},"posInfo":{"x":56,"y":305},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"getSelectionKey":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":67},"posInfo":{"x":1133,"y":154},"state":-1,"viewType":"Code"}},"removedComFileEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":840,"height":540},"posInfo":{"x":1134,"y":362},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"updatedComFileEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":900,"height":583},"posInfo":{"x":1129,"y":322},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"getDeletedComFileEntries":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":1117,"y":673},"state":-1,"viewType":"Code"}},"getCreatedComFileEntries":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":1117,"y":635},"state":-1,"viewType":"Code"}},"getCreatedComFile":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":1120,"y":715},"state":-1,"viewType":"Code"}}}},"selectCid":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":206,"y":629}},"treeState":1,"children":{"selectContext":{"type":"apogeeapp.app.FormDataComponent","windowState":{"sizeInfo":{"width":546,"height":231},"posInfo":{"x":61,"y":91},"state":0,"viewType":"Form"}},"getOtherContexts":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":792,"height":400},"posInfo":{"x":685,"y":350},"state":-1,"viewType":"Code"}},"getAllContexts":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":688,"y":387},"state":-1,"viewType":"Code"}},"getCid":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":687,"y":273},"state":-1,"viewType":"Code"}},"getCidContext":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":686,"y":310},"state":-1,"viewType":"Code"}}}},"commit":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":51,"y":103}},"treeState":-1,"children":{"commitResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":617,"height":218},"posInfo":{"x":588,"y":666},"state":0,"viewType":"Data"},"dataView":"Colorized"},"instructionList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":869,"height":575},"posInfo":{"x":659,"y":27},"state":0,"viewType":"Data"},"dataView":"Colorized"},"submitForm":{"type":"apogeeapp.app.DynamicForm","windowState":{"sizeInfo":{"width":532,"height":219},"posInfo":{"x":19,"y":71},"state":0,"viewType":"Output"}},"commitResult":{"type":"apogeeapp.app.DynamicForm","windowState":{"sizeInfo":{"width":398,"height":51},"posInfo":{"x":49,"y":488},"state":0,"viewType":"Output"}}}},"completed":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":384,"y":69}},"treeState":-1,"children":{"resetForm":{"type":"apogeeapp.app.DynamicForm","windowState":{"sizeInfo":{"width":310,"height":143},"posInfo":{"x":97,"y":45},"state":0,"viewType":"Output"}}}}}},"micemetarDataAccess":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":168,"y":67}},"treeState":-1,"children":{"createRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":560,"height":321},"posInfo":{"x":33,"y":368},"state":-1,"viewType":"Private"}},"recordsToCreateInstructions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":834,"height":391},"posInfo":{"x":30,"y":472},"state":-1,"viewType":"Code"}},"createCommitBody":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":568,"height":400},"posInfo":{"x":629,"y":225},"state":-1,"viewType":"Code"}},"createRequestOptions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":523,"height":254},"posInfo":{"x":822,"y":379},"state":-1,"viewType":"Code"}},"host":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":353,"height":71},"posInfo":{"x":17,"y":6},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"commitUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":433,"height":107},"posInfo":{"x":14,"y":98},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"requestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":450,"height":68},"posInfo":{"x":14,"y":58},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"dataSetInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":882,"height":611},"posInfo":{"x":317,"y":144},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"createUpdateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":1002,"height":655},"posInfo":{"x":37,"y":247},"state":-1,"viewType":"Code"}},"createCreateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":994,"height":643},"posInfo":{"x":39,"y":209},"state":-1,"viewType":"Code"}},"getFieldErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":512,"height":68},"posInfo":{"x":761,"y":616},"state":-1,"viewType":"Code"}},"getRecordErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":81},"posInfo":{"x":762,"y":664},"state":-1,"viewType":"Code"}},"createDeleteInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":678,"height":540},"posInfo":{"x":36,"y":289},"state":-1,"viewType":"Code"}},"getRecordInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":480,"height":400},"posInfo":{"x":818,"y":427},"state":-1,"viewType":"Code"}},"combinedEntriesToInstructionList":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":721,"height":524},"posInfo":{"x":31,"y":516},"state":-1,"viewType":"Private"}},"getCommitPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":569,"height":109},"posInfo":{"x":316,"y":26},"state":-1,"viewType":"Code"}},"getRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":546,"height":89},"posInfo":{"x":315,"y":67},"state":-1,"viewType":"Code"}},"customRequestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":17,"y":142},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"getCustomRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":668,"height":88},"posInfo":{"x":317,"y":104},"state":-1,"viewType":"Code"}}}},"login":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":262,"y":24}},"tabOpen":true,"treeState":-1,"children":{"loginUrl":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":465,"height":43},"posInfo":{"x":25,"y":26},"state":-1,"viewType":"Text"}},"sessionResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":697,"height":330},"posInfo":{"x":17,"y":355},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"savedUserName":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":284,"height":69},"posInfo":{"x":26,"y":71},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"loginControl":{"type":"apogeeapp.app.DynamicForm","windowState":{"sizeInfo":{"width":323,"height":181},"posInfo":{"x":24,"y":113},"state":0,"viewType":"Output"}},"appendQueryParams":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":845,"height":400},"posInfo":{"x":496,"y":43},"state":-1,"viewType":"Code"}},"getSessionKey":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":690,"height":180},"posInfo":{"x":493,"y":100},"state":-1,"viewType":"Code"}},"loginResult":{"type":"apogeeapp.app.DynamicForm","windowState":{"sizeInfo":{"width":446,"height":49},"posInfo":{"x":471,"y":221},"state":0,"viewType":"Output"}}}},"settings":{"type":"apogeeapp.app.FormDataComponent","windowState":{"sizeInfo":{"width":793,"height":410},"posInfo":{"x":28,"y":141},"state":0,"viewType":"Form"}}}},"activeTabMember":"Model.login"}