{"fileType":"apogee app js workspace","version":"0.40","references":[],"workspace":{"fileType":"apogee workspace","version":0.2,"name":"createFileEntryWebApp","data":{"name":"Model","type":"apogee.Folder","children":{"tasks":{"name":"tasks","type":"apogee.Folder","children":{"login":{"name":"login","type":"apogee.Folder","children":{"loginUrl":{"name":"loginUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return settings.data.loginUrl;","supplementalCode":"","description":""}},"sessionResponse":{"name":"sessionResponse","type":"apogee.JsonTable","updateData":{"data":{"responseCode":1,"paramTable":[{"urlPattern":"http://eng.micello.com/mfs","params":[["key","S1sshnIV1Rk9EGz32Acrl8aSYsTKYd"]]},{"urlPattern":"http://mfs.micello.com","params":[["key","nS71TmmSmgvwcXlfrGrin38AMLP48B"]]},{"urlPattern":"http://factory-mfs.micello.com","params":[["key","yfZkszbELEy6lxz1sSeUZscJlC41hL"]]},{"urlPattern":"http://mfs-hub-master.micello.com/","params":[["key","pvLuRozg2EZVrpE8nCpCrQT0FOHcLh"]]},{"urlPattern":"http://mfs-us-1.micello.com","params":[["key","nS71TmmSmgvwcXlfrGrin38AMLP48B"]]},{"urlPattern":"http://eng.micello.com/mfs-node","params":[["key","dnSkxyrgxRNtGMUYbhgV8uvdPW1V4U"]]},{"urlPattern":"http://int.micello.com/mfs","params":[["key","u1VjArfzrFKvBr7X7UVRxFB4eDQmqR"]]}],"sessionKey":"SESS0f6c4c2238a670b8138b63d9fd03cc22=fbv66vf0k2rh0negc1n5e1uc71"},"description":""}},"savedUserName":{"name":"savedUserName","type":"apogee.JsonTable","updateData":{"data":"dave","description":""}},"loginControl":{"name":"loginControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var onSubmit = (formData) => {\n    \n    //on click\n    var bodyJson = {};\n    bodyJson.userName = formData.userName;\n    bodyJson.password = formData.password;\n    \n    var options = {};\n    options.body = JSON.stringify(bodyJson);\n    options.method = \"POST\";\n    \n    var requestPromise = apogee.net.jsonRequest(loginUrl,options);\n    \n    //set the response\n    apogeeMessenger.asynchDataUpdate(\"sessionResponse\",requestPromise);\n    \n    //this clears the password...\n    apogeeMessenger.dataUpdate(\"savedUserName\",formData.userName);\n}\n\nvar layout = [];\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Login\";\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"User Name: \";\nentry.key = \"userName\";\nentry.value = savedUserName;\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Password: \";\nentry.password = true;\nentry.key = \"password\";\nlayout.push(entry);\n\n//suvbmit (no cancel)\nentry = {};\nentry.type = \"submit\";\nentry.onSubmit = onSubmit;\nlayout.push(entry);\n\n//return value\nvar data = {};\ndata.layout = layout;\ndata.onChange = onChange;\nreturn data;\n","supplementalCode":"","description":""}},"sessionKey":{"name":"sessionKey","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(sessionResponse.sessionKey) {\n    return sessionResponse.sessionKey;\n}\nelse if(sessionResponse.responseCode < 0) {\n    throw new Error(\"Error in login: \" + sessionResponse.message);\n}\nelse {\n    return \"LOGIN NEEDED!\";\n}","supplementalCode":"","description":""}},"loginResult":{"name":"loginResult","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var msg;\n\nif(!sessionResponse) {\n    msg = \"Login Needed!\";\n    style = \"color:red\";\n}\nelse if(sessionResponse.responseCode == 1) {\n    msg = \"Login Success\";\n    style = \"color:blue\";\n}\nelse {\n    msg = \"Login Failure: \" + sessionResponse.message;\n    style = \"color:red\";\n}\n\nvar textEntry = {};\ntextEntry.type = \"htmlDisplay\";\ntextEntry.html = \"<span style='\" + style + \"' + >\" + msg + \"</span>\";\n\nreturn [textEntry];\n","supplementalCode":"","description":""}}}},"submit":{"name":"submit","type":"apogee.Folder","children":{"commitResponse":{"name":"commitResponse","type":"apogee.JsonTable","updateData":{"data":{"data":{"-4":15988},"success":true},"description":""}},"instructionList":{"name":"instructionList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var createdFields = getCreatedFieldMap();\nif(!createdFields) return null;\n\nvar record = micemetarDataAccess.createRecord(\"file_entry\",createdFields);\nvar instruction = micemetarDataAccess.createCreateInstruction(record);\n\nreturn [instruction];\n","supplementalCode":"","description":""}},"submitForm":{"name":"submitForm","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"\n//on submit, make the commit and write the result to the commit result table\nvar onSubmit = formData => {\n    \n    var inputCommitMessage = formData.commitMsg.trim();\n    if(inputCommitMessage.length === 0) {\n        alert(\"You must enter a commit message!\");\n        return;\n    }\n    \n    if((!instructionList)||(instructionList.length === 0)) {\n        alert(\"There is no data to commit.\");\n        return;\n    }\n    \n    var sessionKey = getSessionKey();\n    if(!sessionKey) {\n        alert(\"You myst log in.\");\n        return;\n    }\n    \n    commitPromise = micemetarDataAccess.getCommitPromise(instructionList,inputCommitMessage,sessionKey);\n    \n    //set the response\n    apogeeMessenger.asynchDataUpdate(\"commitResponse\",commitPromise);\n//apogeeMessenger.dataUpdate(\"commitResponse\",inputCommitMessage);\n//above is just for testing\n\n};\n\nvar onClear = (formObject) => {\n    apogeeMessenger.dataUpdate(\"commitResponse\",\"\");\n}\n\n//make the layou\nvar layout = [];\n\n//commit msg\nentry = {};\nentry.type = \"textarea\";\nentry.label = \"Commit Msg: \";\nentry.cols = 50;\nentry.rows = 8;\nentry.key = \"commitMsg\";\nlayout.push(entry);\n\n\n//ad submit button to layout\nentry = {};\nentry.type = \"submit\";\nentry.onSubmit = onSubmit;\nentry.onCancel = onClear;\nentry.submitLabel = \"Commit\";\nentry.cancelLabel = \"Clear Response\";\nlayout.push(entry);\n\n//return value\nvar data = {};\ndata.layout = layout;\ndata.onChange = onChange;\nreturn data;","supplementalCode":"","description":""}},"commitResult":{"name":"commitResult","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var msg;\nvar style;\n\nif(!commitResponse) {\n    msg = \"WAITING\";\n    style = \"color:blue\";\n}\nelse if(commitResponse.success === true) {\n    msg = \"Commit Success\";\n    style = \"color:blue\";\n}\nelse {\n    msg = \"Error making commit: \" + commitResponse.msg;\n    style = \"color:red\";\n}\n\nvar textEntry = {};\ntextEntry.type = \"htmlDisplay\";\ntextEntry.html = \"<span style='\" + style + \"' + >\" + msg + \"</span>\";\n\nreturn [textEntry];\n","supplementalCode":"","description":""}}}},"completed":{"name":"completed","type":"apogee.Folder","children":{"resetForm":{"name":"resetForm","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var onReset = function() {\n    var clearTaskList = [\n        [\"selectEditType.selectEditType.data\",null],\n        [\"selectFileEntry.selectedEntryInfo\",null],\n        [\"setContent.selectEntryContent.data\",null],\n        [\"submit.commitResponse\",null]\n    ];\n    apogeeMessenger.compoundDataUpdate(clearTaskList);\n}\n\n//make the layou\nvar layout = [];\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Reset\";\nlayout.push(entry);\n\n//aadd the reset button\nentry = {};\nentry.type = \"submit\";\nentry.onSubmit = onReset;\nentry.submitLabel = \"Reset Form\";\nlayout.push(entry);\n\nreturn layout;","supplementalCode":"","description":""}}}},"getSessionKey":{"name":"getSessionKey","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return login.sessionKey;\n","supplementalCode":"","description":""}},"commonData":{"name":"commonData","type":"apogee.Folder","children":{"fileTypeList":{"name":"fileTypeList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!sessionKey) return null;\n\nvar fileTypeSearch = {};\nfileTypeSearch.search = \"file_type_list\";\n\nreturn micemetarDataAccess.getRequestPromise(fileTypeSearch,sessionKey);\n\n","supplementalCode":"","description":""}},"fileTypeIdToName":{"name":"fileTypeIdToName","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!fileTypeList) return null;\nif(!fileTypeList.success) throw new Error(\"Failure in file type request: \" + fileTypeList.msg);\n\nvar output = {};\n\nvar addToMap = (record) => {output[record.Id] = record.Fields.file_type_name;}\n\nfileTypeList.data.Response.forEach(addToMap);\n\nreturn output;","supplementalCode":"","description":""}},"fileTypeNameToId":{"name":"fileTypeNameToId","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!fileTypeList) return null;\nif(!fileTypeList.success) throw new Error(\"Failure in file type request: \" + fileTypeList.msg);\n\nvar output = {};\n\nvar addToMap = (record) => {output[record.Fields.file_type_name] = record.Id;}\n\nfileTypeList.data.Response.forEach(addToMap);\n\nreturn output;","supplementalCode":"","description":""}},"availableFileEntries":{"name":"availableFileEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!fileEntryList) return null;\nif(!fileEntryList.success) throw new Error(\"Failure in file entry request: \" + fileEntryList.msg);\n\n\nreturn fileEntryList.data.Response;","supplementalCode":"","description":""}},"context":{"name":"context","type":"apogee.JsonTable","updateData":{"data":"public","description":""}},"sessionKey":{"name":"sessionKey","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return getSessionKey();","supplementalCode":"","description":""}},"getFileTypeId":{"name":"getFileTypeId","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeName"],"functionBody":"return commonData.fileTypeNameToId[fileTypeName];","supplementalCode":"","description":""}},"getFileTypeName":{"name":"getFileTypeName","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeId"],"functionBody":"return commonData.fileTypeIdToName[fileTypeId];","supplementalCode":"","description":""}},"fileEntryList":{"name":"fileEntryList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!sessionKey) return null;\n\n var searchDef = {\n \t\"searchType\": \"table\",\n \t\"search\": {\n \t\t\"record\": \"file_entry\"\n \t}\n};\n\nreturn micemetarDataAccess.getCustomRequestPromise(searchDef,sessionKey);","supplementalCode":"","description":""}},"getMatchingFileEntryByName":{"name":"getMatchingFileEntryByName","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeId","section","entryName"],"functionBody":"\nvar isMatch = record => (record.Fields.file_type_id == fileTypeId) &&\n    (record.Fields.entry_section == section) &&\n    (record.Fields.entry_name == entryName);\n\nreturn availableFileEntries.find(isMatch);","supplementalCode":"","description":""}},"getCompiledEntryData":{"name":"getCompiledEntryData","type":"apogee.FunctionTable","updateData":{"argList":["propertyRulesEntry"],"functionBody":"var ancestry = getAncestryEntryData(propertyRulesEntry,[]);\n\n//console.log( ancestry.map(record => record.Fields.entry_name));\nvar compileEntries = (compiledEntry,entry) => {\n    if(entry.extends) {\n        return processExtendsEntry(entry,compiledEntry);\n    }\n    else if(entry.modifies) {\n        return processModifiesEntry(entry,compiledEntry);\n    }\n    else if(entry.deletes) {\n        //this shouldn't happen\n        throw new Error(\"Not handling deletes here!\");\n    }\n    else {\n        //this is the base entry\n        return entry;\n    }\n}\nreturn ancestry.reduce(compileEntries);","supplementalCode":"function getAncestryEntryData(propertyRulesEntry,initialAncestry) {\n    var entryData = propertyRulesEntry.Fields.entry_data;\n    var parentName;\n    if(entryData.extends) parentName = entryData.extends;\n    else if(entryData.modifies) parentName = entryData.modifies;\n    \n    var fileTypeId = propertyRulesEntry.Fields.file_type_id;\n    \n    if(parentName) {\n        var parentEntry = commonData.getMatchingFileEntryByName(\n            propertyRulesEntry.Fields.file_type_id,\n            propertyRulesEntry.Fields.entry_section,\n            parentName);\n            \n        ancestry = getAncestryEntryData(parentEntry,initialAncestry);\n    }\n    else {\n        ancestry = initialAncestry;\n    }\n    \n    ancestry.push(entryData);\n    \n    return ancestry;\n}\n\n//------------------------------------------------------------\n\n\n/** This executes an extend entry */\nfunction processExtendsEntry(extendsEntry,extendedEntry) {\n    \n    //make the new entry\n    var newEntry = apogee.util.jsonCopy(extendedEntry);\n    //set name\n    newEntry.name = extendsEntry.name;\n    //set parent\n    if(newEntry.parent) {\n        newEntry.parent.push(extendedEntry.name)\n    }\n    else {\n        newEntry.parent = [extendedEntry.name];\n    }\n    \n    //do any modification\n    doEntryModify(extendsEntry,newEntry);\n    \n    return newEntry;\n}\n\n/** This executes a modify entry. */\nfunction processModifiesEntry(modifyEntry,originalEntry) {\n\n    var modifiedEntry = apogee.util.jsonCopy(originalEntry);\n    \n    //do any modification\n    doEntryModify(modifyEntry,modifiedEntry);\n    \n    return modifiedEntry;\n}\n\n/** This implements a modify on the given entry - called from both modify and extend. */\nfunction doEntryModify(modifyingEntry,entryToModify) {\n    for(var field in modifyingEntry) {\n        //don't update these\n        if((field == \"name\")||(field == \"extends\")||(field == \"modifies\")) continue;\n        \n        if(field == \"properties\") {\n            //update the properties\n            modifyPropertyList(modifyingEntry.properties,entryToModify.properties);\n        }\n        else {\n            //update other fields\n            entryToModify[field] = modifyingInstructions[field];\n        }\n    }\n}\n\n\n/** This method takes a modifying list of properties and acts them on a list of base properties.*/\nfunction modifyPropertyList(modifyingList,listToModify) {\n    //act each modifying property\n    modifyingList.forEach(modifyInstruction => modifyPropertyFromList(modifyInstruction,listToModify))\n}\n\n/** This acts a single modify property on a list of properties. */\nfunction modifyPropertyFromList(modifyInstruction,propertiesToModify) {\n    \n    var matchKey = property => (modifyInstruction.key == property.key);\n    \n    var indexToModify = propertiesToModify.findIndex(matchKey);\n    \n    //create\n    if(modifyInstruction.action === undefined) {\n        //create\n        if(indexToModify >= 0) {\n            throw new Error(\"Property found when it shouldn't be: \" + modifyInstruction.key);\n        }\n        \n        propertiesToModify.push(modifyInstruction);\n        return;\n    }\n    else {\n        //modify,replace,delete\n        if(indexToModify < 0) {\n            throw new Error(\"Property not found: \" + modifyInstruction.key);\n        }\n        \n    \n        switch(modifyInstruction.action) {\n            case \"modifies\":\n                modifyProperty(modifyInstruction,propertiesToModify[indexToModify]);\n                break;\n                \n            case \"replaces\":\n                propertiesToModify[indexToModify] = modifyInstruction;\n                break;\n                \n            case \"delete\":\n                propertiesToModify.splice(indexToModify,1);\n                break;\n                \n            default:\n                throw new Error(\"UNknown instruction: \" + modifyInstruction.action);\n        }\n    }\n    \n}\n\n/** This implements modify on a single property. */\nfunction modifyProperty(instruction,property) {\n    for(var field in instruction) {\n        //don't change these\n        if((field == \"key\")||(field == \"action\")) continue;\n        \n        //special cases\n        if((instruction.type == \"enum\")&&(field == \"values\")) {\n            modifyEnum(instruction[field],property[field]);\n        }\n        else if(instruction.type == \"conditional\") {\n            if(field == \"cases\") {\n                throw new Error(\"Modifying conditional cases not supported!\");\n            }\n            else if(field == \"default\") {\n                throw new Error(\"Modifying conditional default not supported!\");\n            }\n        }\n        else if((instruction.type == \"multikey\")&&(field == \"options\")) {\n            modifyPropertyList(instruction[field],property[field]);\n        }\n        else {\n            //standard case\n            property[field] = instruction[field];\n        }\n    } \n}\n\n/** This does the modify instruction for an enm type property. */\nfunction modifyEnum(modifyingValueList,valueListToModify) {\n    //check if it is in the list\n    \n    //only \"add\" supported for now in enum\n    var addToBase = (valueEntry) => {\n        var existingEntry = valueListToModify.findIndex(existingEntry => existingEntry.value == valueEntry.value);\n        if(existingEntry >= 0) {\n            //replace \n            throw new Error(\"Replace not supported in modify enum: \" + JSON.stringify(valueEntry));\n        }\n        else {\n            valueListToModify.push(valueEntry);\n        }\n    }\n    modifyingValueList.forEach(addToBase);\n}","description":"This is a complicated function that I should probably define elsewhere.\nIt compiles a property rules entry with its ancestors."}}}},"selectFileEntry":{"name":"selectFileEntry","type":"apogee.Folder","children":{"selectEntriesControl":{"name":"selectEntriesControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((!fileEntryInfo)||(!fileEntryInfo.useBaseEntry)) {\n    return null;\n}\n\nvar applicableFileEntries = fileEntryInfo.applicableFileEntries;\n\nvar data = {};\ndata.fileEntries = applicableFileEntries;\ndata.selectedEntryInfo = selectedEntryInfo;\n\nreturn data;","supplementalCode":"","description":""}},"compiledEntry":{"name":"compiledEntry","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!selectedFileEntry) return null;\n\nreturn commonData.getCompiledEntryData(selectedFileEntry);","supplementalCode":"","description":""}},"fileEntryInfoGenerators":{"name":"fileEntryInfoGenerators","type":"apogee.Folder","children":{"typeEntry":{"name":"typeEntry","type":"apogee.FunctionTable","updateData":{"argList":[""],"functionBody":"var hasType = propRulesEntry => propRulesEntry.Fields.entry_data.properties.some( property => (property.type == \"type\") );\n\nvar filters = [];\nfilters.push(propertyRulesFilter);\nfilters.push(hasType);\n\nvar setupInfo = {};\nsetupInfo.useBaseEntry = true;\nsetupInfo.filters = filters;\n\nreturn setupInfo;","supplementalCode":"","description":""}},"addressKey":{"name":"addressKey","type":"apogee.FunctionTable","updateData":{"argList":[""],"functionBody":"//base entry not used - should not be called\nvar setupInfo = {};\nsetupInfo.useBaseEntry = false;\nreturn setupInfo;","supplementalCode":"","description":""}},"childPropKey":{"name":"childPropKey","type":"apogee.FunctionTable","updateData":{"argList":[""],"functionBody":"//all property rules entries ok\nvar setupInfo = {};\nsetupInfo.useBaseEntry = true;\nsetupInfo.filters = [propertyRulesFilter];\n\nreturn setupInfo;","supplementalCode":"const KEY_TYPES = [\"text\",\"boolean\",\"enum\",\"fixed\"];\n\n//this shows the given panel and hides the others\nfunction showPanel(selectedKeyType,form) {\n    \n    KEY_TYPES.forEach( keyType => {\n        var panelState = (keyType == selectedKeyType) ? \n            apogeeapp.ui.ConfigurableElement.STATE_NORMAL : \n            apogeeapp.ui.ConfigurableElement.STATE_INACTIVE;\n        \n        var panelKey = getPanelKey(keyType);\n        var panel = form.getEntry(panelKey);\n        panel.setState(panelState);\n        \n    });\n    \n}\n\nfunction getPanelKey(keyType) {\n    return keyType + \"Panel\";\n}","description":""}},"childPropValue":{"name":"childPropValue","type":"apogee.FunctionTable","updateData":{"argList":[""],"functionBody":"var hasChildEnumProp = propRulesEntry => propRulesEntry.Fields.entry_data.properties.some( property => (property.type == \"enum\") );\n\nvar filters = [];\nfilters.push(propertyRulesFilter);\nfilters.push(hasChildEnumProp);\n\nvar setupInfo = {};\nsetupInfo.useBaseEntry = true;\nsetupInfo.filters = filters;\n\nreturn setupInfo;","supplementalCode":"function getKeyOptions(baseEntry) {\n    var properties = baseEntry.Fields.entry_data.properties;\n    \n    var enumProperties = properties.filter(prop => (prop.type == \"enum\") );\n    \n    return enumProperties.map(prop => prop.key);\n}","description":""}},"themeEntry":{"name":"themeEntry","type":"apogee.FunctionTable","updateData":{"argList":[""],"functionBody":"var setupInfo = {};\nsetupInfo.useBaseEntry = false;\nreturn setupInfo;","supplementalCode":"const SECTION_NAMES = [\"style\",\"icon\",\"labelStyle\",\"marker\"];\n\n//this shows the given panel and hides the others\nfunction showPanel(selectedSectionName,form) {\n    \n    SECTION_NAMES.forEach( sectionName => {\n        var panelState = (sectionName == selectedSectionName) ? \n            apogeeapp.ui.ConfigurableElement.STATE_NORMAL : \n            apogeeapp.ui.ConfigurableElement.STATE_INACTIVE;\n        \n        var panelKey = getPanelKey(sectionName);\n        var panel = form.getEntry(panelKey);\n        panel.setState(panelState);\n        \n    });\n    \n}\n\nfunction getPanelKey(sectionName) {\n    return sectionName + \"Panel\";\n}","description":""}},"inputColorEntry":{"name":"inputColorEntry","type":"apogee.FunctionTable","updateData":{"argList":[""],"functionBody":"//geometry property rules\nvar filters = [];\nfilters.push(propertyRulesFilter);\nfilters.push(getSectionFilter(\"geometry\"));\n\nvar setupInfo = {};\nsetupInfo.useBaseEntry = true;\nsetupInfo.filters = filters;\n\nreturn setupInfo;","supplementalCode":"","description":""}},"stringsEntry":{"name":"stringsEntry","type":"apogee.FunctionTable","updateData":{"argList":[""],"functionBody":"//base entry not used - should not be called\nvar setupInfo = {};\nsetupInfo.useBaseEntry = false;\nreturn setupInfo;","supplementalCode":"","description":""}},"propertyRulesFilter":{"name":"propertyRulesFilter","type":"apogee.FunctionTable","updateData":{"argList":["fileEntry"],"functionBody":"return (fileEntry.Fields.file_type_id == PROPERTY_RULES_TYPE_ID);","supplementalCode":"","description":""}},"PROPERTY_RULES_TYPE_ID":{"name":"PROPERTY_RULES_TYPE_ID","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return commonData.getFileTypeId(\"propertyRules\");","supplementalCode":"","description":""}},"getSectionFilter":{"name":"getSectionFilter","type":"apogee.FunctionTable","updateData":{"argList":["section"],"functionBody":"return propertyRules => (propertyRules.Fields.entry_section == section);","supplementalCode":"","description":""}},"geomThemeRulesEntry":{"name":"geomThemeRulesEntry","type":"apogee.FunctionTable","updateData":{"argList":[""],"functionBody":"//geometry property rules\nvar filters = [];\nfilters.push(propertyRulesFilter);\nfilters.push(getSectionFilter(\"geometry\"));\n\nvar setupInfo = {};\nsetupInfo.useBaseEntry = true;\nsetupInfo.filters = filters;\n\nreturn setupInfo;","supplementalCode":"const SECTION_NAMES = [\"style\",\"label\"];\n\n//this shows the given panel and hides the others\nfunction showPanel(selectedSectionName,form) {\n    \n    SECTION_NAMES.forEach( sectionName => {\n        var panelState = (sectionName == selectedSectionName) ? \n            apogeeapp.ui.ConfigurableElement.STATE_NORMAL : \n            apogeeapp.ui.ConfigurableElement.STATE_INACTIVE;\n        \n        var panelKey = getPanelKey(sectionName);\n        var panel = form.getEntry(panelKey);\n        panel.setState(panelState);\n        \n    });\n    \n}\n\nfunction getPanelKey(sectionName) {\n    return sectionName + \"Panel\";\n}","description":""}},"entityThemeRulesEntry":{"name":"entityThemeRulesEntry","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"//geometry property rules\nvar filters = [];\nfilters.push(propertyRulesFilter);\nfilters.push(getSectionFilter(\"entity\"));\n\nvar setupInfo = {};\nsetupInfo.useBaseEntry = true;\nsetupInfo.filters = filters;\n\nreturn setupInfo;","supplementalCode":"","description":""}},"addressThemeRulesEntry":{"name":"addressThemeRulesEntry","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"//base entry not used - should not be called\nvar setupInfo = {};\nsetupInfo.useBaseEntry = false;\nreturn setupInfo;","supplementalCode":"","description":""}}}},"selectedEntryInfo":{"name":"selectedEntryInfo","type":"apogee.JsonTable","updateData":{"data":{"fileEntry":{"edit_perm":15,"Fields":{"entry_name":"entity (Standard)","option_name":"Standard","entry_data":{"name":"entity","properties":[{"has_lang":true,"required":true,"type":"text","key":"name"},{"has_lang":true,"type":"text","key":"short name"},{"named_entry":"entity1","type":"named_entry","key":"entity1"},{"named_entry":"post address","type":"named_entry","key":"post address"},{"named_entry":"entity2","type":"named_entry","key":"entity2"},{"type":"text","key":"location"},{"is_array":true,"has_lang":true,"type":"text","key":"category","meta":{"detail":"true"}},{"is_array":true,"has_lang":true,"type":"text","key":"tags","meta":{"detail":"true"}},{"named_entry":"style keys","type":"named_entry","key":"style keys"}]},"entry_context":"public","entry_key":"entity","file_type_id":21,"entry_section":"entity"},"Type":"file_entry","read_perm":2,"Id":1381,"edit_ok":true},"filterText":""},"description":""}},"selectedFileEntry":{"name":"selectedFileEntry","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((!selectedEntryInfo)||(!selectedEntryInfo.fileEntry)) return null;\nelse return selectedEntryInfo.fileEntry;","supplementalCode":"","description":""}},"fileEntryInfo":{"name":"fileEntryInfo","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!commonData.availableFileEntries) return null;\n\nvar editType = getEditType();\nif(!editType) return null;\n\nvar result = {};\n\nvar filterInfo = fileEntryInfoGenerators[editType]();\nresult.useBaseEntry = filterInfo.useBaseEntry;\n\n//make sure the base file entry is applicable\nif(filterInfo.useBaseEntry) {\n    //get file entries\n    var filteredFileEntries = commonData.availableFileEntries;\n    if(!filteredFileEntries) return [];\n    \n    //apply all filters for this edit type\n    var applyFilter = filterFunction => {\n        filteredFileEntries = filteredFileEntries.filter(filterFunction);\n    }\n    \n    filterInfo.filters.forEach(applyFilter);\n}\nresult.applicableFileEntries = filteredFileEntries;\n\nreturn result;","supplementalCode":"","description":""}}}},"selectEditType":{"name":"selectEditType","type":"apogee.Folder","children":{"selectEditType":{"name":"selectEditType","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var layout = [];\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Select Edit Task\";\nlayout.push(entry);\n\n//radio group\nentry = {};\nentry.type = \"radioButtonGroup\";\nentry.groupName = \"rg2\";\nentry.entries = [\n    [\"Create New Type\",\"typeEntry\"],\n    [\"Create New Address Key\",\"addressKey\"],\n    [\"Add Child Property Key\",\"childPropKey\"],\n    [\"Add Child Property Value\",\"childPropValue\"],\n    [\"Create Geometry Theme Rules Entry\",\"geomThemeRulesEntry\"],\n    [\"Create Entity Theme Rules Entry\",\"entityThemeRulesEntry\"],\n    [\"Create Address Label Theme Rules Entry\",\"addressThemeRulesEntry\"],\n    [\"Create Theme Entry\",\"themeEntry\"],\n    [\"Create Input Color\",\"inputColorEntry\"],\n    [\"Create Strings Entry\",\"stringsEntry\"]\n];\nentry.key = \"entryType\";\nentry.onChange = onChange;\nlayout.push(entry);\n\nreturn {layout:layout};","supplementalCode":"","description":""}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":{"entryType":"entityThemeRulesEntry"},"description":""}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"if(!formValue.entryType) {\n    return \"A selection must be made\";\n}\nelse {\n    return true;\n}","supplementalCode":"","description":""}}},"childrenNotWriteable":true}}},"getEditType":{"name":"getEditType","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"if((selectEditType.selectEditType.data)&&(selectEditType.selectEditType.data.entryType)) {\n    return selectEditType.selectEditType.data.entryType;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"getBaseEntry":{"name":"getBaseEntry","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return selectFileEntry.selectedFileEntry;","supplementalCode":"","description":""}},"setContent":{"name":"setContent","type":"apogee.Folder","children":{"layoutGenerators":{"name":"layoutGenerators","type":"apogee.Folder","children":{"typeEntry":{"name":"typeEntry","type":"apogee.FunctionTable","updateData":{"argList":["baseEntry","compiledBaseEntry"],"functionBody":"var returnValue = {};\nvar layout = [];\nvar entry;\n\n//title\nif(!baseEntry) {\n    returnValue.layoutValid = false;\n    returnValue.msg = \"Base File Entry Select Required\";\n    return returnValue;\n}\n\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Create New Type\";\nlayout.push(entry);\n\nentry = {};\nentry.type = \"heading\";\nentry.level = 3;\nentry.text = \"Extending \" + baseEntry.Fields.entry_name;\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Type Name (featureType): \";\nentry.key = \"typeName\";\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Legacy Key: \";\nentry.key = \"legacyKey\";\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Legacy Value: \";\nentry.key = \"legacyValue\";\nlayout.push(entry);\n\nreturnValue.layoutValid = true;\nreturnValue.layout = layout;\nreturn returnValue;","supplementalCode":"","description":""}},"addressKey":{"name":"addressKey","type":"apogee.FunctionTable","updateData":{"argList":["baseEntry","compiledBaseEntry"],"functionBody":"var returnValue = {};\nvar layout = [];\nvar entry;\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Create Address Key\";\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Address Key: \";\nentry.key = \"addressKey\";\nlayout.push(entry);\n\nreturnValue.layoutValid = true;\nreturnValue.layout = layout;\nreturn returnValue;","supplementalCode":"","description":""}},"childPropKey":{"name":"childPropKey","type":"apogee.FunctionTable","updateData":{"argList":["baseEntry","compiledBaseEntry"],"functionBody":"var returnValue = {};\nvar layout = [];\nvar entry;\n\n//get the key choices\nif(!baseEntry) {\n    returnValue.layoutValid = false;\n    returnValue.msg = \"Base File Entry Select Required\";\n    return returnValue;\n}\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Create New Child Key\";\nlayout.push(entry);\n\n//child key\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Child Key: \";\nentry.key = \"childKey\";\nlayout.push(entry);\n\n//section\nvar DEFAULT_KEY = \"text\";\nentry = {};\nentry.type = \"dropdown\";\nentry.label = \"Key Type: \";\nentry.key = \"keyType\";\nentry.entries = KEY_TYPES;\nentry.value = DEFAULT_KEY;\n\nlayout.push(entry);\n\nvar activePanelKey = getPanelKey(entry.value);\n\n//horizontal rule\nentry = {};\nentry.type = \"htmlDisplay\";\nentry.html = \"<hr>\";\nlayout.push(entry);\n\nvar childFormData;\nvar panelKey;\n\n\n//==================\n//text type content panel\n//==================\nchildFormData = [];\npanelKey = getPanelKey(\"text\");\n\nentry = {};\nentry.type = \"checkbox\";\nentry.label = \"Has Lang: \";\nentry.key = \"hasLang\";\nchildFormData.push(entry);\n\nentry = {};\nentry.type = \"checkbox\";\nentry.label = \"Is Array: \";\nentry.key = \"isArray\";\nchildFormData.push(entry);\n\nentry = {};\nentry.type = \"panel\";\nentry.formData = childFormData;\nentry.key = panelKey;\nentry.selector = {\n    parentKey: \"keyType\",\n    parentValue: \"text\"\n}\nentry.state = (entry.key == activePanelKey) ? apogeeapp.ui.ConfigurableElement.STATE_NORMAL : apogeeapp.ui.ConfigurableElement.STATE_INACTIVE;\nlayout.push(entry);\n\n//==================\n//boolean type content panel\n//==================\n\nchildFormData = [];\npanelKey = getPanelKey(\"boolean\");\n\nentry = {};\nentry.type = \"panel\";\nentry.formData = childFormData;\nentry.key = panelKey;\nentry.selector = {\n    parentKey: \"keyType\",\n    parentValue: \"boolean\"\n}\nentry.state = (entry.key == activePanelKey) ? apogeeapp.ui.ConfigurableElement.STATE_NORMAL : apogeeapp.ui.ConfigurableElement.STATE_INACTIVE;\nlayout.push(entry);\n\n//==================\n//enum type content panel\n//==================\nchildFormData = [];\npanelKey = getPanelKey(\"enum\");\n\n//Font\nentry = {};\nentry.type = \"textarea\";\nentry.label = \"Value List: (Comma and/or new line delimited)\";\nentry.rows = 12;\nentry.cols = 60;\nentry.key = \"values\";\nchildFormData.push(entry);\n\nentry = {};\nentry.type = \"panel\";\nentry.formData = childFormData;\nentry.key = panelKey;\nentry.selector = {\n    parentKey: \"keyType\",\n    parentValue: \"enum\"\n}\nentry.state = (entry.key == activePanelKey) ? apogeeapp.ui.ConfigurableElement.STATE_NORMAL : apogeeapp.ui.ConfigurableElement.STATE_INACTIVE;\nlayout.push(entry);\n\n//==================\n//fixed type content panel\n//==================\nchildFormData = [];\npanelKey = getPanelKey(\"fixed\");\n\n//Marker URL\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Fixed Value: \";\nentry.key = \"fixedValue\";\nchildFormData.push(entry);\n\nentry = {};\nentry.type = \"panel\";\nentry.formData = childFormData;\nentry.key = panelKey;\nentry.selector = {\n    parentKey: \"keyType\",\n    parentValue: \"fixed\"\n}\nentry.state = (entry.key == activePanelKey) ? apogeeapp.ui.ConfigurableElement.STATE_NORMAL : apogeeapp.ui.ConfigurableElement.STATE_INACTIVE;\nlayout.push(entry);\n\n//=================\n// content panels finished\n//=================\n\n//horizontal rule\nentry = {};\nentry.type = \"htmlDisplay\";\nentry.html = \"<hr>\";\nlayout.push(entry);\n\nreturnValue.layoutValid = true;\nreturnValue.layout = layout;\nreturn returnValue;","supplementalCode":"const KEY_TYPES = [\"text\",\"boolean\",\"enum\",\"fixed\"];\n\n//this shows the given panel and hides the others\nfunction showPanel(selectedKeyType,form) {\n    \n    KEY_TYPES.forEach( keyType => {\n        var panelState = (keyType == selectedKeyType) ? \n            apogeeapp.ui.ConfigurableElement.STATE_NORMAL : \n            apogeeapp.ui.ConfigurableElement.STATE_INACTIVE;\n        \n        var panelKey = getPanelKey(keyType);\n        var panel = form.getEntry(panelKey);\n        panel.setState(panelState);\n        \n    });\n    \n}\n\nfunction getPanelKey(keyType) {\n    return keyType + \"Panel\";\n}","description":""}},"childPropValue":{"name":"childPropValue","type":"apogee.FunctionTable","updateData":{"argList":["baseEntry","compiledBaseEntry"],"functionBody":"var returnValue = {};\nvar layout = [];\nvar entry;\n\n//get the key choices\nif(!baseEntry) {\n    returnValue.layoutValid = false;\n    returnValue.msg = \"Base File Entry Select Required\";\n    return returnValue;\n}\nvar keyOptions = getKeyOptions(baseEntry);\nif(keyOptions.length === 0) {\n    alert(\"implement response for no child keys\");\n    return [];\n}\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Create New Child Property\";\nlayout.push(entry);\n\n//key select\nentry = {};\nentry.type = \"dropdown\";\nentry.label = \"Key: \";\nentry.key = \"childKey\";\nentry.entries = keyOptions;\nlayout.push(entry);\n\nentry = {};\nentry.type = \"heading\";\nentry.level = 5;\nentry.text = \"to do - add list of current value options for this key\";\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"New Value Option: \";\nentry.key = \"childValue\";\nlayout.push(entry);\n\nreturnValue.layoutValid = true;\nreturnValue.layout = layout;\nreturn returnValue;","supplementalCode":"function getKeyOptions(baseEntry) {\n    var properties = baseEntry.Fields.entry_data.properties;\n    \n    var enumProperties = properties.filter(prop => (prop.type == \"enum\") );\n    \n    return enumProperties.map(prop => prop.key);\n}","description":""}},"themeRulesEntry":{"name":"themeRulesEntry","type":"apogee.FunctionTable","updateData":{"argList":["baseEntry","compiledBaseEntry"],"functionBody":"var returnValue = {};\nvar entry;\n\n//base entry\nif(!baseEntry) {\n    returnValue.layoutValid = false;\n    returnValue.msg = \"Base File Entry Select Required\";\n    return returnValue;\n}\n\n//create layout\nvar layout = [];\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Create Theme Rules Entry - \" + baseEntry.Fields.entry_name;\nlayout.push(entry);\n\n//create the form\nvar layout;\nvar entry;\n\n//horizontal rule\nentry = {};\nentry.type = \"htmlDisplay\";\nentry.html = \"<hr>\";\nlayout.push(entry);\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 3;\nentry.text = \"Property Selector\";\nlayout.push(entry);\n\n//get the them path elements\nvar includeTextProps = true;\nvar pathLayoutEntries = getPathLayoutEntries(compiledBaseEntry,includeTextProps);\nlayout = layout.concat(pathLayoutEntries);\n\n//horizontal rule\nentry = {};\nentry.type = \"htmlDisplay\";\nentry.html = \"<hr>\";\nlayout.push(entry);\n\n//entry type\nvar entryTypeOnChange = (value,form) => {\n    //change the active panel\n    showPanel(value,form);\n}\n\n//key select\nvar DEFAULT_ENTRY_TYPE = \"style\";\nvar entryType = ((savedFormData)&&(savedFormData.entryType)) ? savedFormData.entryType : DEFAULT_ENTRY_TYPE;\nentry = {};\nentry.type = \"dropdown\";\nentry.label = \"Entry Type: \";\nentry.key = \"entryType\";\nentry.entries = ENTRY_TYPE_NAMES;\nentry.onChange = entryTypeOnChange;\nentry.value = entryType;\nlayout.push(entry);\n\nvar activePanelKey = getPanelKey(entry.value);\n\n//horizontal rule\nentry = {};\nentry.type = \"htmlDisplay\";\nentry.html = \"<hr>\";\nlayout.push(entry);\n\nvar childFormData;\nvar panelKey;\n\n//==================\n//style content panel\n//==================\nchildFormData = [];\npanelKey = getPanelKey(\"style\");\n\n//style name\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Style Name: \";\nentry.key = \"n\";\nchildFormData.push(entry);\n\nentry = {};\nentry.type = \"panel\";\nentry.formData = childFormData;\nentry.key = panelKey;\nentry.state = (entry.key == activePanelKey) ? apogeeapp.ui.ConfigurableElement.STATE_NORMAL : apogeeapp.ui.ConfigurableElement.STATE_INACTIVE;\nif((savedFormData)&&(savedFormData[panelKey])) entry.value = savedFormData[panelKey];\nentry.onChange = onChange;\nlayout.push(entry);\n\n//==================\n//icon content panel\n//==================\nchildFormData = [];\npanelKey = getPanelKey(\"label\");\n\n//label type\nentry = {};\nentry.type = \"dropdown\";\nentry.label = \"Label Type: \";\nentry.entries = [[\"None\",0],[\"Text\",1],[\"Icon\",2]];\nentry.key = \"lt\";\nchildFormData.push(entry);\n\n//reference\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Reference: \";\nentry.key = \"r\";\nchildFormData.push(entry);\n\n//translate\nentry = {};\nentry.type = \"checkbox\";\nentry.label = \"Translate: \";\nentry.key = \"trans\";\nchildFormData.push(entry);\n\nentry = {};\nentry.type = \"panel\";\nentry.formData = childFormData;\nentry.key = panelKey;\nentry.state = (entry.key == activePanelKey) ? apogeeapp.ui.ConfigurableElement.STATE_NORMAL : apogeeapp.ui.ConfigurableElement.STATE_INACTIVE;\nif((savedFormData)&&(savedFormData[panelKey])) entry.value = savedFormData[panelKey];\nentry.onChange = onChange;\nlayout.push(entry);\n\n\n//=================\n// content panels finished\n//=================\n\n\n//horizontal rule\nentry = {};\nentry.type = \"htmlDisplay\";\nentry.html = \"<hr>\";\nlayout.push(entry);\n\nreturnValue.layoutValid = true;\nreturnValue.layout = layout;\nreturn returnValue;","supplementalCode":"const ENTRY_TYPE_NAMES = [\"style\",\"label\"];\n\n//this shows the given panel and hides the others\nfunction showPanel(selectedEntryTypeName,form) {\n    \n    ENTRY_TYPE_NAMES.forEach( entryTypeName => {\n        var panelState = (entryTypeName == selectedEntryTypeName) ? \n            apogeeapp.ui.ConfigurableElement.STATE_NORMAL : \n            apogeeapp.ui.ConfigurableElement.STATE_INACTIVE;\n        \n        var panelKey = getPanelKey(entryTypeName);\n        var panel = form.getEntry(panelKey);\n        panel.setState(panelState);\n        \n    });\n    \n}\n\nfunction getPanelKey(entryTypeName) {\n    return entryTypeName + \"Panel\";\n}","description":""}},"themeEntry":{"name":"themeEntry","type":"apogee.FunctionTable","updateData":{"argList":["baseEntry","compiledBaseEntry"],"functionBody":"var returnValue = {};\nvar layout = [];\nvar entry;\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Create Theme Entry\";\nlayout.push(entry);\n\n//section\nvar DEFAULT_ENTRY_TYPE = \"style\";\nentry = {};\nentry.type = \"dropdown\";\nentry.label = \"Entry Type: \";\nentry.key = \"entryType\";\nentry.entries = ENTRY_TYPE_NAMES;\nentry.value = DEFAULT_ENTRY_TYPE;\nlayout.push(entry);\n\nvar activePanelKey = getPanelKey(entry.value);\n\n//style name\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Name: \";\nentry.key = \"name\";\nlayout.push(entry);\n\n//horizontal rule\nentry = {};\nentry.type = \"htmlDisplay\";\nentry.html = \"<hr>\";\nlayout.push(entry);\n\nvar childFormData;\nvar panelKey;\n\n//==================\n//style content panel\n//==================\nchildFormData = [];\npanelKey = getPanelKey(\"style\");\n\n//main color\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Main Color: \";\nentry.key = \"m\";\nchildFormData.push(entry);\n\n//outline color\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Outline Color: \";\nentry.key = \"o\";\nchildFormData.push(entry);\n\n//outline width\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Outline Width: \";\nentry.key = \"w\";\nchildFormData.push(entry);\n\n//label style name\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Label Style: \";\nentry.key = \"l\";\nchildFormData.push(entry);\n\n//Z Min\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Z Min: \";\nentry.key = \"zmin\";\nchildFormData.push(entry);\n\nentry = {};\nentry.type = \"panel\";\nentry.formData = childFormData;\nentry.key = panelKey;\nentry.selector = {\n    parentKey: \"entryType\",\n    parentValue: \"style\"\n}\nentry.state = (entry.key == activePanelKey) ? apogeeapp.ui.ConfigurableElement.STATE_NORMAL : apogeeapp.ui.ConfigurableElement.STATE_INACTIVE;\nlayout.push(entry);\n\n//==================\n//icon content panel\n//==================\nchildFormData = [];\npanelKey = getPanelKey(\"icon\");\n\n//label type\nentry = {};\nentry.type = \"dropdown\";\nentry.label = \"Label Type: \";\nentry.entries = [[\"None\",0],[\"Text\",1],[\"Icon\",2],[\"Image\",3]];\nentry.key = \"lt\";\nchildFormData.push(entry);\n\n//display name reference\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Display Name Reference: \";\nentry.key = \"ar\";\nchildFormData.push(entry);\n\n//icon url\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Icon URL: \";\nentry.key = \"url\";\nchildFormData.push(entry);\n\nentry = {};\nentry.type = \"panel\";\nentry.formData = childFormData;\nentry.key = panelKey;\nentry.selector = {\n    parentKey: \"entryType\",\n    parentValue: \"icon\"\n}\nentry.state = (entry.key == activePanelKey) ? apogeeapp.ui.ConfigurableElement.STATE_NORMAL : apogeeapp.ui.ConfigurableElement.STATE_INACTIVE;\nlayout.push(entry);\n\n\n//==================\n//label style content panel\n//==================\nchildFormData = [];\npanelKey = getPanelKey(\"labelStyle\");\n\n//Font\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Font: \";\nentry.key = \"font\";\nchildFormData.push(entry);\n\n//fill color\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Fill Color: \";\nentry.key = \"fill\";\nchildFormData.push(entry);\n\n//outline color\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Outline Color: \";\nentry.key = \"outline\";\nchildFormData.push(entry);\n\n//outline width\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Outline Width: \";\nentry.key = \"outlineWidth\";\nchildFormData.push(entry);\n\n//min font size\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Min Font Size: \";\nentry.key = \"minFont\";\nchildFormData.push(entry);\n\n//max font size\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Max Font Size: \";\nentry.key = \"maxFont\";\nchildFormData.push(entry);\n\nentry = {};\nentry.type = \"checkbox\";\nentry.label = \"Caps: \";\nentry.key = \"caps\";\nchildFormData.push(entry);\n\n//Z Min\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Z Min: \";\nentry.key = \"zmin\";\nchildFormData.push(entry);\n\nentry = {};\nentry.type = \"panel\";\nentry.formData = childFormData;\nentry.key = panelKey;\nentry.selector = {\n    parentKey: \"entryType\",\n    parentValue: \"labelStyle\"\n}\nentry.state = (entry.key == activePanelKey) ? apogeeapp.ui.ConfigurableElement.STATE_NORMAL : apogeeapp.ui.ConfigurableElement.STATE_INACTIVE;\nlayout.push(entry);\n\n\n//==================\n//marker content panel\n//==================\nchildFormData = [];\npanelKey = getPanelKey(\"marker\");\n\n//Marker URL\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Marker URL: \";\nentry.key = \"src\";\nchildFormData.push(entry);\n\n//Offset X\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Offset X: \";\nentry.key = \"ox\";\nchildFormData.push(entry);\n\n//Offset Y\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Offset Y: \";\nentry.key = \"oy\";\nchildFormData.push(entry);\n\nentry = {};\nentry.type = \"panel\";\nentry.formData = childFormData;\nentry.key = panelKey;\nentry.selector = {\n    parentKey: \"entryType\",\n    parentValue: \"marker\"\n}\nentry.state = (entry.key == activePanelKey) ? apogeeapp.ui.ConfigurableElement.STATE_NORMAL : apogeeapp.ui.ConfigurableElement.STATE_INACTIVE;\nlayout.push(entry);\n\n//=================\n// content panels finished\n//=================\n\n\n//horizontal rule\nentry = {};\nentry.type = \"htmlDisplay\";\nentry.html = \"<hr>\";\nlayout.push(entry);\n\nreturnValue.layoutValid = true;\nreturnValue.layout = layout;\nreturn returnValue;","supplementalCode":"const ENTRY_TYPE_NAMES = [\"style\",\"icon\",\"labelStyle\",\"marker\"];\n\n//this shows the given panel and hides the others\nfunction showPanel(selectedEntryTypeName,form) {\n    \n    ENTRY_TYPE_NAMES.forEach( entryTypeName => {\n        var panelState = (entryTypeName == selectedEntryTypeName) ? \n            apogeeapp.ui.ConfigurableElement.STATE_NORMAL : \n            apogeeapp.ui.ConfigurableElement.STATE_INACTIVE;\n        \n        var panelKey = getPanelKey(entryTypeName);\n        var panel = form.getEntry(panelKey);\n        panel.setState(panelState);\n        \n    });\n    \n}\n\nfunction getPanelKey(entryTypeName) {\n    return entryTypeName + \"Panel\";\n}","description":""}},"inputColorEntry":{"name":"inputColorEntry","type":"apogee.FunctionTable","updateData":{"argList":["baseEntry","compiledBaseEntry"],"functionBody":"var returnValue = {};\nvar layout = [];\nvar entry;\n\n//base ntry\nif(!baseEntry) {\n    returnValue.layoutValid = false;\n    returnValue.msg = \"Base File Entry Select Required\";\n    return returnValue;\n}\n\ntitle\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Create Input Color Entry - \" +  baseEntry.Fields.entry_name;\nlayout.push(entry);\n\n//horizontal rule\nentry = {};\nentry.type = \"htmlDisplay\";\nentry.html = \"<hr>\";\nlayout.push(entry);\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 3;\nentry.text = \"Property Selector\";\nlayout.push(entry);\n\n//get the them path elements\nvar includeTextProps = false;\nvar pathLayoutEntries = getPathLayoutEntries(compiledBaseEntry,includeTextProps);\nlayout = layout.concat(pathLayoutEntries);\n\n//horizontal rule\nentry = {};\nentry.type = \"htmlDisplay\";\nentry.html = \"<hr>\";\nlayout.push(entry);\n\n//color\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Color: \";\nentry.key = \"color\";\nlayout.push(entry);\n\n//do linear area\nentry = {};\nentry.type = \"checkbox\";\nentry.label = \"Linear Area: \";\nentry.key = \"doLinearArea\";\nlayout.push(entry);\n\nreturnValue.layoutValid = true;\nreturnValue.layout = layout;\nreturn returnValue;","supplementalCode":"","description":""}},"stringsEntry":{"name":"stringsEntry","type":"apogee.FunctionTable","updateData":{"argList":["baseEntry","compiledBaseEntry"],"functionBody":"var returnValue = {};\nvar layout = [];\nvar entry;\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Create Strings Entry\";\nlayout.push(entry);\n\n//section\nentry = {};\nentry.type = \"dropdown\";\nentry.label = \"Lang: \";\nentry.key = \"lang\";\nentry.entries = [\n\t\t\t\t\"en\",\n\t\t\t\t\"ja\",\n\t\t\t\t\"zh\",\n\t\t\t\t\"de\",\n\t\t\t\t\"fr\",\n\t\t\t\t\"es\",\n\t\t\t\t\"it\",\n\t\t\t\t\"ar\",\n\t\t\t\t\"da\",\n\t\t\t\t\"he\",\n\t\t\t\t\"hi\",\n\t\t\t\t\"id\",\n\t\t\t\t\"ko\",\n\t\t\t\t\"nl\",\n\t\t\t\t\"pt\",\n\t\t\t\t\"ro\",\n\t\t\t\t\"sv\",\n\t\t\t\t\"ru\",\n\t\t\t\t\"tr\",\n\t\t\t\t\"gu\",\n\t\t\t\t\"pl\",\n\t\t\t\t\"cs\",\n\t\t\t\t\"sk\",\n\t\t\t\t\"th\"\n\t\t\t];\nlayout.push(entry);\n\n//lookup key\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Lookup Key: \";\nentry.key = \"lookupKey\";\nlayout.push(entry);\n\n//translation\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Translation: \";\nentry.key = \"translation\";\nlayout.push(entry);\n\nreturnValue.layoutValid = true;\nreturnValue.layout = layout;\nreturn returnValue;","supplementalCode":"","description":""}},"getPathLayoutEntries":{"name":"getPathLayoutEntries","type":"apogee.FunctionTable","updateData":{"argList":["compiledFileEntry","includeTextProps"],"functionBody":"var childFormData = [];\n\n//we will strore these separately - since they will be used differently\nvar textPropFormData = [];\n\n//function to populate panel\nvar processProperty = property => {\n    switch(property.type) {\n        case \"type\":\n            loadTypeElement(childFormData,property);\n            break;\n            \n        case \"text\":\n            if(includeTextProps) {\n                loadTextElement(textPropFormData,property);\n            }\n            break;\n            \n        case \"boolean\":\n            loadBooleanElement(childFormData,property);\n            break;\n            \n        case \"enum\":\n            loadEnumElement(childFormData,property);\n            break;\n            \n        default:\n            //no action\n            break;\n    }\n}\n\n\n//create the path info\ncompiledFileEntry.properties.forEach(processProperty);\n\n//add the text props, with a line saying include just one\n//more generally - the path can only include one element that is a single value, instead of a key value pair.\n//this is really theme rules specific! I should do this in a better way\nif(textPropFormData.length > 0) {\n    var entry = {};\n    entry.type = \"htmlDisplay\";\n    entry.html = \"<em>Include max one of following:</em>\";\n    childFormData.push(entry);\n    \n    childFormData = childFormData.concat(textPropFormData);\n}\n\n\nvar panelKey = \"pathInfo\";\n\nvar entry = {};\nentry.type = \"panel\";\nentry.formData = childFormData;\nentry.key = panelKey;\nreturn [entry];","supplementalCode":"function loadTypeElement(layout,property) {\n    var element = getCheckboxEntry(property.key,property.value);\n    layout.push(element);\n}\n\nfunction loadTextElement(layout,property) {\n    var element = getCheckboxEntry(property.key);\n    layout.push(element);\n}\n\nfunction loadBooleanElement(layout,property) {\n    var element = getCheckboxEntry(property.key,\"true\");\n    layout.push(element);\n}\n\nfunction loadEnumElement(layout,property) {\n    var element;\n    element = getEnumCheckboxEntry(property.key,index);\n    layout.push(element);\n    element = getEnumSelectEntry(property.key,property.values);\n    layout.push(element);\n}\n\n\n\nfunction getCheckboxEntry(key,value) {\n    var layoutEntry = {};\n    layoutEntry.type = \"checkbox\";\n    \n    layoutEntry.label = key;\n    if(value !== undefined) layoutEntry.label += \":\" + value;\n    var path = [key];\n    if(value !== undefined) path.push(value);\n\tlayoutEntry.key = JSON.stringify(path);\n\treturn layoutEntry\n}\n\nfunction getEnumCheckboxEntry(key) {\n    var layoutEntry = {};\n    layoutEntry.type = \"checkbox\";\n    layoutEntry.label = key + \":\";\n\tlayoutEntry.key = key;\n\treturn layoutEntry\n}\n\nfunction getEnumSelectEntry(key,propertyValues) {\n    var valueList = propertyValues.map(valueEntry => [valueEntry.value,JSON.stringify([key,valueEntry.value])]);\n    var layoutEntry = {};\n    layoutEntry.type = \"dropdown\";\n    layoutEntry.label = \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\";\n    layoutEntry.entries = valueList;\n\tlayoutEntry.key = key + \"_select\";\n\treturn layoutEntry;\n}\n\n","description":""}},"geomThemeRulesEntry":{"name":"geomThemeRulesEntry","type":"apogee.FunctionTable","updateData":{"argList":["baseEntry","compiledBaseEntry"],"functionBody":"return themeRulesEntry(baseEntry,compiledBaseEntry);","supplementalCode":"","description":""}},"entityThemeRulesEntry":{"name":"entityThemeRulesEntry","type":"apogee.FunctionTable","updateData":{"argList":["baseEntry","compiledBaseEntry"],"functionBody":"return themeRulesEntry(baseEntry,compiledBaseEntry);","supplementalCode":"","description":""}},"addressThemeRulesEntry":{"name":"addressThemeRulesEntry","type":"apogee.FunctionTable","updateData":{"argList":["baseEntry","compiledBaseEntry"],"functionBody":"var returnValue = {};\nvar layout = [];\nvar entry;\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Create Address Label Entry\";\nlayout.push(entry);\n\n//address key\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Address Key: \";\nentry.key = \"addressKey\";\nlayout.push(entry);\n\n//lable type\nentry = {};\nentry.type = \"dropdown\";\nentry.label = \"Label Type: \";\nentry.key = \"labelType\";\nentry.entries = [\n\t\t\t\t\"<short>\",\n\t\t\t\t\"<long>\",\n\t\t\t\t\"<full>\"\n\t\t\t];\nlayout.push(entry);\n\nreturnValue.layoutValid = true;\nreturnValue.layout = layout;\nreturn returnValue;","supplementalCode":"","description":""}}}},"fieldsGenerators":{"name":"fieldsGenerators","type":"apogee.Folder","children":{"typeEntry":{"name":"typeEntry","type":"apogee.FunctionTable","updateData":{"argList":["formData","baseEntry"],"functionBody":"//read base needed values\nvar baseSection = baseEntry.Fields.entry_section;\nvar baseName = baseEntry.Fields.entry_name;\nvar basePropertyEntry = getPropertyEntry(baseEntry.Fields.entry_data.properties);\nif(!basePropertyEntry) {\n    throw new Error(\"The base entry is not a proper Type entry: \" + baseName);\n}\n\n//get edit inputs, with tests\nvar typeName = getInputString(formData.typeName,\"type name\",true);\nvar legacyKey = getInputString(formData.legacyKey,\"legacy key\",true);\nvar legacyValue = getInputString(formData.legacyValue,\"legagy value\",true);\nvar optionName = getInputString(formData.optionName,\"option name\",true);\n\n\n//create entry values\nvar entryKey = legacyKey + \":\" + legacyValue;\nvar entryName = entryKey + \" (\" + optionName + \")\";\nvar entryData = {};\nentryData.extends = baseName;\nentryData.name = entryName;\nentryData.properties = [];\n//create the type property\nvar property = {};\nproperty.type = \"type\";\nproperty.key = basePropertyEntry.key;\nproperty.value = typeName;\nproperty.legacyKey = legacyKey;\nproperty.legacyValue = legacyValue;\nproperty.action = \"modifies\";\nentryData.properties.push(property);\n\n//creat the fields struct\nvar fields = {};\n\nfields.file_type_id = commonData.getFileTypeId(\"propertyRules\");\nfields.entry_section = baseSection;\n\nfields.option_name = optionName;\nfields.entry_data = entryData;\nfields.entry_key = entryKey;\nfields.entry_name = entryName;\nfields.entry_context = commonData.context;\n\nreturn fields;","supplementalCode":"function getPropertyEntry(baseProperties) {\n    return baseProperties.find(property => (property.type == \"type\"));\n}","description":""}},"addressKey":{"name":"addressKey","type":"apogee.FunctionTable","updateData":{"argList":["formData","baseEntry"],"functionBody":"//no base entry\n\nvar addressKey = getInputString(formData.addressKey,\"address key\",true);\nvar optionName = getInputString(formData.optionName,\"option name\",true);\n\n//create entry values\nvar entryKey = \"address keys insert: \" + addressKey;\nvar entryName = entryKey + \" (\" + optionName + \")\";\nvar entryData = {};\nentryData.modifies = \"address keys (Standard)\";\nentryData.name = entryName;\nentryData.properties = [];\n//create the key property\nvar property = {};\nproperty.key = \"address keys\";\nproperty.values = [{\"value\":addressKey}];\nproperty.action = \"modifies\";\nentryData.properties.push(property);\n\n//creat the fields struct\nvar fields = {};\n\nfields.file_type_id = commonData.getFileTypeId(\"propertyRules\");\nfields.entry_section = \"named_entries\";\n\nfields.option_name = optionName;\nfields.entry_data = entryData;\nfields.entry_key = entryKey;\nfields.entry_name = entryName;\nfields.entry_context = commonData.context;\n\nreturn fields;","supplementalCode":"","description":""}},"childPropKey":{"name":"childPropKey","type":"apogee.FunctionTable","updateData":{"argList":["formData","baseEntry"],"functionBody":"//read base needed values\nvar baseSection = baseEntry.Fields.entry_section;\nvar baseName = baseEntry.Fields.entry_name;\n\n//should compare to compiled entry to see if there is a repeat!!!\n\n//get base data\nvar childKey = getInputString(formData.childKey,\"child key\",true);\nvar keyType = getInputString(formData.keyType,\"key type\",true);\nvar optionName = getInputString(formData.optionName,\"option name\",true);\n\n//create entry values\nvar entryKey = baseName + \" insert \" + childKey;\nvar entryName = entryKey + \" (\" + optionName + \")\";\nvar entryData = {};\nentryData.modifies = baseName;\nentryData.name = entryName;\nentryData.properties = [];\n\n//read property info\nvar formPanel = _getFormPanel(formData,keyType);\nvar property = {};\nproperty.key = childKey;\nproperty.type = keyType;\nswitch(keyType) {\n    case \"text\":\n        var hasLang = getInputBoolean(formPanel.hasLang,\"had lang\",false);\n        if(hasLang) property.has_lang = hasLang;\n        var isArray = getInputBoolean(formPanel.isArray,\"is array\",false);\n        if(isArray) property.is_array = isArray;\n        break;\n        \n    case \"boolean\":\n        break;\n        \n    case \"enum\":\n        var enumValues = getInputStringList(formPanel.values,\"value list\",true);\n        property.values = _getPropertyValueList(enumValues);\n        break;\n        \n    case \"fixed\":\n        var fixedValue = getInputString(formPanel.fixedValue,\"fixed value\",true);\n        property.fixedValue = fixedValue;\n        break;\n        \n    default:\n        throw new Error(\"Unknown key type: \" + keyType);\n        break;\n}\nentryData.properties.push(property);\n\n//creat the fields struct\nvar fields = {};\n\nfields.file_type_id = commonData.getFileTypeId(\"propertyRules\");\nfields.entry_section = baseSection;\n\nfields.option_name = optionName;\nfields.entry_data = entryData;\nfields.entry_key = entryKey;\nfields.entry_name = entryName;\nfields.entry_context = commonData.context;\n\nreturn fields;","supplementalCode":"function _getPropertyValueList(valueList) {\n    return valueList.map( value => { return {\"value\":value}});\n}\n\nfunction _getFormPanel(formData,keyType) {\n    return formData[keyType + \"Panel\"];\n}","description":""}},"childPropValue":{"name":"childPropValue","type":"apogee.FunctionTable","updateData":{"argList":["formData","baseEntry"],"functionBody":"//read base needed values\nvar baseSection = baseEntry.Fields.entry_section;\nvar baseName = baseEntry.Fields.entry_name;\n\nvar childKey = getInputString(formData.childKey,true);\nvar childValue = getInputString(formData.childValue,true);\nvar optionName = getInputString(formData.optionName,true);\n\n\n//create entry values\nvar entryKey = baseName + \" insert \" + childKey + \":\" + childValue;\nvar entryName = entryKey + \" (\" + optionName + \")\";\nvar entryData = {};\nentryData.modifies = baseName;\nentryData.name = entryName;\nentryData.properties = [];\n//create the key property\nvar property = {};\nproperty.type = \"enum\";\nproperty.key = childKey;\nproperty.action = \"modifies\";\nproperty.values = [{\"value\":childValue}];\nentryData.properties.push(property);\n\n//creat the fields struct\nvar fields = {};\n\nfields.file_type_id = commonData.getFileTypeId(\"propertyRules\");\nfields.entry_section = baseSection;\n\nfields.option_name = optionName;\nfields.entry_data = entryData;\nfields.entry_key = entryKey;\nfields.entry_name = entryName;\nfields.entry_context = commonData.context;\n\nreturn fields;","supplementalCode":"","description":""}},"stringsEntry":{"name":"stringsEntry","type":"apogee.FunctionTable","updateData":{"argList":["formData","baseEntry"],"functionBody":"//create entry values\nvar section = getInputString(formData.lang,\"lang\",true);\nvar lookupKey = getInputString(formData.lookupKey,\"lookup key\",true);\nvar optionName = getInputString(formData.optionName,\"option name\",true);\nvar translation = getInputString(formData.translation,\"translation\",true);\n\nvar entryKey = formData.lookupKey;\nvar entryName = entryKey + \" (\" + optionName + \")\";\nvar entryData = {};\nentryData.trans = translation;\n\n\n//creat the fields struct\nvar fields = {};\n\nfields.file_type_id = commonData.getFileTypeId(\"strings\");\nfields.entry_section = section;\n\nfields.option_name = optionName;\nfields.entry_data = entryData;\nfields.entry_key = entryKey;\nfields.entry_name = entryName;\nfields.entry_context = commonData.context;\n\nreturn fields;","supplementalCode":"","description":""}},"themeEntry":{"name":"themeEntry","type":"apogee.FunctionTable","updateData":{"argList":["formData","baseEntry"],"functionBody":"var name = getInputString(formData.name,\"name\",true);\nvar optionName = getInputString(formData.optionName,\"option name\",true);\nvar entryType = getInputString(formData.entryType,\"entry type\",true);\n\n//create entry values\nvar entryKey = name;\nvar entryName = entryKey + \" (\" + optionName + \")\";\nvar entryData = {};\n\n//conditional fields\nvar panelData = _getPanelData(formData,entryType);\nif(entryType == \"style\") {\n    //below works because missing optional values are returned as \"undefined\" - but this code is risking depending on that\n    entryData.m = getInputString(panelData.m,\"main color\",false);\n    entryData.o = getInputString(panelData.o,\"outline color\",false);\n    entryData.w = getInputFloatFromString(panelData.w,\"outline width\",false);\n    entryData.l = getInputString(panelData.l,\"label style\",false);\n    entryData.t = getInputString(panelData.t,\"text color\",false);\n    entryData.zmin = getInputFloatFromString(panelData.zmin,\"zmin\",false);\n}\nelse if(entryType == \"icon\") {\n    entryData.lt = getInputIntFromString(panelData.lt,\"label type\",true);\n    if(entryData.lt !== 0) {\n        entryData.ar = getInputString(panelData.ar,\"reference name\",true);\n    }\n    if((entryData.lt === 2)||(entryData.lt === 3)) {\n        entryData.url = getInputString(panelData.url,\"url\",true);\n    }\n}\nelse if(entryType == \"labelStyle\") {\n    //below works because missing optional values are returned as \"undefined\" - but this code is risking depending on that\n    entryData.font = getInputString(panelData.font,\"font\",false);\n    entryData.fill = getInputString(panelData.fill,\"fill\",false);\n    entryData.outline = getInputString(panelData.outline,\"outline color\",false);\n    entryData.outlineWidth = getInputFloatFromString(panelData.outlineWidth,\"outlineWidth\",false);\n    entryData.minFont = getInputFloatFromString(panelData.minFont,\"minFont\",false);\n    entryData.maxFont = getInputFloatFromString(panelData.maxFont,\"maxFont\",false);\n    var caps = getInputBoolean(panelData.caps,\"caps\",false);\n    if(caps) entryData.caps = caps;\n    entryData.zmin = getInputFloatFromString(panelData.zmin,\"zmin\",false);\n    \n}\nelse if(entryType == \"marker\") {\n    //below works because missing optional values are returned as \"undefined\" - but this code is risking depending on that\n    entryData.src = getInputString(entryData,panelData,\"src\",true);\n    entryData.ox = getInputFloatFromString(entryData,panelData,\"ox\",true);\n    entryData.oy = getInputFloatFromString(entryData,panelData,\"oy\",true);\n    \n}\nelse {\n    throw new Error(\"Unknown entryType: \" + entryType);\n}\n\n//creat the fields struct\nvar fields = {};\n\nfields.file_type_id = commonData.getFileTypeId(\"theme\");\nfields.entry_section = entryType;\n\nfields.option_name = optionName;\nfields.entry_data = entryData;\nfields.entry_key = entryKey;\nfields.entry_name = entryName;\nfields.entry_context = commonData.context;\n\nreturn fields;","supplementalCode":"function _getPanelData(formData,entryType) {\n    var panelData = formData[entryType + \"Panel\"];\n    if(!panelData) throw new Error(\"Form data not found for entry type: \" + entryType);\n    return panelData;\n}","description":""}},"themeRulesEntry":{"name":"themeRulesEntry","type":"apogee.FunctionTable","updateData":{"argList":["formData","baseEntry"],"functionBody":"//read base needed values\nvar baseSection = baseEntry.Fields.entry_section;\n\nvar pathInfo = createPathInfo(formData,baseEntry);\nvar path = pathInfo.path;\nvar legacyPath = pathInfo.legacyPath;\nvar pathString = getPathString(path);\nvar legacyPathString = getPathString(legacyPath);\n\n//error check - for theme rules, the path can only include one path element, the last path element, with a key and no value\n_testPathEntryLengths(path);\n\nvar entryType = getInputString(formData.entryType,\"entry type\",true);\nvar optionName = getInputString(formData.optionName,\"option name\",true);\n\n//create entry values\nvar entryKey = baseSection + \" \" + legacyPathString;\nvar entryName = entryKey + \" \" + entryType + \" (\" + optionName + \")\";\nvar entryData = {};\nentryData.propType = baseSection;\nentryData.path = path;\nentryData.legacyPath = legacyPath;\n\nvar payload = {};\nvar panelData = _getPanelData(formData,entryType);\nif(entryType == \"label\") {\n    payload.lt = getInputIntFromString(panelData.lt,\"label type\",true);\n    if(payload.lt !== 0) {\n        var r = getInputString(panelData.r,\"reference\",false);\n        if(r) payload.r = r;\n    }\n    if(payload.lt === 1) {\n        var trans = getInputBoolean(panelData.trans,\"trans\",false);\n        if(trans) payload.trans = trans;\n    }\n}\nelse if(entryType == \"style\") {\n    payload.n = getInputString(panelData.n,\"name\",true);\n}\nelse {\n    throw new Error(\"Unknown entryType: \" + entryType);\n}\nentryData.payload = payload;\n\n\n//creat the fields struct\nvar fields = {};\n\nfields.file_type_id = commonData.getFileTypeId(\"themeRules\");\nfields.entry_section = entryType;\n\nfields.option_name = optionName;\nfields.entry_data = entryData;\nfields.entry_key = entryKey;\nfields.entry_name = entryName;\nfields.entry_context = commonData.context;\n\nreturn fields;","supplementalCode":"function _testPathEntryLengths(path) {\n    for(var i = 0; i < path.length; i++) {\n        var entry = path[i];\n        if(entry.length === 2) {}\n        else if(entry.length === 1) {\n            if(i != path.length - 1) throw new Error(\"Only the last path element can have no value entry!\");\n        }\n        else {\n            throw new Error(\"A path entry must have either one or two entries.\");\n        }\n    }\n}\n\nfunction _getPanelData(formData,entryType) {\n    var panelData = formData[entryType + \"Panel\"];\n    if(!panelData) throw new Error(\"Data not found for entry type: \" + entryType);\n    return panelData;\n}","description":""}},"inputColorEntry":{"name":"inputColorEntry","type":"apogee.FunctionTable","updateData":{"argList":["formData","baseEntry"],"functionBody":"//read base needed values\nvar baseSection = baseEntry.Fields.entry_section;\nvar baseName = baseEntry.Fields.entry_name;\n\nvar pathInfo = createPathInfo(formData,baseEntry);\nvar path = pathInfo.path;\nvar legacyPath = pathInfo.legacyPath;\nvar pathString = getPathString(path);\nvar legacyPathString = getPathString(legacyPath);\nvar props = pathToProps(path);\nvar legacyProps = pathToProps(legacyPath);\n\nvar optionName = getInputString(formData.optionName,\"option name\",true);\nvar color = getInputString(formData.color,\"color\",true);\nvar doLinearArea = getInputBoolean(formData.doLinearArea,\"do linear area\",true);\n\n//create entry values\nvar entryKey = legacyPathString;\nvar entryName = entryKey + \" (\" + optionName + \")\";\nvar entryData = {};\nentryData.props = props;\nentryData.legacyProps = legacyProps;\nentryData.color= color;\nif(doLinearArea) entryData.doLinearArea = true;\n\n\n//creat the fields struct\nvar fields = {};\n\nfields.file_type_id = commonData.getFileTypeId(\"inputColors\");\nfields.entry_section = \"inputMap\";\n\nfields.option_name = optionName;\nfields.entry_data = entryData;\nfields.entry_key = entryKey;\nfields.entry_name = entryName;\nfields.entry_context = commonData.context;\n\nreturn fields;","supplementalCode":"function pathToProps(path) {\n    var props = {};\n    path.forEach( entry => props[entry[0]] = entry[1] );\n    return props;\n}","description":""}},"getPathString":{"name":"getPathString","type":"apogee.FunctionTable","updateData":{"argList":["path"],"functionBody":"return path.map(entry => entry.join(\":\")).join(\"; \");\n\n","supplementalCode":"","description":""}},"geomThemeRulesEntry":{"name":"geomThemeRulesEntry","type":"apogee.FunctionTable","updateData":{"argList":["formData","baseEntry"],"functionBody":"return themeRulesEntry(formData,baseEntry);","supplementalCode":"","description":""}},"entityThemeRulesEntry":{"name":"entityThemeRulesEntry","type":"apogee.FunctionTable","updateData":{"argList":["formData","baseEntry"],"functionBody":"return themeRulesEntry(formData,baseEntry);","supplementalCode":"","description":""}},"addressThemeRulesEntry":{"name":"addressThemeRulesEntry","type":"apogee.FunctionTable","updateData":{"argList":["formData","baseEntry"],"functionBody":"//create entry values\n\nvar addressKey = getInputString(formData.addressKey,\"address key\",true);\nvar labelType = getInputString(formData.labelType,\"label type\",true);\nvar optionName = getInputString(formData.optionName,\"option name\",true);\n\nvar path = [formData.addressKey];  \n    \nvar entryData = {};\nentryData.propType = \"address\";\nentryData.path = path;\nvar payload = {};\npayload.lt = 2;\npayload.r = labelType;\nentryData.payload = payload;\n\nvar entryKey = \"address \" + addressKey;\nvar entryName = entryKey + \" label (\" + optionName + \")\";\n\n\n//creat the fields struct\nvar fields = {};\n\nfields.file_type_id = commonData.getFileTypeId(\"themeRules\");\nfields.entry_section = \"label\";\n\nfields.option_name = optionName;\nfields.entry_data = entryData;\nfields.entry_key = entryKey;\nfields.entry_name = entryName;\nfields.entry_context = commonData.context;\n\nreturn fields;","supplementalCode":"","description":""}},"getInputString":{"name":"getInputString","type":"apogee.FunctionTable","updateData":{"argList":["value","tag","required"],"functionBody":"if((value != null)||(value != undefined)) {\n    var objectType = apogee.util.getObjectType(value);\n    if(objectType != \"String\") {\n        throw new Error(\"Expecting 'String' for tag \" + tag + \". Found \" + objectType);\n    }\n    value = value.trim();\n    \n    if(value != \"\") {\n        return value;\n    }\n}\n \n//if we are still here, the value was missing\nif(required) {\n    throw new Error(\"Missing required string value: \" + tag);\n}\nelse {\n    return undefined;\n}","supplementalCode":"","description":"This reads a string from the format data at the given tag. It throws an error if the string is required but not present. The return value is undefined for missing optional fields."}},"getInputBoolean":{"name":"getInputBoolean","type":"apogee.FunctionTable","updateData":{"argList":["value","tag"],"functionBody":"if((value != null)||(value != undefined)) {\n    var objectType = apogee.util.getObjectType(value);\n    if(objectType == \"Boolean\") {\n        return value;\n    }\n    else {\n        throw new Error(\"Expecting boolean for tag \" + tag);\n    }\n}\n \n//if we are still here, the value was missing\nreturn false;","supplementalCode":"","description":"This reads a boolean value from a form that is either a string or boolean. The return value is true or false. False is returned if the field is missing."}},"getInputStringList":{"name":"getInputStringList","type":"apogee.FunctionTable","updateData":{"argList":["inputString","tag","required"],"functionBody":"if((inputString != null)&&(inputString != undefined)) {\n    var objectType = apogee.util.getObjectType(inputString);\n    if(objectType != \"String\") {\n        throw new Error(\"Expecting 'String' for tag \" + tag + \". Found \" + objectType);\n    }\n\n    //make sure string is not empty - \n    inputString = inputString.trim();\n    if(inputString != \"\") {\n        //split on commas and return\n        var inValueArray = inputString.split(/[\\s,]+/);\n        var outValueArray = [];\n        var insertValue = value => {\n            var valueToAdd = value.trim();\n            if(valueToAdd.length > 0) {\n                outValueArray.push( {\"value\":valueToAdd});\n            }\n        }\n        inValueArray.forEach(insertValue);\n        \n        return inValueArray;\n    }\n}\n \n//if we are still here, the value was missing\nif(required) {\n    throw new Error(\"Missing required string list: \" + tag);\n}\nelse {\n    return [];\n}","supplementalCode":"","description":"This method takes an input string and parses it into a list of strings. If the value is required, it will throw an error if the list is empty. Otherwise it will always return an array."}},"testIntRange":{"name":"testIntRange","type":"apogee.FunctionTable","updateData":{"argList":["value","minInt","maxInt"],"functionBody":"return ((value >= minInt)&&(value <= maxInt));","supplementalCode":"","description":""}},"testStringIsInEnum":{"name":"testStringIsInEnum","type":"apogee.FunctionTable","updateData":{"argList":["value","enumList"],"functionBody":"return (enumList.indexOf(value) >= 0);","supplementalCode":"","description":""}},"getInputFloatFromString":{"name":"getInputFloatFromString","type":"apogee.FunctionTable","updateData":{"argList":["value","tag","required"],"functionBody":"if((value != null)||(value != undefined)) {\n    try {\n        var floatValue = parseFloat(value);\n        \n        //parsing a string with no number will give null, not error\n        if(isNaN(floatValue)) return undefined;\n        \n        return floatValue;\n    }\n    catch(error) {\n        throw new Error(\"Error parsing decimal value: \"+ value);\n    }\n}\n \n//if we are still here, the value was missing\nif(required) {\n    throw new Error(\"Missing required decimal value: \" + tag);\n}\nelse {\n    return undefined;\n}","supplementalCode":"","description":"This reads a float value from string valued form data. It will throw an error if the value is required but missing. The return value is undefined for missing optional fields."}},"getInputIntFromString":{"name":"getInputIntFromString","type":"apogee.FunctionTable","updateData":{"argList":["value","tag","required"],"functionBody":"if((value != null)||(value != undefined)) {\n    try {\n        return parseInt(value);\n    }\n    catch(error) {\n        throw new Error(\"Error parsing integer value: \"+ value);\n    }\n}\n \n//if we are still here, the value was missing\nif(required) {\n    throw new Error(\"Missing required integer value: \" + tag);\n}\nelse {\n    return undefined;\n}","supplementalCode":"","description":"This reads a integer value from string valued form data. It will throw an error if the value is required but missing. The return value is undefined for missing optional fields."}},"createPathInfo":{"name":"createPathInfo","type":"apogee.FunctionTable","updateData":{"argList":["formData","baseEntry"],"functionBody":"var path = [];\nvar legacyPath = [];\n\n//create the path from the edit result\n//we decode the form data when encoded in the layout generator. This is kind of cludgy.\nif(formData.pathInfo) {\n    \n    for(var key in formData.pathInfo) {\n        var value = formData.pathInfo[key];\n    \n        if(value === true) {\n            //this is a selected path element\n            var pathString;\n            \n            if(key.startsWith(\"[\")) {\n                //this is a path entry\n                pathString = key;\n            }\n            else {\n                //this is a checkbox for an enum\n                var selectKey = key + \"_select\";\n                pathString = formData.pathInfo[selectKey];\n                legacyPathString = pathString;\n            }\n            \n            var pathElement = JSON.parse(pathString);\n            path.push(pathElement);\n            \n            \n            var legacyPathElement;\n            if(pathElement[0] == \"featureType\") {\n                //create the alternate legacy path entry\n                legacyPathElement = _getLegacyPathElement(pathElement,baseEntry);\n            }\n            else {\n                legacyPathElement = pathElement\n            }\n            legacyPath.push(legacyPathElement);\n        }\n    }\n}\n\nvar data = {};\ndata.path = path;\ndata.legacyPath = legacyPath;\nreturn data;","supplementalCode":"function _getLegacyPathElement(pathElement,baseEntry) {\n    var props = baseEntry.Fields.entry_data.properties;\n    var typeProp = props.find( prop => prop.type == \"type\");\n    if(!typeProp) throw new Error(\"Type prop not found!\");\n    \n    var legacyPathElement = [typeProp.legacyKey,typeProp.legacyValue];\n    return legacyPathElement;\n}","description":""}}}},"createdFieldMap":{"name":"createdFieldMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var contentValue = selectEntryContent.data;\n\nif(!contentValue) return null;\n\nvar editType = getEditType();\nvar baseEntry = getBaseEntry();\n\nvar fieldMap = fieldsGenerators[editType](contentValue,baseEntry);\n\nreturn fieldMap;","supplementalCode":"","description":""}},"relatedEntries":{"name":"relatedEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!createdFieldMap) return null;\n\nvar fileTypeId = createdFieldMap.file_type_id;\nvar optionName = createdFieldMap.option_name;\nvar section = createdFieldMap.entry_section;\nvar entryKey = createdFieldMap.entry_key;\nvar entryName = createdFieldMap.entry_name;\n\nvar propRulesFilter = fileEntry => fileEntry.Fields.file_type_id == fileTypeId;\nvar sectionFilter = fileEntry => fileEntry.Fields.entry_section == section;\nvar entryKeyFilter = fileEntry => fileEntry.Fields.entry_key == entryKey;\n\nvar sectionEntries = commonData.availableFileEntries.filter(propRulesFilter).filter(sectionFilter);\n                            \nvar matchingEntries = sectionEntries.filter(entryKeyFilter);\n\n//check for a repeat key in this file type and section\nif(matchingEntries.some(fileEntry => fileEntry.Fields.option_name == optionName)) {\n    throw new Error(\"Multiple entries found for this option name: \" + optionName);\n}\n\n//check for repeat of name entries\nif(sectionEntries.some(fileEntry => fileEntry.Fields.entry_name == entryName)) {\n    throw new Error(\"Multiple entries found for this entry name: \" + entryName);\n}\n\nreturn matchingEntries;","supplementalCode":"","description":""}},"selectEntryContent":{"name":"selectEntryContent","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"//get base data\nvar editType = getEditType();\nvar baseEntry = getBaseEntry();\nvar compiledBaseEntry = getCompiledBaseEntry();\nvar baseEntryId = baseEntry ? baseEntry.Id : null;\n\n// //get the content layout lines\nvar contentLayoutInfo =  layoutGenerators[editType](baseEntry,compiledBaseEntry);\nvar entry;\n\n//report an error if there is one\nif(!contentLayoutInfo.layoutValid) {\n    var layout = [];\n    var entry = {};\n    entry.type = \"htmlDisplay\";\n    entry.html = '<em style=\"color:red\">' + contentLayoutInfo.msg + '</em>';\n    layout.push(entry);\n    return {layout:layout};\n}\n\nvar contentLayout = contentLayoutInfo.layout;\n\n//option name\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Option Name: \";\nentry.key = \"optionName\";\ncontentLayout.push(entry);\n\n//hidden field - the dependent fields\nentry = {};\nentry.type = \"invisible\";\nentry.key = \"editType\";\nentry.value = editType;\ncontentLayout.push(entry);\n\n//make sure the data matches this type!!!\n//clear the data if it is for a different edit type \nif(data) {\n    if(data.editType != editType) {\n        apogeeMessenger.dataUpdate(\"data\",null);\n    }\n}\n\n\nreturn {\"layout\":contentLayout};","supplementalCode":"","description":""}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":{"pathInfo":{"[\"name\"]":false,"[\"short name\"]":true,"[\"location\"]":false,"[\"category\"]":false,"[\"tags\"]":false},"entryType":"label","labelPanel":{"lt":"1","r":"asdfasdf","trans":false},"optionName":"test.7.11.18","editType":"entityThemeRulesEntry"},"description":""}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":"","description":""}}},"childrenNotWriteable":true}}},"getCompiledBaseEntry":{"name":"getCompiledBaseEntry","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return selectFileEntry.compiledEntry;","supplementalCode":"","description":""}},"getCreatedFieldMap":{"name":"getCreatedFieldMap","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return setContent.createdFieldMap;","supplementalCode":"","description":""}}}},"micemetarDataAccess":{"name":"micemetarDataAccess","type":"apogee.Folder","children":{"createRecord":{"name":"createRecord","type":"apogee.FunctionTable","updateData":{"argList":["recordType","fieldMap"],"functionBody":"var record = {};\n\nrecord.Id = getId();\nrecord.Type = recordType;\nrecord.Fields = fieldMap;\nrecord.read_perm = READ_PERM;\nrecord.edit_perm = EDIT_PERM;\n\nreturn record;","supplementalCode":"var READ_PERM = 2;\nvar EDIT_PERM = 15;\n\n//this will be illegal at some point\nvar nextId = -1;\n\nfunction getId() {\n    return nextId--;\n}","description":"This method creates a record given the field values and record info \nfrom the data set info. It creates and ID and uses standard permissions."}},"recordsToCreateInstructions":{"name":"recordsToCreateInstructions","type":"apogee.FunctionTable","updateData":{"argList":["recordList"],"functionBody":"var instructions = [];\n\nfor(var i = 0; i < recordList.length; i++) {\n    var createRecord = recordList[i];\n    var instruction = createCreateInstruction(createRecord);\n    instructions.push(instruction);\n}\n\nreturn instructions;","supplementalCode":"","description":"This creates a list of create instructions to go along with a list of records to be created.\n\nThere is the option to assign the ID or to leave it as undefined, in which case\nan automatically incremented ID will be assigned. (For consistency in the data\nset, either all records should be preassigned or all records should be \nautomatically assigned."}},"createCommitBody":{"name":"createCommitBody","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage"],"functionBody":"var commit = {};\nvar actions = [];\n\nif(commitMessage.length === 0) throw new Error(\"Commit message missing!\");\n\ncommit.Name = dataSetInfo.name;\ncommit.Message = commitMessage;\ncommit.Actions = actions;\n\n//single action with commits\nvar action = {};\naction.Title = \"bulk create commit\";\naction.Instr = instructionList;\nactions.push(action);\n\nreturn commit","supplementalCode":"","description":"This creates a body for a commit request, given a list of instructions and a commit message."}},"createRequestOptions":{"name":"createRequestOptions","type":"apogee.FunctionTable","updateData":{"argList":["bodyJson","sessionKey"],"functionBody":"var header = {};\nheader[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\nheader.sessionKey = sessionKey;\nheader[\"proto-version\"] = \"4.0\";\nheader[\"db-version\"] = dataSetInfo.version;\n\nrequestInfo = {};\nrequestInfo.header = header;\nif(bodyJson) {\n    requestInfo.method = \"POST\";\n    requestInfo.body = JSON.stringify(bodyJson);\n}\n\nreturn requestInfo;\n","supplementalCode":"","description":"This creates the requestOptions, suitable for apogee.net.jsonRequest, to go with an type of request to the workingset (micemetarequest) server."}},"host":{"name":"host","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return settings.data.metaDbHost;","supplementalCode":"","description":""}},"commitUrl":{"name":"commitUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvalue = host + \"/commit\";\nreturn value;\n\n","supplementalCode":"","description":""}},"requestUrl":{"name":"requestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return host + \"/cannedsearch\";\n\n","supplementalCode":"","description":""}},"dataSetInfo":{"name":"dataSetInfo","type":"apogee.JsonTable","updateData":{"data":{"name":"Micemetar","records":{"com_file_entry":{"foreignList":[],"idField":"com_file_entry_id","name":"com_file_entry","recordClass":"com.micello.micemetar.data.ComFileEntry","fields":[{"fieldClass":"java.lang.Integer","name":"ordr","nullOk":false,"defaultValue":0},{"fieldClass":"com.micello.micemetar.data.ComFile","name":"com_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.MetaFile","name":"meta_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"file_group","nullOk":false,"defaultValue":null}]},"com_file":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"com_file_id","remoteRecord":"com_file_entry","orderField":"ordr","name":"com_file_entry_list"}],"idField":"com_file_id","name":"com_file","recordClass":"com.micello.micemetar.data.ComFile","fields":[{"fieldClass":"java.lang.String","name":"file_context","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"name","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"ref","nullOk":true,"defaultValue":null}]},"file_entry":{"foreignList":[],"idField":"file_entry_id","name":"file_entry","recordClass":"com.micello.micemetar.data.FileEntry","fields":[{"fieldClass":"java.lang.String","name":"entry_context","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"entry_name","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.FileType","name":"file_type_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"entry_section","nullOk":true,"defaultValue":null},{"fieldClass":"java.lang.String","name":"entry_key","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"option_name","nullOk":false,"defaultValue":null},{"fieldClass":"org.json.JSONObject","name":"entry_data","nullOk":false,"defaultValue":null}]},"file_type":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"file_type_id","remoteRecord":"file_entry","name":"file_entry_list"}],"idField":"file_type_id","name":"file_type","recordClass":"com.micello.micemetar.data.FileType","fields":[{"fieldClass":"java.lang.String","name":"file_type_name","nullOk":true,"defaultValue":null}]},"meta_file":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"meta_file_id","remoteRecord":"recipe_entry","orderField":"ordr","name":"recipe_entry_list"}],"idField":"meta_file_id","name":"meta_file","recordClass":"com.micello.micemetar.data.MetaFile","fields":[{"fieldClass":"com.micello.micemetar.data.FileType","name":"file_type_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"file_context","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"name","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"use_type","nullOk":false,"defaultValue":null},{"fieldClass":"org.json.JSONObject","name":"ref","nullOk":true,"defaultValue":null}]},"recipe_entry":{"foreignList":[],"idField":"recipe_entry_id","name":"recipe_entry","recordClass":"com.micello.micemetar.data.RecipeEntry","fields":[{"fieldClass":"java.lang.Integer","name":"ordr","nullOk":false,"defaultValue":0},{"fieldClass":"com.micello.micemetar.data.MetaFile","name":"meta_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.FileEntry","name":"file_entry_id","nullOk":false,"defaultValue":null},{"fieldClass":"org.json.JSONObject","name":"insertion_info","nullOk":true,"defaultValue":null}]}},"version":"5.0"},"description":""}},"createUpdateInstruction":{"name":"createUpdateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["initialRecord","targetRecord"],"functionBody":"if(initialRecord.Id != targetRecord.Id) {\n    throw new Error(\"Record ID mismatch in create update instruction for target record: \" + getRecordErrString(targetRecord));\n}\n\nif(initialRecord.Type != targetRecord.Type) {\n    throw new Error(\"Inital and target record types do not match. Target record: \" + getRecordErrString(targetRecord));\n}\n\nvar recordsDifferent = false;\n\nvar recordInfo = getRecordInfo(initialRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Update\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = initialRecord.Id;\n\ninstruction.initialReadPerm = initialRecord.read_perm;\ninstruction.initialEditPerm = initialRecord.edit_perm;\n\nif(initialRecord.readPerm != targetRecord.readPerm) {\n    instruction.targetReadPerm = targetRecord.read_perm;\n    recordsDifferent = true;\n}\n\nif(initialRecord.editPerm != targetRecord.editPerm) {\n    instruction.targetEditPerm = targetRecord.edit_perm;\n    recordsDifferent = true;\n}\n\nvar initialData = {};\ninstruction.Initial = initialData;\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    \n    var initialValue;\n    var targetValue;\n    \n    var initialValue = initialRecord.Fields[field.name];\n    var targetValue = targetRecord.Fields[field.name];\n    \n    //validate target values\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(targetRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(targetRecord,field));\n        }\n    }\n    \n    if(!fieldsMatch(initialValue,targetValue,field)) {\n        initialData[field.name] = initialValue;\n        targetData[field.name] = targetValue;\n        recordsDifferent = true;\n    }\n}\n\nif(recordsDifferent) {\n    return instruction;\n}\nelse {\n    return null;\n}\n","supplementalCode":"function fieldsMatch(initialValue,targetValue,fieldInfo) {\n    if(fieldInfo.fieldClass === \"java.lang.String\") {\n        //compare strings with \"==\"\n        return (initialValue == targetValue);\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"java.lang\")) {\n        //compare other basic values with \"===\"\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"com.micello\")) {\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONObject\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONArray\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else {\n        throw new Error(\"unrecognized field type: \" + fieldInfo.fieldClass);\n    }\n}\n\nfunction compareJsonData(a,b) {\n    var an = apogee.util.getNormalizedObjectCopy(a);\n    var bn = apogee.util.getNormalizedObjectCopy(b);\n    var aString = JSON.stringify(an);\n    var bString = JSON.stringify(bn);\n    return aString == bString;\n}\n    ","description":"This function creates an update instruction given an initial and target record. If the records are the same then NULL is returned. (No update is needed.)"}},"createCreateInstruction":{"name":"createCreateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["createRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(createRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Create\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = createRecord.Id;\n\ninstruction.targetReadPerm = createRecord.read_perm;\ninstruction.targetEditPerm = createRecord.edit_perm;\n\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var targetValue;\n    var targetValue = createRecord.Fields[field.name];\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(createRecord,field));\n        }\n    }\n    \n    targetData[field.name] = targetValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getFieldErrString":{"name":"getFieldErrString","type":"apogee.FunctionTable","updateData":{"argList":["record","fieldInfo"],"functionBody":"return getRecordErrString(record) + \" - \" + fieldInfo.name;","supplementalCode":"","description":""}},"getRecordErrString":{"name":"getRecordErrString","type":"apogee.FunctionTable","updateData":{"argList":["record"],"functionBody":"return record.Type + \" \" + record.Id;","supplementalCode":"","description":""}},"createDeleteInstruction":{"name":"createDeleteInstruction","type":"apogee.FunctionTable","updateData":{"argList":["deleteRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(deleteRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Delete\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = deleteRecord.Id;\n\ninstruction.initialReadPerm = deleteRecord.read_perm;\ninstruction.initialEditPerm = deleteRecord.edit_perm;\n\nvar initialData = {};\ninstruction.Initial = initialData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var initialValue = deleteRecord.Fields[field.name];\n    \n    initialData[field.name] = initialValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getRecordInfo":{"name":"getRecordInfo","type":"apogee.FunctionTable","updateData":{"argList":["recordType"],"functionBody":"var recordInfo = dataSetInfo.records[recordType];\n\nif(!recordInfo) {\n    throw new Error(\"Record type not found in getRecordInfo: \" + recordType);\n}\n\nreturn recordInfo;","supplementalCode":"","description":""}},"combinedEntriesToInstructionList":{"name":"combinedEntriesToInstructionList","type":"apogee.FunctionTable","updateData":{"argList":["combinedEntries"],"functionBody":"var output = [];\nfor(var key in combinedEntries) {\n    var entry = combinedEntries[key];\n    var instruction = getInstructionForCombinedEntry(entry);\n    if(instruction) {\n        output.push(instruction);\n    }\n}\n\nreturn output;","supplementalCode":"function getInstructionForCombinedEntry(combinedEntry) {\n    var newEntry = combinedEntry.newEntry;\n    var oldEntry = combinedEntry.oldEntry;\n    \n    if(newEntry) {\n        if(!oldEntry) {\n            console.log(\"Create: \" + newEntry.Id);\n            return createCreateInstruction(newEntry);\n        }\n        else {\n            //this will return null for matching records\n            console.log(\"Update(maybe): \" + newEntry.Id);\n            return createUpdateInstruction(oldEntry,newEntry);\n        }\n    }\n    else if(oldEntry) {\n        console.log(\"Delete: \" + oldEntry.Id);\n        return createDeleteInstruction(oldEntry);\n    }\n    \n    return null;\n}\n\nfunction entriesDifferent(entry1,entry2) {\n    var string1 = JSON.stringify(apogee.util.getNormalizedCopy(entry1));\n    var string2 = JSON.stringify(apogee.util.getNormalizedCopy(entry2));\n    return (string1 == string2);\n}","description":"This function takes a combined entry map of the format:\n\n{\n  \"some-identifier\":{\n    \"oldEntry\":{original record entry, if applicable},\n    \"newEntry\":{new record entry, if applicable}\n  },\n  ...\n}\n\nIt returns an instruction list.\n\n"}},"getCommitPromise":{"name":"getCommitPromise","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage","sessionKey"],"functionBody":"var commitBody = createCommitBody(instructionList,commitMessage);\nvar requestOptions = createRequestOptions(commitBody,sessionKey);\nreturn apogee.net.jsonRequest(commitUrl,requestOptions);","supplementalCode":"","description":""}},"getRequestPromise":{"name":"getRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn apogee.net.jsonRequest(requestUrl,requestOptions);","supplementalCode":"","description":""}},"customRequestUrl":{"name":"customRequestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return host + \"/request\";","supplementalCode":"","description":""}},"getCustomRequestPromise":{"name":"getCustomRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn apogee.net.jsonRequest(customRequestUrl,requestOptions);","supplementalCode":"","description":""}}}},"settings":{"name":"settings","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var layout = [];\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Settings\";\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Login URL: \";\nentry.size = 80;\nentry.key = \"loginUrl\";\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Meta DB URL: \";\nentry.size = 80;\nentry.key = \"metaDbHost\";\nlayout.push(entry);\n\n//suvbmit (no cancel)\nentry = {};\nentry.type = \"submit\";\nentry.onSubmit = onSubmit;\nentry.onCancel = onReset;\nentry.cancelLabel = \"Reset\";\nlayout.push(entry);\n\nreturn layout;\n","supplementalCode":"","description":""}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":{"loginUrl":"http://eng.micello.com/TestAuthorization/loginjson","metaDbHost":"http://eng.micello.com/micemetarws"},"description":""}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":"","description":""}}},"childrenNotWriteable":true}}}},"components":{"type":"apogeeapp.app.FolderComponent","tabOpen":true,"treeState":1,"children":{"tasks":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":37,"y":37}},"treeState":1,"children":{"login":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":55,"y":32}},"tabOpen":true,"treeState":-1,"children":{"loginUrl":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":465,"height":43},"posInfo":{"x":26,"y":27},"state":-1,"viewType":"Text"}},"sessionResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":697,"height":330},"posInfo":{"x":23,"y":284},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"savedUserName":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":284,"height":69},"posInfo":{"x":24,"y":72},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"loginControl":{"type":"apogeeapp.app.DynamicForm","windowState":{"sizeInfo":{"width":368,"height":185},"posInfo":{"x":288,"y":27},"state":0,"viewType":"Output"}},"sessionKey":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":555,"height":68},"posInfo":{"x":33,"y":362},"state":0,"viewType":"Data"},"dataView":"Colorized"},"loginResult":{"type":"apogeeapp.app.DynamicForm","windowState":{"sizeInfo":{"width":356,"height":49},"posInfo":{"x":776,"y":29},"state":0,"viewType":"Output"}}}},"submit":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":386,"y":24}},"tabOpen":true,"treeState":-1,"children":{"commitResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":623,"height":297},"posInfo":{"x":1331,"y":21},"state":0,"viewType":"Data"},"dataView":"Colorized"},"instructionList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":594,"height":433},"posInfo":{"x":618,"y":42},"state":0,"viewType":"Data"},"dataView":"Colorized"},"submitForm":{"type":"apogeeapp.app.DynamicForm","windowState":{"sizeInfo":{"width":508,"height":239},"posInfo":{"x":21,"y":117},"state":0,"viewType":"Output"}},"commitResult":{"type":"apogeeapp.app.DynamicForm","windowState":{"sizeInfo":{"width":566,"height":123},"posInfo":{"x":1329,"y":375},"state":0,"viewType":"Output"}}}},"completed":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":384,"y":69}},"tabOpen":true,"treeState":-1,"children":{"resetForm":{"type":"apogeeapp.app.DynamicForm","windowState":{"sizeInfo":{"width":448,"height":146},"posInfo":{"x":75,"y":64},"state":0,"viewType":"Output"}}}},"getSessionKey":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":447,"height":400},"posInfo":{"x":22,"y":384},"state":0,"viewType":"Code"}},"commonData":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":482,"y":496}},"tabOpen":true,"treeState":1,"children":{"fileTypeList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":727,"height":325},"posInfo":{"x":37,"y":404},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"fileTypeIdToName":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":722,"height":320},"posInfo":{"x":25,"y":500},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"fileTypeNameToId":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":685,"height":300},"posInfo":{"x":26,"y":456},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"availableFileEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":743,"height":553},"posInfo":{"x":19,"y":622},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"context":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":178,"height":40},"posInfo":{"x":241,"y":33},"state":0,"viewType":"Data"},"dataView":"Colorized"},"sessionKey":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":717,"height":408},"posInfo":{"x":10,"y":34},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"getFileTypeId":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":670,"height":400},"posInfo":{"x":316,"y":502},"state":-1,"viewType":"Code"}},"getFileTypeName":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":593,"height":400},"posInfo":{"x":316,"y":458},"state":-1,"viewType":"Code"}},"fileEntryList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":757,"height":361},"posInfo":{"x":10,"y":78},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"getMatchingFileEntryByName":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":875,"y":93},"state":-1,"viewType":"Code"}},"getCompiledEntryData":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":1019,"height":1005},"posInfo":{"x":876,"y":48},"state":-1,"viewType":"Code"}}}},"selectFileEntry":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":221,"y":54}},"tabOpen":true,"treeState":1,"children":{"selectEntriesControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":712,"height":843},"posInfo":{"x":45,"y":85},"state":0,"viewType":"Output"},"resource":{"html":"<table class=\"selectFileEntry_table\">\n    <tr>\n        <td>\n            <h2>Select Base File Entry</h2>\n        </td>\n    </tr>\n     <tr>\n        <td>\n            <div id=\"selectFileEntry_filterCell\" class=\"selectFileEntry_cell\"></div>\n        </td>\n    </tr>\n    <tr>\n        <td class=\"selectFileEntry_listColumn\">\n            <div id=\"selectFileEntry_availableCell\" class=\"selectFileEntry_displayDiv\"></div>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            <div class=\"selectFileEntry_cell\">\n                <input type=\"button\" value=\"Save\" id=\"selectFileEntry_saveButton\">\n                &nbsp;\n                <input type=\"button\" value=\"Clear\" id=\"selectFileEntry_clearButton\">\n            </div>\n        </td>\n    </tr>\n</table>\n","css":".selectFileEntry_table {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n}\n.selectFileEntry_cell {\n    padding: 5px;\n}\n.selectFileEntry_listColumn {\n    vertical-align: top;\n    height: 100%;\n    overflow: hidden;\n}\n.selectFileEntry_displayDiv {\n    height: 100%;\n    overflow: auto; \n    border: 1px solid black;\n    background-color: white;\n}\n\n.selectFileEntry_filterContainerClass {\n    display: inline;\n    margin: 5px;\n}\n\n.selectFileEntry_listEntryElement {\n    border: 1px solid lightgray;\n    padding: 5px;\n}\n.selectFileEntry_listEntryElement_selected {\n    border: 1px solid lightgray;\n    padding: 5px;\n    background-color: yellow;\n}\n\n.selectFileEntry_listEntry {\n  border: 1px solid darkgray;\n  padding: 2px;\n}\n.selectFileEntry_entryLabel {\n    font-weight: bold;\n}\n.selectFileEntry_entryDataOpened {\n}\n.selectFileEntry_entryDataClosed {\n  display:none;\n}\n.selectFileEntry_preformatText {\n  border: 1px solid gray;\n  background-color: #e0e0e0;\n  color: blue;\n}","setData":"if(!data) return;\n\n//store the data if we are not ready yet\nif(!this.initialized) {\n    this.cachedData = data;\n    return;\n}\n\n//set data\nthis.data = data;\n\n//set the filter value, if one exists\nif((this.data.selectedEntryInfo)&&(this.data.selectedEntryInfo.filterText)) {\n    this.freeTextFilterEntry.value = this.data.selectedEntryInfo.filterText;\n}\nelse {\n    this.freeTextFilterEntry.value = \"\";\n}\n\n//load ui\nthis.loadEntries();\n\n\n\n","constructorAddition":"const EXPAND_IMAGE_URL = \"http://eng.micello.com/apogee/resources/expand.png\";\nconst CONTRACT_IMAGE_URL = \"http://eng.micello.com/apogee/resources/contract.png\";\n\nthis.initialized = false;\nthis.selectedFileEntry = null;\n\nthis.selectedCell = null;\nthis.availableCell = null;\n\nthis.onSaveClicked = function() {\n    if(!this.selectedFileEntry) {\n        alert(\"No file entry is selected!\");\n        return;\n    }\n    \n    var selectedEntryData = {};\n    selectedEntryData.fileEntry = this.selectedFileEntry;\n    selectedEntryData.filterText = this.freeTextFilterEntry.value;\n    mode.getMessenger().dataUpdate(\"selectedEntryInfo\",selectedEntryData);\n    \n    //deselect entry and disable save\n    this.saveButton.disabled = true;\n}\n\nthis.onClearClicked = function() {\n    mode.getMessenger().dataUpdate(\"selectedEntryInfo\",null);\n}\n\n\n//=====================================\n// Load Methods\n//=====================================\n\nthis.loadEntries = function() {\n    \n    //clear the recorded selected entry\n    this.selectedFileEntry = null;\n    \n    //populate the display cell\n    apogeeapp.ui.removeAllChildren(this.availableCell);\n    \n    //otherwise, load the file entries\n    var addFileEntry = (fileEntry) => {\n        var cellElement = this.createCell(fileEntry);\n        this.availableCell.appendChild(cellElement);\n        \n        //make sure the cached entry is selected\n        if((this.data.selectedEntryInfo)&&(this.data.selectedEntryInfo.fileEntry)) {\n            if(this.data.selectedEntryInfo.fileEntry.Id == fileEntry.Id) {\n                this.clickCell(fileEntry,cellElement);\n            }\n        }\n    }\n    \n    var filterText = this.freeTextFilterEntry.value;\n    var filterRegEx = new RegExp(filterText,\"i\");\n    var freeTextFilter = fileEntry => {\n        if(filterText.length > 0) {\n            return (fileEntry.Fields.entry_name.search(filterRegEx) >= 0);\n        }\n        else {\n            return true;\n        }\n    }\n    \n\n    this.data.fileEntries.filter(freeTextFilter).sort(fileEntrySorter).forEach(addFileEntry);\n}\n\nfunction fileEntrySorter(fileEntry1,fileEntry2) {\n    return fileEntry1.Fields.entry_name.localeCompare(fileEntry2.Fields.entry_name);\n}\n\nthis.createCell = function(fileEntry) {\n    \n    var name = fileEntry.Fields.entry_name;\n    \n    //=============================\n    //construction of list element\n    //=============================\n    var div = document.createElement(\"div\");\n    div.className = \"selectFileEntry_listEntry\";\n    \n    //click interaction\n    div.onclick = (event) => this.clickCell(fileEntry,div);\n    \n    //content\n    var minMaxButton = document.createElement(\"img\");\n    minMaxButton.src = EXPAND_IMAGE_URL;\n    div.appendChild(minMaxButton);\n    \n    div.appendChild(document.createTextNode(\" \"));\n    var textSpan = document.createElement(\"span\");\n    textSpan.className = \"selectFileEntry_entryLabel\";\n    textSpan.appendChild(document.createTextNode(name));\n    div.appendChild(textSpan);\n    \n    var entryContentDiv = document.createElement(\"div\");\n    entryContentDiv.className = \"selectFileEntry_entryDataClosed\";\n    div.appendChild(entryContentDiv);\n    \n    entryContentDiv.appendChild(document.createTextNode(\"Entry Data: \"));\n    entryContentDiv.appendChild(document.createElement(\"br\"));\n    \n    var preformatDisplay = document.createElement(\"pre\");\n    preformatDisplay.className = \"selectFileEntry_preformatText\";\n    var temp = JSON.stringify(fileEntry.Fields.entry_data,null,\"  \");\n    temp = temp.replace(/</g,\"&lt;\");\n    temp = temp.replace(/>/g,\"&gt;\");\n    preformatDisplay.innerHTML = temp;\n    entryContentDiv.appendChild(preformatDisplay);\n    \n    //content interaction\n    minMaxButton.onclick = () => {\n        if(minMaxButton.src == EXPAND_IMAGE_URL) {\n            minMaxButton.src = CONTRACT_IMAGE_URL;\n            entryContentDiv.className = \"selectFileEntry_entryDataOpened\";\n        }\n        else {\n            minMaxButton.src = EXPAND_IMAGE_URL;\n            entryContentDiv.className = \"selectFileEntry_entryDataClosed\";\n        }\n    }\n    \n    return div;\n}\n\nthis.clickCell = function(fileEntry,listElement) {\n    \n    if(this.selectedListElement) {\n        this.selectedListElement.className = \"selectFileEntry_listEntryElement\";\n    }\n    \n    this.selectedFileEntry = fileEntry;\n    this.selectedListElement = listElement;\n    if(this.selectedListElement) {\n        this.selectedListElement.className = \"selectFileEntry_listEntryElement_selected\";\n    }\n    \n    //make sure commit button is enabled\n    if(!this.saveButton.disable) this.saveButton.disabled = false;\n}\n\nthis.clearClickedCell = function() {\n    if(this.selectedListElement) {\n        this.selectedListElement.className = \"selectFileEntry_listEntryElement\";\n        this.selectedListElement = null;\n    }\n}\n\n\n/** This creates a dom element for the filter select */\nthis.createFreeTextFilterElement = function(filtersCell) {\n    var container = document.createElement(\"div\");\n    container.className = \"selectFileEntry_filterContainerClass\";\n    \n    filtersCell.appendChild(document.createTextNode(\"Free text\"));\n    \n    this.freeTextFilterEntry = document.createElement(\"input\");\n    this.freeTextFilterEntry.type = \"text\";\n    this.freeTextFilterEntry.oninput = () => this.onFilterKeyTyped();\n    filtersCell.appendChild(this.freeTextFilterEntry);\n}\n\nconst TEXT_FILTER_DELAY = 250;\n\n//text filter methods\nthis.onFilterKeyTyped = function() {\n    if(this.filterTimer) {\n        clearTimeout(this.filterTimer);\n        this.filterTimer = null;\n    }\n    \n    this.filterTimer = setTimeout(() => this.updateTextFilter(),TEXT_FILTER_DELAY);\n}\n\nthis.updateTextFilter = function() {\n    //clear timer\n    this.filterTimer = null;\n    \n    //reload the entries\n    this.loadEntries();\n}\n","onLoad":"if(!this.initialized) {\n    this.selectedTable = document.getElementById(\"selectFileEntry_selectedTable\");\n    this.selectedCells = null;\n    this.availableCell = document.getElementById(\"selectFileEntry_availableCell\");\n    \n    this.filterCell = document.getElementById(\"selectFileEntry_filterCell\");\n    this.createFreeTextFilterElement(this.filterCell);\n    \n    this.saveButton = document.getElementById(\"selectFileEntry_saveButton\");\n    this.clearButton = document.getElementById(\"selectFileEntry_clearButton\");\n    \n    var instance = this;\n    \n    this.saveButton.onclick = () => instance.onSaveClicked();\n    this.clearButton.onclick = () => instance.onClearClicked();\n    \n    //finished\n    this.initialized = true;\n    \n    if(this.cachedData !== undefined) {\n        this.setData(this.cachedData);\n        this.cachedData = undefined;\n    }\n}"},"destroyOnInactive":false},"compiledEntry":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":646,"height":612},"posInfo":{"x":1073,"y":289},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"fileEntryInfoGenerators":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":1052,"y":33}},"treeState":1,"children":{"typeEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":816,"height":234},"posInfo":{"x":503,"y":75},"state":-1,"viewType":"Code"}},"addressKey":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":737,"height":612},"posInfo":{"x":479,"y":364},"state":-1,"viewType":"Code"}},"childPropKey":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":902,"height":883},"posInfo":{"x":494,"y":162},"state":-1,"viewType":"Code"}},"childPropValue":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":905,"height":714},"posInfo":{"x":491,"y":122},"state":-1,"viewType":"Code"}},"themeEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":551,"height":939},"posInfo":{"x":477,"y":455},"state":-1,"viewType":"Code"}},"inputColorEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":866,"height":694},"posInfo":{"x":487,"y":207},"state":-1,"viewType":"Code"}},"stringsEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":970,"height":1010},"posInfo":{"x":462,"y":411},"state":-1,"viewType":"Code"}},"propertyRulesFilter":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":805,"height":349},"posInfo":{"x":993,"y":127},"state":-1,"viewType":"Code"}},"PROPERTY_RULES_TYPE_ID":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":381,"height":300},"posInfo":{"x":992,"y":26},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"getSectionFilter":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":634,"height":372},"posInfo":{"x":995,"y":86},"state":-1,"viewType":"Code"}},"geomThemeRulesEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":974,"height":905},"posInfo":{"x":81,"y":349},"state":-1,"viewType":"Code"}},"entityThemeRulesEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":86,"y":252},"state":-1,"viewType":"Code"}},"addressThemeRulesEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":75,"y":302},"state":-1,"viewType":"Code"}}}},"selectedEntryInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":484,"height":468},"posInfo":{"x":1075,"y":150},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"selectedFileEntry":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":582,"height":300},"posInfo":{"x":1074,"y":243},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"fileEntryInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":799,"height":411},"posInfo":{"x":1071,"y":197},"state":-1,"viewType":"Data"},"dataView":"Colorized"}}},"selectEditType":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":60,"y":79}},"tabOpen":true,"treeState":1,"children":{"selectEditType":{"type":"apogeeapp.app.FormDataComponent","windowState":{"sizeInfo":{"width":446,"height":344},"posInfo":{"x":24,"y":42},"state":0,"viewType":"Form"}}}},"getEditType":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":805,"height":400},"posInfo":{"x":664,"y":79},"state":0,"viewType":"Code"}},"getBaseEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":803,"y":434},"state":0,"viewType":"Code"}},"setContent":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":181,"y":161}},"tabOpen":true,"treeState":1,"children":{"layoutGenerators":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":1040,"y":47}},"treeState":1,"children":{"typeEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":1239,"height":850},"posInfo":{"x":10,"y":19},"state":-1,"viewType":"Code"}},"addressKey":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":737,"height":612},"posInfo":{"x":8,"y":58},"state":-1,"viewType":"Code"}},"childPropKey":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":1386,"height":707},"posInfo":{"x":8,"y":95},"state":-1,"viewType":"Code"}},"childPropValue":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":905,"height":714},"posInfo":{"x":8,"y":131},"state":-1,"viewType":"Code"}},"themeRulesEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":1155,"height":805},"posInfo":{"x":581,"y":179},"state":0,"viewType":"Code"}},"themeEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":1279,"height":780},"posInfo":{"x":6,"y":285},"state":-1,"viewType":"Code"}},"inputColorEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":866,"height":694},"posInfo":{"x":4,"y":364},"state":-1,"viewType":"Code"}},"stringsEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":970,"height":788},"posInfo":{"x":6,"y":322},"state":-1,"viewType":"Code"}},"getPathLayoutEntries":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":1043,"height":994},"posInfo":{"x":564,"y":39},"state":-1,"viewType":"Code"}},"geomThemeRulesEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":744,"height":400},"posInfo":{"x":8,"y":168},"state":-1,"viewType":"Code"}},"entityThemeRulesEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":8,"y":210},"state":-1,"viewType":"Code"}},"addressThemeRulesEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":1004,"height":737},"posInfo":{"x":7,"y":246},"state":-1,"viewType":"Code"}}}},"fieldsGenerators":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":1196,"y":48}},"tabOpen":true,"treeState":-1,"children":{"typeEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":721,"height":656},"posInfo":{"x":74,"y":34},"state":-1,"viewType":"Code"}},"addressKey":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":834,"height":597},"posInfo":{"x":75,"y":72},"state":-1,"viewType":"Code"}},"childPropKey":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":838,"height":944},"posInfo":{"x":76,"y":109},"state":-1,"viewType":"Code"}},"childPropValue":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":746,"height":740},"posInfo":{"x":76,"y":146},"state":-1,"viewType":"Code"}},"stringsEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":942,"height":688},"posInfo":{"x":78,"y":291},"state":-1,"viewType":"Code"}},"themeEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":1130,"height":755},"posInfo":{"x":78,"y":249},"state":-1,"viewType":"Code"}},"themeRulesEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":877,"height":906},"posInfo":{"x":76,"y":199},"state":0,"viewType":"Code"}},"inputColorEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":811,"height":732},"posInfo":{"x":76,"y":331},"state":-1,"viewType":"Code"}},"getPathString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":624,"height":400},"posInfo":{"x":682,"y":66},"state":-1,"viewType":"Code"}},"geomThemeRulesEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":125,"y":478},"state":-1,"viewType":"Code"}},"entityThemeRulesEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":130,"y":518},"state":0,"viewType":"Code"}},"addressThemeRulesEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":942,"height":730},"posInfo":{"x":133,"y":559},"state":-1,"viewType":"Code"}},"getInputString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":720,"height":400},"posInfo":{"x":1045,"y":18},"state":-1,"viewType":"Notes"}},"getInputBoolean":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":734,"height":558},"posInfo":{"x":1047,"y":139},"state":-1,"viewType":"Notes"}},"getInputStringList":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":883,"height":506},"posInfo":{"x":1049,"y":182},"state":-1,"viewType":"Code"}},"testIntRange":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":1149,"y":318},"state":-1,"viewType":"Code"}},"testStringIsInEnum":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":1152,"y":275},"state":-1,"viewType":"Code"}},"getInputFloatFromString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":694,"height":533},"posInfo":{"x":1045,"y":99},"state":-1,"viewType":"Notes"}},"getInputIntFromString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":700,"height":571},"posInfo":{"x":1044,"y":58},"state":-1,"viewType":"Notes"}},"createPathInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":793,"height":842},"posInfo":{"x":682,"y":24},"state":-1,"viewType":"Code"}}}},"createdFieldMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":678,"height":299},"posInfo":{"x":769,"y":139},"state":0,"viewType":"Data"},"dataView":"Colorized"},"relatedEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":695,"height":358},"posInfo":{"x":768,"y":493},"state":0,"viewType":"Data"},"dataView":"Colorized"},"selectEntryContent":{"type":"apogeeapp.app.FormDataComponent","windowState":{"sizeInfo":{"width":708,"height":711},"posInfo":{"x":30,"y":57},"state":0,"viewType":"Form"}}}},"getCompiledBaseEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":481,"y":563},"state":0,"viewType":"Code"}},"getCreatedFieldMap":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":24,"y":480},"state":0,"viewType":"Code"}}}},"micemetarDataAccess":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":151,"y":38}},"tabOpen":true,"treeState":-1,"children":{"createRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":560,"height":321},"posInfo":{"x":33,"y":368},"state":-1,"viewType":"Code"}},"recordsToCreateInstructions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":834,"height":391},"posInfo":{"x":30,"y":472},"state":-1,"viewType":"Code"}},"createCommitBody":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":568,"height":400},"posInfo":{"x":629,"y":225},"state":-1,"viewType":"Code"}},"createRequestOptions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":523,"height":254},"posInfo":{"x":822,"y":379},"state":-1,"viewType":"Code"}},"host":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":353,"height":71},"posInfo":{"x":16,"y":6},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"commitUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":433,"height":107},"posInfo":{"x":14,"y":98},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"requestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":450,"height":68},"posInfo":{"x":14,"y":58},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"dataSetInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":882,"height":611},"posInfo":{"x":317,"y":144},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"createUpdateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":1002,"height":655},"posInfo":{"x":37,"y":247},"state":-1,"viewType":"Code"}},"createCreateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":994,"height":643},"posInfo":{"x":39,"y":209},"state":-1,"viewType":"Code"}},"getFieldErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":512,"height":68},"posInfo":{"x":761,"y":616},"state":-1,"viewType":"Code"}},"getRecordErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":81},"posInfo":{"x":762,"y":664},"state":-1,"viewType":"Code"}},"createDeleteInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":678,"height":540},"posInfo":{"x":36,"y":289},"state":-1,"viewType":"Code"}},"getRecordInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":480,"height":400},"posInfo":{"x":818,"y":427},"state":-1,"viewType":"Code"}},"combinedEntriesToInstructionList":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":721,"height":524},"posInfo":{"x":31,"y":516},"state":-1,"viewType":"Private"}},"getCommitPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":569,"height":109},"posInfo":{"x":316,"y":26},"state":-1,"viewType":"Code"}},"getRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":546,"height":89},"posInfo":{"x":315,"y":67},"state":-1,"viewType":"Code"}},"customRequestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":17,"y":142},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"getCustomRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":668,"height":88},"posInfo":{"x":317,"y":104},"state":-1,"viewType":"Code"}}}},"settings":{"type":"apogeeapp.app.FormDataComponent","windowState":{"sizeInfo":{"width":793,"height":410},"posInfo":{"x":28,"y":141},"state":0,"viewType":"Form"}}}},"activeTabMember":"Model.tasks.setContent"}