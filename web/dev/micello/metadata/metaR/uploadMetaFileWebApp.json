{"fileType":"apogee app js workspace","version":"0.40","references":[],"workspace":{"fileType":"apogee workspace","version":0.2,"name":"uploadMetaFileWebApp","data":{"name":"Model","type":"apogee.Folder","children":{"tasks":{"name":"tasks","type":"apogee.Folder","children":{"loadContext":{"name":"loadContext","type":"apogee.Folder","children":{"selectContext":{"name":"selectContext","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"//------------\n//create layout\n//------------\nvar layout = [];\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Select Metafile Context\";\nlayout.push(entry);\n\n//section\nvar DEFAULT_FILE_SCOPE = \"customer\";\nentry = {};\nentry.type = \"dropdown\";\nentry.label = \"File Scope: \";\nentry.key = \"fileScope\";\nentry.entries = FILE_SCOPE_NAMES;\nentry.value = DEFAULT_FILE_SCOPE;\nlayout.push(entry);\n\n//panels\n\n//==================\n//general scope panel\n//==================\nchildFormData = [];\n\nentry = {};\nentry.type = \"panel\";\nentry.formData = childFormData;\nentry.key = \"generalPanel\";\nentry.selector = {\n    parentKey: \"fileScope\",\n    parentValue: \"general\"\n}\nlayout.push(entry);\n\n//==================\n//customer scope panel\n//==================\nchildFormData = [];\n\n//label type\nentry = {};\nentry.type = \"dropdown\";\nentry.label = \"Customer Name: \";\nentry.entries = _getCustomerList();\nentry.key = \"customerAuth\";\nchildFormData.push(entry);\n\nentry = {};\nentry.type = \"panel\";\nentry.formData = childFormData;\nentry.key = \"customerPanel\";\nentry.selector = {\n    parentKey: \"fileScope\",\n    parentValue: \"customer\"\n}\nlayout.push(entry);\n\n\n//==================\n//cid scope panel\n//==================\nchildFormData = [];\n\n//Font\nentry = {};\nentry.type = \"textField\";\nentry.label = \"CID: \";\nentry.key = \"cid\";\nchildFormData.push(entry);\n\nentry = {};\nentry.type = \"panel\";\nentry.formData = childFormData;\nentry.key = \"cidPanel\";\nentry.selector = {\n    parentKey: \"fileScope\",\n    parentValue: \"cid\"\n}\nlayout.push(entry);\n\nreturn {\"layout\":layout};\n","supplementalCode":"const FILE_SCOPE_NAMES = [[\"CID\",\"cid\"],[\"Customer\",\"customer\"],[\"General\",\"general\"]];\n\nfunction _getCustomerList() {\n    return commonData.customerInfo.map(entry => [entry.customerName,entry.authString]);\n}","description":""}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":"","description":""}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":"","description":""}}},"childrenNotWriteable":true},"getContext":{"name":"getContext","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"if((selectContext)&&(selectContext.data)) {\n    switch(selectContext.data.fileScope) {\n        case \"general\":\n            return commonData.GLOBAL_CONTEXT;\n            \n        case \"customer\":\n            if(selectContext.data.customerPanel) {\n                return selectContext.data.customerPanel.customerAuth;\n            }\n            break;\n            \n        case \"cid\":\n            if(selectContext.data.cidPanel) {\n                var cid = parseInt(selectContext.data.cidPanel.cid);\n                if((cid)&&(cid > 0)) {\n                    return commonData.CID_CONTEXT_PREFIX + cid\n                }\n                else {\n                    throw new Error(\"Invalid CID!\");\n                }\n            }\n            break;\n    }\n}\n\n//if we get here there is no recorded value\nreturn null;","supplementalCode":"","description":""}}}},"fileReconstruct":{"name":"fileReconstruct","type":"apogee.Folder","children":{"reconstruct":{"name":"reconstruct","type":"apogee.Folder","children":{"themeMap":{"name":"themeMap","type":"apogee.FunctionTable","updateData":{"argList":["baseFile"],"functionBody":"var outFile = {};\noutFile.ft = \"ThemeMap\";\noutFile.nm = baseFile.nm;\n\nfor(var sectionName in baseFile.data) {\n    var inSectionEntry = baseFile.data[sectionName];\n    var outSectionEntry = [];\n    outFile[sectionName] = outSectionEntry;\n    \n    for(var i = 0; i < inSectionEntry.length; i++) {\n        var inPriorityEntry = inSectionEntry[i];\n        \n        var outPriorityEntry = {};\n        outPriorityEntry.priority = inPriorityEntry.order;\n        outPriorityEntry.ks = [];\n        processInputEntries(inPriorityEntry.entries,outPriorityEntry);\n        \n        outSectionEntry.push(outPriorityEntry);\n    }\n    \n    //sort the priorities\n    var prioritySorter = (entry1,entry2) => (entry1.priority - entry2.priority);\n    outSectionEntry.sort(prioritySorter);\n}\n\nreturn outFile;","supplementalCode":"const propTypeToKeyTag = {\n    \"address\":\"ak\",\n    \"entity\":\"ek\",\n    \"geometry\":\"gk\"\n};\n\n//read all in entries and add them as out entries to the output priority section\nfunction processInputEntries(inEntryMap,outPriorityEntry) {\n    for(var tag in inEntryMap) {\n        var inEntry = inEntryMap[tag];\n        processInEntry(inEntry,outPriorityEntry)\n    }\n    return outEntryList;\n}\n\n//add this in entry to the output priority section\nfunction processInEntry(inEntry,outPriorityEntry) {\n    //only process if there is a payload - there should be\n    if(inEntry.payload) {\n        var pathType = inEntry.propType;\n        var path = inEntry.legacyPath;\n        var keyIndex = path.length-1;\n        var rootEntry = outPriorityEntry;\n        //read the proper key or value entry from the path\n        var resultEntry = getEntry(pathType,path,keyIndex,rootEntry);\n        addPayload(resultEntry,inEntry.payload);\n    }\n}\n\n//copies data from the payload to the entry\nfunction addPayload(entry,payload) {\n    for(var tag in payload) {\n        entry[tag] = payload[tag];\n    }\n}\n\n//This function looks up the entry as the given index of the path\nfunction getEntry(pathType,path,keyIndex,rootEntry) {\n    if(path.length === 0) {\n        //the root entry is the value entry\n        return rootEntry;\n    }   \n    else {\n        var parentValueEntry;\n        \n        //get the parent value entry\n        if(keyIndex === 0) {\n            parentValueEntry = rootEntry;\n        }\n        else {\n            var parentIndex = keyIndex - 1;\n            //we require all entries excpet that last is a key-value entry\n            if(path[parentIndex].length !== 2) throw new Error(\"Error: all path entries except the last must be a full key-value entry! path: \" + path);\n            \n            parentValueEntry = getEntry(pathType,path,parentIndex,rootEntry);\n        }\n        \n        //get the key or value element at this entry\n        var currentPathElement = path[keyIndex];\n        var key = currentPathElement[0];\n        var keyEntry = getKeyEntryFromValueEntry(parentValueEntry,pathType,key);\n        if(currentPathElement.length === 1) {\n            //this is a key entry\n            return keyEntry;\n        }\n        else {\n            //this is a value entry\n            var value = currentPathElement[1];\n            return getValueEntryFromKeyEntry(keyEntry,value);\n        }\n    }\n}\n\nfunction getValueEntryFromKeyEntry(keyEntry,value) {\n    //get the value map from the key entry\n    var valueMap = keyEntry.v;\n    if(valueMap === undefined) {\n       valueMap = {};\n       keyEntry.v = valueMap;\n    }\n    //lookup up the value entry\n    valueEntry = valueMap[value];\n    \n    if(valueEntry === undefined) {\n        //construct a new one if it doesn't exist\n        valueEntry = {};\n        valueMap[value] = valueEntry;\n    }\n    return valueEntry;\n}\n\nfunction getKeyEntryFromValueEntry(valueEntry,propType,key) {\n    //key varies by prop type: ak/ek/gk\n    var keyTag = propTypeToKeyTag[propType];\n    \n    //get the key list from the value entry\n    var keyList = valueEntry.ks;\n    if(keyList === undefined) {\n        keyList = [];\n        valueEntry.ks = keyList;\n    }\n    //check if the key entry already exists\n    for(var i = 0; i < keyList.length; i++) {\n        var keyEntry = keyList[i];\n        if(keyEntry[keyTag] == key) {\n            return keyEntry;\n        }\n    }\n    //make a new key entry\n    var keyEntry = {};\n    keyEntry[keyTag] = key;\n    keyList.push(keyEntry);\n    return keyEntry;\n}","description":""}},"inputColors":{"name":"inputColors","type":"apogee.FunctionTable","updateData":{"argList":["baseFile"],"functionBody":"var outFile = {};\n//needed to remove this for leacy file!\n//outFile.nm = baseFile.nm;\n\nvar addToOutput = inEntry => {\n    var outEntry = {};\n    outEntry.props = inEntry.legacyProps;\n    if(inEntry.doLinearArea !== undefined) {\n        outEntry.doLinearArea = inEntry.doLinearArea;\n    }\n    outFile[inEntry.color] = outEntry;\n}\n\nfor(var key in baseFile.data.inputMap) {\n    var entry = baseFile.data.inputMap[key];\n    addToOutput(entry);\n}\n\nreturn outFile;","supplementalCode":"","description":""}},"strings":{"name":"strings","type":"apogee.FunctionTable","updateData":{"argList":["baseFile"],"functionBody":"var outFile = {};\noutFile.nm = baseFile.nm;\n\nvar translations = {};\noutFile.translations = translations;\n\nfor(var lang in baseFile.data) {\n    var section = baseFile.data[lang];\n    \n    for(var key in section) {\n        var entry = section[key];\n        var translation = entry.trans;\n        addTranslation(key,lang,translation,translations);\n    }\n}\n\nreturn outFile;","supplementalCode":"function addTranslation(key,lang,translation,translations) {\n    var entry = translations[key];\n    if(entry === undefined) {\n        entry = {};\n        translations[key] = entry;\n    }\n    entry[lang] = translation;\n}","description":""}},"theme":{"name":"theme","type":"apogee.FunctionTable","updateData":{"argList":["baseFile"],"functionBody":"var outFile = {};\noutFile.nm = baseFile.nm;\noutFile.ft = \"thm5\";\n\nfor(var sectionName in baseFile.data) {\n    var newSectionName = SECTION_NAME_MAP[sectionName];\n    outFile[newSectionName] = baseFile.data[sectionName];\n}\n\nreturn outFile;","supplementalCode":"const SECTION_NAME_MAP = {\n    \"style\": \"s\",\n    \"icon\": \"i\",\n    \"labelStyle\": \"l\",\n    \"marker\": \"m\"\n}","description":""}},"presetOverride":{"name":"presetOverride","type":"apogee.FunctionTable","updateData":{"argList":["baseFile"],"functionBody":"var outFile = {};\n\nvar outEntriesSection = [];\nvar namedKeysSection = [];\n\n//identify the pattern based on current allowed types (for preset overrides)\nfor(var sectionName in baseFile.data) {\n    var section = baseFile.data[sectionName];\n    for(var entryName in section) {\n        var inEntry = section[entryName];\n        if(sectionName != \"named_entries\") {\n            var outEntry = createTreeOutEntry(inEntry,sectionName);\n            if(outEntry) {\n                outEntriesSection.push(outEntry);\n            }\n        }\n        else {\n            var outEntryList = createNamedOutEntryList(inEntry);\n            if(outEntryList) {\n                namedKeysSection = namedKeysSection.concat(outEntryList);\n            }\n        }\n    }\n}\n\nif(outEntriesSection.length > 0) {\n    outFile.entries = outEntriesSection;\n}\nif(namedKeysSection.length > 0) {\n    outFile.named_keys = namedKeysSection;\n}\n\nreturn outFile;","supplementalCode":"function createTreeOutEntry(inEntry,section) {\n    if(inEntry.extends !== undefined) {\n        return createExtendsEntry(inEntry,section);\n    }\n    else if(inEntry.modifies !== undefined) {\n        return createModifiesEntry(inEntry,section);\n    }\n    else {\n        throw new Error(\"Preset override supports only entry action extends and modifies\");\n    }\n}\n\nfunction createExtendsEntry(inEntry,section) {\n    if(inEntry.properties.length > 1) {\n        throw new Error(\"Preset override supports only extend entries with no new properties\");\n    }\n    \n    var firstProp = inEntry.properties[0];\n    \n    if((firstProp.action != \"modifies\")&&(firstProp.key != \"featureType\")) {\n        throw new Error(\"Preset override supports only extend entries for feature types\");\n    }\n    \n    var legacyKey = firstProp.legacyKey;\n    var legacyValue = firstProp.legacyValue;\n    \n    \n    //this is a simple new key-value\n    var outEntry = {};\n    outEntry.type = \"value\";\n    outEntry.tree = section;\n    outEntry.path = [legacyKey];\n    outEntry.value = legacyValue;\n    outEntry.entry = {};\n    \n    return outEntry;\n}\n\nfunction createModifiesEntry(inEntry,section) {\n    //lookup base entry\n    var parentName = inEntry.modifies;\n    \n    var fileTypeId = commonData.getFileTypeId(\"propertyRules\");\n    var parentFileEntry =  getFileEntryByName(fileTypeId,section,parentName);\n    if(!parentFileEntry) {\n        throw new Error(\"Parent not found: \" + section + \":\" + parentName);\n    }\n    parentEntryData = parentFileEntry.Fields.entry_data;\n    \n    //sanity check - because we are implmenting a subset of valid cases here\n    var parentFeatureTypeProp = parentEntryData.properties[0];\n    if(parentFeatureTypeProp.key != \"featureType\") {\n        throw new Error(\"Preset override failed on reading base entry for modifies: \" + parentName);\n    }\n    \n    var parentLegacyKey = parentFeatureTypeProp.legacyKey;\n    var parentLegacyValue = parentFeatureTypeProp.legacyValue;\n    \n    //read the inEntry\n    if(inEntry.properties.length > 1) {\n        throw new Error(\"Preset override reconstruct only supports single property entries! Entry value = \" + inEntry.name);\n    }\n    var childProp = inEntry.properties[0];\n    \n    if(childProp.action == \"modifies\") {\n        return createChildValueEntry(section,parentLegacyKey,parentLegacyValue,childProp);\n    }\n    else if(childProp.action === undefined) {\n        return createChildKeyEntry(section,parentLegacyKey,parentLegacyValue,childProp);\n    }\n    else {\n        throw new Error(\"Unsupported property action in modifies entry: \" + childProp.action);\n    }\n}\n\nfunction createChildKeyEntry(section,parentLegacyKey,parentLegacyValue,childProp) {\n    \n    var newData = {};\n    newData.k = childProp.key;\n    newData.type = childProp.type;\n        \n    switch(childProp.type) {\n        case \"enum\":\n            //for enum, update the values format\n            var newValues = {};\n            childProp.values.forEach((element) => {newValues[element.value] = {}});\n            newData.values = newValues;\n            break;   \n            \n        case \"boolean\":\n            break;\n            \n        case \"text\":\n            if(childProp.has_lang) {\n                newData.has_lang = true;\n            }\n            if(childProp.is_array) {\n                newData.is_array = true;\n            }\n            break;\n            \n        case \"fixed\":\n            if(childProp.fixed_value) {\n                newData.fixed_value = childProp.fixed_value;\n            }\n            break;\n            \n        default:\n             throw new Error(\"Preset override reconstruct does not support child key type: \" + childProp.key);\n    }\n    \n    \n    \n    var outEntry = {};\n    outEntry.type = \"key\";\n    outEntry.tree = section;\n    outEntry.path = [parentLegacyKey,parentLegacyValue];\n    outEntry.value = legacyValue;\n    outEntry.entry = newData;\n    \n    return outEntry;\n}\n\nfunction createChildValueEntry(section,parentLegacyKey,parentLegacyValue,childProp) {\n    \n    var childKey = childProp.key;\n    \n    if(childProp.values.length > 1) {\n        throw new Error(\"Preset override reconstruct supports only child value entry with a single added value: childProp key = \" + childKey);\n    }\n    \n    var childValue = childProp.values[0].value;\n    \n    var outEntry = {};\n    outEntry.type = \"value\";\n    outEntry.tree = section;\n    outEntry.path = [parentLegacyKey,parentLegacyValue,childKey];\n    outEntry.value = childValue;\n    outEntry.entry = {};\n    \n    return outEntry;\n}\n\nfunction createNamedOutEntryList(inEntry) {\n    //we support a very restricted set in this conversion - address key additions\n    if(!inEntry.modifies.startsWith(\"address keys\")) {\n        throw new Error(\"Unsupported named entry in preset overrides conversion: \" + inEntry.modifies);\n    }\n    \n    if(inEntry.properties.length !== 1) {\n        throw new Error(\"Preset override resonctruct supports only a single property!\");\n    }\n    var addressProp = inEntry.properties[0];\n    if(addressProp.key != \"address keys\") {\n        throw new Error(\"Unsupported named entry key in preset overrides conversion: \" + addressProp.key);\n    }\n    if(addressProp.action != \"modifies\") {\n        throw new Error(\"Unsupported named key action in preset overrides conversion: \" + addressProp.action);\n    }\n    \n    var createNewEntry = (listEntry) => ({\"name\": \"address keys\",\"value\": listEntry.value,\"entry\": {}});\n    var outEntryList = addressProp.values.map(createNewEntry);\n    \n    return outEntryList;\n}\n    ","description":""}},"presets":{"name":"presets","type":"apogee.FolderFunction","argList":["baseFile"],"returnValue":"newFile","internalFolder":{"name":"root","type":"apogee.Folder","children":{"newFile":{"name":"newFile","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!firstStepFile) return null;\n\nvar output = {};\n\noutput.property_trees = {};\nvar inPropertyTrees = firstStepFile.property_trees;\n\nfor(var treeName in inPropertyTrees) {\n    var treeEntry = inPropertyTrees[treeName];\n\n    var outTreeEntry = convertKeyList(treeEntry);\n    output.property_trees[treeName] = outTreeEntry;\n}\n\noutput.named_groups = {};\nvar inNamedGroups = firstStepFile.named_groups;\nfor(var groupName in inNamedGroups) {\n    var group = inNamedGroups[groupName];\n    \n    var outGroup = convertKeyList(group);\n    output.named_groups[groupName] = outGroup;\n}\n\noutput.named_keys = {};\nvar inNamedKeys = firstStepFile.named_keys;\nfor(var groupName in inNamedKeys) {\n    var group = inNamedKeys[groupName];\n    \n    var outGroup = convertKeyList(group);\n    //named key is just the first element - array not used\n    output.named_keys[groupName] = outGroup[0];\n}\n\nreturn output;","supplementalCode":"\nfunction convertKeyList(inList) {\n    var outList = [];\n    for(var i = 0; i < inList.length; i++) {\n        var inEntry = inList[i];\n        outList.push(getOutEntry(inEntry));\n    }\n    return outList;\n}\n\nfunction convertValueList(inList) {\n    var outMap = {};\n    for(var i = 0; i < inList.length; i++) {\n        var inEntry = inList[i];\n        var tag = inEntry.value;\n        outMap[tag] = getOutEntry(inEntry);\n    }\n    return outMap;\n}\n\nfunction getOutEntry(inEntry) {\n    var outEntry = {};\n    for(var inTag in inEntry) {\n        if(inTag == \"value\") continue;\n        \n        var outTag = tagRename[inTag];\n        if(outTag === undefined) outTag = inTag;\n        \n        var inValue = inEntry[inTag];\n        \n        var outValue;\n        if(inTag == \"values\") {\n            outValue = convertValueList(inValue);\n        }\n        else if(inTag == \"properties\") {\n            outValue = convertKeyList(inValue);\n        }\n        else if(inTag == \"keys\") {\n            outValue = convertKeyList(inValue);\n        }\n        else if(inTag == \"options\") {\n            outValue = convertKeyList(inValue);\n        }\n        else {\n            outValue = inValue;\n        }\n        \n        outEntry[outTag] = outValue;\n    }\n    \n    //special changes\n    if(outEntry.input == \"named_entry\") {\n        var entryName = outEntry.named_entry;\n        if(namedKeys[entryName]) {\n            //named key\n            outEntry.input = \"named_key\";\n            outEntry.name = entryName;\n            delete outEntry.named_entry;\n        }\n        else {\n            //named group\n            outEntry.input = \"named_group\";\n            outEntry.name = entryName;\n            delete outEntry.named_entry;\n        }\n    }\n    \n    if(outEntry.input == \"type\") {\n        outEntry.input = \"multikey\";\n        outEntry.k = typeRemap[outEntry.k];\n    }\n    \n    if(outEntry.action == \"delete\") {\n        outEntry.input = \"fixed\";\n        delete outEntry.action;\n    }\n    if(outEntry.action == \"modifies\") {\n        //this won't work in all cases - just the ones we have so far!!!\n        delete outEntry.action;\n    }\n\n    return outEntry;\n}","description":""}},"namedKeys":{"name":"namedKeys","type":"apogee.JsonTable","updateData":{"data":{"address keys":true,"lang":true},"description":""}},"typeRemap":{"name":"typeRemap","type":"apogee.JsonTable","updateData":{"data":{"featureType":"geom_type","linkType":"nav_class"},"description":""}},"tagRename":{"name":"tagRename","type":"apogee.JsonTable","updateData":{"data":{"key":"k","values":"v","properties":"ks","options":"ks","keys":"ks","meta":"prop","type":"input"},"description":""}},"baseFile":{"name":"baseFile","type":"apogee.JsonTable","updateData":{"data":"","description":"WE DON'T USE THIS!"}},"firstStepFile":{"name":"firstStepFile","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!baseFile) return null;\n\nvar output = {};\n\n//initialize, and load working data if applicable\nvar workingData = {}; \n\nfor(var sectionName in baseFile.data) {\n    var section = baseFile.data[sectionName];\n    for(var entryKey in section) {\n        var entryData = section[entryKey];\n        processEntry(output,entryData,sectionName,workingData);\n    }\n}\n\nreturn output;\n","supplementalCode":"function processEntry(output,entryData,sectionName,workingData) {\n    \n    var newProperties = updateProperties(entryData.properties);\n    \n    //----------------\n    //load the section\n    //----------------\n\n    if(sectionName == \"named_entries\") {\n        //handle generic entries\n        var entryName = entryData.name;\n        if(namedKeys[entryName]) {\n            //this is a named key\n            if(!output.named_keys) output.named_keys = {};\n            output.named_keys[entryName] = newProperties;\n        }\n        else {\n            //this is a named value\n            if(!output.named_groups) output.named_groups = {};\n            output.named_groups[entryName] = newProperties;\n        }\n        \n    }\n    else {\n        if(!output.property_trees) output.property_trees = {};\n        \n        if(entryData.extends) {\n            //modify the base section\n            baseEntry = getBaseEntry(output.property_trees[sectionName]);\n            updateBaseEntry(baseEntry,entryData);\n        }\n        else if(output.property_trees[sectionName] === undefined) {\n            //normal entry\n            output.property_trees[sectionName] = newProperties;\n        }\n        else {\n            //this shouldn't happen\n            throw new Error(\"Wasn't expecting another entry!\");\n        }\n    }\n\n}\n\nfunction updateProperties(properties) {\n    var newProperties = [];\n    \n    var propCopy = apogeeutil.jsonCopy(properties);\n    for(var i = 0; i < propCopy.length; i++) {\n        var property = propCopy[i];\n        \n        if(property.type == \"type\") {\n            //remap this!\n            var newKey = typeRemap[property.key];\n            \n            var newProp = {};\n            newProp.key = newKey;\n            newProp.type = \"multikey\";\n            \n            //this is a cludge - I should do this another way.\n            if(property.meta) newProp.meta = property.meta;\n            \n            newProp.required = true;\n            newProp.properties = [];\n            newProperties.push(newProp);\n            \n            //handle legacy data addition if applicable\n            if(property.legacyKey !== undefined) {\n                var modEntry = {};\n                modEntry.name = property.name;\n                modEntry.properties = [];\n                var propEntry = {};\n                propEntry.legacyKey = property.legacyKey;\n                propEntry.legacyValue = property.legacyValue;\n                propEntry.value = property.value;\n                propEntry.key = property.key;\n                propEntry.action = \"modifies\";\n                modEntry.properties.push(propEntry);\n                \n                updateBaseEntry(newProp,modEntry);\n            }\n        }\n        else if(property.type == \"conditional\") {\n            //this is ugly!!\n            \n            var previousProperty = newProperties[newProperties.length-1];\n            var negationProperty;\n            \n            //add the default case to the parent\n            var propToAdd = property.default;\n            if(propToAdd !== undefined) {\n                newProperties.push(propToAdd);\n                \n                negationProperty = {};\n                negationProperty.type = \"fixed\";\n                negationProperty.key = propToAdd.key;\n            }\n            \n            //go through and update the preious property\n            for(var caseValue in property.cases) {\n                var caseProperty = property.cases[caseValue];\n                insertValueIntoPreviousPropery(previousProperty,caseValue,caseProperty,negationProperty);\n            }\n           \n        \n        }\n        else {\n            //keep as is\n            newProperties.push(property);\n        }\n    }\n    \n    return newProperties;\n}\n\nfunction insertValueIntoPreviousPropery(previousProperty,caseValue,caseProperty,negationProperty) {\n    var isCaseValueEntry = (entry) => (entry.value == caseValue);\n    var entry = previousProperty.values.find(isCaseValueEntry);\n    \n    if(!entry) throw new Error(\"Entry not found: \" + caseValue);\n    \n    var keyList = entry.keys;\n    if(!keyList) {\n        keyList = [];\n        entry.keys = keyList; \n    }\n    \n    keyList.push(caseProperty);\n    if(negationProperty) {\n        keyList.push(negationProperty);\n    }\n}\n\nfunction updateBaseEntry(baseEntry,entryData) {\n    var extendingProp = entryData.properties[0];\n    if(!extendingProp.action) throw new Error(\"Expected a 'modifies' entry!\");\n    \n    var key = extendingProp.legacyKey;\n    var value = extendingProp.legacyValue;\n    \n    var childKeys = baseEntry.properties;\n    if(!childKeys) {\n        childKeys = [];\n        baseEntry.properties = childKeys;\n    }\n    \n    var keyEntry = getChildKeyEntry(childKeys,key);\n    \n    //create the value entry\n    var valueEntry = {};\n    valueEntry.value = value;\n    keyEntry.values.push(valueEntry);\n    \n    //add any child keys for the value\n    if(entryData.properties.length > 1) {\n        \n        var valueChildKeys = [];\n        valueEntry.properties = valueChildKeys;\n        for(var i = 1; i < entryData.properties.length; i++) {\n            var entry = entryData.properties[i];\n            valueChildKeys.push(entry);\n        }\n    }\n}\n\n\n//---------------------------------------------------\n// this is repeat code - wasn't sure how else to do it\nfunction addObjectForBaseEntry(baseEntry) {\n    if(baseEntry.legacyKey !== undefined) {\n        var childKeys = baseEntry.properties;\n        if(!childKeys) {\n            childKeys = [];\n            baseEntry.properties = childKeys;\n        }\n        \n        var keyEntry = getChildKeyEntry(childKeys,baseEntry.legacyKey);\n        \n        //create the value entry\n        var valueEntry = {};\n        valueEntry.value = baseEntry.legacyValue;\n        keyEntry.values.push(valueEntry);\n    }\n}\n//-----------------------------------------------------\n\nfunction getBaseEntry(section) {\n    return section[0];\n}\n\nfunction getChildKeyEntry(childKeys,key) {\n    var keyEntry;\n    for(var i = 0; i < childKeys.length; i++) {\n        var entry = childKeys[i];\n        if(entry.key == key) {\n            keyEntry = entry;\n        }\n    }\n    if(!keyEntry) {\n        keyEntry = {};\n        keyEntry.key = key;\n        keyEntry.input = \"enum\";\n        keyEntry.values = [];\n        childKeys.push(keyEntry);\n    }\n    \n    return keyEntry;\n}","description":""}}}}}}},"baseFile":{"name":"baseFile","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!selectFilePostProcess.metaFileDownloadValid) return null;\n\nif(!metaFileRecord) return null;\n\nvar output = {};\noutput.nm = metaFileRecord.Fields.name;\noutput.data = {};\n\nvar addToOutput = recipeEntry => processEntry(output,metaFileRecord,recipeEntry);\n\nrecipeEntries.map(addToOutput);\n\nreturn output;","supplementalCode":"function processEntry(outFile,metaFile,recipeEntry) {\n    \n    var fileEntry = getFileEntryById(recipeEntry.Fields.file_entry_id);\n    if(!fileEntry) {\n        throw new Error(\"File entry not found. id=\" + recipeEntry.Fields.file_entry_id);\n    }\n    \n    //get the section or subsection to which this should be added\n    var outSection;\n    var sectionName = fileEntry.Fields.entry_section;\n    var insertionInfo = recipeEntry.Fields.insertion_info;\n    if(insertionInfo != null) {\n        //allow for the different types of insertion info\n        var subsectionEntry;\n        if(insertionInfo.taggedEntry !== undefined) {\n            subsectionEntry = getTaggedSubsection(outFile,sectionName,insertionInfo.taggedEntry);\n        }\n        else if(insertionInfo.orderedEntry !== undefined) {\n            subsectionEntry = getOrderedSubsection(outFile,sectionName,insertionInfo.orderedEntry);\n        }\n        else {\n            throw new Error(\"unrecognized subsection type\");\n        }\n        outSection = subsectionEntry;\n    } \n    else if(sectionName) {\n        //standard case - no recipe entry insertion info\n        outSection = getMapSection(outFile,sectionName);\n    }\n    else {\n        //no section\n        outSection = outFile.data;\n    }\n\n\n    //insert the data\n    var key = fileEntry.Fields.entry_key;\n    var data = fileEntry.Fields.entry_data;\n    \n    if(outSection[key] !== undefined) {\n        throw new Error(\"Repeat key! section: \" + sectionName + \". Key: \" + key);\n    }\n\n    outSection[key] = data;\n}\n\nfunction getMapSection(outFile,sectionName) {\n    var sectionEntry = outFile.data[sectionName];\n    if(sectionEntry === undefined) {\n        sectionEntry = {};\n        outFile.data[sectionName] = sectionEntry;\n    }\n    return sectionEntry;\n}\n\nfunction getTaggedSubsection(outFile,sectionName,tag) {\n    var sectionEntry = getMapSection(outFile,sectionName);\n    var subsectionEntry = sectionEntry[tag];\n    if(subsectionEntry === undefined) {\n        subsectionEntry = {};\n        sectionEntry[tag] = subsectionEntry;\n    }\n    return subsectionEntry;\n}\n\nfunction getOrderedSubsection(outFile,sectionName,order) {\n    //read the section\n    var sectionEntry = outFile.data[sectionName];\n    if(!sectionEntry) {\n        sectionEntry = [];\n        outFile.data[sectionName] = sectionEntry;\n    }\n    \n    //get or add the subsection, from the proper ordered location\n    var subsectionEntry;\n    var index = 0;\n    if(sectionEntry.length > 0) {\n        do {\n            var entry = sectionEntry[index];\n            if(entry.order === order) {\n                subsectionEntry = entry;\n            }\n            index++;\n        } while((entry.order < order)&&(index < sectionEntry.length));\n    }\n    \n    if(!subsectionEntry) {\n        subsectionEntry = {};\n        subsectionEntry.order = order;\n        subsectionEntry.entries = {};\n        sectionEntry.splice(index,0,subsectionEntry);\n    }\n    return subsectionEntry.entries;\n}\n\n","description":"This is the default file constructed from the inputs, according to a standard formula. An alternate file may be desired, in which case it can be constructed based on this file."}},"outFileType":{"name":"outFileType","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(selectFilePostProcess.metaFileDownloadValid) {\n    return selectFilePostProcess.fileInfo.fileFormat;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":"This is the type of out file to create."}},"outputFile":{"name":"outputFile","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!selectFilePostProcess.metaFileDownloadValid) return null;\n\nif(outFileType == \"baseFile\") {\n    return baseFile;\n}\nelse if(outFileType) {\n    return reconstruct[outFileType](baseFile);\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"metaFileRecord":{"name":"metaFileRecord","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(selectFilePostProcess.metaFileRecord) {\n    return selectFilePostProcess.metaFileRecord;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"recipeEntries":{"name":"recipeEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(selectFilePostProcess.recipeEntries) {\n    return selectFilePostProcess.recipeEntries;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"getFileEntryById":{"name":"getFileEntryById","type":"apogee.FunctionTable","updateData":{"argList":["fileEntryId"],"functionBody":"var fileEntries = selectFilePostProcess.getFileEntries();\nif(!fileEntries) throw new Error(\"FileEntries not loaded!\");\n\nreturn fileEntries.find(entry => entry.Id == fileEntryId);\n","supplementalCode":"","description":""}},"getFileEntryByName":{"name":"getFileEntryByName","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeId","section","entryName"],"functionBody":"var fileEntries = selectFilePostProcess.getFileEntries();\nif(!fileEntries) throw new Error(\"FileEntries not loaded!\");\n\nreturn fileEntries.find( entry => ((entry.Fields.file_type_id == fileTypeId)&&\n    (entry.Fields.entry_section == section)&&\n    (entry.Fields.entry_name == entryName)));","supplementalCode":"","description":""}}}},"commonData":{"name":"commonData","type":"apogee.Folder","children":{"fileTypeList":{"name":"fileTypeList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var sessionKey = login.getSessionKey();\nif(!sessionKey) return null;\n\nvar fileTypeSearch = {};\nfileTypeSearch.search = \"file_type_list\";\n\nreturn micemetarDataAccess.getRequestPromise(fileTypeSearch,sessionKey);\n\n","supplementalCode":"","description":""}},"getFileTypeName":{"name":"getFileTypeName","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeId"],"functionBody":"return fileTypeIdToName[fileTypeId];","supplementalCode":"","description":""}},"fileInfo":{"name":"fileInfo","type":"apogee.Folder","children":{"mfsBaseUrl":{"name":"mfsBaseUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return settings.data.mfsBaseUrl;","supplementalCode":"","description":""}},"getUrlWithParams":{"name":"getUrlWithParams","type":"apogee.FunctionTable","updateData":{"argList":["fileInfo","name","identifier"],"functionBody":"var plainUrl = mfsBaseUrl + apogeeutil.formatString(fileInfo.urlFormat,name,identifier);\nvar fullUrl = login.appendQueryParams(plainUrl);\nreturn fullUrl;\n\n\n","supplementalCode":"","description":""}},"getUploadType":{"name":"getUploadType","type":"apogee.FunctionTable","updateData":{"argList":["context"],"functionBody":"if(context == \"public\") return \"general\";\nelse if(context.startsWith(\"com_\")) return \"community\";\nelse if(context.startsWith(\"~\")) return \"customer\";\nelse throw new Error(\"Upload type not known for context \" + context);","supplementalCode":"","description":""}},"getCommunityIdentifier":{"name":"getCommunityIdentifier","type":"apogee.FunctionTable","updateData":{"argList":["context"],"functionBody":"var prefixLength = CID_CONTEXT_PREFIX.length;\r\nreturn context.substr(prefixLength);","supplementalCode":"","description":""}},"getBaseFileInfo":{"name":"getBaseFileInfo","type":"apogee.FunctionTable","updateData":{"argList":["fileType","useType","uploadType"],"functionBody":"\nvar result = {};\nresult.urlFormat = urlFormatInfoMap[uploadType][fileType];\nresult.fileFormat = _getFileFormat(fileType,useType);\n\nreturn result;","supplementalCode":"function  _getFileFormat(fileType,useType) {\n    switch(fileType) {\n        case \"comFile\":\n            return \"comFile\";\n            \n        case \"propertyRules\":\n            return (useType == \"override\") ? \"presetOverride\" : \"presets\";\n            \n        case \"themeRules\":\n            return \"themeMap\";\n        \n        case \"theme\":\n            return \"theme\";\n            \n        case \"strings\":\n            return \"strings\";\n            \n        case \"inputColors\":\n            return \"inputColors\";\n            \n        default:\n            throw new Error(\"Unknown file type: \" + fileType);\n    }\n}","description":"- fileType - the meta data file type:\n  \"comFile\"\n  \"propertyRules\"\n  \"themeRules\"\n  \"theme\"\n  \"strings\"\n  \"inputColors\"\n\n- uploadType - the scope of the meta file\n  \"community\"\n  \"global\"\n  \"customer\"\n\n- name - the meta file name\n\n- identifier - cid for community or customer path name for customer"}},"getFileInfo":{"name":"getFileInfo","type":"apogee.FunctionTable","updateData":{"argList":["fileType","useType","context","name"],"functionBody":"var uploadType = getUploadType(context);\nvar identifier;\n\nswitch(uploadType) {\n    case \"community\":\n        identifier = getCommunityIdentifier(context);\n        break;\n        \n    case \"customer\":\n        identifier = getCustomerPathNameFromAuthString(context);\n        break;\n        \n    case \"general\":\n        identifier = null;\n        break;\n}\n\nvar formatFileInfo = getBaseFileInfo(fileType,useType,uploadType);\n\nvar fileInfo = {};\nfileInfo.url = getUrlWithParams(formatFileInfo,name,identifier);\nfileInfo.fileFormat = formatFileInfo.fileFormat;\n\nreturn fileInfo;\n","supplementalCode":"","description":""}},"getCustomerPathNameFromAuthString":{"name":"getCustomerPathNameFromAuthString","type":"apogee.FunctionTable","updateData":{"argList":["context"],"functionBody":"var customerEntry = customerInfo.find(entry => entry.authString == context)\n\nif(!customerEntry) throw new Error(\"Customer name not found for: \" + context);\n\nreturn customerEntry.pathName;","supplementalCode":"","description":""}},"urlFormatInfoMap":{"name":"urlFormatInfoMap","type":"apogee.JsonTable","updateData":{"data":{"NOTES":["{0} is for the file name, {1} is for the identifier, either cid or customer name","Naming convention for files is not so good, since any of the following can be overrides or base"],"community":{"comFile":"/map/{1}/overrides","propertyRules":"/map/{1}/overrides/presets","themeRules":"/map/{1}/overrides/thememap","theme":"/map/{1}/overrides/theme/{0}","strings":"/map/{1}/overrides/strings","inputColors":"/map/{1}/overrides/inputcolors"},"customer":{"propertyRules":"/customer/{1}/overrides/{0}/presets","themeRules":"/customer/{1}/overrides/{0}/thememap","theme":"/customer/{1}/overrides/{0}/theme","strings":"/customer/{1}/overrides/{0}/strings","inputColors":"/customer/{1}/overrides/{0}/inputcolors"},"general":{"propertyRules":"/meta/presets/v5/{0}","themeRules":"/meta/thememap/v5/{0}","theme":"/meta/theme/v5/{0}","strings":"/meta/strings/v5/{0}","inputColors":"/meta/miceditor/inputcolors/{0}"}},"description":""}}}},"customerInfo":{"name":"customerInfo","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"const url = settings.data.customerFileUrl;\nreturn .jsonRequest(url);","supplementalCode":"","description":""}},"DUMMY_DROPDOWN_ENTRY":{"name":"DUMMY_DROPDOWN_ENTRY","type":"apogee.JsonTable","updateData":{"data":"---","description":""}},"CID_CONTEXT_PREFIX":{"name":"CID_CONTEXT_PREFIX","type":"apogee.JsonTable","updateData":{"data":"com_","description":""}},"GLOBAL_CONTEXT":{"name":"GLOBAL_CONTEXT","type":"apogee.JsonTable","updateData":{"data":"public","description":""}},"getFileTypeId":{"name":"getFileTypeId","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeName"],"functionBody":"return fileTypeNameToId[fileTypeName];","supplementalCode":"","description":""}},"fileTypeIdToName":{"name":"fileTypeIdToName","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!fileTypeList) return null;\nif(!fileTypeList.success) throw new Error(\"Failure in file type request: \" + fileTypeList.msg);\n\nvar output = {};\n\nvar addToMap = (record) => {output[record.Id] = record.Fields.file_type_name;}\n\nfileTypeList.data.Response.forEach(addToMap);\n\nreturn output;","supplementalCode":"","description":""}},"fileTypeNameToId":{"name":"fileTypeNameToId","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!fileTypeList) return null;\nif(!fileTypeList.success) throw new Error(\"Failure in file type request: \" + fileTypeList.msg);\n\nvar output = {};\n\nvar addToMap = (record) => {output[record.Fields.file_type_name] = record.Id;}\n\nfileTypeList.data.Response.forEach(addToMap);\n\nreturn output;","supplementalCode":"","description":""}}}},"selectFilePostProcess":{"name":"selectFilePostProcess","type":"apogee.Folder","children":{"fileTypeEntryList":{"name":"fileTypeEntryList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var sessionKey = login.getSessionKey();\nif(!sessionKey) return null;\nif(!metaFileRecord) return null;\n\nvar searchDef = {};\nsearchDef.search = \"file_type_entries\";\nsearchDef.id = metaFileRecord.Fields.file_type_id;\n\nreturn micemetarDataAccess.getRequestPromise(searchDef,sessionKey);\n\n","supplementalCode":"","description":""}},"metaFileRecord":{"name":"metaFileRecord","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!metaFileResponse) {\n    return null;\n}\n\nif(!metaFileResponse.success) {\n    throw new Error(\"Meta File request error\");\n}\n\nif(metaFileResponse.data.Response.length === 0) {\n    throw new Error(\"Meta file not found\");\n}\n\nreturn metaFileResponse.data.Response[0];","supplementalCode":"","description":""}},"metaFileResponse":{"name":"metaFileResponse","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var sessionKey = login.getSessionKey();\nif(!sessionKey) return null;\n\nvar metaFileId = selectMetaFile.getSelectedFileId();\nif(!metaFileId) return null;\n\nvar searchDef = {};\nsearchDef.search = \"meta_file_short\";\nsearchDef.id = metaFileId;\nreturn micemetarDataAccess.getRequestPromise(searchDef,sessionKey);\n\n\n\n\n\n\n","supplementalCode":"","description":""}},"fileInfo":{"name":"fileInfo","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!metaFileRecord) return null;\n\nvar fileType = commonData.getFileTypeName(metaFileRecord.Fields.file_type_id);\nvar context = metaFileRecord.Fields.file_context;\nvar name = metaFileRecord.Fields.name;\nvar useType = metaFileRecord.Fields.use_type;\n\nreturn commonData.fileInfo.getFileInfo(fileType,useType,context,name);","supplementalCode":"","description":""}},"recipeEntries":{"name":"recipeEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!metaFileResponse) return null;\n\nvar isRecipeEntry = entry => entry.Type == \"recipe_entry\";\n\nreturn metaFileResponse.data.Records.filter(isRecipeEntry);","supplementalCode":"","description":""}},"metaFileDownloadValid":{"name":"metaFileDownloadValid","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return ((metaFileResponse)&&(metaFileResponse.success));","supplementalCode":"","description":""}},"getFileEntries":{"name":"getFileEntries","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"if((!fileTypeEntryList)||(!fileTypeEntryList.success)) return null;\nreturn fileTypeEntryList.data.Records.filter(entry => entry.Type == \"file_entry\");","supplementalCode":"","description":""}}}},"selectMetaFile":{"name":"selectMetaFile","type":"apogee.Folder","children":{"metaFileList":{"name":"metaFileList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var sessionKey = login.getSessionKey();\nif(!sessionKey) return null;\n\nvar context = loadContext.getContext();\nif(!context) return null;\n\n\nvar searchDef = {};\nsearchDef.search = \"meta_file_list\";\nsearchDef.file_context = context;\n\nreturn micemetarDataAccess.getRequestPromise(searchDef,sessionKey);\n\n","supplementalCode":"","description":""}},"metaFileFormEntries":{"name":"metaFileFormEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(metaFileList && metaFileList.data && metaFileList.data.Response) {\n    return metaFileList.data.Response.map(_createFormEntry);\n}   \nelse {\n    return null;\n}","supplementalCode":"function _createFormEntry(record) {\n    var entry = [];\n    entry.push(_getRecordName(record));\n    entry.push(record.Id);\n    \n    return entry;\n}\n\nfunction _getRecordName(record) {\n    var fileType =  commonData.getFileTypeName(record.Fields.file_type_id);\n    var optionName = record.Fields.name;\n    \n    return fileType + \" (\" + optionName + \")\"\n}","description":""}},"selectMetaFile":{"name":"selectMetaFile","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var layout = [];\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Select Meta File\";\nlayout.push(entry);\n\n//input dependnecies for form data\nvar context =loadContext.getContext();\nentry = {}\nentry.type = \"invisible\";\nentry.value = context\nentry.key = \"context\";\nlayout.push(entry);\n\n//check validity of cached for data\nif((data)&&(data.context)&&(context)&&(data.context != context)) {\n    //reset data if context does not match\n    apogeeMessenger.dataUpdate(\"data\",null);\n}\n\n//radio group\nvar metaFileOptions = [[\"---\",null]].concat(metaFileFormEntries);\nentry = {};\nentry.type = \"dropdown\";\nentry.label = \"File: \"\nentry.entries = metaFileOptions;\nentry.key = \"metaFile\";\nentry.value = null;\nlayout.push(entry);\n\nreturn {\"layout\":layout};","supplementalCode":"","description":""}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":"","description":""}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":"","description":""}}},"childrenNotWriteable":true},"getSelectedFileId":{"name":"getSelectedFileId","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"if((selectMetaFile.data)&&(selectMetaFile.data.metaFile)) {\n    fileId = parseInt(selectMetaFile.data.metaFile);\n    return fileId;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}}}},"login":{"name":"login","type":"apogee.Folder","children":{"loginUrl":{"name":"loginUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return settings.data.loginUrl;","supplementalCode":"","description":""}},"sessionResponse":{"name":"sessionResponse","type":"apogee.JsonTable","updateData":{"data":"","description":""}},"savedUserName":{"name":"savedUserName","type":"apogee.JsonTable","updateData":{"data":"","description":""}},"loginControl":{"name":"loginControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var onSubmit = (formData) => {\n    \n    //on click\n    var bodyJson = {};\n    bodyJson.userName = formData.userName;\n    bodyJson.password = formData.password;\n    \n    var options = {};\n    options.body = JSON.stringify(bodyJson);\n    options.method = \"POST\";\n    \n    var requestPromise = .jsonRequest(loginUrl,options);\n    \n    //set the response\n    apogeeMessenger.asynchDataUpdate(\"sessionResponse\",requestPromise);\n    \n    //this clears the password...\n    apogeeMessenger.dataUpdate(\"savedUserName\",formData.userName);\n}\n\nvar layout = [];\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Login\";\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"User Name: \";\nentry.key = \"userName\";\nentry.value = savedUserName;\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Password: \";\nentry.password = true;\nentry.key = \"password\";\nlayout.push(entry);\n\n//suvbmit (no cancel)\nentry = {};\nentry.type = \"submit\";\nentry.onSubmit = onSubmit;\nlayout.push(entry);\n\nreturn layout;\n","supplementalCode":"","description":""}},"getSessionKey":{"name":"getSessionKey","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"if((sessionResponse)&&(sessionResponse.responseCode == 1)) {\n    return login.sessionResponse.sessionKey;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"loginResult":{"name":"loginResult","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var msg;\n\nif(!sessionResponse) {\n    msg = \"Login Needed!\";\n    style = \"color:red\";\n}\nelse if(sessionResponse.responseCode == 1) {\n    msg = \"Login Success\";\n    style = \"color:blue\";\n}\nelse {\n    msg = \"Login Failure: \" + sessionResponse.message;\n    style = \"color:red\";\n}\n\nvar textEntry = {};\ntextEntry.type = \"htmlDisplay\";\ntextEntry.html = \"<span style='\" + style + \"' + >\" + msg + \"</span>\";\n\nreturn [textEntry];\n","supplementalCode":"","description":""}},"appendQueryParams":{"name":"appendQueryParams","type":"apogee.FunctionTable","updateData":{"argList":["inUrl"],"functionBody":"if((!sessionResponse)||(!sessionResponse.paramTable)) {\n    throw new Error(\"Param table not loaded!\");\n}\n\n//we need to accomadate both http and https patterns\nvar httpsUrl;\nvar httpUrl;\nif(inUrl.startsWith(\"https:\")) {\n    httpsUrl = inUrl;\n    httpUrl = \"http\" + inUrl.substring(5);\n}\nelse if(inUrl.startsWith(\"http:\")) {\n    httpsUrl = \"https\" + inUrl.substring(4);\n    httpUrl = inUrl;\n}\nelse throw new Error(\"Unknown protocol! Use http or https.\");\n\nvar isMatchingKey = (paramEntry) => {\n    if(paramEntry.urlPattern.startsWith(\"http:\")) return httpUrl.startsWith(paramEntry.urlPattern);\n    else if(paramEntry.urlPattern.startsWith(\"https:\")) return httpsUrl.startsWith(paramEntry.urlPattern);\n    else throw new Error(\"Unknown reference URL protocol: \" + paramEntry.urlPattern);\n}\nvar paramEntry = sessionResponse.paramTable.find(isMatchingKey);\n\nif(paramEntry) {\n    if(paramEntry.params.length > 1) {\n        throw new Error(\"Code only supports 1 appended parameter. (Is an easy fix to add more)\")\n    }\n    else if(paramEntry.params.length === 1) {\n        return inUrl + \"?\" + paramEntry.params[0][0] + \"=\" + paramEntry.params[0][1];\n    }\n}\n      \n//no params to add\nreturn inUrl;\n","supplementalCode":"","description":""}}}},"upload":{"name":"upload","type":"apogee.Folder","children":{"submitForm":{"name":"submitForm","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"\n//on submit, make the commit and write the result to the commit result table\nvar onSubmit = formData => {\n    \n    if(!uploadFile) {\n        alert(\"The file is not ready to upload.\");\n        return;\n    }\n    \n    if(!uploadUrl) {\n        alert(\"The upload URL is not valid.\");\n        return;\n    }\n\n    var options = {};\n    options.method = \"POST\";\n    options.body = JSON.stringify(uploadFile);\n\n    var uploadPromise = .jsonRequest(uploadUrl,options);\n    \n    \n    //set the response\n    apogeeMessenger.asynchDataUpdate(\"uploadResponse\",uploadPromise);\n//apogeeMessenger.dataUpdate(\"uploadResponse\",options.body);\n//above is just for testing\n\n\n};\n\nvar onClear = (formObject) => {\n    apogeeMessenger.dataUpdate(\"uploadResponse\",\"\");\n}\n\n//make the layout\nvar layout = [];\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Upload File\";\nlayout.push(entry);\n\n//ad submit button to layout\nentry = {};\nentry.type = \"submit\";\nentry.onSubmit = onSubmit;\nentry.onCancel = onClear;\nentry.submitLabel = \"Upload\";\nentry.cancelLabel = \"Clear\";\nlayout.push(entry);\n\nreturn layout;","supplementalCode":"","description":""}},"uploadFile":{"name":"uploadFile","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return fileReconstruct.outputFile;\n","supplementalCode":"","description":""}},"uploadResponse":{"name":"uploadResponse","type":"apogee.JsonTable","updateData":{"data":"","description":""}},"uploadResult":{"name":"uploadResult","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return \"IMPLEMENT THIS?\";\n\n// var resultValue;\n\n// var taskResult = {};\n// if((!liveInstructionList)||(!commitResponse)) {\n//     return \"WAITING\";\n// }\n// else if(commitResponse.success === true) {\n//     data = {};\n//     data.commitResponse = commitResponse;\n//     taskAppModule.taskCompleted(apogeeMessenger,[\"submit\",\"submitControl\"],[\"completed\",\"resetControl\"],data);\n//     resultValue = \"SUCCESS\";\n// }\n// else {\n//     alert(\"Error making commit: \" + commitResponse.msg);\n//     resultValue = \"ERROR\";\n// }\n\n// //for error or success - clear the commit request\n// var updateInfo = [];\n// updateInfo.push([\"liveInstructionList\",null]);\n// updateInfo.push([\"commitMessage\",null]);\n// apogeeMessenger.compoundDataUpdate(updateInfo);\n    \n// return resultValue;\n\n// //////////////////////////////\n\n// var resultValue;\n\n// var taskResult = {};\n// if(!liveUploadFile) {\n//     return \"WAITING\";\n// }\n// else if(uploadResponse.length > 0) {\n//     data = {};\n//     data.uploadResponse = uploadResponse;\n//     taskAppModule.taskCompleted(apogeeMessenger,[\"upload\"],[\"completed\"],data);\n//     resultValue = \"SUCCESS\";\n// }\n// else {\n//     alert(\"Error making commit: \" + uploadResponse.msg);\n//     resultValue = \"ERROR\";\n// }\n\n// //for error or success - clear the commit request\n// var updateInfo = [];\n// updateInfo.push([\"liveUploadFile\",null]);\n// apogeeMessenger.compoundDataUpdate(updateInfo);\n    \n// return resultValue;","supplementalCode":"","description":""}},"uploadUrl":{"name":"uploadUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(selectFilePostProcess.fileInfo) {\n    return selectFilePostProcess.fileInfo.url;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}}}}}},"micemetarDataAccess":{"name":"micemetarDataAccess","type":"apogee.Folder","children":{"createRecord":{"name":"createRecord","type":"apogee.FunctionTable","updateData":{"argList":["recordType","fieldMap"],"functionBody":"var record = {};\n\nrecord.Id = getId();\nrecord.Type = recordType;\nrecord.Fields = fieldMap;\nrecord.read_perm = READ_PERM;\nrecord.edit_perm = EDIT_PERM;\n\nreturn record;","supplementalCode":"var READ_PERM = 2;\nvar EDIT_PERM = 15;\n\n//this will be illegal at some point\nvar nextId = -1;\n\nfunction getId() {\n    return nextId--;\n}","description":"This method creates a record given the field values and record info \nfrom the data set info. It creates and ID and uses standard permissions."}},"recordsToCreateInstructions":{"name":"recordsToCreateInstructions","type":"apogee.FunctionTable","updateData":{"argList":["recordList"],"functionBody":"var instructions = [];\n\nfor(var i = 0; i < recordList.length; i++) {\n    var createRecord = recordList[i];\n    var instruction = createCreateInstruction(createRecord);\n    instructions.push(instruction);\n}\n\nreturn instructions;","supplementalCode":"","description":"This creates a list of create instructions to go along with a list of records to be created.\n\nThere is the option to assign the ID or to leave it as undefined, in which case\nan automatically incremented ID will be assigned. (For consistency in the data\nset, either all records should be preassigned or all records should be \nautomatically assigned."}},"createCommitBody":{"name":"createCommitBody","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage"],"functionBody":"var commit = {};\nvar actions = [];\n\nif(commitMessage.length === 0) throw new Error(\"Commit message missing!\");\n\ncommit.Name = dataSetInfo.name;\ncommit.Message = commitMessage;\ncommit.Actions = actions;\n\n//single action with commits\nvar action = {};\naction.Title = \"bulk create commit\";\naction.Instr = instructionList;\nactions.push(action);\n\nreturn commit","supplementalCode":"","description":"This creates a body for a commit request, given a list of instructions and a commit message."}},"createRequestOptions":{"name":"createRequestOptions","type":"apogee.FunctionTable","updateData":{"argList":["bodyJson","sessionKey"],"functionBody":"var header = {};\nheader[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\nheader.sessionKey = sessionKey;\nheader[\"proto-version\"] = \"4.0\";\nheader[\"db-version\"] = dataSetInfo.version;\n\nrequestInfo = {};\nrequestInfo.header = header;\nif(bodyJson) {\n    requestInfo.method = \"POST\";\n    requestInfo.body = JSON.stringify(bodyJson);\n}\n\nreturn requestInfo;\n","supplementalCode":"","description":"This creates the requestOptions, suitable for .jsonRequest, to go with an type of request to the workingset (micemetarequest) server."}},"host":{"name":"host","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return settings.data.metaDbHost;","supplementalCode":"","description":""}},"commitUrl":{"name":"commitUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvalue = host + \"/commit\";\nreturn value;\n\n","supplementalCode":"","description":""}},"requestUrl":{"name":"requestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return host + \"/cannedsearch\";\n\n","supplementalCode":"","description":""}},"dataSetInfo":{"name":"dataSetInfo","type":"apogee.JsonTable","updateData":{"data":{"name":"Micemetar","records":{"com_file_entry":{"foreignList":[],"idField":"com_file_entry_id","name":"com_file_entry","recordClass":"com.micello.micemetar.data.ComFileEntry","fields":[{"fieldClass":"java.lang.Integer","name":"ordr","nullOk":false,"defaultValue":0},{"fieldClass":"com.micello.micemetar.data.ComFile","name":"com_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.MetaFile","name":"meta_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"file_group","nullOk":false,"defaultValue":null}]},"com_file":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"com_file_id","remoteRecord":"com_file_entry","orderField":"ordr","name":"com_file_entry_list"}],"idField":"com_file_id","name":"com_file","recordClass":"com.micello.micemetar.data.ComFile","fields":[{"fieldClass":"java.lang.String","name":"file_context","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"name","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"ref","nullOk":true,"defaultValue":null}]},"community_com_file":{"foreignList":[],"idField":"community_com_file_id","name":"community_com_file","recordClass":"com.micello.micemetar.data.CommunityComFile","fields":[{"fieldClass":"java.lang.Integer","name":"cid","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.ComFile","name":"com_file_id","nullOk":false,"defaultValue":null}]},"meta_parent_entry":{"foreignList":[],"idField":"meta_parent_id","name":"meta_parent_entry","recordClass":"com.micello.micemetar.data.MetaParentEntry","fields":[{"fieldClass":"com.micello.micemetar.data.MetaFile","name":"meta_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.MetaFile","name":"parent_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"relation","nullOk":true,"defaultValue":null}]},"file_entry":{"foreignList":[],"idField":"file_entry_id","name":"file_entry","recordClass":"com.micello.micemetar.data.FileEntry","fields":[{"fieldClass":"java.lang.String","name":"entry_context","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"entry_name","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.FileType","name":"file_type_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"entry_section","nullOk":true,"defaultValue":null},{"fieldClass":"java.lang.String","name":"entry_key","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"option_name","nullOk":false,"defaultValue":null},{"fieldClass":"org.json.JSONObject","name":"entry_data","nullOk":false,"defaultValue":null}]},"file_type":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"file_type_id","remoteRecord":"file_entry","name":"file_entry_list"}],"idField":"file_type_id","name":"file_type","recordClass":"com.micello.micemetar.data.FileType","fields":[{"fieldClass":"java.lang.String","name":"file_type_name","nullOk":true,"defaultValue":null}]},"meta_file":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"meta_file_id","remoteRecord":"recipe_entry","orderField":"ordr","name":"recipe_entry_list"},{"restrictDelete":true,"isUnique":false,"remoteField":"meta_file_id","remoteRecord":"meta_parent_entry","name":"parent_entry_list"}],"idField":"meta_file_id","name":"meta_file","recordClass":"com.micello.micemetar.data.MetaFile","fields":[{"fieldClass":"com.micello.micemetar.data.FileType","name":"file_type_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"file_context","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"name","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"use_type","nullOk":false,"defaultValue":null}]},"recipe_entry":{"foreignList":[],"idField":"recipe_entry_id","name":"recipe_entry","recordClass":"com.micello.micemetar.data.RecipeEntry","fields":[{"fieldClass":"java.lang.Integer","name":"ordr","nullOk":false,"defaultValue":0},{"fieldClass":"com.micello.micemetar.data.MetaFile","name":"meta_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.FileEntry","name":"file_entry_id","nullOk":false,"defaultValue":null},{"fieldClass":"org.json.JSONObject","name":"insertion_info","nullOk":true,"defaultValue":null}]}},"version":"5.0"},"description":""}},"createUpdateInstruction":{"name":"createUpdateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["initialRecord","targetRecord"],"functionBody":"if(initialRecord.Id != targetRecord.Id) {\n    throw new Error(\"Record ID mismatch in create update instruction for target record: \" + getRecordErrString(targetRecord));\n}\n\nif(initialRecord.Type != targetRecord.Type) {\n    throw new Error(\"Inital and target record types do not match. Target record: \" + getRecordErrString(targetRecord));\n}\n\nvar recordsDifferent = false;\n\nvar recordInfo = getRecordInfo(initialRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Update\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = initialRecord.Id;\n\ninstruction.initialReadPerm = initialRecord.read_perm;\ninstruction.initialEditPerm = initialRecord.edit_perm;\n\nif(initialRecord.readPerm != targetRecord.readPerm) {\n    instruction.targetReadPerm = targetRecord.read_perm;\n    recordsDifferent = true;\n}\n\nif(initialRecord.editPerm != targetRecord.editPerm) {\n    instruction.targetEditPerm = targetRecord.edit_perm;\n    recordsDifferent = true;\n}\n\nvar initialData = {};\ninstruction.Initial = initialData;\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    \n    var initialValue;\n    var targetValue;\n    \n    var initialValue = initialRecord.Fields[field.name];\n    var targetValue = targetRecord.Fields[field.name];\n    \n    //validate target values\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(targetRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(targetRecord,field));\n        }\n    }\n    \n    if(!fieldsMatch(initialValue,targetValue,field)) {\n        initialData[field.name] = initialValue;\n        targetData[field.name] = targetValue;\n        recordsDifferent = true;\n    }\n}\n\nif(recordsDifferent) {\n    return instruction;\n}\nelse {\n    return null;\n}\n","supplementalCode":"function fieldsMatch(initialValue,targetValue,fieldInfo) {\n    if(fieldInfo.fieldClass === \"java.lang.String\") {\n        //compare strings with \"==\"\n        return (initialValue == targetValue);\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"java.lang\")) {\n        //compare other basic values with \"===\"\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"com.micello\")) {\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONObject\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONArray\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else {\n        throw new Error(\"unrecognized field type: \" + fieldInfo.fieldClass);\n    }\n}\n\nfunction compareJsonData(a,b) {\n    var an = apogeeutil.getNormalizedObjectCopy(a);\n    var bn = apogeeutil.getNormalizedObjectCopy(b);\n    var aString = JSON.stringify(an);\n    var bString = JSON.stringify(bn);\n    return aString == bString;\n}\n    ","description":"This function creates an update instruction given an initial and target record. If the records are the same then NULL is returned. (No update is needed.)"}},"createCreateInstruction":{"name":"createCreateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["createRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(createRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Create\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = createRecord.Id;\n\ninstruction.targetReadPerm = createRecord.read_perm;\ninstruction.targetEditPerm = createRecord.edit_perm;\n\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var targetValue;\n    var targetValue = createRecord.Fields[field.name];\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(createRecord,field));\n        }\n    }\n    \n    targetData[field.name] = targetValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getFieldErrString":{"name":"getFieldErrString","type":"apogee.FunctionTable","updateData":{"argList":["record","fieldInfo"],"functionBody":"return getRecordErrString(record) + \" - \" + fieldInfo.name;","supplementalCode":"","description":""}},"getRecordErrString":{"name":"getRecordErrString","type":"apogee.FunctionTable","updateData":{"argList":["record"],"functionBody":"return record.Type + \" \" + record.Id;","supplementalCode":"","description":""}},"createDeleteInstruction":{"name":"createDeleteInstruction","type":"apogee.FunctionTable","updateData":{"argList":["deleteRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(deleteRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Delete\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = deleteRecord.Id;\n\ninstruction.initialReadPerm = deleteRecord.read_perm;\ninstruction.initialEditPerm = deleteRecord.edit_perm;\n\nvar initialData = {};\ninstruction.Initial = initialData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var initialValue = deleteRecord.Fields[field.name];\n    \n    initialData[field.name] = initialValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getRecordInfo":{"name":"getRecordInfo","type":"apogee.FunctionTable","updateData":{"argList":["recordType"],"functionBody":"var recordInfo = dataSetInfo.records[recordType];\n\nif(!recordInfo) {\n    throw new Error(\"Record type not found in getRecordInfo: \" + recordType);\n}\n\nreturn recordInfo;","supplementalCode":"","description":""}},"combinedEntriesToInstructionList":{"name":"combinedEntriesToInstructionList","type":"apogee.FunctionTable","updateData":{"argList":["combinedEntries"],"functionBody":"var output = [];\nfor(var key in combinedEntries) {\n    var entry = combinedEntries[key];\n    var instruction = getInstructionForCombinedEntry(entry);\n    if(instruction) {\n        output.push(instruction);\n    }\n}\n\nreturn output;","supplementalCode":"function getInstructionForCombinedEntry(combinedEntry) {\n    var newEntry = combinedEntry.newEntry;\n    var oldEntry = combinedEntry.oldEntry;\n    \n    if(newEntry) {\n        if(!oldEntry) {\n            console.log(\"Create: \" + newEntry.Id);\n            return createCreateInstruction(newEntry);\n        }\n        else {\n            //this will return null for matching records\n            console.log(\"Update(maybe): \" + newEntry.Id);\n            return createUpdateInstruction(oldEntry,newEntry);\n        }\n    }\n    else if(oldEntry) {\n        console.log(\"Delete: \" + oldEntry.Id);\n        return createDeleteInstruction(oldEntry);\n    }\n    \n    return null;\n}\n\nfunction entriesDifferent(entry1,entry2) {\n    var string1 = JSON.stringify(apogeeutil.getNormalizedCopy(entry1));\n    var string2 = JSON.stringify(apogeeutil.getNormalizedCopy(entry2));\n    return (string1 == string2);\n}","description":"This function takes a combined entry map of the format:\n\n{\n  \"some-identifier\":{\n    \"oldEntry\":{original record entry, if applicable},\n    \"newEntry\":{new record entry, if applicable}\n  },\n  ...\n}\n\nIt returns an instruction list.\n\n"}},"getCommitPromise":{"name":"getCommitPromise","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage","sessionKey"],"functionBody":"var commitBody = createCommitBody(instructionList,commitMessage);\nvar requestOptions = createRequestOptions(commitBody,sessionKey);\nreturn .jsonRequest(commitUrl,requestOptions);","supplementalCode":"","description":""}},"getRequestPromise":{"name":"getRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn .jsonRequest(requestUrl,requestOptions);","supplementalCode":"","description":""}},"customRequestUrl":{"name":"customRequestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return host + \"/request\";","supplementalCode":"","description":""}},"getCustomRequestPromise":{"name":"getCustomRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn .jsonRequest(customRequestUrl,requestOptions);","supplementalCode":"","description":""}}}},"settings":{"name":"settings","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var layout = [];\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Settings\";\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Login URL: \";\nentry.size = 80;\nentry.key = \"loginUrl\";\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Meta DB URL: \";\nentry.size = 80;\nentry.key = \"metaDbHost\";\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"MFS Base URL: \";\nentry.size = 80;\nentry.key = \"mfsBaseUrl\";\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Customer File URL: \";\nentry.size = 80;\nentry.key = \"customerFileUrl\";\nlayout.push(entry);\n\n//suvbmit (no cancel)\nentry = {};\nentry.type = \"submit\";\nentry.onSubmit = onSubmit;\nentry.onCancel = onReset;\nentry.cancelLabel = \"Reset\";\nlayout.push(entry);\n\nreturn layout;\n","supplementalCode":"","description":""}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":{"loginUrl":"https://eng.micello.com/TestAuthorization/loginjson","metaDbHost":"https://eng.micello.com/micemetarws","mfsBaseUrl":"https://eng.micello.com/mfs/ms/v1/mfile","customerFileUrl":"https://eng.micello.com/apogee/data/customerJson.json"},"description":""}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":"","description":""}}},"childrenNotWriteable":true}}}},"components":{"type":"apogeeapp.app.FolderComponent","treeState":1,"children":{"tasks":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":25,"y":25}},"treeState":1,"children":{"loadContext":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":82,"y":74}},"treeState":-1,"children":{"selectContext":{"type":"apogeeapp.app.FormDataComponent","windowState":{"sizeInfo":{"width":525,"height":189},"posInfo":{"x":33,"y":28},"state":0,"viewType":"Form"}},"getContext":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":772,"height":403},"posInfo":{"x":627,"y":63},"state":-1,"viewType":"Code"}}}},"fileReconstruct":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":167,"y":199}},"treeState":-1,"children":{"reconstruct":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":53,"y":29}},"treeState":1,"children":{"themeMap":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":922,"height":686},"posInfo":{"x":1078,"y":412},"state":0,"viewType":"Code"}},"inputColors":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":632,"height":400},"posInfo":{"x":324,"y":382},"state":0,"viewType":"Code"}},"strings":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":712,"height":528},"posInfo":{"x":368,"y":36},"state":-1,"viewType":"Code"}},"theme":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":641,"height":400},"posInfo":{"x":79,"y":21},"state":-1,"viewType":"Code"}},"presetOverride":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":1043,"height":1033},"posInfo":{"x":596,"y":187},"state":-1,"viewType":"Private"}},"presets":{"type":"apogeeapp.app.FolderFunctionComponent","windowState":{"posInfo":{"x":23,"y":379}},"treeState":1,"children":{"newFile":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":1001,"height":744},"posInfo":{"x":32,"y":247},"state":0,"viewType":"Data"},"dataView":"Colorized"},"namedKeys":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":443,"y":122},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"typeRemap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":445,"y":79},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"tagRename":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":444,"y":33},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"baseFile":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":1083,"height":898},"posInfo":{"x":59,"y":41},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"firstStepFile":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":1309,"height":905},"posInfo":{"x":60,"y":87},"state":-1,"viewType":"Formula"},"dataView":"Colorized"}}}}},"baseFile":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":723,"height":706},"posInfo":{"x":60,"y":338},"state":0,"viewType":"Data"},"dataView":"Colorized"},"outFileType":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":508,"height":179},"posInfo":{"x":32,"y":124},"state":0,"viewType":"Formula"},"dataView":"Colorized"},"outputFile":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":737,"height":715},"posInfo":{"x":899,"y":580},"state":0,"viewType":"Formula"},"dataView":"Colorized"},"metaFileRecord":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":598,"height":300},"posInfo":{"x":1278,"y":29},"state":0,"viewType":"Data"},"dataView":"Colorized"},"recipeEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":510,"height":300},"posInfo":{"x":785,"y":187},"state":0,"viewType":"Data"},"dataView":"Colorized"},"getFileEntryById":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":560,"height":400},"posInfo":{"x":820,"y":63},"state":-1,"viewType":"Code"}},"getFileEntryByName":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":808,"height":578},"posInfo":{"x":818,"y":102},"state":-1,"viewType":"Code"}}}},"commonData":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":535,"y":267}},"treeState":-1,"children":{"fileTypeList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":555,"height":325},"posInfo":{"x":48,"y":210},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"getFileTypeName":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":48,"y":366},"state":-1,"viewType":"Code"}},"fileInfo":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":657,"y":47}},"treeState":1,"children":{"mfsBaseUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":405,"height":50},"posInfo":{"x":33,"y":14},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"getUrlWithParams":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":664,"height":441},"posInfo":{"x":45,"y":147},"state":-1,"viewType":"Code"}},"getUploadType":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":583,"height":114},"posInfo":{"x":572,"y":171},"state":-1,"viewType":"Code"}},"getCommunityIdentifier":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":369,"height":61},"posInfo":{"x":571,"y":83},"state":-1,"viewType":"Code"}},"getBaseFileInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":711,"height":292},"posInfo":{"x":566,"y":601},"state":0,"viewType":"Code"}},"getFileInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":529,"height":400},"posInfo":{"x":32,"y":359},"state":0,"viewType":"Code"}},"getCustomerPathNameFromAuthString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":741,"height":163},"posInfo":{"x":632,"y":313},"state":0,"viewType":"Code"}},"urlFormatInfoMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":782,"height":854},"posInfo":{"x":1156,"y":146},"state":0,"viewType":"Data"},"dataView":"Colorized"}}},"customerInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":604,"height":1029},"posInfo":{"x":495,"y":165},"state":0,"viewType":"Data"},"dataView":"Colorized"},"DUMMY_DROPDOWN_ENTRY":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":869,"y":115},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"CID_CONTEXT_PREFIX":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":871,"y":71},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"GLOBAL_CONTEXT":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":871,"y":29},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"getFileTypeId":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":51,"y":327},"state":-1,"viewType":"Code"}},"fileTypeIdToName":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":49,"y":288},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"fileTypeNameToId":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":48,"y":249},"state":-1,"viewType":"Data"},"dataView":"Colorized"}}},"selectFilePostProcess":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":350,"y":181}},"treeState":-1,"children":{"fileTypeEntryList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":742,"height":473},"posInfo":{"x":468,"y":23},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"metaFileRecord":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":646,"height":207},"posInfo":{"x":33,"y":291},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"metaFileResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":799,"height":449},"posInfo":{"x":771,"y":655},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"fileInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":939,"height":319},"posInfo":{"x":756,"y":588},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"recipeEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":600,"height":312},"posInfo":{"x":62,"y":589},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"metaFileDownloadValid":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":647,"height":553},"posInfo":{"x":41,"y":151},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"getFileEntries":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":848,"height":565},"posInfo":{"x":456,"y":121},"state":-1,"viewType":"Code"}}}},"selectMetaFile":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":192,"y":290}},"treeState":-1,"children":{"metaFileList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":901,"height":702},"posInfo":{"x":48,"y":38},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"metaFileFormEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":877,"height":617},"posInfo":{"x":303,"y":36},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"selectMetaFile":{"type":"apogeeapp.app.FormDataComponent","windowState":{"sizeInfo":{"width":490,"height":320},"posInfo":{"x":36,"y":155},"state":0,"viewType":"Form"}},"getSelectedFileId":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":651,"height":137},"posInfo":{"x":631,"y":200},"state":-1,"viewType":"Code"}}}},"login":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":44,"y":242}},"tabOpen":true,"treeState":-1,"children":{"loginUrl":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":465,"height":43},"posInfo":{"x":24,"y":27},"state":-1,"viewType":"Text"}},"sessionResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":697,"height":330},"posInfo":{"x":31,"y":312},"state":0,"viewType":"Data"},"dataView":"Colorized"},"savedUserName":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":284,"height":69},"posInfo":{"x":23,"y":70},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"loginControl":{"type":"apogeeapp.app.DynamicForm","windowState":{"sizeInfo":{"width":357,"height":217},"posInfo":{"x":280,"y":33},"state":0,"viewType":"Output"}},"getSessionKey":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":557,"height":138},"posInfo":{"x":893,"y":76},"state":-1,"viewType":"Code"}},"loginResult":{"type":"apogeeapp.app.DynamicForm","windowState":{"sizeInfo":{"width":367,"height":49},"posInfo":{"x":933,"y":250},"state":0,"viewType":"Output"}},"appendQueryParams":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":887,"y":126},"state":-1,"viewType":"Code"}}}},"upload":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":386,"y":24}},"treeState":-1,"children":{"submitForm":{"type":"apogeeapp.app.DynamicForm","windowState":{"sizeInfo":{"width":370,"height":203},"posInfo":{"x":33,"y":356},"state":0,"viewType":"Output"}},"uploadFile":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":594,"height":433},"posInfo":{"x":508,"y":404},"state":0,"viewType":"Data"},"dataView":"Colorized"},"uploadResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":623,"height":297},"posInfo":{"x":663,"y":46},"state":0,"viewType":"Data"},"dataView":"Colorized"},"uploadResult":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":390,"height":90},"posInfo":{"x":1220,"y":398},"state":0,"viewType":"Data"},"dataView":"Colorized"},"uploadUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":859,"height":79},"posInfo":{"x":21,"y":111},"state":0,"viewType":"Data"},"dataView":"Colorized"}}}}},"micemetarDataAccess":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":25,"y":25}},"treeState":-1,"children":{"createRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":560,"height":321},"posInfo":{"x":33,"y":368},"state":-1,"viewType":"Private"}},"recordsToCreateInstructions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":834,"height":391},"posInfo":{"x":30,"y":472},"state":-1,"viewType":"Code"}},"createCommitBody":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":568,"height":400},"posInfo":{"x":629,"y":225},"state":-1,"viewType":"Code"}},"createRequestOptions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":523,"height":254},"posInfo":{"x":822,"y":379},"state":-1,"viewType":"Code"}},"host":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":353,"height":71},"posInfo":{"x":16,"y":8},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"commitUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":433,"height":107},"posInfo":{"x":14,"y":98},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"requestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":450,"height":68},"posInfo":{"x":14,"y":58},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"dataSetInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":882,"height":611},"posInfo":{"x":317,"y":144},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"createUpdateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":1002,"height":655},"posInfo":{"x":37,"y":247},"state":-1,"viewType":"Code"}},"createCreateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":994,"height":643},"posInfo":{"x":39,"y":209},"state":-1,"viewType":"Code"}},"getFieldErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":512,"height":68},"posInfo":{"x":761,"y":616},"state":-1,"viewType":"Code"}},"getRecordErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":81},"posInfo":{"x":762,"y":664},"state":-1,"viewType":"Code"}},"createDeleteInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":678,"height":540},"posInfo":{"x":36,"y":289},"state":-1,"viewType":"Code"}},"getRecordInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":480,"height":400},"posInfo":{"x":818,"y":427},"state":-1,"viewType":"Code"}},"combinedEntriesToInstructionList":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":721,"height":524},"posInfo":{"x":31,"y":516},"state":-1,"viewType":"Private"}},"getCommitPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":569,"height":109},"posInfo":{"x":316,"y":26},"state":-1,"viewType":"Code"}},"getRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":546,"height":89},"posInfo":{"x":315,"y":67},"state":-1,"viewType":"Code"}},"customRequestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":17,"y":142},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"getCustomRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":668,"height":88},"posInfo":{"x":317,"y":104},"state":-1,"viewType":"Code"}}}},"settings":{"type":"apogeeapp.app.FormDataComponent","windowState":{"sizeInfo":{"width":793,"height":276},"posInfo":{"x":31,"y":107},"state":0,"viewType":"Form"}}}},"activeTabMember":"Model.tasks.login"}