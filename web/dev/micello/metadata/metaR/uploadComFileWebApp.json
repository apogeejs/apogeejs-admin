{"fileType":"apogee app js workspace","version":"0.40","references":[],"workspace":{"fileType":"apogee workspace","version":0.2,"name":"uploadComFileWebApp","data":{"name":"Model","type":"apogee.Folder","children":{"tasks":{"name":"tasks","type":"apogee.Folder","children":{"commonData":{"name":"commonData","type":"apogee.Folder","children":{"fileTypeList":{"name":"fileTypeList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var sessionKey = login.getSessionKey();\nif(!sessionKey) return null;\n\nvar fileTypeSearch = {};\nfileTypeSearch.search = \"file_type_list\";\n\nreturn micemetarDataAccess.getRequestPromise(fileTypeSearch,sessionKey);\n\n","supplementalCode":"","description":""}},"fileTypeLookupTable":{"name":"fileTypeLookupTable","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!fileTypeList) return null;\n\nvar lookupTable = {};\n\nvar isFileType = (record) => record.Type == \"file_type\";\nvar addToLookupTable = (record) => lookupTable[record.Id] = record.Fields.file_type_name;\n\nfileTypeList.data.Response.filter(isFileType).forEach(addToLookupTable);\n\nreturn lookupTable;","supplementalCode":"","description":""}},"getFileTypeName":{"name":"getFileTypeName","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeId"],"functionBody":"return fileTypeLookupTable[fileTypeId];","supplementalCode":"","description":""}},"fileInfo":{"name":"fileInfo","type":"apogee.Folder","children":{"getUploadType":{"name":"getUploadType","type":"apogee.FunctionTable","updateData":{"argList":["context"],"functionBody":"if(context == \"public\") return \"global\";\nelse if(context.startsWith(\"com_\")) return \"community\";\nelse if(context.startsWith(\"~\")) return \"customer\";\nelse throw new Error(\"Upload type not known for context \" + context);","supplementalCode":"","description":""}},"getCommunityIdentifier":{"name":"getCommunityIdentifier","type":"apogee.FunctionTable","updateData":{"argList":["context"],"functionBody":"var prefixLength = COMMUNITY_PREFIX.length;\r\nreturn context.substr(prefixLength);","supplementalCode":"","description":""}},"COMMUNITY_PREFIX":{"name":"COMMUNITY_PREFIX","type":"apogee.JsonTable","updateData":{"data":"com_","description":""}},"getCustomerIdentifier":{"name":"getCustomerIdentifier","type":"apogee.FunctionTable","updateData":{"argList":["context"],"functionBody":"var customerEntry = customerInfo.find(entry => entry.authString == context)\n\nif(name === undefined) throw new Error(\"Customer name not found for: \" + context);\n\nreturn customerEntry.customerName;","supplementalCode":"","description":""}},"urlFormatLookupTable":{"name":"urlFormatLookupTable","type":"apogee.JsonTable","updateData":{"data":{"NOTES":["{0} is for the file name, {1} is for the identifier, either cid or customer name"],"community":{"propertyRules":"/map/{1}/overrides/presets","themeRules":"/map/{1}/overrides/thememap","theme":"/map/{1}/overrides/theme/{0}","strings":"/map/{1}/overrides/strings","inputColors":"/map/{1}/overrides/inputcolors"},"customer":{"propertyRules":"/customer/{1}/overrides/{0}/presets","themeRules":"/customer/{1}/overrides/{0}/thememap","theme":"/customer/{1}/overrides/{0}/theme","strings":"/customer/{1}/overrides/{0}/strings","inputColors":"/customer/{1}/overrides/{0}/inputcolors"},"global":{"propertyRules":"/meta/presets/v5/{0}","themeRules":"/meta/thememap/v5/{0}","theme":"/meta/theme/v5/{0}","strings":"/meta/strings/v5/{0}","inputColors":"/meta/miceditor/inputcolors/v5/{0}"}},"description":""}},"overrideSectionLookupTable":{"name":"overrideSectionLookupTable","type":"apogee.JsonTable","updateData":{"data":{"propertyRules":"presetOverrides","themeRules":"themeMapOverrides","theme":"themeOverrides","strings":"stringsOverrides","inputColors":"inputColorOverrides"},"description":""}},"getUrlParams":{"name":"getUrlParams","type":"apogee.FunctionTable","updateData":{"argList":["url"],"functionBody":"var paramTable = login.getParamTable();\nif(!paramTable) {\n    throw new Error(\"Param table needed for MFS upload\");\n}\n\nvar isMatchingKey = (paramEntry) => url.startsWith(paramEntry.urlPattern);\n\nvar paramEntry = paramTable.find(isMatchingKey);\nvar paramString;\n\nif((paramEntry)&&(paramEntry.params.length > 0)) {\n    var appendParam = (inParamString,paramData) => {\n        var seperator;\n        if(inParamString == \"\") {\n            seperator = \"?\";\n        }\n        else {\n            seperator = \"&\";\n        }\n        return inParamString + seperator + paramData[0] + \"=\" + paramData[1];\n    }\n    \n    paramString = paramEntry.params.reduce(appendParam,\"\");\n}\nelse {\n    paramString = \"\";\n}\n\nreturn paramString;\n\n","supplementalCode":"","description":""}},"comFileUrlFormatString":{"name":"comFileUrlFormatString","type":"apogee.JsonTable","updateData":{"data":"/map/{0}/overrides","description":"The input parameter is CID"}},"getMetaFileUrl":{"name":"getMetaFileUrl","type":"apogee.FunctionTable","updateData":{"argList":["uploadType","fileType","fileOptionName","identifier"],"functionBody":"var urlFormatString = urlFormatLookupTable[uploadType][fileType]; \n\nreturn mfsMetaBaseUrl + apogee.util.formatString(urlFormatString,fileOptionName,identifier);","supplementalCode":"","description":""}},"getComFileUrl":{"name":"getComFileUrl","type":"apogee.FunctionTable","updateData":{"argList":["cid"],"functionBody":"var url = mfsUploadBaseUrl + apogee.util.formatString(comFileUrlFormatString,cid);\n\nvar queryParams = getUrlParams(url);\n\nreturn url + queryParams;","supplementalCode":"","description":""}},"getMetaFileInfo":{"name":"getMetaFileInfo","type":"apogee.FunctionTable","updateData":{"argList":["fileType","context","name","baseParentNameList"],"functionBody":"var uploadType = getUploadType(context);\nvar identifier;\n\nswitch(uploadType) {\n    case \"community\":\n        identifier = getCommunityIdentifier(context);\n        break;\n        \n    case \"customer\":\n        identifier = getCustomerIdentifier(context);\n        break;\n        \n    case \"global\":\n        identifier = null;\n        break;\n}\n\nvar fileInfo = {};\nfileInfo.url = getMetaFileUrl(uploadType,fileType,name,identifier);\nfileInfo.overrideSection = overrideSectionLookupTable[fileType];\n\nif(fileType == \"theme\") {\n    fileInfo.subsections = baseParentNameList;\n}\n\nreturn fileInfo;\n","supplementalCode":"","description":""}},"mfsMetaBaseUrl":{"name":"mfsMetaBaseUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return settings.data.mfsBaseUrl;","supplementalCode":"","description":""}},"mfsUploadBaseUrl":{"name":"mfsUploadBaseUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return settings.data.mfsBaseUrl;","supplementalCode":"","description":""}}}},"customerInfo":{"name":"customerInfo","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"const url = settings.data.customerFileUrl;\nreturn apogee.net.jsonRequest(url);","supplementalCode":"","description":""}}}},"loadCid":{"name":"loadCid","type":"apogee.Folder","children":{"selectCid":{"name":"selectCid","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var layout = [];\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Select CID\";\nlayout.push(entry);\n\n//text field\nentry = {};\nentry.type = \"textField\";\nentry.label = \"CID: \";\nentry.key = \"cid\";\nlayout.push(entry);\n\nreturn layout;","supplementalCode":"","description":""}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":{"cid":""},"description":""}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":"","description":""}}},"childrenNotWriteable":true},"getCid":{"name":"getCid","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"if(selectCid.data.cid) {\n    return selectCid.data.cid;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}}}},"selectCidPostProcess":{"name":"selectCidPostProcess","type":"apogee.Folder","children":{"comFileResponse":{"name":"comFileResponse","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var sessionKey = login.getSessionKey();\nif(!sessionKey) return null;\n\nvar cid = loadCid.getCid();\nif(!cid) return null;\n\nvar context = commonData.fileInfo.COMMUNITY_PREFIX + cid;\n\nvar searchDef = {};\nsearchDef.search = \"community_files_extended\";\nsearchDef.file_context = context;\nreturn micemetarDataAccess.getRequestPromise(searchDef,sessionKey);\n\n//oops - com extended currently does not include the meta files in the parent entries! do custom search\n// var searchDef = {\n//     \"searchType\":\"field\",\n// \t\"search\":{\n// \t\t\"record\":\"com_file\",\n// \t\t\"field\":\"file_context\",\n//         \"file_context\":context\n// \t},\n//     \"cascade\":[\n// \t\t{\"record\":\"com_file\", \"field\":\"com_file_entry_list\"},\n// \t\t{\"record\":\"com_file_entry\", \"field\":\"meta_file_id\"},\n//         {\"record\":\"meta_file\", \"field\":\"parent_entry_list\"},\n//         {\"record\":\"meta_parent_entry\", \"field\":\"parent_file_id\"}\n// \t]\n// };\n// return micemetarDataAccess.getCustomRequestPromise(searchDef,sessionKey);\n\n\n\n\n\n\n\n\n","supplementalCode":"","description":""}},"comFileRecord":{"name":"comFileRecord","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!comFileResponse) {\n    return null;\n}\n\nif(!comFileResponse.success) {\n    throw new Error(\"Com File request error\");\n}\n\nif(comFileResponse.data.Response.length === 0) {\n    throw new Error(\"Com file not found\");\n}\n\nif(comFileResponse.data.Response.length > 1) {\n    throw new Error(\"Too many com files!\");\n}\n\nreturn comFileResponse.data.Response[0];","supplementalCode":"","description":""}},"metaFileRecordMap":{"name":"metaFileRecordMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!comFileResponse) return null;\n\nvar output = {};\n\nvar isMetaFile = entry => entry.Type == \"meta_file\";\nvar addToMap = record => output[record.Id] = record;\n\ncomFileResponse.data.Records.filter(isMetaFile).forEach(addToMap);\n\nreturn output;","supplementalCode":"","description":""}},"getMetaFileRecord":{"name":"getMetaFileRecord","type":"apogee.FunctionTable","updateData":{"argList":["recordId"],"functionBody":"return metaFileRecordMap[recordId];\n","supplementalCode":"","description":""}},"metaFileInfo":{"name":"metaFileInfo","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!comFileResponse) return null;\n\nvar metaFileList = comFileOverrideEntries.map(_getMetaFile)\nvar metaFileInfoList = metaFileList.map(_getMetaFileInfo1).map(_getMetaFileInfo2);\n\nreturn metaFileInfoList;","supplementalCode":"//get the meta file from the come file entry\nconst _getMetaFile = comFileEntry => getMetaFileRecord(comFileEntry.Fields.meta_file_id);\n\n//step 1 towards creating info \nconst _getMetaFileInfo1 = metaFile  => {\n    var info = {};\n    info.fileType = commonData.getFileTypeName(metaFile.Fields.file_type_id);\n    info.context = metaFile.Fields.file_context;\n    info.name = metaFile.Fields.name;\n    if(info.fileType == \"theme\") {\n        info.parentNameList = _getBaseParentNames(metaFile.Id);\n    }\n    return info;\n}\n\n//step 2 towards creating info\nconst _getMetaFileInfo2 = metaFileInfoInput => commonData.fileInfo.getMetaFileInfo(metaFileInfoInput.fileType,\n    metaFileInfoInput.context,\n    metaFileInfoInput.name,\n    metaFileInfoInput.parentNameList);\n\n//load name list for meta id\n//this throws an error if a file is missing!\n//we only call this when we need the name list - for theme\nconst _getBaseParentNames = metaId => {\n    var parentEntryList = getMetaParentList(metaId);\n    if(!parentEntryList) throw new Error(\"Parent list not found for meta id = \" + metaId);\n    \n    var parentNameList = [];\n    parentEntryList.forEach(parentEntry => _addToParentNameListIfBaseType(parentEntry,parentNameList));\n    return parentNameList;\n}\n\n//this adds a the parent name to the list, if the parent is a base entry only\n//this throws an error if the base file is not found\nconst _addToParentNameListIfBaseType = (parentEntry,parentNameList) => {\n    var parentMetaFile = getMetaFileRecord(parentEntry.Fields.parent_file_id);\n    if(!parentMetaFile) throw new Error(\"Base file not found for meta Id: \" + parentEntry.Fields.meta_file_id);\n    \n    if(parentMetaFile.Fields.use_type == \"base\") {\n        var name = parentMetaFile.Fields.name;\n        if(parentNameList.indexOf(name) < 0) {\n            parentNameList.push(name);\n        }\n    }\n}\n\n","description":""}},"outputFile":{"name":"outputFile","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!comFileResponse) return null;\n\nvar output = {};\n\n//add the cid\noutput.cid = loadCid.getCid();\n\n//populate the urls\nvar addToOutput = (metaFileInfoEntry) => {\n    var section = output[metaFileInfoEntry.overrideSection];\n    \n    if(metaFileInfoEntry.subsections) {\n        if(!section) {\n            section = {};\n            output[metaFileInfoEntry.overrideSection] = section;\n        }\n        \n        var addSubsectionEntry = subsectionName => {\n            var subsection = section[subsectionName];\n            if(!subsection) {\n                subsection = [];\n                section[subsectionName] = subsection;\n            }\n            \n            //make sure there are no repeats\n            if(subsection.indexOf(metaFileInfoEntry.url) < 0) {\n                subsection.push(metaFileInfoEntry.url);\n            }\n        }\n        \n        // add url for each subsection\n        metaFileInfoEntry.subsections.forEach(addSubsectionEntry);\n        \n    }\n    else {\n        if(!section) {\n            section = [];\n            output[metaFileInfoEntry.overrideSection] = section;\n        }\n        \n        //add url to the section\n        section.push(metaFileInfoEntry.url);\n    }\n}\n\nif(metaFileInfo.length > 0) {\n    metaFileInfo.forEach(addToOutput);\n}\nelse {\n    output.none = true;\n}\n\nreturn output;","supplementalCode":"","description":""}},"comFileOverrideEntries":{"name":"comFileOverrideEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!comFileResponse) return null;\n\nvar isComFileEntry = entry => entry.Type == \"com_file_entry\";\nvar isOverride = entry => entry.Fields.file_group == \"override\";\n\nreturn comFileResponse.data.Records.filter(isComFileEntry).filter(isOverride);","supplementalCode":"","description":""}},"outputUrl":{"name":"outputUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var cid = loadCid.getCid();\nif(!cid) return null;\n\nreturn commonData.fileInfo.getComFileUrl(cid);","supplementalCode":"","description":""}},"metaParentListMap":{"name":"metaParentListMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!comFileResponse) return null;\n\nvar output = {};\n\nvar isMetaParent = entry => entry.Type == \"meta_parent_entry\";\nvar addToMap = record => {\n    var list = output[record.Fields.meta_file_id];\n    if(!list) {\n        list = [];\n        output[record.Fields.meta_file_id] = list;\n    }\n    list.push(record);\n}\ncomFileResponse.data.Records.filter(isMetaParent).forEach(addToMap);\n\nreturn output;","supplementalCode":"","description":""}},"getMetaParentList":{"name":"getMetaParentList","type":"apogee.FunctionTable","updateData":{"argList":["metaId"],"functionBody":"return metaParentListMap[metaId];","supplementalCode":"","description":""}},"NOTES":{"name":"NOTES","type":"apogee.JsonTable","updateData":{"data":"THIS IS UGLY - REDO IT!","description":""}}}},"login":{"name":"login","type":"apogee.Folder","children":{"loginUrl":{"name":"loginUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return settings.data.loginUrl;","supplementalCode":"","description":""}},"sessionResponse":{"name":"sessionResponse","type":"apogee.JsonTable","updateData":{"data":"","description":""}},"savedUserName":{"name":"savedUserName","type":"apogee.JsonTable","updateData":{"data":"","description":""}},"loginControl":{"name":"loginControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var onSubmit = (formData) => {\n    \n    //on click\n    var bodyJson = {};\n    bodyJson.userName = formData.userName;\n    bodyJson.password = formData.password;\n    \n    var options = {};\n    options.body = JSON.stringify(bodyJson);\n    options.method = \"POST\";\n    \n    var requestPromise = apogee.net.jsonRequest(loginUrl,options);\n    \n    //set the response\n    apogeeMessenger.asynchDataUpdate(\"sessionResponse\",requestPromise);\n    \n    //this clears the password...\n    apogeeMessenger.dataUpdate(\"savedUserName\",formData.userName);\n}\n\nvar layout = [];\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Login\";\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"User Name: \";\nentry.key = \"userName\";\nentry.value = savedUserName;\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Password: \";\nentry.password = true;\nentry.key = \"password\";\nlayout.push(entry);\n\n//suvbmit (no cancel)\nentry = {};\nentry.type = \"submit\";\nentry.onSubmit = onSubmit;\nlayout.push(entry);\n\nreturn layout;\n","supplementalCode":"","description":""}},"getSessionKey":{"name":"getSessionKey","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"if((sessionResponse)&&(sessionResponse.responseCode == 1)) {\n    return login.sessionResponse.sessionKey;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"getParamTable":{"name":"getParamTable","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"if((sessionResponse)&&(sessionResponse.responseCode == 1)) {\n    return login.sessionResponse.paramTable;\n}\nelse {\n    return null;\n}","supplementalCode":"","description":""}},"loginResult":{"name":"loginResult","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var msg;\n\nif(!sessionResponse) {\n    msg = \"Login Needed!\";\n    style = \"color:red\";\n}\nelse if(sessionResponse.responseCode == 1) {\n    msg = \"Login Success\";\n    style = \"color:blue\";\n}\nelse {\n    msg = \"Login Failure: \" + sessionResponse.message;\n    style = \"color:red\";\n}\n\nvar textEntry = {};\ntextEntry.type = \"htmlDisplay\";\ntextEntry.html = \"<span style='\" + style + \"' + >\" + msg + \"</span>\";\n\nreturn [textEntry];\n","supplementalCode":"","description":""}}}},"upload":{"name":"upload","type":"apogee.Folder","children":{"submitForm":{"name":"submitForm","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"\n//on submit, make the commit and write the result to the commit result table\nvar onSubmit = formData => {\n    \n    if(!uploadFile) {\n        alert(\"The file is not ready to upload.\");\n        return;\n    }\n    \n    if(!uploadUrl) {\n        alert(\"The upload URL is not valid.\");\n        return;\n    }\n\n    var options = {};\n    options.method = \"POST\";\n    options.body = JSON.stringify(uploadFile);\n\n    var uploadPromise = apogee.net.jsonRequest(uploadUrl,options);\n    \n    \n    //set the response\n    apogeeMessenger.asynchDataUpdate(\"uploadResponse\",uploadPromise);\n//apogeeMessenger.dataUpdate(\"uploadResponse\",options.body);\n//above is just for testing\n\n\n};\n\nvar onClear = (formObject) => {\n    apogeeMessenger.dataUpdate(\"uploadResponse\",\"\");\n}\n\n//make the layout\nvar layout = [];\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Upload File\";\nlayout.push(entry);\n\n//ad submit button to layout\nentry = {};\nentry.type = \"submit\";\nentry.onSubmit = onSubmit;\nentry.onCancel = onClear;\nentry.submitLabel = \"Upload\";\nentry.cancelLabel = \"Clear\";\nlayout.push(entry);\n\nreturn layout;","supplementalCode":"","description":""}},"uploadFile":{"name":"uploadFile","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return selectCidPostProcess.outputFile;\n","supplementalCode":"","description":""}},"uploadResponse":{"name":"uploadResponse","type":"apogee.JsonTable","updateData":{"data":"","description":""}},"uploadResult":{"name":"uploadResult","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return \"IMPLEMENT THIS?\";\n\n// var resultValue;\n\n// var taskResult = {};\n// if((!liveInstructionList)||(!commitResponse)) {\n//     return \"WAITING\";\n// }\n// else if(commitResponse.success === true) {\n//     data = {};\n//     data.commitResponse = commitResponse;\n//     taskAppModule.taskCompleted(apogeeMessenger,[\"submit\",\"submitControl\"],[\"completed\",\"resetControl\"],data);\n//     resultValue = \"SUCCESS\";\n// }\n// else {\n//     alert(\"Error making commit: \" + commitResponse.msg);\n//     resultValue = \"ERROR\";\n// }\n\n// //for error or success - clear the commit request\n// var updateInfo = [];\n// updateInfo.push([\"liveInstructionList\",null]);\n// updateInfo.push([\"commitMessage\",null]);\n// apogeeMessenger.compoundDataUpdate(updateInfo);\n    \n// return resultValue;\n\n// //////////////////////////////\n\n// var resultValue;\n\n// var taskResult = {};\n// if(!liveUploadFile) {\n//     return \"WAITING\";\n// }\n// else if(uploadResponse.length > 0) {\n//     data = {};\n//     data.uploadResponse = uploadResponse;\n//     taskAppModule.taskCompleted(apogeeMessenger,[\"upload\"],[\"completed\"],data);\n//     resultValue = \"SUCCESS\";\n// }\n// else {\n//     alert(\"Error making commit: \" + uploadResponse.msg);\n//     resultValue = \"ERROR\";\n// }\n\n// //for error or success - clear the commit request\n// var updateInfo = [];\n// updateInfo.push([\"liveUploadFile\",null]);\n// apogeeMessenger.compoundDataUpdate(updateInfo);\n    \n// return resultValue;","supplementalCode":"","description":""}},"uploadUrl":{"name":"uploadUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return selectCidPostProcess.outputUrl;","supplementalCode":"","description":""}}}}}},"micemetarDataAccess":{"name":"micemetarDataAccess","type":"apogee.Folder","children":{"createRecord":{"name":"createRecord","type":"apogee.FunctionTable","updateData":{"argList":["recordType","fieldMap"],"functionBody":"var record = {};\n\nrecord.Id = getId();\nrecord.Type = recordType;\nrecord.Fields = fieldMap;\nrecord.read_perm = READ_PERM;\nrecord.edit_perm = EDIT_PERM;\n\nreturn record;","supplementalCode":"var READ_PERM = 2;\nvar EDIT_PERM = 15;\n\n//this will be illegal at some point\nvar nextId = -1;\n\nfunction getId() {\n    return nextId--;\n}","description":"This method creates a record given the field values and record info \nfrom the data set info. It creates and ID and uses standard permissions."}},"recordsToCreateInstructions":{"name":"recordsToCreateInstructions","type":"apogee.FunctionTable","updateData":{"argList":["recordList"],"functionBody":"var instructions = [];\n\nfor(var i = 0; i < recordList.length; i++) {\n    var createRecord = recordList[i];\n    var instruction = createCreateInstruction(createRecord);\n    instructions.push(instruction);\n}\n\nreturn instructions;","supplementalCode":"","description":"This creates a list of create instructions to go along with a list of records to be created.\n\nThere is the option to assign the ID or to leave it as undefined, in which case\nan automatically incremented ID will be assigned. (For consistency in the data\nset, either all records should be preassigned or all records should be \nautomatically assigned."}},"createCommitBody":{"name":"createCommitBody","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage"],"functionBody":"var commit = {};\nvar actions = [];\n\nif(commitMessage.length === 0) throw new Error(\"Commit message missing!\");\n\ncommit.Name = dataSetInfo.name;\ncommit.Message = commitMessage;\ncommit.Actions = actions;\n\n//single action with commits\nvar action = {};\naction.Title = \"bulk create commit\";\naction.Instr = instructionList;\nactions.push(action);\n\nreturn commit","supplementalCode":"","description":"This creates a body for a commit request, given a list of instructions and a commit message."}},"createRequestOptions":{"name":"createRequestOptions","type":"apogee.FunctionTable","updateData":{"argList":["bodyJson","sessionKey"],"functionBody":"var header = {};\nheader[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\nheader.sessionKey = sessionKey;\nheader[\"proto-version\"] = \"4.0\";\nheader[\"db-version\"] = dataSetInfo.version;\n\nrequestInfo = {};\nrequestInfo.header = header;\nif(bodyJson) {\n    requestInfo.method = \"POST\";\n    requestInfo.body = JSON.stringify(bodyJson);\n}\n\nreturn requestInfo;\n","supplementalCode":"","description":"This creates the requestOptions, suitable for apogee.net.jsonRequest, to go with an type of request to the workingset (micemetarequest) server."}},"host":{"name":"host","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return settings.data.metaDbHost;","supplementalCode":"","description":""}},"commitUrl":{"name":"commitUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvalue = host + \"/commit\";\nreturn value;\n\n","supplementalCode":"","description":""}},"requestUrl":{"name":"requestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return host + \"/cannedsearch\";\n\n","supplementalCode":"","description":""}},"dataSetInfo":{"name":"dataSetInfo","type":"apogee.JsonTable","updateData":{"data":{"name":"Micemetar","records":{"com_file_entry":{"foreignList":[],"idField":"com_file_entry_id","name":"com_file_entry","recordClass":"com.micello.micemetar.data.ComFileEntry","fields":[{"fieldClass":"java.lang.Integer","name":"ordr","nullOk":false,"defaultValue":0},{"fieldClass":"com.micello.micemetar.data.ComFile","name":"com_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.MetaFile","name":"meta_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"file_group","nullOk":false,"defaultValue":null}]},"com_file":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"com_file_id","remoteRecord":"com_file_entry","orderField":"ordr","name":"com_file_entry_list"}],"idField":"com_file_id","name":"com_file","recordClass":"com.micello.micemetar.data.ComFile","fields":[{"fieldClass":"java.lang.String","name":"file_context","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"name","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"ref","nullOk":true,"defaultValue":null}]},"file_entry":{"foreignList":[],"idField":"file_entry_id","name":"file_entry","recordClass":"com.micello.micemetar.data.FileEntry","fields":[{"fieldClass":"java.lang.String","name":"entry_context","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"entry_name","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.FileType","name":"file_type_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"entry_section","nullOk":true,"defaultValue":null},{"fieldClass":"java.lang.String","name":"entry_key","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"option_name","nullOk":false,"defaultValue":null},{"fieldClass":"org.json.JSONObject","name":"entry_data","nullOk":false,"defaultValue":null}]},"file_type":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"file_type_id","remoteRecord":"file_entry","name":"file_entry_list"}],"idField":"file_type_id","name":"file_type","recordClass":"com.micello.micemetar.data.FileType","fields":[{"fieldClass":"java.lang.String","name":"file_type_name","nullOk":true,"defaultValue":null}]},"meta_file":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"meta_file_id","remoteRecord":"recipe_entry","orderField":"ordr","name":"recipe_entry_list"}],"idField":"meta_file_id","name":"meta_file","recordClass":"com.micello.micemetar.data.MetaFile","fields":[{"fieldClass":"com.micello.micemetar.data.FileType","name":"file_type_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"file_context","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"name","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"use_type","nullOk":false,"defaultValue":null},{"fieldClass":"org.json.JSONObject","name":"ref","nullOk":true,"defaultValue":null}]},"recipe_entry":{"foreignList":[],"idField":"recipe_entry_id","name":"recipe_entry","recordClass":"com.micello.micemetar.data.RecipeEntry","fields":[{"fieldClass":"java.lang.Integer","name":"ordr","nullOk":false,"defaultValue":0},{"fieldClass":"com.micello.micemetar.data.MetaFile","name":"meta_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.FileEntry","name":"file_entry_id","nullOk":false,"defaultValue":null},{"fieldClass":"org.json.JSONObject","name":"insertion_info","nullOk":true,"defaultValue":null}]}},"version":"5.0"},"description":""}},"createUpdateInstruction":{"name":"createUpdateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["initialRecord","targetRecord"],"functionBody":"if(initialRecord.Id != targetRecord.Id) {\n    throw new Error(\"Record ID mismatch in create update instruction for target record: \" + getRecordErrString(targetRecord));\n}\n\nif(initialRecord.Type != targetRecord.Type) {\n    throw new Error(\"Inital and target record types do not match. Target record: \" + getRecordErrString(targetRecord));\n}\n\nvar recordsDifferent = false;\n\nvar recordInfo = getRecordInfo(initialRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Update\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = initialRecord.Id;\n\ninstruction.initialReadPerm = initialRecord.read_perm;\ninstruction.initialEditPerm = initialRecord.edit_perm;\n\nif(initialRecord.readPerm != targetRecord.readPerm) {\n    instruction.targetReadPerm = targetRecord.read_perm;\n    recordsDifferent = true;\n}\n\nif(initialRecord.editPerm != targetRecord.editPerm) {\n    instruction.targetEditPerm = targetRecord.edit_perm;\n    recordsDifferent = true;\n}\n\nvar initialData = {};\ninstruction.Initial = initialData;\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    \n    var initialValue;\n    var targetValue;\n    \n    var initialValue = initialRecord.Fields[field.name];\n    var targetValue = targetRecord.Fields[field.name];\n    \n    //validate target values\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(targetRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(targetRecord,field));\n        }\n    }\n    \n    if(!fieldsMatch(initialValue,targetValue,field)) {\n        initialData[field.name] = initialValue;\n        targetData[field.name] = targetValue;\n        recordsDifferent = true;\n    }\n}\n\nif(recordsDifferent) {\n    return instruction;\n}\nelse {\n    return null;\n}\n","supplementalCode":"function fieldsMatch(initialValue,targetValue,fieldInfo) {\n    if(fieldInfo.fieldClass === \"java.lang.String\") {\n        //compare strings with \"==\"\n        return (initialValue == targetValue);\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"java.lang\")) {\n        //compare other basic values with \"===\"\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"com.micello\")) {\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONObject\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONArray\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else {\n        throw new Error(\"unrecognized field type: \" + fieldInfo.fieldClass);\n    }\n}\n\nfunction compareJsonData(a,b) {\n    var an = apogee.util.getNormalizedObjectCopy(a);\n    var bn = apogee.util.getNormalizedObjectCopy(b);\n    var aString = JSON.stringify(an);\n    var bString = JSON.stringify(bn);\n    return aString == bString;\n}\n    ","description":"This function creates an update instruction given an initial and target record. If the records are the same then NULL is returned. (No update is needed.)"}},"createCreateInstruction":{"name":"createCreateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["createRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(createRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Create\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = createRecord.Id;\n\ninstruction.targetReadPerm = createRecord.read_perm;\ninstruction.targetEditPerm = createRecord.edit_perm;\n\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var targetValue;\n    var targetValue = createRecord.Fields[field.name];\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(createRecord,field));\n        }\n    }\n    \n    targetData[field.name] = targetValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getFieldErrString":{"name":"getFieldErrString","type":"apogee.FunctionTable","updateData":{"argList":["record","fieldInfo"],"functionBody":"return getRecordErrString(record) + \" - \" + fieldInfo.name;","supplementalCode":"","description":""}},"getRecordErrString":{"name":"getRecordErrString","type":"apogee.FunctionTable","updateData":{"argList":["record"],"functionBody":"return record.Type + \" \" + record.Id;","supplementalCode":"","description":""}},"createDeleteInstruction":{"name":"createDeleteInstruction","type":"apogee.FunctionTable","updateData":{"argList":["deleteRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(deleteRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Delete\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = deleteRecord.Id;\n\ninstruction.initialReadPerm = deleteRecord.read_perm;\ninstruction.initialEditPerm = deleteRecord.edit_perm;\n\nvar initialData = {};\ninstruction.Initial = initialData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var initialValue = deleteRecord.Fields[field.name];\n    \n    initialData[field.name] = initialValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getRecordInfo":{"name":"getRecordInfo","type":"apogee.FunctionTable","updateData":{"argList":["recordType"],"functionBody":"var recordInfo = dataSetInfo.records[recordType];\n\nif(!recordInfo) {\n    throw new Error(\"Record type not found in getRecordInfo: \" + recordType);\n}\n\nreturn recordInfo;","supplementalCode":"","description":""}},"combinedEntriesToInstructionList":{"name":"combinedEntriesToInstructionList","type":"apogee.FunctionTable","updateData":{"argList":["combinedEntries"],"functionBody":"var output = [];\nfor(var key in combinedEntries) {\n    var entry = combinedEntries[key];\n    var instruction = getInstructionForCombinedEntry(entry);\n    if(instruction) {\n        output.push(instruction);\n    }\n}\n\nreturn output;","supplementalCode":"function getInstructionForCombinedEntry(combinedEntry) {\n    var newEntry = combinedEntry.newEntry;\n    var oldEntry = combinedEntry.oldEntry;\n    \n    if(newEntry) {\n        if(!oldEntry) {\n            console.log(\"Create: \" + newEntry.Id);\n            return createCreateInstruction(newEntry);\n        }\n        else {\n            //this will return null for matching records\n            console.log(\"Update(maybe): \" + newEntry.Id);\n            return createUpdateInstruction(oldEntry,newEntry);\n        }\n    }\n    else if(oldEntry) {\n        console.log(\"Delete: \" + oldEntry.Id);\n        return createDeleteInstruction(oldEntry);\n    }\n    \n    return null;\n}\n\nfunction entriesDifferent(entry1,entry2) {\n    var string1 = JSON.stringify(apogee.util.getNormalizedCopy(entry1));\n    var string2 = JSON.stringify(apogee.util.getNormalizedCopy(entry2));\n    return (string1 == string2);\n}","description":"This function takes a combined entry map of the format:\n\n{\n  \"some-identifier\":{\n    \"oldEntry\":{original record entry, if applicable},\n    \"newEntry\":{new record entry, if applicable}\n  },\n  ...\n}\n\nIt returns an instruction list.\n\n"}},"getCommitPromise":{"name":"getCommitPromise","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage","sessionKey"],"functionBody":"var commitBody = createCommitBody(instructionList,commitMessage);\nvar requestOptions = createRequestOptions(commitBody,sessionKey);\nreturn apogee.net.jsonRequest(commitUrl,requestOptions);","supplementalCode":"","description":""}},"getRequestPromise":{"name":"getRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn apogee.net.jsonRequest(requestUrl,requestOptions);","supplementalCode":"","description":""}},"customRequestUrl":{"name":"customRequestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return host + \"/request\";","supplementalCode":"","description":""}},"getCustomRequestPromise":{"name":"getCustomRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn apogee.net.jsonRequest(customRequestUrl,requestOptions);","supplementalCode":"","description":""}}}},"settings":{"name":"settings","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var layout = [];\n\n//title\nentry = {};\nentry.type = \"heading\";\nentry.level = 2;\nentry.text = \"Settings\";\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Login URL: \";\nentry.size = 80;\nentry.key = \"loginUrl\";\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Meta DB URL: \";\nentry.size = 80;\nentry.key = \"metaDbHost\";\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"MFS Base URL: \";\nentry.size = 80;\nentry.key = \"mfsBaseUrl\";\nlayout.push(entry);\n\n//text entry\nentry = {};\nentry.type = \"textField\";\nentry.label = \"Customer File URL: \";\nentry.size = 80;\nentry.key = \"customerFileUrl\";\nlayout.push(entry);\n\n//suvbmit (no cancel)\nentry = {};\nentry.type = \"submit\";\nentry.onSubmit = onSubmit;\nentry.onCancel = onReset;\nentry.cancelLabel = \"Reset\";\nlayout.push(entry);\n\nreturn layout;\n","supplementalCode":"","description":""}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":{"loginUrl":"http://eng.micello.com/TestAuthorization/loginjson","metaDbHost":"http://eng.micello.com/micemetarws","mfsBaseUrl":"http://eng.micello.com/mfs/ms/v1/mfile","customerFileUrl":"http://eng.micello.com/apogee/data/customerJson.json"},"description":""}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":"","description":""}}},"childrenNotWriteable":true}}}},"components":{"type":"apogeeapp.app.FolderComponent","treeState":1,"children":{"tasks":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":25,"y":25}},"treeState":1,"children":{"commonData":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":75,"y":75}},"treeState":-1,"children":{"fileTypeList":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":555,"height":325},"posInfo":{"x":905,"y":115},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"fileTypeLookupTable":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":660,"height":300},"posInfo":{"x":908,"y":161},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"getFileTypeName":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":905,"y":261},"state":-1,"viewType":"Code"}},"fileInfo":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":657,"y":47}},"treeState":1,"children":{"getUploadType":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":583,"height":114},"posInfo":{"x":511,"y":15},"state":-1,"viewType":"Code"}},"getCommunityIdentifier":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":369,"height":61},"posInfo":{"x":515,"y":89},"state":-1,"viewType":"Code"}},"COMMUNITY_PREFIX":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":934,"y":85},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"getCustomerIdentifier":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":741,"height":494},"posInfo":{"x":516,"y":129},"state":-1,"viewType":"Code"}},"urlFormatLookupTable":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":706,"height":452},"posInfo":{"x":605,"y":321},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"overrideSectionLookupTable":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":420,"height":132},"posInfo":{"x":934,"y":30},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"getUrlParams":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":812,"height":517},"posInfo":{"x":603,"y":400},"state":-1,"viewType":"Code"}},"comFileUrlFormatString":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":380,"height":63},"posInfo":{"x":605,"y":279},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"getMetaFileUrl":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":741,"height":400},"posInfo":{"x":607,"y":506},"state":-1,"viewType":"Code"}},"getComFileUrl":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":715,"height":400},"posInfo":{"x":605,"y":453},"state":-1,"viewType":"Code"}},"getMetaFileInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":671,"height":552},"posInfo":{"x":64,"y":379},"state":-1,"viewType":"Code"}},"mfsMetaBaseUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":405,"height":39},"posInfo":{"x":16,"y":108},"state":0,"viewType":"Data"},"dataView":"Colorized"},"mfsUploadBaseUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":405,"height":50},"posInfo":{"x":11,"y":13},"state":0,"viewType":"Data"},"dataView":"Colorized"}}},"customerInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":619,"height":300},"posInfo":{"x":39,"y":96},"state":0,"viewType":"Data"},"dataView":"Colorized"}}},"loadCid":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":82,"y":74}},"tabOpen":true,"treeState":-1,"children":{"selectCid":{"type":"apogeeapp.app.FormDataComponent","windowState":{"sizeInfo":{"width":397,"height":169},"posInfo":{"x":46,"y":33},"state":0,"viewType":"Form"}},"getCid":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":621,"y":76},"state":-1,"viewType":"Code"}}}},"selectCidPostProcess":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":125,"y":125}},"treeState":-1,"children":{"comFileResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":913,"height":938},"posInfo":{"x":29,"y":20},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"comFileRecord":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":646,"height":292},"posInfo":{"x":29,"y":70},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"metaFileRecordMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":665,"height":479},"posInfo":{"x":1261,"y":38},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"getMetaFileRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":488,"height":244},"posInfo":{"x":804,"y":41},"state":-1,"viewType":"Code"}},"metaFileInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":854,"height":660},"posInfo":{"x":31,"y":205},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"outputFile":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":802,"height":535},"posInfo":{"x":30,"y":268},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"comFileOverrideEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":803,"height":648},"posInfo":{"x":33,"y":116},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"outputUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":774,"height":195},"posInfo":{"x":871,"y":158},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"metaParentListMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":872,"height":990},"posInfo":{"x":1262,"y":85},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"getMetaParentList":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":806,"y":86},"state":-1,"viewType":"Code"}},"NOTES":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":301,"height":56},"posInfo":{"x":282,"y":292},"state":0,"viewType":"Data"},"dataView":"Text Data"}}},"login":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":55,"y":32}},"tabOpen":true,"treeState":-1,"children":{"loginUrl":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":465,"height":43},"posInfo":{"x":26,"y":27},"state":-1,"viewType":"Text"}},"sessionResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":697,"height":330},"posInfo":{"x":36,"y":355},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"savedUserName":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":284,"height":69},"posInfo":{"x":24,"y":72},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"loginControl":{"type":"apogeeapp.app.DynamicForm","windowState":{"sizeInfo":{"width":357,"height":217},"posInfo":{"x":309,"y":32},"state":0,"viewType":"Output"}},"getSessionKey":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":647,"height":110},"posInfo":{"x":915,"y":55},"state":-1,"viewType":"Code"}},"getParamTable":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":625,"height":294},"posInfo":{"x":917,"y":129},"state":-1,"viewType":"Code"}},"loginResult":{"type":"apogeeapp.app.DynamicForm","windowState":{"sizeInfo":{"width":465,"height":63},"posInfo":{"x":816,"y":307},"state":0,"viewType":"Output"}}}},"upload":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":386,"y":24}},"tabOpen":true,"treeState":-1,"children":{"submitForm":{"type":"apogeeapp.app.DynamicForm","windowState":{"sizeInfo":{"width":337,"height":176},"posInfo":{"x":70,"y":253},"state":0,"viewType":"Output"}},"uploadFile":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":594,"height":433},"posInfo":{"x":638,"y":102},"state":0,"viewType":"Data"},"dataView":"Colorized"},"uploadResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":623,"height":297},"posInfo":{"x":1280,"y":45},"state":0,"viewType":"Data"},"dataView":"Colorized"},"uploadResult":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":390,"height":90},"posInfo":{"x":1347,"y":391},"state":0,"viewType":"Data"},"dataView":"Colorized"},"uploadUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":539,"height":53},"posInfo":{"x":59,"y":80},"state":0,"viewType":"Data"},"dataView":"Colorized"}}}}},"micemetarDataAccess":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":50,"y":50}},"treeState":-1,"children":{"createRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":560,"height":321},"posInfo":{"x":33,"y":368},"state":-1,"viewType":"Private"}},"recordsToCreateInstructions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":834,"height":391},"posInfo":{"x":30,"y":472},"state":-1,"viewType":"Code"}},"createCommitBody":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":568,"height":400},"posInfo":{"x":629,"y":225},"state":-1,"viewType":"Code"}},"createRequestOptions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":523,"height":254},"posInfo":{"x":822,"y":379},"state":-1,"viewType":"Code"}},"host":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":353,"height":71},"posInfo":{"x":15,"y":13},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"commitUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":433,"height":107},"posInfo":{"x":14,"y":98},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"requestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":450,"height":68},"posInfo":{"x":14,"y":58},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"dataSetInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":882,"height":611},"posInfo":{"x":317,"y":144},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"createUpdateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":1002,"height":655},"posInfo":{"x":37,"y":247},"state":-1,"viewType":"Code"}},"createCreateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":994,"height":643},"posInfo":{"x":39,"y":209},"state":-1,"viewType":"Code"}},"getFieldErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":512,"height":68},"posInfo":{"x":761,"y":616},"state":-1,"viewType":"Code"}},"getRecordErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":81},"posInfo":{"x":762,"y":664},"state":-1,"viewType":"Code"}},"createDeleteInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":678,"height":540},"posInfo":{"x":36,"y":289},"state":-1,"viewType":"Code"}},"getRecordInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":480,"height":400},"posInfo":{"x":818,"y":427},"state":-1,"viewType":"Code"}},"combinedEntriesToInstructionList":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":721,"height":524},"posInfo":{"x":31,"y":516},"state":-1,"viewType":"Private"}},"getCommitPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":569,"height":109},"posInfo":{"x":316,"y":26},"state":-1,"viewType":"Code"}},"getRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":546,"height":89},"posInfo":{"x":315,"y":67},"state":-1,"viewType":"Code"}},"customRequestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":17,"y":142},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"getCustomRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":668,"height":88},"posInfo":{"x":317,"y":104},"state":-1,"viewType":"Code"}}}},"settings":{"type":"apogeeapp.app.FormDataComponent","windowState":{"sizeInfo":{"width":793,"height":410},"posInfo":{"x":28,"y":141},"state":0,"viewType":"Form"}}}},"activeTabMember":"Model.tasks.login"}