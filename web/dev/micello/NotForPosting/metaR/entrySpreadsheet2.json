{"fileType":"apogee app js workspace","version":"0.40","references":[],"workspace":{"fileType":"apogee workspace","version":0.2,"name":"entrySpreadsheet","data":{"name":"Model","type":"apogee.Folder","children":{"login":{"name":"login","type":"apogee.Folder","children":{"loginUrl":{"name":"loginUrl","type":"apogee.JsonTable","updateData":{"data":"http://eng.micello.com/TestAuthorization/loginjson","description":""}},"loginControl":{"name":"loginControl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return loginUrl;","supplementalCode":"","description":""}},"sessionResponse":{"name":"sessionResponse","type":"apogee.JsonTable","updateData":{"data":{"responseCode":1,"paramTable":[{"urlPattern":"http://eng.micello.com/mfs","params":[["key","S1sshnIV1Rk9EGz32Acrl8aSYsTKYd"]]},{"urlPattern":"http://mfs.micello.com","params":[["key","nS71TmmSmgvwcXlfrGrin38AMLP48B"]]},{"urlPattern":"http://factory-mfs.micello.com","params":[["key","yfZkszbELEy6lxz1sSeUZscJlC41hL"]]},{"urlPattern":"http://mfs-hub-master.micello.com/","params":[["key","pvLuRozg2EZVrpE8nCpCrQT0FOHcLh"]]},{"urlPattern":"http://mfs-us-1.micello.com","params":[["key","nS71TmmSmgvwcXlfrGrin38AMLP48B"]]},{"urlPattern":"http://eng.micello.com/mfs-node","params":[["key","dnSkxyrgxRNtGMUYbhgV8uvdPW1V4U"]]},{"urlPattern":"http://int.micello.com/mfs","params":[["key","u1VjArfzrFKvBr7X7UVRxFB4eDQmqR"]]}],"sessionKey":"SESS0f6c4c2238a670b8138b63d9fd03cc22=mc4vchbql8439gre78di8nhk67"},"description":""}},"sessionKey":{"name":"sessionKey","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(!sessionResponse) return \"\";\n\nif(sessionResponse.responseCode === 1) {\n    return sessionResponse.sessionKey;\n}\nelse {\n    throw new Error(\"Login error: \" + sessionResponse.message);\n}","supplementalCode":"","description":""}}}},"data":{"name":"data","type":"apogee.Folder","children":{"fileEntryDownload":{"name":"fileEntryDownload","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return micemetarDataAccess.getCustomRequestPromise(fileEntrySearch,login.sessionKey);\n","supplementalCode":"","description":""}},"fileTypeMap":{"name":"fileTypeMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nvar byName = {};\nvar byId = {}\n\nvar addToMap = record => {\n    byName[record.Fields.file_type_name] = record.Id;\n    byId[record.Id] = record.Fields.file_type_name;\n}\n\nfileTypeDownload.data.Response.forEach(addToMap);\n\noutput.byName = byName;\noutput.byId = byId;\n\nreturn output;","supplementalCode":"","description":""}},"getFileTypeId":{"name":"getFileTypeId","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeName"],"functionBody":"return fileTypeMap.byName[fileTypeName];","supplementalCode":"","description":""}},"getFileTypeName":{"name":"getFileTypeName","type":"apogee.FunctionTable","updateData":{"argList":["fileTypeId"],"functionBody":"return fileTypeMap.byId[fileTypeId];","supplementalCode":"","description":""}},"fileTypeSearch":{"name":"fileTypeSearch","type":"apogee.JsonTable","updateData":{"data":{"searchType":"table","search":{"record":"file_type"}},"description":""}},"fileEntrySearch":{"name":"fileEntrySearch","type":"apogee.JsonTable","updateData":{"data":{"searchType":"table","search":{"record":"file_entry"}},"description":""}},"fileTypeDownload":{"name":"fileTypeDownload","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return micemetarDataAccess.getCustomRequestPromise(fileTypeSearch,login.sessionKey);","supplementalCode":"","description":""}},"fileEntries":{"name":"fileEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return fileEntryDownload.data.Response;","supplementalCode":"","description":""}}}},"output":{"name":"output","type":"apogee.Folder","children":{"fileEntryGrid":{"name":"fileEntryGrid","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var headers = headerRows;\n\nvar propRulesFileTypeId = data.getFileTypeId(\"propertyRules\");\nvar isNotPropertyRules = record => (record.Fields.file_type_id != propRulesFileTypeId);\n\nvar body = data.fileEntries.filter(isNotPropertyRules).map(getColumns);\n\nvar rows = headers.concat(body);\n\nvar sortFunction = (a,b) => {\n    var aString = getSortKey(a);\n    var bString = getSortKey(b);\n    return aString.localeCompare(bString);\n}\n\nrows.sort(sortFunction)\n\nreturn rows;","supplementalCode":"function getSortKey(row) {\n    var key = \"\";\n    rowSortIndexValues.forEach( index => key += row[index] + \"|\");\n    return key;\n}","description":""}},"serializers":{"name":"serializers","type":"apogee.Folder","children":{"normalSerializer":{"name":"normalSerializer","type":"apogee.FunctionTable","updateData":{"argList":["object","fieldList"],"functionBody":"var row = [];\n\nvar addColumnEntry = fieldName => {\n    var value = object[fieldName];\n    var objectType = apogeeutil.getObjectType(value);\n    if((objectType == \"Object\")||(objectType == \"Array\")) {\n        value = JSON.stringify(value);\n    }\n    row.push(value);\n}\n\nfieldList.forEach(addColumnEntry);\n\nreturn row;\n","supplementalCode":"","description":""}},"loadBaseColumns":{"name":"loadBaseColumns","type":"apogee.FunctionTable","updateData":{"argList":["recordFields"],"functionBody":"var row = normalSerializer(recordFields,baseColumns);\n\n//update file type to be a name\nvar fileTypeId = row[fileTypeIndex];\nrow[fileTypeIndex] = data.getFileTypeName(fileTypeId);\n\nreturn row;","supplementalCode":"","description":""}},"loadExtendedColumns":{"name":"loadExtendedColumns","type":"apogee.FunctionTable","updateData":{"argList":["fileType","section","entryData"],"functionBody":"if(fileType == \"propertyRules\") {\n    return getPropRulesExtCol(entryData,section);\n}\nelse if(fileType == \"strings\") {\n    var fieldList = standardEntryDataColumns[\"strings\"][\"[all]\"];\n    return normalSerializer(entryData,fieldList);\n    \n}\nelse {\n    var fieldList = standardEntryDataColumns[fileType][section];\n    if(!fieldList) {\n        throw new Error(\"Error: \" + fileType + \" - \" + section);\n    }\n    return normalSerializer(entryData,fieldList);\n}","supplementalCode":"","description":""}},"geomPropRuleColumns":{"name":"geomPropRuleColumns","type":"apogee.FunctionTable","updateData":{"argList":["propRulesType","entryData"],"functionBody":"var rowData = [];\nrowData.push(propRulesType);\n\nswitch(propRulesType) {\n    case \"childFeatureType\":\n        var typeProp = entryData.properties.find(property => (property.key == \"featureType\"));\n        \n        //parent\n        rowData.push(entryData.extends);\n        //value\n        rowData.push(typeProp.value);\n        //legacy key\n        rowData.push(typeProp.legacyKey);\n        //legacy value\n        rowData.push(typeProp.legacyValue);\n        \n        break;\n        \n    case \"childKey\":\n        if(entryData.properties.length > 1) throw new Error(\"Expected property length 1 for child key\");\n        var uniqueProp = entryData.properties[0];\n        \n        //parent\n        rowData.push(entryData.modifies);\n        //key\n        rowData.push(uniqueProp.key);\n        //values\n        rowData.push(JSON.stringify(uniqueProp.values));\n        \n        break;\n        \n    case \"childValue\":\n        if(entryData.properties.length > 1) throw new Error(\"Expected property length 1 for child value\");\n        var uniqueProp = entryData.properties[0];\n        \n        if(uniqueProp.values.length > 1) throw new Error(\"Expected number of values 1 for child value\");\n        \n        //parent\n        rowData.push(entryData.modifies);\n        //key\n        rowData.push(uniqueProp.key);\n        //value\n        rowData.push(JSON.stringify(uniqueProp.values[0].value));\n        \n        break;\n        \n    default:\n        //no extra data\n        break;\n}\n\nreturn rowData;","supplementalCode":"","description":""}}}},"baseColumns":{"name":"baseColumns","type":"apogee.JsonTable","updateData":{"data":["file_type_id","entry_section","entry_key","option_name","entry_context","entry_name"],"description":""}},"getColumns":{"name":"getColumns","type":"apogee.FunctionTable","updateData":{"argList":["fileEntryRecord"],"functionBody":"var fields = fileEntryRecord.Fields;\n\nvar baseColumns = serializers.loadBaseColumns(fields);\n\nvar type = data.getFileTypeName(fields.file_type_id);\nvar section = fields.entry_section;\nvar entry_data = fields.entry_data;\n\nvar extendedColumns = serializers.loadExtendedColumns(type,section,entry_data);\n\nreturn baseColumns.concat(extendedColumns);","supplementalCode":"","description":""}},"standardEntryDataColumns":{"name":"standardEntryDataColumns","type":"apogee.JsonTable","updateData":{"data":{"themeRules":{"label":["propType","path","legacyPath","payload"],"style":["propType","path","legacyPath","payload"]},"theme":{"style":["m","o","w","l","t","zmin","img","shadow"],"icon":["lt","r","ar","url","rurl"],"labelStyle":["font","minFont","maxFont","caps","fill","outline","outlineWidth","padding","bgOutline","bgOutlineWidth","bgPadding","bgR","bgShadow","zmin"],"marker":["src","ox","oy"]},"strings":{"[all]":["trans"]},"inputColors":{"inputMap":["color","props","legacyProps","doLinearArea"]}},"description":""}},"headerRows":{"name":"headerRows","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var maxRowLength = 0;\n\nvar rowList = [];\n\nfor(var fileType in standardEntryDataColumns) {\n    var fileTypeSection = standardEntryDataColumns[fileType];\n    for(var section in fileTypeSection) {\n        \n        var row = baseColumns.map( columnName => {\n            if(columnName == \"file_type_id\") return fileType;\n            else if(columnName == \"entry_section\") return section;\n            else return \"\";\n        })\n        \n        var extColumnNames = fileTypeSection[section];\n        \n        var fullRow = row.concat(extColumnNames);\n        \n        var count = fullRow.length;\n        if(count > maxRowLength) {\n            maxRowLength = count;\n        }\n        \n        rowList.push(fullRow);\n    }\n}\n\nvar padRow = row => {while(row.length < maxRowLength) row.push(\"\");}\nrowList.forEach(padRow);\n\nreturn rowList;","supplementalCode":"","description":""}},"fileTypeIndex":{"name":"fileTypeIndex","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return baseColumns.indexOf(\"file_type_id\");","supplementalCode":"","description":""}},"rowSortFields":{"name":"rowSortFields","type":"apogee.JsonTable","updateData":{"data":["file_type_id","entry_section","entry_key","option_name"],"description":""}},"rowSortIndexValues":{"name":"rowSortIndexValues","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = [];\n\nrowSortFields.forEach( rowName => {\n    output.push(baseColumns.indexOf(rowName));\n})\n\nreturn output;","supplementalCode":"","description":""}},"themeRulesPayload":{"name":"themeRulesPayload","type":"apogee.JsonTable","updateData":{"data":{"label":["lt","ref","trans"],"style":["n"]},"description":""}},"propertyClassify":{"name":"propertyClassify","type":"apogee.Folder","children":{"isChildFeatureType":{"name":"isChildFeatureType","type":"apogee.FunctionTable","updateData":{"argList":["fileEntry"],"functionBody":"var entryData = fileEntry.Fields.entry_data;\n\nif(entryData.extends === undefined) return false;\n\n//properties check\nvar properties = entryData.properties;\n\nreturn properties.some(property => (property.key == \"featureType\"));\n\n\n","supplementalCode":"","description":""}},"isChildValue":{"name":"isChildValue","type":"apogee.FunctionTable","updateData":{"argList":["fileEntry"],"functionBody":"var entryData = fileEntry.Fields.entry_data;\n\nif(entryData.modifies === undefined) return false;\n\n//properties check\nvar properties = entryData.properties;\nif(properties.length != 1) return false;\nvar property = properties[0];\n\nreturn ((property.key != \"featureType\")&&(property.action == \"modifies\"))\n","supplementalCode":"","description":""}},"isChildKey":{"name":"isChildKey","type":"apogee.FunctionTable","updateData":{"argList":["fileEntry"],"functionBody":"var entryData = fileEntry.Fields.entry_data;\n\nif(entryData.modifies === undefined) return false;\n\n//properties check\nvar properties = entryData.properties;\nif(properties.length != 1) return false;\nvar property = properties[0];\n\nreturn ((property.key != \"featureType\")&&(property.action === undefined))\n","supplementalCode":"","description":""}},"getPropRuleType":{"name":"getPropRuleType","type":"apogee.FunctionTable","updateData":{"argList":["fileEntry"],"functionBody":"if(isChildFeatureType(fileEntry)) return \"childFeatureType\";\nelse if(isChildKey(fileEntry)) return \"childKey\";\nelse if(isChildValue(fileEntry)) return \"childValue\";\nelse return \"other\";","supplementalCode":"","description":""}}}},"geomPropRuleGrid":{"name":"geomPropRuleGrid","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var headers = geomPropRulesHeaderRows;\n\nvar propRulesFileTypeId = data.getFileTypeId(\"propertyRules\");\nvar isPropertyRules = record => (record.Fields.file_type_id == propRulesFileTypeId);\nvar isGeomSection = record => (record.Fields.entry_section == \"geometry\");\n\nvar body = data.fileEntries.filter(isPropertyRules).filter(isGeomSection).map(getGeomPropRuleColumns);\n\nvar rows = headers.concat(body);\n\nvar sortFunction = (a,b) => {\n    var aString = getSortKey(a);\n    var bString = getSortKey(b);\n    return aString.localeCompare(bString);\n}\n\nrows.sort(sortFunction)\n\nreturn rows;","supplementalCode":"const NAME_COL = 5//baseColumns.find(\"entry_name\");\nconst TYPE_COL = 6//baseColumns.length;\nconst FILE_COL = 0;\n\nfunction getSortKey(row) {\n    return row[TYPE_COL] + \"|\" + row[FILE_COL] + \"|\" + row[NAME_COL];\n}","description":""}},"getGeomPropRuleColumns":{"name":"getGeomPropRuleColumns","type":"apogee.FunctionTable","updateData":{"argList":["fileEntryRecord"],"functionBody":"var fields = fileEntryRecord.Fields;\n\nvar propRulesType = propertyClassify.getPropRuleType(fileEntryRecord);\n\nvar baseColumns = serializers.loadBaseColumns(fields);\n\nvar type = data.getFileTypeName(fields.file_type_id);\nvar section = fields.entry_section;\nvar entry_data = fields.entry_data;\n\nvar extendedColumns = serializers.geomPropRuleColumns(propRulesType,entry_data);\n\nreturn baseColumns.concat(extendedColumns);","supplementalCode":"","description":""}},"extendedGeomPropHeaderRows":{"name":"extendedGeomPropHeaderRows","type":"apogee.JsonTable","updateData":{"data":[["childFeatureType","parent","value","legacyKey","legacyValue"],["childKey","parent","key","values",""],["childValue","parent","key","value",""],["other","","","",""]],"description":""}},"geomPropRulesHeaderRows":{"name":"geomPropRulesHeaderRows","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return extendedGeomPropHeaderRows.map(row => baseColumns.concat(row));","supplementalCode":"","description":""}}}},"micemetarDataAccess":{"name":"micemetarDataAccess","type":"apogee.Folder","children":{"createRecord":{"name":"createRecord","type":"apogee.FunctionTable","updateData":{"argList":["recordType","fieldMap"],"functionBody":"var record = {};\n\nrecord.Id = getId();\nrecord.Type = recordType;\nrecord.Fields = fieldMap;\nrecord.read_perm = READ_PERM;\nrecord.edit_perm = EDIT_PERM;\n\nreturn record;","supplementalCode":"var READ_PERM = 2;\nvar EDIT_PERM = 15;\n\n//this will be illegal at some point\nvar nextId = -1;\n\nfunction getId() {\n    return nextId--;\n}","description":"This method creates a record given the field values and record info \nfrom the data set info. It creates and ID and uses standard permissions."}},"recordsToCreateInstructions":{"name":"recordsToCreateInstructions","type":"apogee.FunctionTable","updateData":{"argList":["recordList"],"functionBody":"var instructions = [];\n\nfor(var i = 0; i < recordList.length; i++) {\n    var createRecord = recordList[i];\n    var instruction = createCreateInstruction(createRecord);\n    instructions.push(instruction);\n}\n\nreturn instructions;","supplementalCode":"","description":"This creates a list of create instructions to go along with a list of records to be created.\n\nThere is the option to assign the ID or to leave it as undefined, in which case\nan automatically incremented ID will be assigned. (For consistency in the data\nset, either all records should be preassigned or all records should be \nautomatically assigned."}},"createCommitBody":{"name":"createCommitBody","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage"],"functionBody":"var commit = {};\nvar actions = [];\n\nif(commitMessage.length === 0) throw new Error(\"Commit message missing!\");\n\ncommit.Name = dataSetInfo.name;\ncommit.Message = commitMessage;\ncommit.Actions = actions;\n\n//single action with commits\nvar action = {};\naction.Title = \"bulk create commit\";\naction.Instr = instructionList;\nactions.push(action);\n\nreturn commit","supplementalCode":"","description":"This creates a body for a commit request, given a list of instructions and a commit message."}},"createRequestOptions":{"name":"createRequestOptions","type":"apogee.FunctionTable","updateData":{"argList":["bodyJson","sessionKey"],"functionBody":"var header = {};\nheader[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\nheader.sessionKey = sessionKey;\nheader[\"proto-version\"] = \"4.0\";\nheader[\"db-version\"] = dataSetInfo.version;\n\nrequestInfo = {};\nrequestInfo.header = header;\nif(bodyJson) {\n    requestInfo.method = \"POST\";\n    requestInfo.body = JSON.stringify(bodyJson);\n}\n\nreturn requestInfo;\n","supplementalCode":"","description":"This creates the requestOptions, suitable for .jsonRequest, to go with an type of request to the workingset (micemetarequest) server."}},"host":{"name":"host","type":"apogee.JsonTable","updateData":{"data":"http://eng.micello.com/micemetarws","description":""}},"commitUrl":{"name":"commitUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var value;\nvalue = host + \"/commit\";\nreturn value;\n\n","supplementalCode":"","description":""}},"requestUrl":{"name":"requestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return host + \"/cannedsearch\";\n\n","supplementalCode":"","description":""}},"dataSetInfo":{"name":"dataSetInfo","type":"apogee.JsonTable","updateData":{"data":{"name":"Micemetar","records":{"com_file_entry":{"foreignList":[],"idField":"com_file_entry_id","name":"com_file_entry","recordClass":"com.micello.micemetar.data.ComFileEntry","fields":[{"fieldClass":"java.lang.Integer","name":"ordr","nullOk":false,"defaultValue":0},{"fieldClass":"com.micello.micemetar.data.ComFile","name":"com_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.MetaFile","name":"meta_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"file_group","nullOk":false,"defaultValue":null}]},"com_file":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"com_file_id","remoteRecord":"com_file_entry","orderField":"ordr","name":"com_file_entry_list"}],"idField":"com_file_id","name":"com_file","recordClass":"com.micello.micemetar.data.ComFile","fields":[{"fieldClass":"java.lang.String","name":"file_context","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"name","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"ref","nullOk":true,"defaultValue":null}]},"file_entry":{"foreignList":[],"idField":"file_entry_id","name":"file_entry","recordClass":"com.micello.micemetar.data.FileEntry","fields":[{"fieldClass":"java.lang.String","name":"entry_context","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"entry_name","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.FileType","name":"file_type_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"entry_section","nullOk":true,"defaultValue":null},{"fieldClass":"java.lang.String","name":"entry_key","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"option_name","nullOk":false,"defaultValue":null},{"fieldClass":"org.json.JSONObject","name":"entry_data","nullOk":false,"defaultValue":null}]},"file_type":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"file_type_id","remoteRecord":"file_entry","name":"file_entry_list"}],"idField":"file_type_id","name":"file_type","recordClass":"com.micello.micemetar.data.FileType","fields":[{"fieldClass":"java.lang.String","name":"file_type_name","nullOk":true,"defaultValue":null}]},"meta_file":{"foreignList":[{"restrictDelete":true,"isUnique":false,"remoteField":"meta_file_id","remoteRecord":"recipe_entry","orderField":"ordr","name":"recipe_entry_list"}],"idField":"meta_file_id","name":"meta_file","recordClass":"com.micello.micemetar.data.MetaFile","fields":[{"fieldClass":"com.micello.micemetar.data.FileType","name":"file_type_id","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"file_context","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"name","nullOk":false,"defaultValue":null},{"fieldClass":"java.lang.String","name":"use_type","nullOk":false,"defaultValue":null},{"fieldClass":"org.json.JSONObject","name":"ref","nullOk":true,"defaultValue":null}]},"recipe_entry":{"foreignList":[],"idField":"recipe_entry_id","name":"recipe_entry","recordClass":"com.micello.micemetar.data.RecipeEntry","fields":[{"fieldClass":"java.lang.Integer","name":"ordr","nullOk":false,"defaultValue":0},{"fieldClass":"com.micello.micemetar.data.MetaFile","name":"meta_file_id","nullOk":false,"defaultValue":null},{"fieldClass":"com.micello.micemetar.data.FileEntry","name":"file_entry_id","nullOk":false,"defaultValue":null},{"fieldClass":"org.json.JSONObject","name":"insertion_info","nullOk":true,"defaultValue":null}]}},"version":"5.0"},"description":""}},"createUpdateInstruction":{"name":"createUpdateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["initialRecord","targetRecord"],"functionBody":"if(initialRecord.Id != targetRecord.Id) {\n    throw new Error(\"Record ID mismatch in create update instruction for target record: \" + getRecordErrString(targetRecord));\n}\n\nif(initialRecord.Type != targetRecord.Type) {\n    throw new Error(\"Inital and target record types do not match. Target record: \" + getRecordErrString(targetRecord));\n}\n\nvar recordsDifferent = false;\n\nvar recordInfo = getRecordInfo(initialRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Update\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = initialRecord.Id;\n\ninstruction.initialReadPerm = initialRecord.read_perm;\ninstruction.initialEditPerm = initialRecord.edit_perm;\n\nif(initialRecord.readPerm != targetRecord.readPerm) {\n    instruction.targetReadPerm = targetRecord.read_perm;\n    recordsDifferent = true;\n}\n\nif(initialRecord.editPerm != targetRecord.editPerm) {\n    instruction.targetEditPerm = targetRecord.edit_perm;\n    recordsDifferent = true;\n}\n\nvar initialData = {};\ninstruction.Initial = initialData;\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    \n    var initialValue;\n    var targetValue;\n    \n    var initialValue = initialRecord.Fields[field.name];\n    var targetValue = targetRecord.Fields[field.name];\n    \n    //validate target values\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(targetRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(targetRecord,field));\n        }\n    }\n    \n    if(!fieldsMatch(initialValue,targetValue,field)) {\n        initialData[field.name] = initialValue;\n        targetData[field.name] = targetValue;\n        recordsDifferent = true;\n    }\n}\n\nif(recordsDifferent) {\n    return instruction;\n}\nelse {\n    return null;\n}\n","supplementalCode":"function fieldsMatch(initialValue,targetValue,fieldInfo) {\n    if(fieldInfo.fieldClass === \"java.lang.String\") {\n        //compare strings with \"==\"\n        return (initialValue == targetValue);\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"java.lang\")) {\n        //compare other basic values with \"===\"\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"com.micello\")) {\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONObject\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONArray\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else {\n        throw new Error(\"unrecognized field type: \" + fieldInfo.fieldClass);\n    }\n}\n\nfunction compareJsonData(a,b) {\n    var an = apogeeutil.getNormalizedObjectCopy(a);\n    var bn = apogeeutil.getNormalizedObjectCopy(b);\n    var aString = JSON.stringify(an);\n    var bString = JSON.stringify(bn);\n    return aString == bString;\n}\n    ","description":"This function creates an update instruction given an initial and target record. If the records are the same then NULL is returned. (No update is needed.)"}},"createCreateInstruction":{"name":"createCreateInstruction","type":"apogee.FunctionTable","updateData":{"argList":["createRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(createRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Create\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = createRecord.Id;\n\ninstruction.targetReadPerm = createRecord.read_perm;\ninstruction.targetEditPerm = createRecord.edit_perm;\n\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var targetValue;\n    var targetValue = createRecord.Fields[field.name];\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(createRecord,field));\n        }\n    }\n    \n    targetData[field.name] = targetValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getFieldErrString":{"name":"getFieldErrString","type":"apogee.FunctionTable","updateData":{"argList":["record","fieldInfo"],"functionBody":"return getRecordErrString(record) + \" - \" + fieldInfo.name;","supplementalCode":"","description":""}},"getRecordErrString":{"name":"getRecordErrString","type":"apogee.FunctionTable","updateData":{"argList":["record"],"functionBody":"return record.Type + \" \" + record.Id;","supplementalCode":"","description":""}},"createDeleteInstruction":{"name":"createDeleteInstruction","type":"apogee.FunctionTable","updateData":{"argList":["deleteRecord"],"functionBody":"\nvar recordInfo = getRecordInfo(deleteRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Delete\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = deleteRecord.Id;\n\ninstruction.initialReadPerm = deleteRecord.read_perm;\ninstruction.initialEditPerm = deleteRecord.edit_perm;\n\nvar initialData = {};\ninstruction.Initial = initialData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var initialValue = deleteRecord.Fields[field.name];\n    \n    initialData[field.name] = initialValue;\n}\n\nreturn instruction;\n","supplementalCode":"","description":""}},"getRecordInfo":{"name":"getRecordInfo","type":"apogee.FunctionTable","updateData":{"argList":["recordType"],"functionBody":"var recordInfo = dataSetInfo.records[recordType];\n\nif(!recordInfo) {\n    throw new Error(\"Record type not found in getRecordInfo: \" + recordType);\n}\n\nreturn recordInfo;","supplementalCode":"","description":""}},"combinedEntriesToInstructionList":{"name":"combinedEntriesToInstructionList","type":"apogee.FunctionTable","updateData":{"argList":["combinedEntries"],"functionBody":"var output = [];\nfor(var key in combinedEntries) {\n    var entry = combinedEntries[key];\n    var instruction = getInstructionForCombinedEntry(entry);\n    if(instruction) {\n        output.push(instruction);\n    }\n}\n\nreturn output;","supplementalCode":"function getInstructionForCombinedEntry(combinedEntry) {\n    var newEntry = combinedEntry.newEntry;\n    var oldEntry = combinedEntry.oldEntry;\n    \n    if(newEntry) {\n        if(!oldEntry) {\n            console.log(\"Create: \" + newEntry.Id);\n            return createCreateInstruction(newEntry);\n        }\n        else {\n            //this will return null for matching records\n            console.log(\"Update(maybe): \" + newEntry.Id);\n            return createUpdateInstruction(oldEntry,newEntry);\n        }\n    }\n    else if(oldEntry) {\n        console.log(\"Delete: \" + oldEntry.Id);\n        return createDeleteInstruction(oldEntry);\n    }\n    \n    return null;\n}\n\nfunction entriesDifferent(entry1,entry2) {\n    var string1 = JSON.stringify(apogeeutil.getNormalizedCopy(entry1));\n    var string2 = JSON.stringify(apogeeutil.getNormalizedCopy(entry2));\n    return (string1 == string2);\n}","description":"This function takes a combined entry map of the format:\n\n{\n  \"some-identifier\":{\n    \"oldEntry\":{original record entry, if applicable},\n    \"newEntry\":{new record entry, if applicable}\n  },\n  ...\n}\n\nIt returns an instruction list.\n\n"}},"getCommitPromise":{"name":"getCommitPromise","type":"apogee.FunctionTable","updateData":{"argList":["instructionList","commitMessage","sessionKey"],"functionBody":"var commitBody = createCommitBody(instructionList,commitMessage);\nvar requestOptions = createRequestOptions(commitBody,sessionKey);\nreturn .jsonRequest(commitUrl,requestOptions);","supplementalCode":"","description":""}},"getRequestPromise":{"name":"getRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn .jsonRequest(requestUrl,requestOptions);","supplementalCode":"","description":""}},"customRequestUrl":{"name":"customRequestUrl","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return host + \"/request\";","supplementalCode":"","description":""}},"getCustomRequestPromise":{"name":"getCustomRequestPromise","type":"apogee.FunctionTable","updateData":{"argList":["requestBody","sessionKey"],"functionBody":"var requestOptions = createRequestOptions(requestBody,sessionKey);\nreturn .jsonRequest(customRequestUrl,requestOptions);","supplementalCode":"","description":""}}}}}}},"components":{"type":"apogeeapp.app.FolderComponent","treeState":-1,"children":{"login":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":137,"y":24}},"tabOpen":true,"treeState":-1,"children":{"loginUrl":{"type":"apogeeapp.app.TextComponent","windowState":{"sizeInfo":{"width":463,"height":106},"posInfo":{"x":27,"y":42},"state":0,"viewType":"Text"}},"loginControl":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":343,"height":101},"posInfo":{"x":32,"y":183},"state":0,"viewType":"Output"},"resource":{"html":"","css":"","setData":"this.loginUrl = data;","constructorAddition":"\n\n//this uses the updated version of test authorization that takes and returns a JSON\nthis.onClick = function() {\n    \n    //get the output table\n    var outputTableName = \"sessionResponse\";\n    var fromMember = mode.getMember();\n    \n    //on click\n    var bodyJson = {};\n    bodyJson.userName = resource.userInput.value;\n    bodyJson.password = resource.passwordInput.value;\n    \n    //cleaer password field\n    resource.passwordInput.value = \"\";\n    \n    var options = {};\n    options.body = JSON.stringify(bodyJson);\n    options.method = \"POST\";\n    \n    var requestPromise = .jsonRequest(this.loginUrl,options);\n    apogee.action.asynchDataUpdate(outputTableName,fromMember,requestPromise);\n}","init":"\nvar label1 = document.createElement(\"label\");\nlabel1.for = \"userInput\";\nlabel1.innerHTML = \"User:\"\nelement.appendChild(label1);\n\nvar input1 = document.createElement(\"input\");\ninput1.id = \"userInput\";\nresource.userInput = input1;\nelement.appendChild(input1);\n\nelement.appendChild(document.createElement(\"br\"));\n\nvar label2 = document.createElement(\"label\");\nlabel2.for = \"passwordInput\";\nlabel2.innerHTML = \"Password:\"\nelement.appendChild(label2);\n\nvar input2 = document.createElement(\"input\");\ninput2.type = \"password\";\ninput2.id = \"passwordInput\";\nresource.passwordInput = input2;\nelement.appendChild(input2);\n\nelement.appendChild(document.createElement(\"br\"));\n\nvar button = document.createElement(\"button\");\nbutton.innerHTML = \"Login\";\nelement.appendChild(button);\n\nvar instance = this;\nbutton.onclick = function() {\n    instance.onClick();\n}\n\n\n"},"destroyOnInactive":false},"sessionResponse":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":697,"height":158},"posInfo":{"x":34,"y":340},"state":0,"viewType":"Data"},"dataView":"Colorized"},"sessionKey":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":587,"height":167},"posInfo":{"x":41,"y":549},"state":0,"viewType":"Formula"},"dataView":"Colorized"}}},"data":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":51,"y":24}},"tabOpen":true,"treeState":-1,"children":{"fileEntryDownload":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":698,"height":322},"posInfo":{"x":328,"y":241},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"fileTypeMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":642,"height":371},"posInfo":{"x":612,"y":16},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"getFileTypeId":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":42},"posInfo":{"x":610,"y":60},"state":-1,"viewType":"Code"}},"getFileTypeName":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":609,"y":105},"state":-1,"viewType":"Code"}},"fileTypeSearch":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":52,"y":20},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"fileEntrySearch":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":49,"y":246},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"fileTypeDownload":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":635,"height":375},"posInfo":{"x":302,"y":18},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"fileEntries":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":513,"height":297},"posInfo":{"x":209,"y":149},"state":0,"viewType":"Data"},"dataView":"Colorized"}}},"output":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":47,"y":75}},"tabOpen":true,"treeState":-1,"children":{"fileEntryGrid":{"type":"apogeeapp.app.GridTableComponent","windowState":{"sizeInfo":{"width":1062,"height":548},"posInfo":{"x":256,"y":309},"state":0,"viewType":"Grid"}},"serializers":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":93,"y":36}},"tabOpen":true,"treeState":-1,"children":{"normalSerializer":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":621,"height":206},"posInfo":{"x":40,"y":32},"state":-1,"viewType":"Code"}},"loadBaseColumns":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":734,"height":410},"posInfo":{"x":40,"y":91},"state":-1,"viewType":"Code"}},"loadExtendedColumns":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":599,"height":400},"posInfo":{"x":36,"y":155},"state":-1,"viewType":"Code"}},"geomPropRuleColumns":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":775,"height":400},"posInfo":{"x":34,"y":265},"state":-1,"viewType":"Code"}}}},"baseColumns":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":138},"posInfo":{"x":675,"y":27},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"getColumns":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":574,"height":400},"posInfo":{"x":52,"y":165},"state":-1,"viewType":"Code"}},"standardEntryDataColumns":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":625,"height":619},"posInfo":{"x":989,"y":169},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"headerRows":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":637,"height":492},"posInfo":{"x":672,"y":73},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"fileTypeIndex":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":237,"height":65},"posInfo":{"x":968,"y":23},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"rowSortFields":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":567,"height":300},"posInfo":{"x":969,"y":72},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"rowSortIndexValues":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":498,"height":300},"posInfo":{"x":993,"y":131},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"themeRulesPayload":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":992,"y":214},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"propertyClassify":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":572,"y":376}},"tabOpen":true,"treeState":-1,"children":{"isChildFeatureType":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":625,"height":400},"posInfo":{"x":39,"y":32},"state":0,"viewType":"Code"}},"isChildValue":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":622,"y":162},"state":0,"viewType":"Code"}},"isChildKey":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":108,"y":441},"state":0,"viewType":"Code"}},"getPropRuleType":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":855,"y":461},"state":0,"viewType":"Code"}}}},"geomPropRuleGrid":{"type":"apogeeapp.app.GridTableComponent","windowState":{"sizeInfo":{"width":1222,"height":479},"posInfo":{"x":54,"y":175},"state":0,"viewType":"Grid"}},"getGeomPropRuleColumns":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":856,"height":407},"posInfo":{"x":455,"y":314},"state":-1,"viewType":"Code"}},"extendedGeomPropHeaderRows":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":691,"height":579},"posInfo":{"x":456,"y":267},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"geomPropRulesHeaderRows":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":806,"height":300},"posInfo":{"x":460,"y":225},"state":-1,"viewType":"Data"},"dataView":"Colorized"}}},"micemetarDataAccess":{"type":"apogeeapp.app.FolderComponent","tabOpen":true,"treeState":-1,"children":{"createRecord":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":560,"height":321},"posInfo":{"x":33,"y":368},"state":-1,"viewType":"Private"}},"recordsToCreateInstructions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":834,"height":391},"posInfo":{"x":30,"y":472},"state":-1,"viewType":"Code"}},"createCommitBody":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":568,"height":400},"posInfo":{"x":629,"y":225},"state":-1,"viewType":"Code"}},"createRequestOptions":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":523,"height":254},"posInfo":{"x":822,"y":379},"state":-1,"viewType":"Code"}},"host":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":353,"height":71},"posInfo":{"x":16,"y":6},"state":0,"viewType":"Data"},"dataView":"Colorized"},"commitUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":433,"height":107},"posInfo":{"x":14,"y":98},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"requestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":450,"height":68},"posInfo":{"x":14,"y":58},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"dataSetInfo":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":882,"height":611},"posInfo":{"x":317,"y":144},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"createUpdateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":1002,"height":655},"posInfo":{"x":37,"y":247},"state":-1,"viewType":"Code"}},"createCreateInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":994,"height":643},"posInfo":{"x":39,"y":209},"state":-1,"viewType":"Code"}},"getFieldErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":512,"height":68},"posInfo":{"x":761,"y":616},"state":-1,"viewType":"Code"}},"getRecordErrString":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":81},"posInfo":{"x":762,"y":664},"state":-1,"viewType":"Code"}},"createDeleteInstruction":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":678,"height":540},"posInfo":{"x":36,"y":289},"state":-1,"viewType":"Code"}},"getRecordInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":480,"height":400},"posInfo":{"x":818,"y":427},"state":-1,"viewType":"Code"}},"combinedEntriesToInstructionList":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":721,"height":524},"posInfo":{"x":31,"y":516},"state":-1,"viewType":"Private"}},"getCommitPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":569,"height":109},"posInfo":{"x":316,"y":26},"state":-1,"viewType":"Code"}},"getRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":546,"height":89},"posInfo":{"x":315,"y":67},"state":-1,"viewType":"Code"}},"customRequestUrl":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":17,"y":142},"state":-1,"viewType":"Formula"},"dataView":"Colorized"},"getCustomRequestPromise":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":668,"height":88},"posInfo":{"x":317,"y":104},"state":-1,"viewType":"Code"}}}}}},"activeTabMember":"Model.output"}