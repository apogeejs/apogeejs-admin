{"fileType":"apogee app js workspace","version":"0.60","references":{"refEntries":[{"url":"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css","nickname":"leaflet.css","entryType":"css link"},{"url":"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js","nickname":"leaflet.js","entryType":"js link"}],"viewState":{"treeState":1,"lists":{"es module":{"treeState":0},"js link":{"treeState":1},"css link":{"treeState":1}}}},"code":{"model":{"fileType":"apogee model","version":0.3,"name":"Workspace","children":{"main":{"name":"main","type":"apogee.Folder","children":{"inputGeojson":{"name":"inputGeojson","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return apogeeutil.jsonRequest(\"https://opendata.arcgis.com/datasets/291ec8e49e0a4e50a8823011a7f5bf2c_0.geojson\")","supplementalCode":""}},"dataPoints":{"name":"dataPoints","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let rawResults = inputGeojson.features.filter( feature => {\n    let props = feature.properties;\n    return (\n        (props.STREETNAME == \"Shoreline\") &&\n        (props.STREETPREDIR == \"N\") &&\n        (props.ADDRNUM >= 400) &&\n        (props.ADDRNUM < 500)\n    )\n}).sort((f1,f2) => (parseInt(f1.properties.ADDRNUM) - parseInt(f2.properties.ADDRNUM)));\n\nreturn rawResults.map(_simplify);","supplementalCode":"function _simplify(rawFeature) {\n    let props = rawFeature.properties;\n    return {\n        id: props.OBJECTID,\n        latLon: [parseFloat(rawFeature.geometry.coordinates[1]),parseFloat(rawFeature.geometry.coordinates[0])],\n        streetName: props.STREETNAME,\n        addrNum: props.ADDRNUM,\n        fullAddr: props.FULLADDR\n    }\n}"}},"map":{"name":"map","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return {\n    points: dataPoints,\n    range: dataRange\n}","supplementalCode":""}},"dataRange":{"name":"dataRange","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let min, max;\n\ndataPoints.forEach( dataPoint => {\n    latLon = dataPoint.latLon;\n    if(!min) {\n        //initial values - make a copy! (shallow ok since they are just numbers)\n        min = [...latLon];\n        max = [...latLon];\n        return;\n    }\n    \n    //update range\n    if(latLon[0] < min[0]) min[0] = latLon[0];\n    if(latLon[1] < min[1]) min[1] = latLon[1];\n    if(latLon[0] > max[0]) max[0] = latLon[0];\n    if(latLon[1] > max[1]) max[1] = latLon[1];\n})\n\nreturn [min,max]","supplementalCode":""}},"inputRegister":{"name":"inputRegister","type":"apogee.JsonMember","updateData":{"data":null}},"idList":{"name":"idList","type":"apogee.JsonMember","updateData":{"data":[14227,529,1570,56400]}},"inputListener":{"name":"inputListener","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let newId = inputRegister;\nlet currentIdList = idList ? idList : [];\nif(newId) {\n    if(currentIdList.indexOf(newId) < 0) {\n        let newIdList = currentIdList.concat([newId]);\n        apogeeMessenger.compoundDataUpdate([[\"inputRegister\",null],[\"idList\",newIdList]]);\n    }\n    else {\n        apogeeMessenger.dataUpdate(\"inputRegister\",null);\n    }\n}\nreturn \"OK\";","supplementalCode":""}}}}}},"components":{"main":{"type":"apogeeapp.PageComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"OSM Data Checker"}]},{"type":"paragraph","content":[{"type":"text","text":"Here we read a random geo dataset, which has point data."}]},{"type":"apogeeComponent","attrs":{"name":"inputGeojson","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"We filter these points to meet some random criteria (on a block near my house), and we simplify the form a little."}]},{"type":"apogeeComponent","attrs":{"name":"dataPoints","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here we get a boundary range for out data."}]},{"type":"apogeeComponent","attrs":{"name":"dataRange","id":0,"state":""}},{"type":"paragraph"},{"type":"paragraph","content":[{"type":"text","text":"Here we plot our data. We include a popup for each point that will push the data point back to us."}]},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"map","id":0,"state":""}},{"type":"paragraph"},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"inputRegister","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"inputListener","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"idList","id":0,"state":""}},{"type":"paragraph"},{"type":"paragraph"}]}},"children":{"inputGeojson":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"dataPoints":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":true},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":true,"height":7000}}}}},"map":{"type":"apogeeapp.CustomCell","resource":{"html":"<div id=\"map_mapDiv\"></div>","css":"#map_mapDiv {\n    height: 800px;\n    width: 1000px;\n}","uiCode":"class MapClass {\n    constructor() {\n        this.map = null;\n        __globals__.__customControlDebugHook();\n    }\n    \n    init(outputElement,admin) {\n        __globals__.osm_addToUpdates = function(data) {\n            console.log(\"function called!\");\n            admin.getCommandMessenger().dataCommand(\"inputRegister\",data);\n            console.log(\"function succeeded!\");\n        }\n    }\n    \n    onLoad(outputElement,admin) {\n        if(!this.map) {\n            this.map = L.map(\"map_mapDiv\");\n            L.tileLayer('https://a.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(this.map);\n        } \n    }\n    \n    onUnload(outputElement,admin) {\n        \n    }\n    \n    setData(data,outputElement,admin) {\n        if(data.range) this.map.fitBounds(data.range);\n        if(data.points) {\n            data.points.forEach( point => {\n                let marker = L.marker(point.latLon).addTo(this.map)\n                marker.bindPopup(this._getPopupHtml(point));\n            });\n        }\n    }\n    \n    destroy() {\n        \n    }\n    \n    //======================================\n    \n    _getPopupHtml(data) {\n        let dataString = JSON.stringify(data,null,\"\\t\");\n        let html = `<pre>${dataString}</pre>\n            <button onclick=\"osm_addToUpdates(${data.id})\">Add to updates!</button>`;\n        return html;\n    }\n}\n\nreturn new MapClass();"},"destroyOnInactive":false,"viewState":{"childDisplayState":{"views":{"Display":{"isViewActive":true},"Input Code":{"isViewActive":true,"height":7000},"Input Private":{"isViewActive":false},"HTML":{"isViewActive":true,"height":7000},"CSS":{"isViewActive":true,"height":7000},"uiGenerator()":{"isViewActive":true,"height":7000}}}}},"dataRange":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"inputRegister":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"idList":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"inputListener":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":1,"tabOpened":true,"tabShowing":true}},"viewState":{"treeState":1}}},"viewState":{"treeState":1}}