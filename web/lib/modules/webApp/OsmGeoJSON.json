{"fileType":"apogee app js workspace","version":"0.40","references":[{"url":"https://unpkg.com/leaflet@1.2.0/dist/leaflet.js","entryType":"js link"},{"url":"https://unpkg.com/leaflet@1.2.0/dist/leaflet.css","entryType":"css link"}],"workspace":{"fileType":"apogee workspace","version":0.2,"name":"OsmGeoJSON","data":{"name":"Model","type":"apogee.Folder","children":{"mapData":{"name":"mapData","type":"apogee.Folder","children":{"geojson":{"name":"geojson","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\noutput.type = \"FeatureCollection\";\noutput.properties = {};\n\nvar hasTags = (element) => (element.tags !== undefined);\n\nvar toGeojsonFeature = (osmFeature) => {\n    var geojsonFeature = {};\n    geojsonFeature.type = \"Feature\";\n    geojsonFeature.id = osmFeature.id;\n    geojsonFeature.properties = osmFeature.tags;\n    geojsonFeature.geometry = getGeojsonGeometry(osmFeature);\n    return geojsonFeature;\n}\n\noutput.features = osmData.elements.filter(hasTags)\n                    .filter(propertyFunctions.featureFilter)\n                    .map(toGeojsonFeature);\n\nreturn output;","supplementalCode":"function getGeojsonGeometry(osmFeature) {\n    var geometry = {};\n    if(osmFeature.type == \"node\") {\n        geometry.type = \"Point\";\n        geometry.coordinates = getPointCoordinates(osmFeature.id);\n    }\n    else if(osmFeature.type == \"way\") {\n        if(propertyFunctions.isPolygon(osmFeature)) {\n            geometry.type = \"Polygon\";\n            geometry.coordinates = getPolygonCoordinates(osmFeature.nodes)\n        }\n        else {\n            geometry.type = \"LineString\";\n            geometry.coordinates = getLineStringCoordinates(osmFeature.nodes);\n        }\n    }\n    else {\n        throw new Error(\"Unexpected osm type: \" + osmFeature.type);\n    }\n    return geometry;\n}\n\n// function isPolygon(osmFeature) {\n//     return false;\n// }\n\n/** Point - lookup lon lat point for given node id */\nfunction getPointCoordinates(nodeId) {\n    return geojsonPointLookupTable[nodeId];\n}\n\n/** Line String - list of lat lon points for a list of node ids */\nfunction getLineStringCoordinates(nodeIdList) {\n    return nodeIdList.map(getPointCoordinates);\n}\n\n/** Polygon - get a list o fline strings (with one entry - the outer loop)\n * We are not supporting interior rings for now. */\nfunction getPolygonCoordinates(nodeIdList) {\n    return [getLineStringCoordinates(nodeIdList)];\n}\n\n","description":"This is the output GeoJSON object. \n\nIt is non-standard in one way. This does not include oriented polygons, which was added to the GeoJSON spec in August 2016. That can be added if desired."}},"osmData":{"name":"osmData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var options = {};\noptions.method = \"POST\";\noptions.body = getBody(swneBoundingBox);\n\nreturn apogee.net.jsonRequest(url,options);","supplementalCode":"function getBody(boundingBoxArray) {\n    var bboxString = boundingBoxArray.join(\",\");\n    var body = apogee.util.formatString(\"[out:json];(node({0});(way({0});>;););out;\",bboxString);\n    return body;\n}","description":"This is the downloaded OSM data for the given bounding box."}},"geojsonPointLookupTable":{"name":"geojsonPointLookupTable","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nvar isNode = (element) => (element.type == \"node\");\nvar addToMap = (element) => output[element.id] = [element.lon,element.lat];\n\nosmData.elements.filter(isNode).forEach(addToMap);\n\nreturn output;","supplementalCode":"","description":""}},"url":{"name":"url","type":"apogee.JsonTable","updateData":{"data":"https://overpass-api.de/api/interpreter","description":"This is the URL for the OSM server."}},"swneBoundingBox":{"name":"swneBoundingBox","type":"apogee.JsonTable","updateData":{"data":[37.39139378135776,-122.0823633670807,37.39584324147536,-122.07542181015016],"description":"This is the bounding box used for downloading OSM data."}}}},"propertyFunctions":{"name":"propertyFunctions","type":"apogee.Folder","children":{"tags":{"name":"tags","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var tagMap = {};\n\nvar saveTags = function(osmFeature) {\n    for(var key in osmFeature.tags) {\n        var keyEntry = tagMap[key];\n        if(!keyEntry) {\n            keyEntry = {};\n            tagMap[key] = keyEntry;\n        }\n        \n        var value = osmFeature.tags[key];\n        if(keyEntry[value] === undefined) {\n            keyEntry[value] = 1;\n        }\n        else {\n            keyEntry[value]++;\n        }\n    }\n}\n\nmapData.osmData.elements.forEach(saveTags);\n\nreturn tagMap;","supplementalCode":"","description":"These are all tags that appear in the downloaded geojson data. This is intended to help in designing the theme for the map. "}},"columnIndexMap":{"name":"columnIndexMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nfor(var i = 0; i < columns.length; i++) {\n    output[columns[i]] = i;\n}\n\nreturn output;","supplementalCode":"","description":"This is a map of keys to spreadsheet rows, used for value lookup."}},"columns":{"name":"columns","type":"apogee.JsonTable","updateData":{"data":["Key","Value","Include in Map","Is Polygon","Fill Color","Stroke Color","Stroke Weight","Icon Url","Icon Anchor"],"description":"These are a list of columns in the theme info."}},"mapFilter":{"name":"mapFilter","type":"apogee.FunctionTable","updateData":{"argList":["geojsonFeature"],"functionBody":"var styleInfo;\n\nif(geojsonFeature.geometry.type == \"Point\") {\n    styleInfo = getPointStyle(geojsonFeature);\n}\nelse {\n    styleInfo = getLineAndAreaStyle(geojsonFeature);\n}\n\nreturn (styleInfo != null);","supplementalCode":"","description":"This filter is used to decide which objects should be rendered in leaflet."}},"keysOfInterest":{"name":"keysOfInterest","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((!settingsForm.data)||(!settingsForm.data.keysOfInterest)) return [];\n\nvar inputString = settingsForm.data.keysOfInterest.trim();\n\nif(inputString != \"\") {\n    //split on commas and return\n    var inValueArray = inputString.split(/[\\s,]+/);\n    var outValueArray = [];\n    var insertValue = value => {\n        var valueToAdd = value.trim();\n        if(valueToAdd.length > 0) {\n            outValueArray.push( {\"value\":valueToAdd});\n        }\n    }\n    inValueArray.forEach(insertValue);\n    \n    return inValueArray;\n}\nelse {\n    return [];\n}\n ","supplementalCode":"","description":"These are the keys of interest from the settings form, compiled into a JSON array. "}},"getRowEntry":{"name":"getRowEntry","type":"apogee.FunctionTable","updateData":{"argList":["row","columnName"],"functionBody":"var columnIndex = columnIndexMap[columnName];\nif(columnIndex === undefined) {\n    throw new Error(\"Unknown theme column: \" + columnName);\n}\n\nreturn row[columnIndex];","supplementalCode":"","description":"This function looks up a value from the theme input for a given column and row."}},"isPolygon":{"name":"isPolygon","type":"apogee.FunctionTable","updateData":{"argList":["osmFeature"],"functionBody":"return getPropertyInfo(\"polygon\",osmFeature.tags);","supplementalCode":"","description":"This function is used to determine which osm \"ways\" (lines and polygons) should be included in the GeoJSON as polygons, as opposed to linestrings."}},"getLineAndAreaStyle":{"name":"getLineAndAreaStyle","type":"apogee.FunctionTable","updateData":{"argList":["geojsonFeature"],"functionBody":"return getPropertyInfo(\"style\",geojsonFeature.properties);","supplementalCode":"","description":"This function gets the rendering style for a geojson linestring or polygon."}},"getPointStyle":{"name":"getPointStyle","type":"apogee.FunctionTable","updateData":{"argList":["geojsonFeature"],"functionBody":"return getPropertyInfo(\"pointStyle\",geojsonFeature.properties);\n\n","supplementalCode":"","description":"This function loads the rendering information for a point for a given geojson feature."}},"themeTemplate":{"name":"themeTemplate","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = [];\n\n//header row\noutput.push(columns);\n\nvar addKeyToGrid = function(key) {\n    for(var tag in tags[key]) {\n        var row = [key,tag];\n        output.push(row);\n    }\n    var defaultRow = [key,\"\"];\n    output.push(defaultRow);\n}\n\nkeysOfInterest.forEach(addKeyToGrid);\n\nreturn output;","supplementalCode":"","description":"This grid includes blank content for the geojson theme and creation. It includes all properties included in the \"keys of interest\" from the settings form. It can be copied and pasted into an spreadsheet such as Excel to enter the desired style info."}},"getPropertyInfo":{"name":"getPropertyInfo","type":"apogee.FunctionTable","updateData":{"argList":["type","featureProperties"],"functionBody":"var infoList = propertyInfoStruct[type];\nif(!infoList) throw new Error(\"Property type not found: \" + type);\n\nvar matchesFeature = entry => {\n    \n    //it is an automatic match is the entry has not key\n    if(entry.key == undefined) return payload;\n    \n    //below here, we require properties are present for any match\n    if(!featureProperties) return null;\n    \n    var featureValue = featureProperties[entry.key];\n    if(featureValue !== undefined) {\n        //feature matches if the entry has this key and\n        //the entry either doesn't specify a value or its value matches the feature value\n        if((entry.value === undefined)||(entry.value == featureValue)) return true;\n    }\n    return false;\n}\n\nvar entry = infoList.find(matchesFeature);\nreturn entry ? entry.payload : null;","supplementalCode":"","description":"This function reads the payload from a given tree for the given feature."}},"propertyInfoStruct":{"name":"propertyInfoStruct","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\noutput.filter = [];\noutput.polygon = [];\noutput.style = [];\noutput.pointStyle = [];\n\nvar processRow = (row,index) => {\n    //ignore the title row\n    if(index === 0) return;\n    \n    var key = getRowEntry(row,\"Key\");\n    var value = getRowEntry(row,\"Value\");\n    \n    var filterEntry = _getFeatureFilterInfo(key,value,row);\n    if(filterEntry) output.filter.push(filterEntry);\n    \n    var polygonEntry = _getPolygonInfo(key,value,row);\n    if(polygonEntry) output.polygon.push(polygonEntry);\n    \n    var styleEntry = _getStyleInfo(key,value,row);\n    if(styleEntry) output.style.push(styleEntry);\n    \n    var pointStyleEntry = _getPointStyleInfo(key,value,row);\n    if(pointStyleEntry) output.pointStyle.push(pointStyleEntry);\n}\n\nthemeInput.forEach(processRow);\n\nreturn output;\n","supplementalCode":"/** This method creates the entry for the geojson creation feature filter */\nfunction _getFeatureFilterInfo(key,value,row) {\n    var includeInMap = getRowEntry(row,\"Include in Map\");\n\n    if(_isTrue(includeInMap)) {\n        //return polygon info\n        return _createEntry(key,value,true);\n    }\n    else {\n        //not a polygon\n        return null;\n    }\n}\n\n/** This method creates the payload for the isPolygon check. */\nfunction _getPolygonInfo(key,value,row) {\n    var isPolygon = getRowEntry(row,\"Is Polygon\");\n\n    if(_isTrue(isPolygon)) {\n        //return polygon info\n        return _createEntry(key,value,true);\n    }\n    else {\n        //not a polygon\n        return null;\n    }\n}\n\n/** This function gets the styel info for lines and polygons */\nfunction _getStyleInfo(key,value,row) {\n    //read style info\n    var fillColor = getRowEntry(row,\"Fill Color\");\n    var strokeColor = getRowEntry(row,\"Stroke Color\");\n    var strokeWeight = getRowEntry(row,\"Stroke Weight\");\n    \n    var styleInfo = {};\n    var entryAdded = false;\n    \n    if(fillColor != \"\") {\n        styleInfo.fillColor = fillColor;\n        entryAdded = true;\n    }\n    if(strokeColor != \"\") {\n        styleInfo.color = strokeColor;\n        if(strokeWeight != \"\") {\n            styleInfo.weight = strokeWeight;\n        }\n        entryAdded = true;\n    }\n    \n    if(entryAdded) {\n        //return style\n        return _createEntry(key,value,styleInfo);\n    }\n    else {\n        //no style info found\n        return null;\n    }\n}\n\n/** This method create the payload for the Point Style theme. */\nfunction _getPointStyleInfo(key,value,row) {\n    var url = getRowEntry(row,\"Icon Url\");\n    if(url != \"\") {\n        styleInfo = {};\n        styleInfo.iconUrl = url;\n        var anchorString = getRowEntry(row,\"Icon Anchor\");\n        if((anchorString)&&(anchorString != \"\")) {\n            styleInfo.iconAnchor = JSON.parse(anchorString);\n        }\n        //return style info\n        return _createEntry(key,value,styleInfo);\n    }\n    else {\n        //no style into found\n        return null;\n    }\n}\n\n/** This method takes an input string value and returns whether ort not it is true. \n * The recommended inputs for trus are either the work true (in any case) or the number 1. */\nfunction _isTrue(stringValue) {\n    if(!stringValue) return false;\n    return JSON.parse(stringValue.trim().toLowerCase()) ? true : false;\n}\n\n/** This is a blank value in the property info table. */\nconst BLANK_VALUE = \"\";\n\n/** This method returns true if the string value, as taken as a cell value in the spreadsheet\n * input, is NOT empty. */\nfunction _isNotBlank(stringValue) {\n    if(!stringValue) return false;\n    //ignore extra spaces\n    stringValue = stringValue.trim();\n    return (string !== BLANK_VALUE);\n}\n\n/** This creates a payload entry from the given payload. */\nfunction _createEntry(key,value,payload) {\n    var data = {};\n    //key and value\n    if(_isNotBlank(key)) data.key = key;\n    if(_isNotBlank(value)) data.value = value;\n    //payload\n    data.payload = payload;\n    \n    return data;\n}\n\n\n\n","description":"This the compiled data from the theme input table. This converts the data into a format usable by the rest of the program."}},"featureFilter":{"name":"featureFilter","type":"apogee.FunctionTable","updateData":{"argList":["osmFeature"],"functionBody":"//only filter the data if the settings content value is \"Selected\"\nif((!settingsForm.data)||(settingsForm.data.content != \"Selected\")) {\n    return true;\n}\n\nreturn getPropertyInfo(\"filter\",osmFeature.tags);\n","supplementalCode":"","description":"This filter is used to decide which objects to put in the GeoJSON."}}}},"themeInput":{"name":"themeInput","type":"apogee.JsonTable","updateData":{"data":[["Key","Value","Include In Map","Is Polygon","Fill Color","Stroke Color","Stroke Weight","Icon Url","Icon Anchor"],["highway","traffic_signals","","","","","","",""],["highway","turning_circle","","","","","","",""],["highway","stop","","","","","","",""],["highway","crossing","","","","","","",""],["highway","primary_link","","","","","","",""],["highway","service","","","","","","",""],["highway","residential","","","","#404080","4","",""],["highway","unclassified","","","","","","",""],["highway","primary","","","","#800000","12","",""],["highway","primary_link","","","","#800000","8","",""],["highway","footway","","","","","","",""],["highway","motorway","","","","#0000ff","16","",""],["highway","motorway_link","","","","#0000ff","12","",""],["highway","secondary","","","","#800000","8","",""],["highway","","TRUE","","","#404080","4","",""],["building","yes","","","","","","",""],["building","retail","","","","","","",""],["building","roof","","","","","","",""],["building","commercial","","","","","","",""],["building","garage","","","","","","",""],["building","","TRUE","TRUE","#2a4cd4","#404040","1","",""],["cuisine","chinese","","","","","","https://www.apogeejs.com/web/examples/osmRenderResources/flags24/China.png","[12,12]"],["cuisine","ice_cream","","","","","","https://www.apogeejs.com/web/examples/osmRenderResources/food/icecream.png","[12,12]"],["cuisine","burger","","","","","","https://www.apogeejs.com/web/examples/osmRenderResources/food/burger.png","[12,12]"],["cuisine","indian","","","","","","https://www.apogeejs.com/web/examples/osmRenderResources/flags24/India.png","[12,12]"],["cuisine","sandwich","","","","","","https://www.apogeejs.com/web/examples/osmRenderResources/food/sandwich.png","[12,12]"],["cuisine","thai","","","","","","https://www.apogeejs.com/web/examples/osmRenderResources/flags24/Thailand.png","[12,12]"],["cuisine","vietnamese","","","","","","https://www.apogeejs.com/web/examples/osmRenderResources/flags24/VietNam.png","[12,12]"],["cuisine","mexican","","","","","","https://www.apogeejs.com/web/examples/osmRenderResources/flags24/Mexico.png","[12,12]"],["cuisine","spanish","","","","","","https://www.apogeejs.com/web/examples/osmRenderResources/flags24/Spain.png","[12,12]"],["cuisine","mediterranean","","","","","","",""],["cuisine","japanese","","","","","","https://www.apogeejs.com/web/examples/osmRenderResources/flags24/Japan.png","[12,12]"],["cuisine","korean;chicken","","","","","","https://www.apogeejs.com/web/examples/osmRenderResources/flags24/SouthKorea.png","[12,12]"],["cuisine","american","","","","","","https://www.apogeejs.com/web/examples/osmRenderResources/flags24/UnitedStates.png","[12,12]"],["cuisine","bagel","","","","","","https://www.apogeejs.com/web/examples/osmRenderResources/food/bagel.png","[12,12]"],["cuisine","french;italian","","","","","","https://www.apogeejs.com/web/examples/osmRenderResources/flags24/France.png","[12,12]"],["cuisine","pizza","","","","","","https://www.apogeejs.com/web/examples/osmRenderResources/food/pizza.png","[12,12]"],["cuisine","seafood","","","","","","https://www.apogeejs.com/web/examples/osmRenderResources/food/fish.png","[12,12]"],["cuisine","pakistani;indian","","","","","","https://www.apogeejs.com/web/examples/osmRenderResources/flags24/Pakistan.png","[12,12]"],["cuisine","korean","","","","","","https://www.apogeejs.com/web/examples/osmRenderResources/flags24/SouthKorea.png","[12,12]"],["cuisine","bubble_tea","","","","","","https://www.apogeejs.com/web/examples/osmRenderResources/food/tea.png","[12,12]"],["cuisine","asian","","","","","","",""],["cuisine","italian","","","","","","https://www.apogeejs.com/web/examples/osmRenderResources/flags24/Italy.png","[12,12]"],["cuisine","israeli","","","","","","https://www.apogeejs.com/web/examples/osmRenderResources/flags24/Israel.png","[12,12]"],["cuisine","french","","","","","","https://www.apogeejs.com/web/examples/osmRenderResources/flags24/France.png","[12,12]"],["cuisine","japanese;sushi","","","","","","https://www.apogeejs.com/web/examples/osmRenderResources/flags24/Japan.png","[12,12]"],["cuisine","mongolian","","","","","","https://www.apogeejs.com/web/examples/osmRenderResources/flags24/Mongolia.png","[12,12]"],["cuisine","","TRUE","","","","","https://www.apogeejs.com/web/examples/osmRenderResources/food/restaurant.png","[12,12]"],["amenity","fuel","","","","","","",""],["amenity","atm","TRUE","","","","","",""],["amenity","restaurant","TRUE","","","","","",""],["amenity","bicycle_parking","","","","","","",""],["amenity","cafe","TRUE","","","","","",""],["amenity","fast_food","TRUE","","","","","",""],["amenity","parking","","","","","","",""],["amenity","","","","","","","https://www.apogeejs.com/web/examples/osmRenderResources/misc/favorite.png","[8,8]"]],"description":"This input includes the following data for making the GeoJSON and rendering it in the preview map.\n\n- Include in Map - This row value should be set to true if features associated with this row should be included in the geojson.\n\n- In Polygon - If this row is true, osm \"way\" features matching this row will be added to the GeoJSON as polygons. Otherwise they will be added as linestrings.\n\n- <other fields> - These are fields for rendering the features in the preview map.\n"}},"map":{"name":"map","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var data = {};\ndata.geojson = mapData.geojson;\n\nif((settingsForm.data)&&(settingsForm.data.theme == \"Theme Input\")) {\n    data.styleFunctions = {};\n    data.styleFunctions.getLineAndAreaStyle = propertyFunctions.getLineAndAreaStyle;\n    data.styleFunctions.getPointStyle = propertyFunctions.getPointStyle;\n    data.styleFunctions.mapFilter = propertyFunctions.mapFilter;\n}\ndata.bounds = mapData.swneBoundingBox;\n\nreturn data;","supplementalCode":"","description":""}},"settingsForm":{"name":"settingsForm","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return [\n\t{\n\t\t\"type\": \"heading\",\n\t\t\"level\": 2,\n\t\t\"text\": \"Settings\"\n\t},\n\t{\n\t\t\"type\": \"radioButtonGroup\",\n\t\t\"label\": \"Content: \",\n\t\t\"groupName\": \"settingsForm_content\",\n\t\t\"entries\": [\n\t\t\t\"All\",\n\t\t\t\"Selected\"\n\t\t],\n\t\t\"horizontal\": true,\n\t\t\"key\": \"content\"\n\t},\n\t{\n\t\t\"type\": \"radioButtonGroup\",\n\t\t\"label\": \"Theme: \",\n\t\t\"groupName\": \"settingsForm_theme\",\n\t\t\"entries\": [\n\t\t\t\"Default\",\n\t\t\t\"Theme Input\"\n\t\t],\n\t\t\"horizontal\": true,\n\t\t\"key\": \"theme\"\n\t},\n\t{\n\t\t\"type\": \"textarea\",\n\t\t\"label\": \"Keys of Interest (used onle for theme template): \",\n\t\t\"key\": \"keysOfInterest\",\n\t\t\"rows\": 6,\n\t\t\"cols\": 50\n\t},\n]\n    ","supplementalCode":"","description":""}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":{"content":"All","theme":"Default","keysOfInterest":"highway amenity building cuisine"},"description":""}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":"","description":""}}},"childrenNotWriteable":true}}}},"components":{"type":"apogeeapp.app.FolderComponent","tabOpen":true,"treeState":1,"children":{"mapData":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":34,"y":29}},"treeState":1,"children":{"geojson":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":712,"height":610},"posInfo":{"x":525,"y":225},"state":0,"viewType":"Data"},"dataView":"Colorized"},"osmData":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":444,"height":502},"posInfo":{"x":39,"y":227},"state":0,"viewType":"Data"},"dataView":"Colorized"},"geojsonPointLookupTable":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":324,"height":153},"posInfo":{"x":374,"y":20},"state":0,"viewType":"Data"},"dataView":"Colorized"},"url":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":367,"height":49},"posInfo":{"x":756,"y":31},"state":0,"viewType":"Data"},"dataView":"Colorized"},"swneBoundingBox":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":276,"height":115},"posInfo":{"x":45,"y":21},"state":0,"viewType":"Data"},"dataView":"Colorized"}}},"propertyFunctions":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":147,"y":31}},"treeState":1,"children":{"tags":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":821,"height":269},"posInfo":{"x":19,"y":17},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"columnIndexMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":266,"height":148},"posInfo":{"x":444,"y":59},"state":-1,"viewType":"Notes"},"dataView":"Colorized"},"columns":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":229,"height":192},"posInfo":{"x":443,"y":19},"state":-1,"viewType":"Data"},"dataView":"Colorized"},"mapFilter":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":575,"height":406},"posInfo":{"x":33,"y":533},"state":-1,"viewType":"Code"}},"keysOfInterest":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":1043,"height":754},"posInfo":{"x":18,"y":60},"state":-1,"viewType":"Notes"},"dataView":"Colorized"},"getRowEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":560,"height":111},"posInfo":{"x":445,"y":100},"state":-1,"viewType":"Code"}},"isPolygon":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":440,"height":400},"posInfo":{"x":37,"y":381},"state":-1,"viewType":"Code"}},"getLineAndAreaStyle":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":544,"height":243},"posInfo":{"x":35,"y":485},"state":-1,"viewType":"Code"}},"getPointStyle":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":598,"height":566},"posInfo":{"x":36,"y":442},"state":-1,"viewType":"Code"}},"themeTemplate":{"type":"apogeeapp.app.GridTableComponent","windowState":{"sizeInfo":{"width":813,"height":531},"posInfo":{"x":472,"y":205},"state":0,"viewType":"Grid"}},"getPropertyInfo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":698,"height":400},"posInfo":{"x":18,"y":159},"state":-1,"viewType":"Notes"}},"propertyInfoStruct":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":839,"height":501},"posInfo":{"x":18,"y":110},"state":-1,"viewType":"Notes"},"dataView":"Colorized"},"featureFilter":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":649,"height":400},"posInfo":{"x":39,"y":333},"state":-1,"viewType":"Code"}}}},"themeInput":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":782,"height":507},"posInfo":{"x":609,"y":358},"state":0,"viewType":"Data"},"dataView":"Grid"},"map":{"type":"apogeeapp.app.CustomComponent","windowState":{"sizeInfo":{"width":690,"height":704},"posInfo":{"x":43,"y":88},"state":0,"viewType":"Display"},"resource":{"html":"<div id=\"mapElement\"></div>\n<button id=\"captureButton\">Capture</button>","css":"#mapElement {\n    position: absolute;\n    top: 0px;\n    left: 0px;\n    bottom: 0px;\n    right: 0px;\n}\n#captureButton {\n    position: absolute;\n    left: 10px;\n    bottom: 10px;\n    z-index: 1000;\n}","uiCode":"var LeafletGeojsonClass = class {\n    \n    //==========================\n    // Public Methods\n    //==========================\n     \n    constructor() {\n        this.mapElement = null;\n        this.captureButton = null;\n        this.map = null;\n        this.admin = null;\n        this.initialized = false;\n    }\n    \n    init(outputElement, admin) {\n        this.admin = admin;\n    }\n     \n    onLoad(outputElement, admin) {\n        if(!this.initialized) {\n            //some working variables\n            this.mapElement = document.getElementById(\"mapElement\");\n            this.captureButton = document.getElementById(\"captureButton\");\n            this.captureButton.onclick = () => this.onCapture();\n            \n            //create the map\n            this.map = L.map('mapElement');\n            \n            // create the tile layer with correct attribution\n            var osmUrl='https://a.tile.openstreetmap.org/{z}/{x}/{y}.png';\n            var osmAttrib='Map data © <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors';\n            var osm = new L.TileLayer(osmUrl, {minZoom: 1, maxZoom: 19, attribution: osmAttrib});\t\t\n            this.map.addLayer(osm);\n            \n            //control to turn on/off base map\n            var layers = {\n                \"Base Layer\": osm\n            }\n            L.control.layers({},layers).addTo(this.map);\n            \n            this.initialized = true;\n        }\n     }\n     \n    setData(data, outputElement, admin) {\n        this.data = data;\n        this.render(data); \n    }\n    \n    onResize(outputElement, admin) {\n        if(this.map) {\n            this.map.invalidateSize();\n        }\n    }\n    \n    //==========================\n    // Private Methods\n    //==========================\n    \n    render(data) {\n        if(this.geojsonLayer) {\n            //remove the old layer\n            this.geojsonLayer.remove();\n            this.geomjsonLayer = null;\n        }\n        \n        if(data) {\n            if(data.geojson) {\n                this.geojsonLayer = L.geoJSON(data.geojson,this.createOptions(data.styleFunctions)).addTo(this.map);\n            }\n            \n            if(data.bounds) {\n                this.map.fitBounds(this.getLeafletBounds(data.bounds));\n            }\n        }\n    }\n    \n    onCapture() {\n        if(this.map) {\n            var mapBounds = this.map.getBounds();\n            var swneBoundsArray = [\n                mapBounds.getSouth(),\n                mapBounds.getWest(),\n                mapBounds.getNorth(),\n                mapBounds.getEast()\n            ]\n               \n            this.admin.getMessenger().dataUpdate(\"mapData.swneBoundingBox\",swneBoundsArray);\n        }\n        \n    } \n    \n    createOptions(styleFunctions) {\n        \n        var options = {};\n        \n        if(styleFunctions) {\n        \n            //filter geometry with styles\n            options.filter = styleFunctions.mapFilter;\n            \n            //style lines and polygons\n            options.style = styleFunctions.getLineAndAreaStyle;\n            \n            //style points\n            options.pointToLayer = function(feature,latLng) {\n                var iconOptions = styleFunctions.getPointStyle(feature);\n                if(iconOptions) {\n                    var options = {\"icon\":L.icon(iconOptions)};\n                    return L.marker(latLng, options);\n                }\n                else {\n                    return null;\n                }\n            };\n        }\n        \n        //add a popup\n        options.onEachFeature = function(feature,layer) {\n            if(feature.properties) {\n                var outputHTML = \"\";\n                for(var key in feature.properties) {\n                    if(outputHTML.length > 0) outputHTML += \"<br>\";\n                    outputHTML += \"<b>\" + key + \"</b> = \" + feature.properties[key];\n                }\n                layer.bindPopup(outputHTML);\n            }\n        }\n     \n        return options;   \n    }\n    \n    getLeafletBounds(swneBoundingBox) {\n        var bottomRight = L.latLng(swneBoundingBox[0], swneBoundingBox[1]);\n        var topLeft = L.latLng(swneBoundingBox[2], swneBoundingBox[3]);\n        return L.latLngBounds(bottomRight, topLeft);\n    }\n} \n\nreturn new LeafletGeojsonClass();"},"destroyOnInactive":false},"settingsForm":{"type":"apogeeapp.app.FormDataComponent","windowState":{"sizeInfo":{"width":448,"height":266},"posInfo":{"x":779,"y":23},"state":0,"viewType":"Form"}}}},"activeTabMember":"Model"}