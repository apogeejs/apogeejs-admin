{"fileType":"apogee app js workspace","version":"0.60","references":{"viewState":{"treeState":-1,"lists":{"es module":{"treeState":0},"js link":{"treeState":0},"css link":{"treeState":0}}}},"code":{"model":{"fileType":"apogee model","version":0.3,"name":"Function Programming","children":{"Model":{"name":"Model","type":"apogee.Folder","children":{"genericValue":{"name":"genericValue","type":"apogee.JsonMember","updateData":{"data":{"a":true,"b":[1,2,3]}}},"bad3":{"name":"bad3","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"genericValue = 34;\n\nreturn genericValue;","supplementalCode":""}},"error1":{"name":"error1","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"//genericValue.b = false;\n\nreturn \"uncomment out the line of code to see the error\";","supplementalCode":""}},"potentialError2":{"name":"potentialError2","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"//DON'T DO THIS:\n//let locaVariable = genericValue.b;\n//INSTEAD DO THIS:\nlet localVariable = apogeeutil.jsonCopy(genericValue.b);\n\nlocalVariable[1] = \"changed\"\n\nreturn localVariable;","supplementalCode":""}},"fixedValue1":{"name":"fixedValue1","type":"apogee.JsonMember","updateData":{"data":1}},"fixedValue2":{"name":"fixedValue2","type":"apogee.JsonMember","updateData":{"data":2}},"derivedValue2":{"name":"derivedValue2","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let localValue = fixedValue1 * 3;\n\n//here is the line where we use the messenger to set the value of cell fixedValue2\n//apogeeMessenger.dataUpdate(\"fixedValue2\",localValue);\n\nreturn localValue"}},"derivedValue1":{"name":"derivedValue1","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return fixedValue2 * 3;","supplementalCode":""}}}}}},"components":{"Model":{"type":"apogeeapp.PageComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Immutable Values, Functional Programming and the Messenger"}]},{"type":"heading2","content":[{"type":"text","text":"Order of Operations and Immutability"}]},{"type":"paragraph","content":[{"type":"text","text":"The fundamental principle for Apogee is that for each cell the formula and value should be an expression that is true, rather than an assignment of a value. In order to do this, it calculates the value of cells in the proper order and, once calculated, it does not let the user change the value externally. In other words the value of a cell is immutable."}]},{"type":"paragraph","content":[{"type":"text","text":"This is the same way a spreadsheet works, which was the motivation for Apogee."}]},{"type":"heading2","content":[{"type":"text","text":"Immutable Variables Gotchas!"}]},{"type":"paragraph","content":[{"type":"text","text":"Being immutable means you can't modify one cell from another cell. This must be kept in mind while using Apogee. We demonstrate this below."}]},{"type":"paragraph","content":[{"type":"text","text":"Here is an example value we will use."}]},{"type":"apogeeComponent","attrs":{"name":"genericValue","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here we will try to modify it from another table."}]},{"type":"apogeeComponent","attrs":{"name":"error1","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is another example of possibly accidentally trying to change immutable data. If you use part of an immutable value, genericValue.b below, and you want to change it then you have to make a copy. Here we use a copy function from the included apogee library. If you swap the commented line so the immutable value is not copied it should produce an error."}]},{"type":"apogeeComponent","attrs":{"name":"potentialError2","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Below is a dangerous scenario, in that sense that it might not do what you think. Here I set the variable named genericValue to a different value. However, this is only changing the local version of that variable, not the value of the genericValue cell itself. "}]},{"type":"paragraph","content":[{"type":"text","text":"Currently there is no protection against making this mistake."}]},{"type":"apogeeComponent","attrs":{"name":"bad3","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"More on Functional Programming"}]},{"type":"paragraph","content":[{"type":"text","text":"By some definitions, the idea of the \"formula\" being a true-valued expression rather than an assignment makes Apogee (and spreadsheets) functional programming. In function programming this is often stated as \"no side effects\"."}]},{"type":"paragraph","content":[{"type":"text","text":"However, there is something Apogee can do beyond making values immutable to enforce the truth of the expressions that is not a part of standard functional programming, it can control the order of operations. This opens up some new possibilities."}]},{"type":"paragraph","content":[{"type":"text","text":"One thing it allows is the use of \"global\" variables in its functions/ formulas. That is not considered pure functional programming by many. In this case it is possible to maintain the \"truth\" of the expressions with this feature. And, Apogee doesn't really have a choice given that the function for a cell can not have arguments. That said, allowing global value does reduce the transparency you would have if you required all values be passed in through arguments."}]},{"type":"paragraph","content":[{"type":"text","text":"Of course, the point of Apogee is not to be a rigorous functional programming tool. The point is to be an easy-to-use programming environment, which some would consider the polar opposite."}]},{"type":"heading2","content":[{"type":"text","text":"The Messenger"}]},{"type":"paragraph","content":[{"type":"text","text":"There is something that might bother the functional purists more than having global values, and that is the messenger. Apogee does enforce there are no side effects, for a specific definition of \"no side effects\"."}]},{"type":"paragraph","content":[{"type":"text","text":"Apogee has something called the "},{"type":"text","marks":[{"type":"italic"}],"text":"messenger"},{"type":"text","text":". This allows you to write to the value of another cell. This sounds like a side effect in a bad sense. By our definition and because of how it works however it is not. What we do enforce is that the workspace cells are all consistent, given their formulas."}]},{"type":"paragraph","content":[{"type":"text","text":"We will set up a few cells below to illustrate this."}]},{"type":"heading3","content":[{"type":"text","text":"Messenger Example"}]},{"type":"paragraph","content":[{"type":"text","text":"Here we have two cells with static values, fixedValue1 and fixedValue2. "}]},{"type":"apogeeComponent","attrs":{"name":"fixedValue1","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"fixedValue2","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"We also have two cells with formulas, derivedValue1 and derivedValue2."}]},{"type":"paragraph","content":[{"type":"text","text":"The cell "},{"type":"text","marks":[{"type":"italic"}],"text":"derivedValue1"},{"type":"text","text":" below has a simple value based on the cell "},{"type":"text","marks":[{"type":"italic"}],"text":"fixedValue2"},{"type":"text","text":" above."}]},{"type":"apogeeComponent","attrs":{"name":"derivedValue1","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","marks":[{"type":"italic"}],"text":"Note: To prevent the cell fixedValue2 from being changed to early and rendering the example uninteresting, we have that line commented out below. You can uncomment it to see what happens."}]},{"type":"paragraph","content":[{"type":"text","text":"Commenting out the code below that uses the \"apogeeMessenger\" will push a new value to the cell "},{"type":"text","marks":[{"type":"italic"}],"text":"fixedValue2"},{"type":"text","text":". This does NOT invalidate the cell "},{"type":"text","marks":[{"type":"italic"}],"text":"derivedValue1"},{"type":"text","text":". That cell will be recalculated so that it is consistent with its formula."}]},{"type":"apogeeComponent","attrs":{"name":"derivedValue2","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","marks":[{"type":"italic"}],"text":"Fixing the change: After you make the above change you can recomment that line of code. You can then manually reset the value of fixedValue2 to anything you want to restore to the original state, if you want to try again."}]},{"type":"paragraph","content":[{"type":"text","text":"The way this works is that the messenger "},{"type":"text","marks":[{"type":"italic"},{"type":"bold"}],"text":"does not"},{"type":"text","text":" immediately change the cell to which it is addressed, which would make our model inconsistent. The following happens:"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"The workspace has an initial state. Apogee determines the proper order of calculations so that all cells are made consistent according to their formulas. Possibly, as in the case above, in one of the formulas the messenger is called to update another table. This does not change any table values, for now. The request is queued."}]},{"type":"listItem","content":[{"type":"text","text":"The workspace calculation as described above is completed and all cells are consistent."}]},{"type":"listItem","content":[{"type":"text","text":"Then, after the calculation is finished, the queued request(s) from the messenger are done. It is as if you went in as a user and wrote new values. At this point Apogee recalculates, treating this as en entirely new system. "}]}]},{"type":"paragraph","content":[{"type":"text","text":"There are scenarios where you can cause confusion about the end result, which is analogous to collisions of two people editing the document at the same time. Because of this, you shouldn't have two cells sending a message to the same third cell. So you can cause yourself trouble, however the result will always be a consistent result given the state of the system."}]},{"type":"paragraph","content":[{"type":"text","text":"The use of the messenger is discussed in more detail elsewhere in the tutorials."}]}]}},"children":{"genericValue":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"bad3":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"error1":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"potentialError2":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"fixedValue1":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"fixedValue2":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"derivedValue2":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"derivedValue1":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":1,"tabOpened":true,"tabShowing":true}},"viewState":{"treeState":1}}},"viewState":{"treeState":1}}