{"fileType":"apogee app js workspace","version":"0.50","references":{"refEntries":[{"url":"http://localhost:8888/applications/modules/chartjsmodule/Chart.min.js","nickname":"","entryType":"js link"},{"url":"http://localhost:8888/applications/modules/chartjsmodule/ChartJSComponentModule.js?r=4","nickname":"","entryType":"es module"}],"viewState":{"treeState":1,"lists":{"es module":{"treeState":1},"js link":{"treeState":1},"css link":{"treeState":0}}}},"code":{"model":{"fileType":"apogee model","version":0.2,"name":"COVID-19 Workspace","children":{"dataDownload":{"name":"dataDownload","type":"apogee.Folder","children":{"WORLD_GRID_COLUMNS":{"name":"WORLD_GRID_COLUMNS","type":"apogee.JsonTable","updateData":{"data":{"STATE":0,"COUNTRY":1,"LAT":2,"LON":3,"FIRST_DATA_ROW":4}}},"worldDownloadedData":{"name":"worldDownloadedData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return apogeeutil.textRequest(worldCasesUrl);","supplementalCode":""}},"worldDeathsUrl":{"name":"worldDeathsUrl","type":"apogee.JsonTable","updateData":{"data":"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"}},"worldRecoveredUrl":{"name":"worldRecoveredUrl","type":"apogee.JsonTable","updateData":{"data":"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv"}},"worldCasesUrl":{"name":"worldCasesUrl","type":"apogee.JsonTable","updateData":{"data":"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"}},"usCasesUrl":{"name":"usCasesUrl","type":"apogee.JsonTable","updateData":{"data":"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv"}},"usDeathsUrl":{"name":"usDeathsUrl","type":"apogee.JsonTable","updateData":{"data":"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_US.csv"}},"usCasesData":{"name":"usCasesData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return apogeeutil.textRequest(usCasesUrl);","supplementalCode":""}},"usCasesGrid":{"name":"usCasesGrid","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return simpleCsvParser(usCasesData);","supplementalCode":""}},"usDeathsGrid":{"name":"usDeathsGrid","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return simpleCsvParser(usDeathsData);","supplementalCode":""}},"usDeathsData":{"name":"usDeathsData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return apogeeutil.textRequest(usDeathsUrl);","supplementalCode":""}},"US_CASES_COLUMNS":{"name":"US_CASES_COLUMNS","type":"apogee.JsonTable","updateData":{"data":{"FIPS":4,"COUNTY":5,"STATE":6,"COUNTRY":7,"LAT":8,"LON":9,"COMBINED_KEY":10,"FIRST_DATA_ROW":11}}},"US_DEATHS_COLUMNS":{"name":"US_DEATHS_COLUMNS","type":"apogee.JsonTable","updateData":{"data":{"FIPS":4,"COUNTY":5,"STATE":6,"COUNTRY":7,"LAT":8,"LON":9,"COMBINED_KEY":10,"POPULATION":11,"FIRST_DATA_ROW":12}}},"worldDeathsData":{"name":"worldDeathsData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return apogeeutil.textRequest(worldDeathsUrl);","supplementalCode":""}},"worldRecoveredData":{"name":"worldRecoveredData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return apogeeutil.textRequest(worldRecoveredUrl);","supplementalCode":""}},"worldCasesGrid":{"name":"worldCasesGrid","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return simpleCsvParser(worldDownloadedData);\n","supplementalCode":""}},"worldDeathsGrid":{"name":"worldDeathsGrid","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return simpleCsvParser(worldDeathsData);","supplementalCode":""}},"worldRecoveredGrid":{"name":"worldRecoveredGrid","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return simpleCsvParser(worldRecoveredData);","supplementalCode":""}},"simpleCsvParser":{"name":"simpleCsvParser","type":"apogee.FunctionTable","updateData":{"argList":["csvText"],"functionBody":"let rowArray = csvText.split(\"\\n\");\n\nlet gridData = rowArray.map( row => {\n    //our parsing is simplified to handl this specific data rather than a general cvs file.\n    //only one (or zero) fields have quotes, we will pull it out.\n    let firstQuoteIndex = row.indexOf(\"\\\"\");\n    \n    //no quoted strings\n    if(firstQuoteIndex < 0) return row.split(\",\");\n    \n    let secondQuoteIndex = row.indexOf(\"\\\"\",firstQuoteIndex+1);\n    if(secondQuoteIndex < 0) throw new Error(\"Error: Only 1 delimited quote!\");\n    //make sure there are only two delimited\n    let thirdQuoteIndex = row.indexOf(\"\\\"\",secondQuoteIndex+1);\n    if(thirdQuoteIndex > 0) throw new Error(\"Error: More than 2 delimited quotes!\");\n    \n    \n    //split up and parse single the quoted field differently from the rest of the row.\n    let firstString = row.substr(0,firstQuoteIndex-1);\n    let secondString = row.substr(firstQuoteIndex+1,secondQuoteIndex-firstQuoteIndex-1);\n    let thirdString = row.substr(secondQuoteIndex+2);\n    \n    let firstArray = firstString.split(\",\")\n    let secondArray = secondString\n    let thirdArray = thirdString.split(\",\");\n    \n    return firstArray.concat(secondArray).concat(thirdArray);\n})\n\nreturn gridData;","supplementalCode":""}}}},"workspaceNotes":{"name":"workspaceNotes","type":"apogee.Folder","children":{}},"normalizedData":{"name":"normalizedData","type":"apogee.Folder","children":{"worldNormalizedData":{"name":"worldNormalizedData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let data = [];\n\ndataDownload.worldCasesGrid.forEach( (row,index) => {\n    if(index == 0) return;\n    \n    let entry = _createEntry(row,dataDownload.WORLD_GRID_COLUMNS);\n    if(entry) data.push(entry);\n});\n\ndataDownload.usCasesGrid.forEach( (row,index) => {\n    if(index == 0) return;\n    \n    let entry = _createEntry(row,dataDownload.US_CASES_COLUMNS);\n   if(entry) data.push(entry);\n});\n\nreturn data;","supplementalCode":"function _createEntry(row,columnDef) {\n    //create a region array\n    let entry = {}\n    entry.regionPath = [];\n    \n    let country = row[columnDef.COUNTRY];\n    if((country)&&(country != \"\")) entry.regionPath.push(country);\n    else return null;\n    \n    let state = row[columnDef.STATE];\n    if((state)&&(state != \"\")) entry.regionPath.push(state);\n    \n    let county = row[columnDef.COUNTY];\n    if((county)&&(county != \"\")) entry.regionPath.push(county);\n    \n    //get the data\n    entry.data = _getRowTimeSeries(row,columnDef);\n    \n    //latitude and longitude - assume 0.0 is an invalid value\n    let latString = row[columnDef.LAT];\n    let lonString = row[columnDef.LON];\n    if((latString != \"\")&&(lonString != \"\")) {\n        let lat = parseFloat(latString);\n        let lon = parseFloat(lonString);\n        if((lat != 0.0)&&(lon != 0.0)) {\n            entry.lat = lat;\n            entry.lon = lon;\n        }\n    }\n    \n    //fips (census info) - us only\n    if(columnDef.FIPS !== undefined) {\n        entry.fips = row[fips];\n    }\n    \n    return entry;\n}\n\nfunction _getRowTimeSeries(row,columnDef) {\n    return row.slice(columnDef.FIRST_DATA_ROW).map(stringValue => parseInt(stringValue));\n}"}},"dateLabels":{"name":"dateLabels","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let worldCasesDates = dataDownload.worldCasesGrid[0].slice(dataDownload.WORLD_GRID_COLUMNS.FIRST_DATA_ROW).map( value => value.trim());\nlet usCasesDates = dataDownload.usCasesGrid[0].slice(dataDownload.US_CASES_COLUMNS.FIRST_DATA_ROW).map( value => value.trim());\n\nif(!apogeeutil.jsonEquals(worldCasesDates,usCasesDates)) throw new Error(\"US cases and deaths dates do not match - program does not currently handle this.\");\n\nreturn usCasesDates\n","supplementalCode":""}},"hierarchicalData1":{"name":"hierarchicalData1","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let worldEntry = {};\nworldEntry.name = \"Earth\";\nworldEntry.type = \"world\";\n\nworldNormalizedData.forEach( inEntry => {\n    _addToEntry(worldEntry,inEntry,0);\n})\n\nreturn worldEntry;","supplementalCode":"//this function adds the inEntry to the given region entry, where the regionPathIndex specifies which level of the region path is applicable\n//e.g. country, state, county\nfunction _addToEntry(regionOutEntry,inEntry,regionPathIndex) {\n    if(!regionOutEntry.regions) regionOutEntry.regions = {};\n    \n    //lookup this child region in the parent out region\n    let childRegionName = inEntry.regionPath[regionPathIndex];\n    let childRegionOutEntry = regionOutEntry.regions[childRegionName];\n    if(!childRegionOutEntry) {\n        //create a new entry if needed\n        childRegionOutEntry = {};\n        childRegionOutEntry.name = childRegionName;\n        childRegionOutEntry.type = inEntry.type;\n        regionOutEntry.regions[childRegionName] = childRegionOutEntry;\n    }\n    \n    //check if we need to add as a child to the child region entry\n    if(inEntry.regionPath.length > regionPathIndex + 1) {\n        //add as a child to the child region entry\n        _addToEntry(childRegionOutEntry,inEntry,regionPathIndex+1);\n    }\n    else {\n        //add payload data to the current out entry - but give precedence to any existing data\n        if((!childRegionOutEntry.data)&&(inEntry.data)) {\n            childRegionOutEntry.data = inEntry.data;\n        }\n        if((!childRegionOutEntry.lat)&&(inEntry.lat)) {\n            childRegionOutEntry.lat = inEntry.lat;\n        }\n        if((!childRegionOutEntry.lon)&&(inEntry.lon)) {\n            childRegionOutEntry.lon = inEntry.lon;\n        }\n        if((!childRegionOutEntry.fips)&&(inEntry.fips)) {\n            childRegionOutEntry.fips = inEntry.fips;\n        }\n    }\n}"}},"mergedWorldData":{"name":"mergedWorldData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let worldEntry = apogeeutil.jsonCopy(hierarchicalData1);\n\n_fillInMisingData(worldEntry);\n\nreturn worldEntry;","supplementalCode":"function _fillInMisingData(entry) {\n    let childCount = 0;\n    //initialize summed data, if needed\n    let summedData;\n    let dataCount = 0;\n    if(entry.data === undefined) {\n        summedData = _createZeroArray(dateLabels.length);\n    };\n    //initialize averaged lat, lon, if needed\n    let summedLat, summedLon;\n    let latLonCount = 0;\n    if(entry.lat === undefined) {\n        summedLat = 0.0;\n        summedLon = 0.0;\n    }\n    \n    if(entry.regions) {\n        for(let childName in entry.regions) {\n            //first populate the child, if needed\n            let childEntry = entry.regions[childName];\n            _fillInMisingData(childEntry);\n            \n            //attempt to populate this entry\n            childCount++;\n            \n            if((summedData)&&(childEntry.data)) {\n                _addSecondArrayToFirstArray(summedData,childEntry.data);\n                dataCount++;\n            }\n            \n            if((summedLat !== undefined)&&(childEntry.lat !== undefined)) {\n                summedLat += childEntry.lat;\n                summedLon += childEntry.lon;\n                latLonCount++;\n            }\n        }\n        \n        //decide if we want the child data if we get entries\n        //from 80 percent for more (it will probably be all or nothing)\n        if((dataCount > 0)&&(dataCount > childCount * 0.8)) {\n            entry.data = summedData;\n        }\n        //just use 50 percent for lat lon (again, it will probably be all or nothing)\n        if((latLonCount > 0)&&(latLonCount > childCount * 0.5)) {\n            entry.lat = summedLat / latLonCount;\n            entry.lon = summedLon / latLonCount;\n        }\n    }\n}\n\n//this makes an array of 0s of the given length\nfunction _createZeroArray(length) {\n    let array = [];\n    array.length = length;\n    array.fill(0);\n    return array;\n}\n\n//this modified array 1;\nfunction _addSecondArrayToFirstArray(array1,array2) {\n    array2.forEach( (value,index) => array1[index] += value);\n}"}}}},"plots":{"name":"plots","type":"apogee.Folder","children":{"regionPath":{"name":"regionPath","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let path = [];\n\nlet country = regionSelector.data.country;\nif(country != \"-ALL-\") {\n    path.push(country);\n    let stateData = regionSelector.data[country + \"|state\"];\n    if((stateData)&&(stateData.state != \"-ALL-\")) {\n        path.push(stateData.state);\n        if((stateData.county)&&(stateData.county != \"-ALL-\")) {\n            path.push(stateData.county);\n        }\n    }\n} \n\nreturn path;","supplementalCode":""}},"regionSelector":{"name":"regionSelector","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"let layout = [];\n\n//add a selector for country\nlet worldEntry = normalizedData.mergedWorldData;\n//the region list is a list of all subregions, plus an entry for the parent if it has a data series.\nlet countryList = _getRegionList(worldEntry);\nif(!countryList) return;\nlayout.push(_getDropdownLayout(countryList,\"country\",\"Country: \"));\n\n//add a selector for the state, for each applicable country\ncountryList.forEach( countryName => {\n    let countryEntry = worldEntry.regions[countryName];\n    if(!countryEntry) return; //there is no country entry if all is selected\n    let stateList = _getRegionList(countryEntry);\n    if(!stateList) return;\n    \n    //create a panel fro this country, which will be displayed when the country is selected.\n    let statePanelLayout = _getPanelLayout(countryName + \"|state\");\n    //selector to control visibility\n    statePanelLayout.selector = {\n\t    parentKey: \"country\",\n\t    parentValue: countryName\n    };\n    layout.push(statePanelLayout);\n    \n    //state selector for this country\n    statePanelLayout.formData.push(_getDropdownLayout(stateList,\"state\",\"State: \"));\n    \n    //add a selector for county, for each applicable state\n    stateList.forEach( stateName => {\n        stateEntry = countryEntry.regions[stateName];\n        if(!stateEntry) return; //there is no state entry if all is selected\n        let countyList = _getRegionList(stateEntry);\n        if(!countyList) return;\n        \n        //county selector for this state \n        let countyListLayout = _getDropdownLayout(countyList,\"county\",\"County: \");\n        //add a selector so this is shown only if the given state is selected\n        countyListLayout.selector = {\n\t\t    parentKey: \"state\",\n\t\t    parentValue: stateName\n\t\t}\n        statePanelLayout.formData.push(countyListLayout);\n    });\n});\n\nreturn layout;\n","supplementalCode":"function _getRegionList(parentEntry) {\n    let regionMap = parentEntry.regions;\n    if(!regionMap) return null;\n    \n    let regionList = [];\n    //add an \"-ALL-\" selection if the parent entry has its own data\n    if(parentEntry.data) {\n        regionList.push(\"-ALL-\");\n    }\n    for(let regionName in regionMap) {\n        regionList.push(regionName);\n    }\n    return regionList;\n}\n\nfunction _getDropdownLayout(selectionList,key,label) {\n    return {\n        type: \"dropdown\",\n        label: label,\n        entries: selectionList,\n        key: key\n    }\n}\n\nfunction _getPanelLayout(key) {\n    return {\n        \"type\":\"panel\",\n        \"formData\": [\n        ],\n        \"key\": key\n    }\n}"}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":{"country":"France","France|state":{"state":"-ALL-"}}}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":""}}}},"selectedEntry":{"name":"selectedEntry","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(regionPath.length == 0) return normalizedData.mergedWorldData;\n\nreturn _lookupEntry(normalizedData.mergedWorldData,regionPath,0);","supplementalCode":"/** This method gets child entry from the parent, given the region path and the start index */\nfunction _lookupEntry(parentEntry,regionPath,pathIndex) {\n    if(!parentEntry.regions) return null;\n    \n    let regionName = regionPath[pathIndex];\n    let childEntry = parentEntry.regions[regionName];\n    if(!childEntry) return null;\n    \n    if(pathIndex + 1 < regionPath.length) return _lookupEntry(childEntry,regionPath,pathIndex+1);\n    else return childEntry;\n}"}},"regionChart":{"name":"regionChart","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"\n    return {\n        \"chartType\": \"line\",\n        \"xValuesInputType\": \"common\",\n        \"commonXValueArray\": normalizedData.dateLabels,\n        \"datasets\": chartDataSeries,\n        \"generalOptions\": chartOptions,\n        \"storedData\": {\"chartType\":\"line\",\"xValuesInputType\":\"common\",\"commonXValueArray\":\"normalizedData.dateLabels\",\"datasets\":\"chartDataSeries\",\"generalOptions\":\"chartOptions\"}\n    };","supplementalCode":""}},"chartDataSeries":{"name":"chartDataSeries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return [\n    {\n        yArray: (selectedPlotDataType == \"newCases\") ? newCasesData : totalCasesData,\n        datasetOptions: {\n            label: regionDisplayName + ((selectedPlotDataType == \"newCases\") ? \": New Cases\" : \": Total Cases\")\n        }\n    }\n    \n]","supplementalCode":""}},"chartOptions":{"name":"chartOptions","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return {\n\t\"title\": {\n\t\t\"display\": true,\n\t\t\"text\": \"COVID-19 Cases\"\n\t},\n\t\"scales\": {\n\t    \"xAxes\": [\n\t\t\t{\n\t\t\t\t\"type\": \"category\",\n\t\t\t\t\"display\": true\n\t\t\t}\n\t\t],\n\t\t\"yAxes\": [\n\t\t\t{\n\t\t\t\t\"type\": selectedScaleType,\n\t\t\t\t\"display\": true\n\t\t\t}\n\t\t]\n\t}\n}","supplementalCode":""}},"regionDisplayName":{"name":"regionDisplayName","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return regionPath.join(\", \");","supplementalCode":""}},"totalCasesData":{"name":"totalCasesData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return selectedEntry.data;","supplementalCode":""}},"newCasesData":{"name":"newCasesData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let previousCounts = 0;\nreturn totalCasesData.map( (value,index) => {\n    let delta = value - previousCounts;\n    previousCounts = value\n    return delta;\n});","supplementalCode":""}},"graphingOptions":{"name":"graphingOptions","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return [\n    {\n        type: \"radioButtonGroup\",\n        label: \"Plot Data: \",\n        entries: [[\"Total Cases\",\"totalCases\"],[\"New Cases\",\"newCases\"]],\n        groupName: \"plotDataType\",\n        key: \"plotDataType\"\n    },\n    {\n        type: \"radioButtonGroup\",\n        label: \"Y Scale: \",\n        entries: [[\"Linear\",\"linear\"],[\"Logarithmic\",\"logarithmic\"]],\n        groupName: \"scaleType\",\n        key: \"scaleType\"\n    }    \n]","supplementalCode":""}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":{"plotDataType":"totalCases","scaleType":"linear"}}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":""}}},"childrenNotWriteable":true},"selectedPlotDataType":{"name":"selectedPlotDataType","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((graphingOptions.data)&&(graphingOptions.data.plotDataType)) {\n    return graphingOptions.data.plotDataType; \n}\nelse {\n    return \"totalCases\";\n}","supplementalCode":""}},"selectedScaleType":{"name":"selectedScaleType","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((graphingOptions.data)&&(graphingOptions.data.scaleType)) {\n    return graphingOptions.data.scaleType; \n}\nelse {\n    return \"linear\";\n}","supplementalCode":""}}}},"testPage_multiplot":{"name":"testPage_multiplot","type":"apogee.Folder","children":{"stateSelector":{"name":"stateSelector","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return [\n    {\n        type: \"checkboxGroup\",\n        entries: stateList.map( value => [value + \"\\t\",value]),\n        key: \"states\",\n        horizontal: true\n    }\n]","supplementalCode":""}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":{"states":["California"]}}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":""}}}},"usDataEntry":{"name":"usDataEntry","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return normalizedData.mergedWorldData.regions.US;","supplementalCode":""}},"stateList":{"name":"stateList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let data = [];\nfor(let stateName in stateDataMap) {\n    data.push(stateName);\n}\nreturn data;","supplementalCode":""}},"selectedStateEntries":{"name":"selectedStateEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((!stateSelector.data)||(!stateSelector.data.states)) return apogeeutil.INVALID_VALUE;\n\nlet selectedStateEntries = [];\nstateSelector.data.states.forEach( state => {\n    selectedStateEntries.push(stateDataMap[state]);\n})\n\nreturn selectedStateEntries;","supplementalCode":""}},"stateCounts":{"name":"stateCounts","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"\n    return {\n        \"chartType\": \"line\",\n        \"xValuesInputType\": \"common\",\n        \"commonXValueArray\": normalizedData.dateLabels,\n        \"datasets\": datasets,\n        \"generalOptions\": options,\n        \"storedData\": {\"chartType\":\"line\",\"xValuesInputType\":\"common\",\"commonXValueArray\":\"normalizedData.dateLabels\",\"datasets\":\"datasets\",\"generalOptions\":\"options\"}\n    };","supplementalCode":""}},"differenceFunction":{"name":"differenceFunction","type":"apogee.FunctionTable","updateData":{"argList":["inData"],"functionBody":"let previousValue = 0;\nreturn inData.map( (value,index) => {\n    let delta = value - previousValue;\n    previousValue = value;\n    return delta;\n})","supplementalCode":""}},"processedStateData":{"name":"processedStateData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return selectedStateEntries.map( inEntry => {\n    let unscaledData;\n    if(graphingOptions.data.plotDataType == \"newCases\") {\n        //get the change in number of cases\n        unscaledData = differenceFunction(inEntry.data);\n    }\n    else {\n        unscaledData = inEntry.data;\n    }\n    //scale by population. If population not present, just 0 out the data.\n    let multiplier = inEntry.pop ? casesPer/inEntry.pop : 0;\n    let scaledDelta = multiplyFunction(unscaledData,multiplier);\n    \n    let outEntry = {};\n    outEntry.name = inEntry.name;\n    outEntry.data = scaledDelta;\n    return outEntry;\n})","supplementalCode":""}},"datasets":{"name":"datasets","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return processedStateData.map( (inEntry,index,array) => _createDataSet(inEntry,index,array.length));","supplementalCode":"function _createDataSet(inEntry,index,totalCount) {\n    return {\n        yArray: inEntry.data,\n        datasetOptions: {\n            label: inEntry.name,\n            fill: false,\n            borderColor: _getColor(index,totalCount),\n            borderWidth: 1,\n            pointRadius: 0,\n            lineTension: 0\n        }\n    }\n}\n\n/** This function generates a color for the index based on the total count. */\nfunction _getColor(index,totalCount) {\n    let r = [0,255];\n    let g = [0,0];\n    let b = [255,0];\n    \n    //this function will interpolate a given color based on the index\n    let pick = c => c[0] + (c[1]-c[0]) * index / totalCount;\n    \n    return \"rgb(\" + pick(r) + \",\" + pick(g) + \",\" + pick(b) + \")\";  \n}"}},"options":{"name":"options","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return {\n\t\"title\": {\n\t\t\"display\": true,\n\t\t\"text\": \"COVID-19 Cases\"\n\t},\n\t\"scales\": {\n\t\t\"xAxes\": [\n\t\t\t{\n\t\t\t\t\"type\": \"category\",\n\t\t\t\t\"display\": true\n\t\t\t}\n\t\t],\n\t\t\"yAxes\": [\n\t\t\t{\n\t\t\t\t\"type\": graphingOptions.data.scaleType,\n\t\t\t\t\"display\": true\n\t\t\t}\n\t\t]\n\t}\n}","supplementalCode":""}},"stateDataMap":{"name":"stateDataMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let data = {};\n\n for(let stateName in usDataEntry.regions) {\n     //lookup the population\n     let population = populationData.usPopulationMap[stateName];\n     if(!population) continue;\n    \n     let oldStateEntry = usDataEntry.regions[stateName];\n     let newStateEntry = {};\n     newStateEntry.name = oldStateEntry.name;\n     newStateEntry.data = oldStateEntry.data;\n     newStateEntry.pop = population;\n     data[stateName] = newStateEntry;\n }\n\nreturn data;","supplementalCode":""}},"multiplyFunction":{"name":"multiplyFunction","type":"apogee.FunctionTable","updateData":{"argList":["inData","multiplier"],"functionBody":"return inData.map( value => value*multiplier);","supplementalCode":""}},"casesPer":{"name":"casesPer","type":"apogee.JsonTable","updateData":{"data":1000000}},"graphingOptions":{"name":"graphingOptions","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return [\n    {\n        type: \"radioButtonGroup\",\n        label: \"Plot Data: \",\n        entries: [[\"Total Cases\",\"totalCases\"],[\"New Cases\",\"newCases\"]],\n        groupName: \"plotDataType\",\n        key: \"plotDataType\"\n    },\n    {\n        type: \"radioButtonGroup\",\n        label: \"Y Scale: \",\n        entries: [[\"Linear\",\"linear\"],[\"Logarithmic\",\"logarithmic\"]],\n        groupName: \"scaleType\",\n        key: \"scaleType\"\n    }    \n]","supplementalCode":""}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":{"plotDataType":"totalCases","scaleType":"linear"}}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":""}}},"childrenNotWriteable":true}}},"populationData":{"name":"populationData","type":"apogee.Folder","children":{"usStatePopulation":{"name":"usStatePopulation","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return apogeeutil.jsonRequest(usStatePopulationUrl + \"&key=\" + apiKey);","supplementalCode":""}},"usStatePopulationUrl":{"name":"usStatePopulationUrl","type":"apogee.JsonTable","updateData":{"data":"https://api.census.gov/data/2019/pep/population?get=POP,NAME&for=STATE:*"}},"usPopulationMap":{"name":"usPopulationMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let popMap = {};\nusStatePopulation.forEach( (entry,index) => {\n    //ignore header\n    if(index == 0) return;\n    \n    popMap[entry[1]] = parseInt(entry[0]);\n})\nreturn popMap;","supplementalCode":""}},"apiKey":{"name":"apiKey","type":"apogee.JsonTable","updateData":{"data":"099a777f03d58542cc4a8b149ed13ce61c34d5e2"}},"worldPopulations":{"name":"worldPopulations","type":"apogee.JsonTable","updateData":{"data":[["China","1,438,290,208"],["India","1,377,396,696"],["United States","330,625,106"],["Indonesia","272,966,447"],["Pakistan","220,070,084"],["Brazil","212,273,857"],["Nigeria","205,145,773"],["Bangladesh","164,376,690"],["Russia","145,924,857"],["Mexico","128,672,223"],["Japan","126,549,656"],["Ethiopia","114,410,977"],["Philippines","109,297,692"],["Egypt","101,962,258"],["Vietnam","97,173,329"],["DR Congo","89,030,807"],["Germany","83,742,086"],["Turkey","84,168,909"],["Iran","83,792,784"],["Thailand","69,766,816"],["United Kingdom","67,817,934"],["France","65,242,733"],["Italy","60,473,534"],["South Africa","59,164,683"],["Tanzania","59,402,806"],["Myanmar","54,337,376"],["Kenya","53,540,142"],["South Korea","51,257,827"],["Colombia","50,788,172"],["Spain","46,755,549"],["Argentina","45,116,269"],["Uganda","45,467,226"],["Ukraine","43,782,559"],["Algeria","43,701,709"],["Sudan","43,650,777"],["Iraq","40,039,084"],["Afghanistan","38,753,631"],["Poland","37,856,006"],["Canada","37,678,213"],["Morocco","36,826,498"],["Saudi Arabia","34,705,130"],["Uzbekistan","33,377,709"],["Peru","32,890,526"],["Malaysia","32,287,265"],["Angola","32,665,265"],["Ghana","30,947,442"],["Mozambique","31,085,768"],["Yemen","29,698,363"],["Nepal","29,047,698"],["Venezuela","28,427,106"],["Madagascar","27,552,690"],["Cameroon","26,417,561"],["Ivory Coast","26,251,725"],["North Korea","25,757,502"],["Australia","25,442,604"],["Taiwan","23,808,502"],["Niger","24,034,172"],["Sri Lanka","21,395,932"],["Burkina Faso","20,791,447"],["Mali","20,137,464"],["Romania","19,260,687"],["Chile","19,087,806"],["Malawi","19,033,059"],["Kazakhstan","18,733,449"],["Zambia","18,283,066"],["Guatemala","17,851,697"],["Ecuador","17,593,276"],["Netherlands","17,127,510"],["Syria","17,426,621"],["Cambodia","16,674,655"],["Senegal","16,658,462"],["Chad","16,333,599"],["Somalia","15,806,776"],["Zimbabwe","14,819,596"],["Guinea","13,064,928"],["Rwanda","12,890,801"],["Benin","12,061,433"],["Tunisia","11,795,833"],["Belgium","11,580,088"],["Burundi","11,822,216"],["Bolivia","11,642,313"],["Cuba","11,327,668"],["Haiti","11,375,746"],["South Sudan","11,163,297"],["Dominican Republic","10,827,227"],["Czech Republic","10,705,826"],["Greece","10,432,589"],["Portugal","10,202,809"],["Jordan","10,179,507"],["Azerbaijan","10,121,790"],["Sweden","10,087,136"],["United Arab Emirates","9,869,299"],["Honduras","9,874,249"],["Hungary","9,665,329"],["Belarus","9,450,024"],["Tajikistan","9,496,981"],["Austria","8,997,284"],["Papua New Guinea","8,914,353"],["Serbia","8,744,102"],["Switzerland","8,642,072"],["Israel","8,629,734"],["Togo","8,240,864"],["Sierra Leone","7,945,714"],["Hong Kong","7,485,833"],["Laos","7,255,579"],["Paraguay","7,115,782"],["Bulgaria","6,958,260"],["Lebanon","6,825,235"],["Libya","6,854,746"],["Nicaragua","6,609,480"],["El Salvador","6,480,105"],["Kyrgyzstan","6,503,723"],["Turkmenistan","6,014,303"],["Singapore","5,840,877"],["Denmark","5,788,136"],["Finland","5,538,897"],["Slovakia","5,459,221"],["Republic of the Congo","5,491,796"],["Norway","5,412,617"],["Costa Rica","5,085,214"],["Palestine","5,078,768"],["Oman","5,080,124"],["Liberia","5,034,474"],["Ireland","4,928,531"],["New Zealand","4,814,591"],["Central African Republic","4,814,202"],["Mauritania","4,625,891"],["Panama","4,301,867"],["Kuwait","4,256,829"],["Croatia","4,109,894"],["Moldova","4,035,716"],["Georgia","3,990,920"],["Eritrea","3,536,816"],["Uruguay","3,471,486"],["Bosnia and Herzegovina","3,285,306"],["Mongolia","3,268,264"],["Armenia","2,962,121"],["Jamaica","2,958,783"],["Puerto Rico","2,872,141"],["Albania","2,878,638"],["Qatar","2,870,116"],["Lithuania","2,729,090"],["Namibia","2,532,071"],["Gambia","2,403,417"],["Botswana","2,343,003"],["Gabon","2,215,288"],["Lesotho","2,139,024"],["Macedonia","2,083,444"],["Slovenia","2,078,938"],["Guinea-Bissau","1,958,957"],["Latvia","1,890,124"],["Bahrain","1,691,479"],["Trinidad and Tobago","1,398,647"],["Equatorial Guinea","1,394,011"],["Estonia","1,326,605"],["Timor-Leste","1,313,607"],["Mauritius","1,271,417"],["Cyprus","1,205,746"],["Swaziland","1,157,920"],["Djibouti","985,266"],["Fiji","895,253"],["Reunion","894,050"],["Comoros","866,025"],["Guyana","785,781"],["Bhutan","769,995"],["Solomon Islands","683,589"],["Macau","647,512"],["Montenegro","627,996"],["Luxembourg","624,085"],["Western Sahara","594,605"],["Suriname","585,650"],["Cape Verde","554,865"],["Maldives","538,861"],["Malta","441,263"],["Brunei","436,708"],["Guadeloupe","400,124"],["Belize","396,226"],["Bahamas","392,473"],["Martinique","375,405"],["Iceland","340,822"],["Vanuatu","305,743"],["French Guiana","297,210"],["Barbados","287,305"],["New Caledonia","285,007"],["French Polynesia","280,557"],["Mayotte","271,553"],["Sao Tome and Principe","218,318"],["Samoa","198,134"],["Saint Lucia","183,487"],["Guam","168,424"],["Curacao","163,953"],["Kiribati","119,098"],["Micronesia","114,813"],["Grenada","112,453"],["Saint Vincent and the Grenadines","110,940"],["Aruba","106,696"],["United States Virgin Islands","104,495"],["Tonga","105,485"],["Seychelles","98,277"],["Antigua and Barbuda","97,789"],["Isle of Man","85,033"],["Andorra","77,265"],["Dominica","71,986"],["Cayman Islands","65,722"],["Bermuda","62,278"],["Marshall Islands","59,190"],["Northern Mariana Islands","57,559"],["Greenland","56,770"],["American Samoa","55,191"],["Saint Kitts and Nevis","53,199"],["Faroe Islands","48,863"],["Sint Maarten","42,876"],["Monaco","39,242"],["Turks and Caicos Islands","38,717"],["Liechtenstein","38,128"],["Saint Martin","38,666"],["San Marino","33,931"],["Gibraltar","33,691"],["British Virgin Islands","30,231"],["Palau","18,094"],["Cook Islands","17,564"],["Anguilla","15,003"],["Tuvalu","11,792"],["Wallis and Futuna","11,239"],["Nauru","10,824"],["Saint Barthélemy","9,877"],["Saint Pierre and Miquelon","5,794"],["Montserrat","4,992"],["Falkland Islands","3,480"],["Niue","1,626"],["Tokelau","1,357"],["Vatican City","801"]]}}}},"usProcessedData":{"name":"usProcessedData","type":"apogee.Folder","children":{"getTimeSeriesData":{"name":"getTimeSeriesData","type":"apogee.FunctionTable","updateData":{"argList":["row","columnDefs"],"functionBody":"return row.slice(columnDefs.FIRST_DATA_ROW).map(stringValue => parseInt(stringValue));\n","supplementalCode":""}},"combinedData":{"name":"combinedData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let usEntry = {};\nusEntry.name = \"US\";\nusEntry.type = \"country\";\nusEntry.regions = {};\n\ndataDownload.usCasesGrid.forEach( (row,index) => _addCasesData(row,index,dataDownload.US_CASES_COLUMNS,usEntry));\ndataDownload.usDeathsGrid.forEach( (row,index) => _addDeathsData(row,index,dataDownload.US_DEATHS_COLUMNS,usEntry));\nreturn usEntry;","supplementalCode":"function _addCasesData(row,index,columnDefs,usEntry) {\n    if(index == 0) return;  //header row\n    if(row.length <= 1) return; //invalid row\n    \n    let entry = _lookupEntry(row,index,columnDefs,usEntry);\n    \n    //add cases data\n    entry.casesData = getTimeSeriesData(row,columnDefs);\n    entry.lat = parseFloat(row[columnDefs.LAT]);\n    entry.lon = parseFloat(row[columnDefs.LON]);\n}\n\nfunction _addDeathsData(row,index,columnDefs,usEntry) {\n    if(index == 0) return;  //header row\n    if(row.length <= 1) return; //invalid row\n    \n    let entry = _lookupEntry(row,index,columnDefs,usEntry);\n    if(!entry) throw new Error(\"Missing cases entry for deaths data\");\n    \n    //add deaths data\n    entry.deathsData = getTimeSeriesData(row,columnDefs);\n    entry.population = parseInt(row[columnDefs.POPULATION]);\n}\n\nfunction _lookupEntry(row,index,columnDefs,usEntry) {\n    \n    let state = row[columnDefs.STATE];\n    let county = row[columnDefs.COUNTY];\n    \n    let stateEntry = _getChildEntry(state,\"state\",usEntry);\n    if(county) {\n        return _getChildEntry(county,\"county\",stateEntry);\n    }\n    else {\n        return stateEntry\n    }\n}\n\nfunction _getChildEntry(childName,childType,parentEntry) {\n    if(!parentEntry.regions) parentEntry.regions = {};\n    \n    let childEntry = parentEntry.regions[childName];\n    if(!childEntry) {\n        childEntry = {};\n        childEntry.name = childName;\n        childEntry.type = childType;\n        parentEntry.regions[childName] = childEntry;\n    }\n    return childEntry;\n}\n"}},"cleanedData":{"name":"cleanedData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let usEntry = apogeeutil.jsonCopy(combinedData);\nlet deletedEntries = [];\nusEntry.deletedEntries = deletedEntries;\n\nfor(let stateName in usEntry.regions) {\n    let stateEntry = usEntry.regions[stateName];\n    \n    //add the county entries to populate the state entries where needed.\n    if(stateEntry.regions) {\n        \n        //deleted unwanted county entries\n        for(let countyName in stateEntry.regions) {\n            let countyEntry = stateEntry.regions[countyName];\n            if((!countyEntry.lat)||(!countyEntry.population)) {\n                deletedEntries.push(stateName + \", \" + countyName);\n                delete stateEntry.regions[countyName];\n                continue;\n            }\n        }\n   \n        \n        if(!stateEntry.population) {\n            stateEntry.population = _sumChildValues(stateEntry,\"population\");\n        }\n        \n        if(!stateEntry.lat) {\n            let latSum = _sumChildValues(stateEntry,\"lat\");\n            let lonSum = _sumChildValues(stateEntry,\"lon\");\n            let childCount = apogeeutil.jsonObjectLength(stateEntry.regions);\n            stateEntry.lat = latSum/childCount;\n            stateEntry.lon = lonSum/childCount;\n        }\n        \n        if(!stateEntry.casesData) {\n            stateEntry.casesData = _sumChildArrays(stateEntry,\"casesData\");\n            stateEntry.deathsData = _sumChildArrays(stateEntry,\"deathsData\");\n        }\n    }\n    \n    //this is a signal for an entry we don't want \n    if(!stateEntry.lat) {\n        delete usEntry.regions[stateName];\n        deletedEntries.push(stateName);\n        continue;\n    }\n}\n\nreturn usEntry;","supplementalCode":"function _sumChildValues(stateEntry,propName) {\n    let value = 0;\n    for(let countyName in stateEntry.regions) {\n        let countyEntry = stateEntry.regions[countyName];\n        value += countyEntry[propName]\n    }\n    return value;\n}\n\nfunction _sumChildArrays(stateEntry,propName) {\n    let targetArray;\n    for(let countyName in stateEntry.regions) {\n        let countyEntry = stateEntry.regions[countyName];\n        let sourceArray = countyEntry[propName];\n        if(!targetArray) {\n            targetArray = apogeeutil.jsonCopy(sourceArray);\n        }\n        else {\n            sourceArray.forEach( (value,index) => targetArray[index] += value);\n        }\n    }\n    return targetArray;\n}"}},"dataValidation":{"name":"dataValidation","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let errors = [];\n_validateEntry(cleanedData,true,errors);\nreturn errors;","supplementalCode":"function _validateEntry(entry,onlyChildChecks,errors) {\n    if(!onlyChildChecks) {\n        if(!entry.population) _addError(\"Missing population\",entry,errors);\n        if(!entry.lat) _addError(\"Missing lat\",entry,errors);\n        if(!entry.lon) _addError(\"Missing lon\",entry,errors);\n        if(!entry.casesData) _addError(\"Missing cases\",entry,errors);\n        if(!entry.deathsData) _addError(\"Missing deaths\",entry,errors);\n    }\n    \n    if(entry.regions) {\n        for(let childName in entry.regions) {\n            let childEntry = entry.regions[childName];\n            _validateEntry(childEntry,false,errors);\n        }\n    }\n}\n\nfunction _addError(msg,entry,errors) {\n    errors.push( entry.type + \" = \" + entry.name + \": \" + msg);\n}"}}}}}},"components":{"dataDownload":{"type":"apogeeapp.app.FolderComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Data Download"}]},{"type":"paragraph","content":[{"type":"text","text":"This data is downloaded from a Github site managed by Johns Hopkins: "},{"type":"text","marks":[{"type":"link","attrs":{"href":"https://github.com/CSSEGISandData/COVID-19","title":null}}],"text":"https://github.com/CSSEGISandData/COVID-19"},{"type":"text","text":"."}]},{"type":"heading2","content":[{"type":"text","text":"World Data"}]},{"type":"paragraph","content":[{"type":"text","text":"The url below is raw world cases data in csv format."}]},{"type":"apogeeComponent","attrs":{"name":"worldCasesUrl","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"The url below is raw world deaths data in csv format."}]},{"type":"apogeeComponent","attrs":{"name":"worldDeathsUrl","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"The url below is raw world recovered data in csv format."}]},{"type":"apogeeComponent","attrs":{"name":"worldRecoveredUrl","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the raw downloaded cases data:"}]},{"type":"apogeeComponent","attrs":{"name":"worldDownloadedData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the raw downloaded deathsdata:"}]},{"type":"apogeeComponent","attrs":{"name":"worldDeathsData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the raw downloaded recovered data:"}]},{"type":"apogeeComponent","attrs":{"name":"worldRecoveredData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the world cases data processed in to a row and column array. The field header is kept on."}]},{"type":"apogeeComponent","attrs":{"name":"worldCasesGrid","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the world deaths data processed in to a row and column array. The field header is kept on."}]},{"type":"apogeeComponent","attrs":{"name":"worldDeathsGrid","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the world recovered data processed in to a row and column array. The field header is kept on."}]},{"type":"apogeeComponent","attrs":{"name":"worldRecoveredGrid","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Below is the column numbering for the data, with the first column being column 0. This applies to all three world tables."}]},{"type":"apogeeComponent","attrs":{"name":"WORLD_GRID_COLUMNS","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"US Data"}]},{"type":"paragraph","content":[{"type":"text","text":"The url below is raw cases data in csv format for the US."}]},{"type":"apogeeComponent","attrs":{"name":"usCasesUrl","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"The url below is raw cases data in csv format for the US."}]},{"type":"apogeeComponent","attrs":{"name":"usDeathsUrl","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the raw cases data."}]},{"type":"apogeeComponent","attrs":{"name":"usCasesData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the raw deaths data."}]},{"type":"apogeeComponent","attrs":{"name":"usDeathsData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the US cases processed in to a row and column array. The field header is kept on."}]},{"type":"apogeeComponent","attrs":{"name":"usCasesGrid","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the US deaths processed in to a row and column array. The field header is kept on."}]},{"type":"apogeeComponent","attrs":{"name":"usDeathsGrid","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Below are some column numbers from the above grid, with the first column being column 0. This only applies to the cases data. The deaths data has an additional column, population."}]},{"type":"apogeeComponent","attrs":{"name":"US_CASES_COLUMNS","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Below are some column numbers from the deaths grid data, with the first column being 0. Note that this table contains one additional column not in the cases data."}]},{"type":"apogeeComponent","attrs":{"name":"US_DEATHS_COLUMNS","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Simple CSV Parser"}]},{"type":"paragraph","content":[{"type":"text","text":"This is a simple CSV parser. It will work if there are ZERO or ONE of the internal fields that are quote delimited. It will throw an error if this condition is not met. This works with our current input data."}]},{"type":"apogeeComponent","attrs":{"name":"simpleCsvParser","id":0,"state":""}},{"type":"paragraph"}]}},"children":{"WORLD_GRID_COLUMNS":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"worldDownloadedData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"worldDeathsUrl":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"worldRecoveredUrl":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"worldCasesUrl":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"usCasesUrl":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"usDeathsUrl":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"usCasesData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"usCasesGrid":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"usDeathsGrid":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":true},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"usDeathsData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"US_CASES_COLUMNS":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"US_DEATHS_COLUMNS":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"worldDeathsData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"worldRecoveredData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"worldCasesGrid":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":294},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"worldDeathsGrid":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"worldRecoveredGrid":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"simpleCsvParser":{"type":"apogeeapp.app.FunctionComponent","viewState":{"childDisplayState":{"views":{"Code":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":1,"tabOpened":true}},"workspaceNotes":{"type":"apogeeapp.app.FolderComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Workspace Notes"}]},{"type":"paragraph","content":[{"type":"text","text":"This page contains various notes regarding the workspace, such as items I want to go back and improve."}]},{"type":"heading2","content":[{"type":"text","text":"To Do"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"For the selector on the plots page, I need to add an \"all\" entry for each child list (country, state, county) if there is data for \"all\"."}]}]},{"type":"paragraph"},{"type":"heading2","content":[{"type":"text","text":"To Improve"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"The parsing of the text data is really a cludge. I will parse the data if there are 0 or 1 fields that are delimited with quotes (because of an included comma). I should generalize this."}]},{"type":"listItem","content":[{"type":"text","text":"Right now I have a lot of code in a number of cells."}]}]},{"type":"heading2","content":[{"type":"text","text":"Other Issues"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"The grids will often get corrupted  (I think if you scroll from the top and leave the page). This is a bug in my grid view."}]}]}]}},"viewState":{"childDisplayState":null}},"normalizedData":{"type":"apogeeapp.app.FolderComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Normalized Data"}]},{"type":"paragraph","content":[{"type":"text","text":"This page contains normalized data created from the downloaded data. We will combine the US and World data into one hierarchical structure."}]},{"type":"heading2","content":[{"type":"text","text":"Step 1. Modified Row Data"}]},{"type":"paragraph","content":[{"type":"text","text":"This cell contains an array of elements, each of which contains the data from a row of the world or US data."}]},{"type":"apogeeComponent","attrs":{"name":"worldNormalizedData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This function gets the times series data from an input grid row. It can also be used on the header row to get the date entries. "}]},{"type":"apogeeComponent","attrs":{"name":"dateLabels","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Step 2. Combine into Hierarchical Data"}]},{"type":"paragraph","content":[{"type":"text","text":"Here we create the hierarchical data. This has a single world entry, with child entries for countries, which in turn have child entries for states (provinces, etc) , which in turn have child entries for counties (or immediate other sub-state  admin region)."}]},{"type":"apogeeComponent","attrs":{"name":"hierarchicalData1","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Step 3. Fill in Missing Data"}]},{"type":"paragraph","content":[{"type":"text","text":"Here we sum child entries to populate missing data for parent entries - meaning counts (based on the sum of all child counts) and lat lon (based on the simple, equally weighted average of the child lat lons)."}]},{"type":"apogeeComponent","attrs":{"name":"mergedWorldData","id":0,"state":""}},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"}]}},"children":{"worldNormalizedData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":true,"height":7000}}}}},"dateLabels":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"height":7000,"isViewActive":true},"Private":{"isViewActive":false}}}}},"hierarchicalData1":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false,"height":7000}}}}},"mergedWorldData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"height":7000,"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":1,"tabOpened":true}},"plots":{"type":"apogeeapp.app.FolderComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Plot Data"}]},{"type":"paragraph","content":[{"type":"text","text":"This table should hold the name of the county, including the full state name and country abbreviation."}]},{"type":"apogeeComponent","attrs":{"name":"regionSelector","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here are some graphing options:"}]},{"type":"apogeeComponent","attrs":{"name":"graphingOptions","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Chart"}]},{"type":"paragraph","content":[{"type":"text","text":"This is a chart of COVID-19 cases for the selected region."}]},{"type":"apogeeComponent","attrs":{"name":"regionChart","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"The following tables are input to the chart."}]},{"type":"paragraph","content":[{"type":"text","text":"The data series:"}]},{"type":"apogeeComponent","attrs":{"name":"chartDataSeries","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"The chart options:"}]},{"type":"apogeeComponent","attrs":{"name":"chartOptions","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Selected Data"}]},{"type":"paragraph","content":[{"type":"text","text":"Here we process the form selections to create the chart data."}]},{"type":"apogeeComponent","attrs":{"name":"selectedPlotDataType","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"selectedScaleType","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"regionPath","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"regionDisplayName","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the selected data entry:"}]},{"type":"apogeeComponent","attrs":{"name":"selectedEntry","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the selected time series for total cases:"}]},{"type":"apogeeComponent","attrs":{"name":"totalCasesData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the selected time series for new cases:"}]},{"type":"apogeeComponent","attrs":{"name":"newCasesData","id":0,"state":""}},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"}]}},"children":{"regionPath":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false,"height":7000}}}}},"regionSelector":{"type":"apogeeapp.app.FormDataComponent","viewState":{"childDisplayState":{"views":{"Form":{"isViewActive":true},"Layout Code":{"isViewActive":false},"Layout Private":{"isViewActive":false},"isInputValid(formValue)":{"isViewActive":false},"isInputValid Private":{"isViewActive":false},"Form Value":{"isViewActive":false}}}}},"selectedEntry":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"height":7000,"isViewActive":false}}}}},"regionChart":{"type":"apogeeapp.app.ChartJSComponent","viewState":{"childDisplayState":{"views":{"Chart":{"isViewActive":true},"Input":{"isViewActive":false},"Config (Debug)":{"height":280,"isViewActive":false}}}}},"chartDataSeries":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":true},"Private":{"isViewActive":false}}}}},"chartOptions":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":true},"Private":{"isViewActive":false}}}}},"regionDisplayName":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"totalCasesData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"newCasesData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"graphingOptions":{"type":"apogeeapp.app.FormDataComponent","viewState":{"childDisplayState":{"views":{"Form":{"isViewActive":true},"Layout Code":{"height":7000,"isViewActive":false},"Layout Private":{"isViewActive":false},"isInputValid(formValue)":{"isViewActive":false},"isInputValid Private":{"isViewActive":false},"Form Value":{"height":280,"isViewActive":false}}}}},"selectedPlotDataType":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"selectedScaleType":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":-1,"tabOpened":true}},"testPage_multiplot":{"type":"apogeeapp.app.FolderComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Multiplot Test"}]},{"type":"paragraph","content":[{"type":"text","text":"We will plot the number of cases per the following population for the given states"}]},{"type":"apogeeComponent","attrs":{"name":"casesPer","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This form selects the data to plot for the selected states."}]},{"type":"apogeeComponent","attrs":{"name":"graphingOptions","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This form selects the state to plot."}]},{"type":"apogeeComponent","attrs":{"name":"stateSelector","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"stateCounts","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Chart Data"}]},{"type":"apogeeComponent","attrs":{"name":"datasets","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"options","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Data Processing"}]},{"type":"paragraph","content":[{"type":"text","text":"This is the data entry for the US."}]},{"type":"apogeeComponent","attrs":{"name":"usDataEntry","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here we merge the COVID data with the downloaded population, where available, and reformat into a state map."}]},{"type":"apogeeComponent","attrs":{"name":"stateDataMap","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is a list of the states and other US regions."}]},{"type":"apogeeComponent","attrs":{"name":"stateList","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is an array of entries for the selected states."}]},{"type":"apogeeComponent","attrs":{"name":"selectedStateEntries","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the processed state data, showing the number of new cases per given population number as given by the field "},{"type":"text","marks":[{"type":"italic"}],"text":"casesPer"},{"type":"text","text":"."}]},{"type":"apogeeComponent","attrs":{"name":"processedStateData","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Time Series Processing Functions"}]},{"type":"paragraph","content":[{"type":"text","text":"All these functions take a time series input and return a time series of the same length."}]},{"type":"paragraph","content":[{"type":"text","text":"This function takes a difference of entries. To end up with the same length of array, this creates a virtual entry of index -1 with value 0."}]},{"type":"apogeeComponent","attrs":{"name":"differenceFunction","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":" This function divides each entry by the input number"}]},{"type":"apogeeComponent","attrs":{"name":"multiplyFunction","id":0,"state":""}},{"type":"paragraph"},{"type":"paragraph"}]}},"children":{"stateSelector":{"type":"apogeeapp.app.FormDataComponent","viewState":{"childDisplayState":{"views":{"Form":{"isViewActive":true},"Layout Code":{"height":7000,"isViewActive":true},"Layout Private":{"isViewActive":true,"height":7000},"isInputValid(formValue)":{"isViewActive":false},"isInputValid Private":{"isViewActive":false},"Form Value":{"isViewActive":false,"height":280}}}}},"usDataEntry":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"stateList":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"selectedStateEntries":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"stateCounts":{"type":"apogeeapp.app.ChartJSComponent","viewState":{"childDisplayState":{"views":{"Chart":{"isViewActive":true},"Input":{"isViewActive":false},"Config (Debug)":{"isViewActive":false}}}}},"differenceFunction":{"type":"apogeeapp.app.FunctionComponent","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"processedStateData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"datasets":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false,"height":7000}}}}},"options":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"stateDataMap":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"height":7000,"isViewActive":false}}}}},"multiplyFunction":{"type":"apogeeapp.app.FunctionComponent","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"casesPer":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"graphingOptions":{"type":"apogeeapp.app.FormDataComponent","viewState":{"childDisplayState":{"views":{"Form":{"isViewActive":true},"Layout Code":{"height":7000,"isViewActive":false},"Layout Private":{"isViewActive":false},"isInputValid(formValue)":{"isViewActive":false},"isInputValid Private":{"isViewActive":false},"Form Value":{"height":280,"isViewActive":true}}}}}},"viewState":{"childDisplayState":null,"treeState":-1,"tabOpened":true}},"populationData":{"type":"apogeeapp.app.FolderComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Population Data"}]},{"type":"paragraph","content":[{"type":"text","text":"This is a URL to download state population from the US Census. Unfortunately I haven't figured out how to get data for the US territories included in the COVID data."}]},{"type":"apogeeComponent","attrs":{"name":"usStatePopulationUrl","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the API key."}]},{"type":"apogeeComponent","attrs":{"name":"apiKey","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the data."}]},{"type":"apogeeComponent","attrs":{"name":"usStatePopulation","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the data reformatted into a lookup table."}]},{"type":"apogeeComponent","attrs":{"name":"usPopulationMap","id":0,"state":""}},{"type":"heading1","content":[{"type":"text","text":"World Population Table"}]},{"type":"paragraph","content":[{"type":"text","text":"This is a 2020 population of countries taken from the web  page "},{"type":"text","marks":[{"type":"link","attrs":{"href":"https://worldpopulationreview.com/","title":null}}],"text":"https://worldpopulationreview.com/"}]},{"type":"apogeeComponent","attrs":{"name":"worldPopulations","id":0,"state":""}},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"}]}},"children":{"usStatePopulation":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"height":7000,"isViewActive":true},"Private":{"isViewActive":false}}}}},"usStatePopulationUrl":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"usPopulationMap":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":true},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"apiKey":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"worldPopulations":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Grid","viewState":{"childDisplayState":{"views":{"Data":{"height":300,"isViewActive":false},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":1,"tabOpened":true}},"usProcessedData":{"type":"apogeeapp.app.FolderComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"US Processed Data"}]},{"type":"paragraph","content":[{"type":"text","text":"This is data processed from the US datasets."}]},{"type":"paragraph","content":[{"type":"text","text":"Here we combine the cases and deaths data."}]},{"type":"apogeeComponent","attrs":{"name":"combinedData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here we clean up the data:"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"delete entries with incomplete data (There are some territories at the end)"}]},{"type":"listItem","content":[{"type":"text","text":"add the counts from counties and put these in the state entries."}]}]},{"type":"apogeeComponent","attrs":{"name":"cleanedData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here we do a few additional checks. The array result should be a list of errors."}]},{"type":"apogeeComponent","attrs":{"name":"dataValidation","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Utilities"}]},{"type":"apogeeComponent","attrs":{"name":"getTimeSeriesData","id":0,"state":""}}]}},"children":{"getTimeSeriesData":{"type":"apogeeapp.app.FunctionComponent","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"combinedData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"height":7000,"isViewActive":false}}}}},"cleanedData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"height":7000,"isViewActive":false}}}}},"dataValidation":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"height":7000,"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":-1,"tabOpened":true,"tabShowing":true}},"viewState":{"treeState":1}}},"viewState":{"treeState":1}}