{"fileType":"apogee app js workspace","version":"0.50","references":{"refEntries":[{"url":"http://localhost:8888/applications/modules/chartjsmodule/Chart.min.js","nickname":"","entryType":"js link"},{"url":"http://localhost:8888/applications/modules/chartjsmodule/ChartJSComponentModule.js?r=4","nickname":"","entryType":"es module"}],"viewState":{"treeState":1,"lists":{"es module":{"treeState":1},"js link":{"treeState":1},"css link":{"treeState":0}}}},"code":{"model":{"fileType":"apogee model","version":0.2,"name":"COVID-19 Workspace","children":{"dataDownload":{"name":"dataDownload","type":"apogee.Folder","children":{"WORLD_GRID_COLUMNS":{"name":"WORLD_GRID_COLUMNS","type":"apogee.JsonTable","updateData":{"data":{"STATE":0,"COUNTRY":1,"LAT":2,"LON":3,"FIRST_DATA_ROW":4}}},"US_GRID_COLUMNS":{"name":"US_GRID_COLUMNS","type":"apogee.JsonTable","updateData":{"data":{"FIPS":4,"COUNTY":5,"STATE":6,"COUNTRY":7,"LAT":8,"LON":9,"COMBINED_KEY":10,"FIRST_DATA_ROW":11}}},"usGridData":{"name":"usGridData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let rowArray = usDownloadedData.split(\"\\n\");\n\nlet gridData = rowArray.map( row => {\n    //our parsing is simplified to handl this specific data rather than a general cvs file.\n    //only one (or zero) fields have quotes, we will pull it out.\n    let firstQuoteIndex = row.indexOf(\"\\\"\");\n    \n    //no quoted strings\n    if(firstQuoteIndex < 0) return row.split(\",\");\n    \n    let secondQuoteIndex = row.indexOf(\"\\\"\",firstQuoteIndex+1);\n    if(secondQuoteIndex < 0) throw new Error(\"Error: Only 1 delimited quote!\");\n    //make sure there are only two delimited\n    let thirdQuoteIndex = row.indexOf(\"\\\"\",secondQuoteIndex+1);\n    if(thirdQuoteIndex > 0) throw new Error(\"Error: More than 2 delimited quotes!\");\n    \n    \n    //split up and parse single the quoted field differently from the rest of the row.\n    let firstString = row.substr(0,firstQuoteIndex-1);\n    let secondString = row.substr(firstQuoteIndex+1,secondQuoteIndex-firstQuoteIndex-1);\n    let thirdString = row.substr(secondQuoteIndex+2);\n    \n    let firstArray = firstString.split(\",\")\n    let secondArray = secondString\n    let thirdArray = thirdString.split(\",\");\n    \n    return firstArray.concat(secondArray).concat(thirdArray);\n})\n\nreturn gridData;","supplementalCode":""}},"usDownloadedData":{"name":"usDownloadedData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return apogeeutil.textRequest(usUrl);","supplementalCode":""}},"usUrl":{"name":"usUrl","type":"apogee.JsonTable","updateData":{"data":"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv"}},"worldGridData":{"name":"worldGridData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let rowArray = worldDownloadedData.split(\"\\n\");\n\nlet gridData = rowArray.map( row => {\n    //our parsing is simplified to handl this specific data rather than a general cvs file.\n    //only one (or zero) fields have quotes, we will pull it out.\n    let firstQuoteIndex = row.indexOf(\"\\\"\");\n    \n    //no quoted strings\n    if(firstQuoteIndex < 0) return row.split(\",\");\n    \n    let secondQuoteIndex = row.indexOf(\"\\\"\",firstQuoteIndex+1);\n    if(secondQuoteIndex < 0) throw new Error(\"Error: Only 1 delimited quote!\");\n    //make sure there are only two delimited\n    let thirdQuoteIndex = row.indexOf(\"\\\"\",secondQuoteIndex+1);\n    if(thirdQuoteIndex > 0) throw new Error(\"Error: More than 2 delimited quotes!\");\n    \n    //split up and parse single the quoted field differently from the rest of the row.\n    let firstString = row.substr(0,firstQuoteIndex-1);\n    let secondString = row.substr(firstQuoteIndex+1,secondQuoteIndex-firstQuoteIndex-1);\n    let thirdString = row.substr(secondQuoteIndex+2);\n    \n    let firstArray = firstString.split(\",\")\n    let secondArray = secondString\n    let thirdArray = thirdString.split(\",\");\n    \n    return firstArray.concat(secondArray).concat(thirdArray);\n})\n\nreturn gridData;","supplementalCode":""}},"worldDownloadedData":{"name":"worldDownloadedData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return apogeeutil.textRequest(worldUrl);","supplementalCode":""}},"worldUrl":{"name":"worldUrl","type":"apogee.JsonTable","updateData":{"data":"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"}}}},"workspaceNotes":{"name":"workspaceNotes","type":"apogee.Folder","children":{}},"normalizedData":{"name":"normalizedData","type":"apogee.Folder","children":{"worldNormalizedData":{"name":"worldNormalizedData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let data = [];\n\ndataDownload.worldGridData.forEach( (row,index) => {\n    if(index == 0) return;\n    \n    let entry = _createEntry(row,dataDownload.WORLD_GRID_COLUMNS);\n    if(entry) data.push(entry);\n});\n\ndataDownload.usGridData.forEach( (row,index) => {\n    if(index == 0) return;\n    \n    let entry = _createEntry(row,dataDownload.US_GRID_COLUMNS);\n   if(entry) data.push(entry);\n});\n\nreturn data;","supplementalCode":"function _createEntry(row,columnDef) {\n    //create a region array\n    let entry = {}\n    entry.regionPath = [];\n    \n    let country = row[columnDef.COUNTRY];\n    if((country)&&(country != \"\")) entry.regionPath.push(country);\n    else return null;\n    \n    let state = row[columnDef.STATE];\n    if((state)&&(state != \"\")) entry.regionPath.push(state);\n    \n    let county = row[columnDef.COUNTY];\n    if((county)&&(county != \"\")) entry.regionPath.push(county);\n    \n    //get the data\n    entry.data = _getRowTimeSeries(row,columnDef);\n    \n    //latitude and longitude - assume 0.0 is an invalid value\n    let latString = row[columnDef.LAT];\n    let lonString = row[columnDef.LON];\n    if((latString != \"\")&&(lonString != \"\")) {\n        let lat = parseFloat(latString);\n        let lon = parseFloat(lonString);\n        if((lat != 0.0)&&(lon != 0.0)) {\n            entry.lat = lat;\n            entry.lon = lon;\n        }\n    }\n    \n    //fips (census info) - us only\n    if(columnDef.FIPS !== undefined) {\n        entry.fips = row[fips];\n    }\n    \n    return entry;\n}\n\nfunction _getRowTimeSeries(row,columnDef) {\n    return row.slice(columnDef.FIRST_DATA_ROW).map(stringValue => parseInt(stringValue));\n}"}},"dateLabels":{"name":"dateLabels","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let worldDates = dataDownload.worldGridData[0].slice(dataDownload.WORLD_GRID_COLUMNS.FIRST_DATA_ROW).map( value => value.trim());\nlet usDates = dataDownload.usGridData[0].slice(dataDownload.US_GRID_COLUMNS.FIRST_DATA_ROW).map( value => value.trim());\n\nif(!apogeeutil.jsonEquals(worldDates,usDates)) throw new Error(\"World and US dates do not match - program does not currently handle this.\");\n\nreturn worldDates\n","supplementalCode":""}},"hierarchicalData1":{"name":"hierarchicalData1","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let worldEntry = {};\nworldEntry.name = \"Earth\";\nworldEntry.type = \"world\";\n\nworldNormalizedData.forEach( inEntry => {\n    _addToEntry(worldEntry,inEntry,0);\n})\n\nreturn worldEntry;","supplementalCode":"//this function adds the inEntry to the given region entry, where the regionPathIndex specifies which level of the region path is applicable\n//e.g. country, state, county\nfunction _addToEntry(regionOutEntry,inEntry,regionPathIndex) {\n    if(!regionOutEntry.regions) regionOutEntry.regions = {};\n    \n    //lookup this child region in the parent out region\n    let childRegionName = inEntry.regionPath[regionPathIndex];\n    let childRegionOutEntry = regionOutEntry.regions[childRegionName];\n    if(!childRegionOutEntry) {\n        //create a new entry if needed\n        childRegionOutEntry = {};\n        childRegionOutEntry.name = childRegionName;\n        childRegionOutEntry.type = inEntry.type;\n        regionOutEntry.regions[childRegionName] = childRegionOutEntry;\n    }\n    \n    //check if we need to add as a child to the child region entry\n    if(inEntry.regionPath.length > regionPathIndex + 1) {\n        //add as a child to the child region entry\n        _addToEntry(childRegionOutEntry,inEntry,regionPathIndex+1);\n    }\n    else {\n        //add payload data to the current out entry - but give precedence to any existing data\n        if((!childRegionOutEntry.data)&&(inEntry.data)) {\n            childRegionOutEntry.data = inEntry.data;\n        }\n        if((!childRegionOutEntry.lat)&&(inEntry.lat)) {\n            childRegionOutEntry.lat = inEntry.lat;\n        }\n        if((!childRegionOutEntry.lon)&&(inEntry.lon)) {\n            childRegionOutEntry.lon = inEntry.lon;\n        }\n        if((!childRegionOutEntry.fips)&&(inEntry.fips)) {\n            childRegionOutEntry.fips = inEntry.fips;\n        }\n    }\n}"}},"mergedWorldData":{"name":"mergedWorldData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let worldEntry = apogeeutil.jsonCopy(hierarchicalData1);\n\n_fillInMisingData(worldEntry);\n\nreturn worldEntry;","supplementalCode":"function _fillInMisingData(entry) {\n    let childCount = 0;\n    //initialize summed data, if needed\n    let summedData;\n    let dataCount = 0;\n    if(entry.data === undefined) {\n        summedData = _createZeroArray(dateLabels.length);\n    };\n    //initialize averaged lat, lon, if needed\n    let summedLat, summedLon;\n    let latLonCount = 0;\n    if(entry.lat === undefined) {\n        summedLat = 0.0;\n        summedLon = 0.0;\n    }\n    \n    if(entry.regions) {\n        for(let childName in entry.regions) {\n            //first populate the child, if needed\n            let childEntry = entry.regions[childName];\n            _fillInMisingData(childEntry);\n            \n            //attempt to populate this entry\n            childCount++;\n            \n            if((summedData)&&(childEntry.data)) {\n                _addSecondArrayToFirstArray(summedData,childEntry.data);\n                dataCount++;\n            }\n            \n            if((summedLat !== undefined)&&(childEntry.lat !== undefined)) {\n                summedLat += childEntry.lat;\n                summedLon += childEntry.lon;\n                latLonCount++;\n            }\n        }\n        \n        //decide if we want the child data if we get entries\n        //from 80 percent for more (it will probably be all or nothing)\n        if((dataCount > 0)&&(dataCount > childCount * 0.8)) {\n            entry.data = summedData;\n        }\n        //just use 50 percent for lat lon (again, it will probably be all or nothing)\n        if((latLonCount > 0)&&(latLonCount > childCount * 0.5)) {\n            entry.lat = summedLat / latLonCount;\n            entry.lon = summedLon / latLonCount;\n        }\n    }\n}\n\n//this makes an array of 0s of the given length\nfunction _createZeroArray(length) {\n    let array = [];\n    array.length = length;\n    array.fill(0);\n    return array;\n}\n\n//this modified array 1;\nfunction _addSecondArrayToFirstArray(array1,array2) {\n    array2.forEach( (value,index) => array1[index] += value);\n}"}}}},"plots":{"name":"plots","type":"apogee.Folder","children":{"regionPath":{"name":"regionPath","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let path = [];\n\nlet country = regionSelector.data.country;\nif(country != \"-ALL-\") {\n    path.push(country);\n    let stateData = regionSelector.data[country + \"|state\"];\n    if((stateData)&&(stateData.state != \"-ALL-\")) {\n        path.push(stateData.state);\n        if((stateData.county)&&(stateData.county != \"-ALL-\")) {\n            path.push(stateData.county);\n        }\n    }\n} \n\nreturn path;","supplementalCode":""}},"regionSelector":{"name":"regionSelector","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"let layout = [];\n\n//add a selector for country\nlet worldEntry = normalizedData.mergedWorldData;\n//the region list is a list of all subregions, plus an entry for the parent if it has a data series.\nlet countryList = _getRegionList(worldEntry);\nif(!countryList) return;\nlayout.push(_getDropdownLayout(countryList,\"country\",\"Country: \"));\n\n//add a selector for the state, for each applicable country\ncountryList.forEach( countryName => {\n    let countryEntry = worldEntry.regions[countryName];\n    if(!countryEntry) return; //there is no country entry if all is selected\n    let stateList = _getRegionList(countryEntry);\n    if(!stateList) return;\n    \n    //create a panel fro this country, which will be displayed when the country is selected.\n    let statePanelLayout = _getPanelLayout(countryName + \"|state\");\n    //selector to control visibility\n    statePanelLayout.selector = {\n\t    parentKey: \"country\",\n\t    parentValue: countryName\n    };\n    layout.push(statePanelLayout);\n    \n    //state selector for this country\n    statePanelLayout.formData.push(_getDropdownLayout(stateList,\"state\",\"State: \"));\n    \n    //add a selector for county, for each applicable state\n    stateList.forEach( stateName => {\n        stateEntry = countryEntry.regions[stateName];\n        if(!stateEntry) return; //there is no state entry if all is selected\n        let countyList = _getRegionList(stateEntry);\n        if(!countyList) return;\n        \n        //county selector for this state \n        let countyListLayout = _getDropdownLayout(countyList,\"county\",\"County: \");\n        //add a selector so this is shown only if the given state is selected\n        countyListLayout.selector = {\n\t\t    parentKey: \"state\",\n\t\t    parentValue: stateName\n\t\t}\n        statePanelLayout.formData.push(countyListLayout);\n    });\n});\n\nreturn layout;\n","supplementalCode":"function _getRegionList(parentEntry) {\n    let regionMap = parentEntry.regions;\n    if(!regionMap) return null;\n    \n    let regionList = [];\n    //add an \"-ALL-\" selection if the parent entry has its own data\n    if(parentEntry.data) {\n        regionList.push(\"-ALL-\");\n    }\n    for(let regionName in regionMap) {\n        regionList.push(regionName);\n    }\n    return regionList;\n}\n\nfunction _getDropdownLayout(selectionList,key,label) {\n    return {\n        type: \"dropdown\",\n        label: label,\n        entries: selectionList,\n        key: key\n    }\n}\n\nfunction _getPanelLayout(key) {\n    return {\n        \"type\":\"panel\",\n        \"formData\": [\n        ],\n        \"key\": key\n    }\n}"}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":{"country":"France","France|state":{"state":"-ALL-"}}}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":""}}}},"selectedEntry":{"name":"selectedEntry","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(regionPath.length == 0) return normalizedData.mergedWorldData;\n\nreturn _lookupEntry(normalizedData.mergedWorldData,regionPath,0);","supplementalCode":"/** This method gets child entry from the parent, given the region path and the start index */\nfunction _lookupEntry(parentEntry,regionPath,pathIndex) {\n    if(!parentEntry.regions) return null;\n    \n    let regionName = regionPath[pathIndex];\n    let childEntry = parentEntry.regions[regionName];\n    if(!childEntry) return null;\n    \n    if(pathIndex + 1 < regionPath.length) return _lookupEntry(childEntry,regionPath,pathIndex+1);\n    else return childEntry;\n}"}},"regionChart":{"name":"regionChart","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"\n    return {\n        \"chartType\": \"line\",\n        \"xValuesInputType\": \"common\",\n        \"commonXValueArray\": normalizedData.dateLabels,\n        \"datasets\": chartDataSeries,\n        \"generalOptions\": chartOptions,\n        \"storedData\": {\"chartType\":\"line\",\"xValuesInputType\":\"common\",\"commonXValueArray\":\"normalizedData.dateLabels\",\"datasets\":\"chartDataSeries\",\"generalOptions\":\"chartOptions\"}\n    };","supplementalCode":""}},"chartDataSeries":{"name":"chartDataSeries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return [\n    {\n        yArray: (selectedPlotDataType == \"newCases\") ? newCasesData : totalCasesData,\n        datasetOptions: {\n            label: regionDisplayName + ((selectedPlotDataType == \"newCases\") ? \": New Cases\" : \": Total Cases\")\n        }\n    }\n    \n]","supplementalCode":""}},"chartOptions":{"name":"chartOptions","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return {\n\t\"title\": {\n\t\t\"display\": true,\n\t\t\"text\": \"COVID-19 Cases\"\n\t},\n\t\"scales\": {\n\t    \"xAxes\": [\n\t\t\t{\n\t\t\t\t\"type\": \"category\",\n\t\t\t\t\"display\": true\n\t\t\t}\n\t\t],\n\t\t\"yAxes\": [\n\t\t\t{\n\t\t\t\t\"type\": selectedScaleType,\n\t\t\t\t\"display\": true\n\t\t\t}\n\t\t]\n\t}\n}","supplementalCode":""}},"regionDisplayName":{"name":"regionDisplayName","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return regionPath.join(\", \");","supplementalCode":""}},"totalCasesData":{"name":"totalCasesData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return selectedEntry.data;","supplementalCode":""}},"newCasesData":{"name":"newCasesData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let previousCounts = 0;\nreturn totalCasesData.map( (value,index) => {\n    let delta = value - previousCounts;\n    previousCounts = value\n    return delta;\n});","supplementalCode":""}},"graphingOptions":{"name":"graphingOptions","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return [\n    {\n        type: \"radioButtonGroup\",\n        label: \"Plot Data: \",\n        entries: [[\"Total Cases\",\"totalCases\"],[\"New Cases\",\"newCases\"]],\n        groupName: \"plotDataType\",\n        key: \"plotDataType\"\n    },\n    {\n        type: \"radioButtonGroup\",\n        label: \"Y Scale: \",\n        entries: [[\"Linear\",\"linear\"],[\"Logarithmic\",\"logarithmic\"]],\n        groupName: \"scaleType\",\n        key: \"scaleType\"\n    }    \n]","supplementalCode":""}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":{"plotDataType":"totalCases","scaleType":"linear"}}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":""}}}},"selectedPlotDataType":{"name":"selectedPlotDataType","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((graphingOptions.data)&&(graphingOptions.data.plotDataType)) {\n    return graphingOptions.data.plotDataType; \n}\nelse {\n    return \"totalCases\";\n}","supplementalCode":""}},"selectedScaleType":{"name":"selectedScaleType","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((graphingOptions.data)&&(graphingOptions.data.scaleType)) {\n    return graphingOptions.data.scaleType; \n}\nelse {\n    return \"linear\";\n}","supplementalCode":""}}}},"testPage_multiplot":{"name":"testPage_multiplot","type":"apogee.Folder","children":{"stateSelector":{"name":"stateSelector","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return [\n    {\n        type: \"checkboxGroup\",\n        entries: stateList.map( value => [value + \"\\t\",value]),\n        key: \"states\",\n        horizontal: true\n    }\n]","supplementalCode":""}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":{"states":["California"]}}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":""}}}},"usDataEntry":{"name":"usDataEntry","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return normalizedData.mergedWorldData.regions.US;","supplementalCode":""}},"stateList":{"name":"stateList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let data = [];\nfor(let stateName in stateDataMap) {\n    data.push(stateName);\n}\nreturn data;","supplementalCode":""}},"selectedStateEntries":{"name":"selectedStateEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((!stateSelector.data)||(!stateSelector.data.states)) return apogeeutil.INVALID_VALUE;\n\nlet selectedStateEntries = [];\nstateSelector.data.states.forEach( state => {\n    selectedStateEntries.push(stateDataMap[state]);\n})\n\nreturn selectedStateEntries;","supplementalCode":""}},"stateCounts":{"name":"stateCounts","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"\n    return {\n        \"chartType\": \"line\",\n        \"xValuesInputType\": \"common\",\n        \"commonXValueArray\": normalizedData.dateLabels,\n        \"datasets\": datasets,\n        \"generalOptions\": options,\n        \"storedData\": {\"chartType\":\"line\",\"xValuesInputType\":\"common\",\"commonXValueArray\":\"normalizedData.dateLabels\",\"datasets\":\"datasets\",\"generalOptions\":\"options\"}\n    };","supplementalCode":""}},"differenceFunction":{"name":"differenceFunction","type":"apogee.FunctionTable","updateData":{"argList":["inData"],"functionBody":"let previousValue = 0;\nreturn inData.map( (value,index) => {\n    let delta = value - previousValue;\n    previousValue = value;\n    return delta;\n})","supplementalCode":""}},"processedStateData":{"name":"processedStateData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return selectedStateEntries.map( inEntry => {\n    let unscaledData;\n    if(graphingOptions.data.plotDataType == \"newCases\") {\n        //get the change in number of cases\n        unscaledData = differenceFunction(inEntry.data);\n    }\n    else {\n        unscaledData = inEntry.data;\n    }\n    //scale by population. If population not present, just 0 out the data.\n    let multiplier = inEntry.pop ? casesPer/inEntry.pop : 0;\n    let scaledDelta = multiplyFunction(unscaledData,multiplier);\n    \n    let outEntry = {};\n    outEntry.name = inEntry.name;\n    outEntry.data = scaledDelta;\n    return outEntry;\n})","supplementalCode":""}},"datasets":{"name":"datasets","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return processedStateData.map( (inEntry,index,array) => _createDataSet(inEntry,index,array.length));","supplementalCode":"function _createDataSet(inEntry,index,totalCount) {\n    return {\n        yArray: inEntry.data,\n        datasetOptions: {\n            label: inEntry.name,\n            fill: false,\n            borderColor: _getColor(index,totalCount),\n            borderWidth: 1,\n            pointRadius: 0,\n            lineTension: 0\n        }\n    }\n}\n\n/** This function generates a color for the index based on the total count. */\nfunction _getColor(index,totalCount) {\n    let r = [0,255];\n    let g = [0,0];\n    let b = [255,0];\n    \n    //this function will interpolate a given color based on the index\n    let pick = c => c[0] + (c[1]-c[0]) * index / totalCount;\n    \n    return \"rgb(\" + pick(r) + \",\" + pick(g) + \",\" + pick(b) + \")\";  \n}"}},"options":{"name":"options","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return {\n\t\"title\": {\n\t\t\"display\": true,\n\t\t\"text\": \"COVID-19 Cases\"\n\t},\n\t\"scales\": {\n\t\t\"xAxes\": [\n\t\t\t{\n\t\t\t\t\"type\": \"category\",\n\t\t\t\t\"display\": true\n\t\t\t}\n\t\t],\n\t\t\"yAxes\": [\n\t\t\t{\n\t\t\t\t\"type\": graphingOptions.data.scaleType,\n\t\t\t\t\"display\": true\n\t\t\t}\n\t\t]\n\t}\n}","supplementalCode":""}},"stateDataMap":{"name":"stateDataMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let data = {};\n\n for(let stateName in usDataEntry.regions) {\n     //lookup the population\n     let population = populationData.usPopulationMap[stateName];\n     if(!population) continue;\n    \n     let oldStateEntry = usDataEntry.regions[stateName];\n     let newStateEntry = {};\n     newStateEntry.name = oldStateEntry.name;\n     newStateEntry.data = oldStateEntry.data;\n     newStateEntry.pop = population;\n     data[stateName] = newStateEntry;\n }\n\nreturn data;","supplementalCode":""}},"multiplyFunction":{"name":"multiplyFunction","type":"apogee.FunctionTable","updateData":{"argList":["inData","multiplier"],"functionBody":"return inData.map( value => value*multiplier);","supplementalCode":""}},"casesPer":{"name":"casesPer","type":"apogee.JsonTable","updateData":{"data":1000000}},"graphingOptions":{"name":"graphingOptions","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return [\n    {\n        type: \"radioButtonGroup\",\n        label: \"Plot Data: \",\n        entries: [[\"Total Cases\",\"totalCases\"],[\"New Cases\",\"newCases\"]],\n        groupName: \"plotDataType\",\n        key: \"plotDataType\"\n    },\n    {\n        type: \"radioButtonGroup\",\n        label: \"Y Scale: \",\n        entries: [[\"Linear\",\"linear\"],[\"Logarithmic\",\"logarithmic\"]],\n        groupName: \"scaleType\",\n        key: \"scaleType\"\n    }    \n]","supplementalCode":""}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":{"plotDataType":"totalCases","scaleType":"linear"}}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":""}}}}}},"populationData":{"name":"populationData","type":"apogee.Folder","children":{"usStatePopulation":{"name":"usStatePopulation","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return apogeeutil.jsonRequest(usStatePopulationUrl + \"&key=\" + apiKey);","supplementalCode":""}},"usStatePopulationUrl":{"name":"usStatePopulationUrl","type":"apogee.JsonTable","updateData":{"data":"https://api.census.gov/data/2019/pep/population?get=POP,NAME&for=STATE:*"}},"usPopulationMap":{"name":"usPopulationMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let popMap = {};\nusStatePopulation.forEach( (entry,index) => {\n    //ignore header\n    if(index == 0) return;\n    \n    popMap[entry[1]] = parseInt(entry[0]);\n})\nreturn popMap;","supplementalCode":""}},"apiKey":{"name":"apiKey","type":"apogee.JsonTable","updateData":{"data":"099a777f03d58542cc4a8b149ed13ce61c34d5e2"}}}}}},"components":{"dataDownload":{"type":"apogeeapp.app.FolderComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Data Download"}]},{"type":"paragraph","content":[{"type":"text","text":"This data is downloaded from a Github site managed by Johns Hopkins: "},{"type":"text","marks":[{"type":"link","attrs":{"href":"https://github.com/CSSEGISandData/COVID-19","title":null}}],"text":"https://github.com/CSSEGISandData/COVID-19"},{"type":"text","text":"."}]},{"type":"heading2","content":[{"type":"text","text":"World Data"}]},{"type":"paragraph","content":[{"type":"text","text":"The url below is raw world data in csv format."}]},{"type":"apogeeComponent","attrs":{"name":"worldUrl","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the raw downloaded text data:"}]},{"type":"apogeeComponent","attrs":{"name":"worldDownloadedData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the data processed in to a row and column array. The field header is kept on. The parsing code is simplified parsing to handle this specific data. A more general csv parser could be added."}]},{"type":"apogeeComponent","attrs":{"name":"worldGridData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Below is the column numbering for the data, with the first column being column 0;"}]},{"type":"apogeeComponent","attrs":{"name":"WORLD_GRID_COLUMNS","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"US Data"}]},{"type":"paragraph","content":[{"type":"text","text":"The url below is raw data in csv format for the US."}]},{"type":"apogeeComponent","attrs":{"name":"usUrl","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the raw downloaded data:"}]},{"type":"apogeeComponent","attrs":{"name":"usDownloadedData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the data processed in to a row and column array. The field header is kept on. The parsing code is simplified parsing to handle this specific data. A more general csv parser could be added."}]},{"type":"apogeeComponent","attrs":{"name":"usGridData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Below are some column numbers from the above grid, with the first column being column 0;"}]},{"type":"apogeeComponent","attrs":{"name":"US_GRID_COLUMNS","id":0,"state":""}},{"type":"paragraph"},{"type":"paragraph"}]}},"children":{"WORLD_GRID_COLUMNS":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"US_GRID_COLUMNS":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"usGridData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"usDownloadedData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"usUrl":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"worldGridData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":294},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"worldDownloadedData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"worldUrl":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":-1}},"workspaceNotes":{"type":"apogeeapp.app.FolderComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Workspace Notes"}]},{"type":"paragraph","content":[{"type":"text","text":"This page contains various notes regarding the workspace, such as items I want to go back and improve."}]},{"type":"heading2","content":[{"type":"text","text":"To Do"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"For the selector on the plots page, I need to add an \"all\" entry for each child list (country, state, county) if there is data for \"all\"."}]}]},{"type":"paragraph"},{"type":"heading2","content":[{"type":"text","text":"To Improve"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"The parsing of the text data is really a cludge. I will parse the data if there are 0 or 1 fields that are delimited with quotes (because of an included comma). I should generalize this."}]},{"type":"listItem","content":[{"type":"text","text":"Right now I have a lot of code in a number of cells."}]}]},{"type":"heading2","content":[{"type":"text","text":"Other Issues"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"The grids will often get corrupted  (I think if you scroll from the top and leave the page). This is a bug in my grid view."}]}]}]}},"viewState":{"childDisplayState":null}},"normalizedData":{"type":"apogeeapp.app.FolderComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Normalized Data"}]},{"type":"paragraph","content":[{"type":"text","text":"This page contains normalized data created from the downloaded data. We will combine the US and World data into one hierarchical structure."}]},{"type":"heading2","content":[{"type":"text","text":"Step 1. Modified Row Data"}]},{"type":"paragraph","content":[{"type":"text","text":"This cell contains an array of elements, each of which contains the data from a row of the world or US data."}]},{"type":"apogeeComponent","attrs":{"name":"worldNormalizedData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This function gets the times series data from an input grid row. It can also be used on the header row to get the date entries. "}]},{"type":"apogeeComponent","attrs":{"name":"dateLabels","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Step 2. Combine into Hierarchical Data"}]},{"type":"paragraph","content":[{"type":"text","text":"Here we create the hierarchical data. This has a single world entry, with child entries for countries, which in turn have child entries for states (provinces, etc) , which in turn have child entries for counties (or immediate other sub-state  admin region)."}]},{"type":"apogeeComponent","attrs":{"name":"hierarchicalData1","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Step 3. Fill in Missing Data"}]},{"type":"paragraph","content":[{"type":"text","text":"Here we sum child entries to populate missing data for parent entries - meaning counts (based on the sum of all child counts) and lat lon (based on the simple, equally weighted average of the child lat lons)."}]},{"type":"apogeeComponent","attrs":{"name":"mergedWorldData","id":0,"state":""}},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"}]}},"children":{"worldNormalizedData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false,"height":7000}}}}},"dateLabels":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"hierarchicalData1":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false,"height":7000}}}}},"mergedWorldData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"height":7000,"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":1}},"plots":{"type":"apogeeapp.app.FolderComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Plot Data"}]},{"type":"paragraph","content":[{"type":"text","text":"This table should hold the name of the county, including the full state name and country abbreviation."}]},{"type":"apogeeComponent","attrs":{"name":"regionSelector","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here are some graphing options:"}]},{"type":"apogeeComponent","attrs":{"name":"graphingOptions","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Chart"}]},{"type":"paragraph","content":[{"type":"text","text":"This is a chart of COVID-19 cases for the selected region."}]},{"type":"apogeeComponent","attrs":{"name":"regionChart","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"The following tables are input to the chart."}]},{"type":"paragraph","content":[{"type":"text","text":"The data series:"}]},{"type":"apogeeComponent","attrs":{"name":"chartDataSeries","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"The chart options:"}]},{"type":"apogeeComponent","attrs":{"name":"chartOptions","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Selected Data"}]},{"type":"paragraph","content":[{"type":"text","text":"Here we process the form selections to create the chart data."}]},{"type":"apogeeComponent","attrs":{"name":"selectedPlotDataType","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"selectedScaleType","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"regionPath","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"regionDisplayName","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the selected data entry:"}]},{"type":"apogeeComponent","attrs":{"name":"selectedEntry","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the selected time series for total cases:"}]},{"type":"apogeeComponent","attrs":{"name":"totalCasesData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the selected time series for new cases:"}]},{"type":"apogeeComponent","attrs":{"name":"newCasesData","id":0,"state":""}},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"}]}},"children":{"regionPath":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false,"height":7000}}}}},"regionSelector":{"type":"apogeeapp.app.FormDataComponent","viewState":{"childDisplayState":{"views":{"Form":{"isViewActive":true},"Layout Code":{"isViewActive":false},"Layout Private":{"isViewActive":false},"isInputValid(formValue)":{"isViewActive":false},"isInputValid Private":{"isViewActive":false},"Form Value":{"isViewActive":false}}}}},"selectedEntry":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"height":7000,"isViewActive":false}}}}},"regionChart":{"type":"apogeeapp.app.ChartJSComponent","viewState":{"childDisplayState":{"views":{"Chart":{"isViewActive":true},"Input":{"isViewActive":false},"Config (Debug)":{"height":280,"isViewActive":false}}}}},"chartDataSeries":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":true},"Private":{"isViewActive":false}}}}},"chartOptions":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":true},"Private":{"isViewActive":false}}}}},"regionDisplayName":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"totalCasesData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"newCasesData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"graphingOptions":{"type":"apogeeapp.app.FormDataComponent","viewState":{"childDisplayState":{"views":{"Form":{"isViewActive":true},"Layout Code":{"height":7000,"isViewActive":false},"Layout Private":{"isViewActive":false},"isInputValid(formValue)":{"isViewActive":false},"isInputValid Private":{"isViewActive":false},"Form Value":{"height":280,"isViewActive":false}}}}},"selectedPlotDataType":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"selectedScaleType":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":-1,"tabOpened":true}},"testPage_multiplot":{"type":"apogeeapp.app.FolderComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Multiplot Test"}]},{"type":"paragraph","content":[{"type":"text","text":"We will plot the number of cases per the following population for the given states"}]},{"type":"apogeeComponent","attrs":{"name":"casesPer","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This form selects the data to plot for the selected states."}]},{"type":"apogeeComponent","attrs":{"name":"graphingOptions","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This form selects the state to plot."}]},{"type":"apogeeComponent","attrs":{"name":"stateSelector","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"stateCounts","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Chart Data"}]},{"type":"apogeeComponent","attrs":{"name":"datasets","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"options","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Data Processing"}]},{"type":"paragraph","content":[{"type":"text","text":"This is the data entry for the US."}]},{"type":"apogeeComponent","attrs":{"name":"usDataEntry","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here we merge the COVID data with the downloaded population, where available, and reformat into a state map."}]},{"type":"apogeeComponent","attrs":{"name":"stateDataMap","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is a list of the states and other US regions."}]},{"type":"apogeeComponent","attrs":{"name":"stateList","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is an array of entries for the selected states."}]},{"type":"apogeeComponent","attrs":{"name":"selectedStateEntries","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the processed state data, showing the number of new cases per given population number as given by the field "},{"type":"text","marks":[{"type":"italic"}],"text":"casesPer"},{"type":"text","text":"."}]},{"type":"apogeeComponent","attrs":{"name":"processedStateData","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Time Series Processing Functions"}]},{"type":"paragraph","content":[{"type":"text","text":"All these functions take a time series input and return a time series of the same length."}]},{"type":"paragraph","content":[{"type":"text","text":"This function takes a difference of entries. To end up with the same length of array, this creates a virtual entry of index -1 with value 0."}]},{"type":"apogeeComponent","attrs":{"name":"differenceFunction","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":" This function divides each entry by the input number"}]},{"type":"apogeeComponent","attrs":{"name":"multiplyFunction","id":0,"state":""}},{"type":"paragraph"},{"type":"paragraph"}]}},"children":{"stateSelector":{"type":"apogeeapp.app.FormDataComponent","viewState":{"childDisplayState":{"views":{"Form":{"isViewActive":true},"Layout Code":{"height":7000,"isViewActive":false},"Layout Private":{"isViewActive":false},"isInputValid(formValue)":{"isViewActive":false},"isInputValid Private":{"isViewActive":false},"Form Value":{"isViewActive":false,"height":280}}}}},"usDataEntry":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"stateList":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"selectedStateEntries":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"stateCounts":{"type":"apogeeapp.app.ChartJSComponent","viewState":{"childDisplayState":{"views":{"Chart":{"isViewActive":true},"Input":{"isViewActive":false},"Config (Debug)":{"isViewActive":false}}}}},"differenceFunction":{"type":"apogeeapp.app.FunctionComponent","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"processedStateData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"datasets":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false,"height":7000}}}}},"options":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"stateDataMap":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"height":7000,"isViewActive":false}}}}},"multiplyFunction":{"type":"apogeeapp.app.FunctionComponent","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"casesPer":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"graphingOptions":{"type":"apogeeapp.app.FormDataComponent","viewState":{"childDisplayState":{"views":{"Form":{"isViewActive":true},"Layout Code":{"height":7000,"isViewActive":false},"Layout Private":{"isViewActive":false},"isInputValid(formValue)":{"isViewActive":false},"isInputValid Private":{"isViewActive":false},"Form Value":{"height":280,"isViewActive":true}}}}}},"viewState":{"childDisplayState":null,"treeState":-1,"tabOpened":true,"tabShowing":true}},"populationData":{"type":"apogeeapp.app.FolderComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Population Data"}]},{"type":"paragraph","content":[{"type":"text","text":"This is a URL to download state population from the US Census. Unfortunately I haven't figured out how to get data for the US territories included in the COVID data."}]},{"type":"apogeeComponent","attrs":{"name":"usStatePopulationUrl","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the API key."}]},{"type":"apogeeComponent","attrs":{"name":"apiKey","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the data."}]},{"type":"apogeeComponent","attrs":{"name":"usStatePopulation","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the data reformatted into a lookup table."}]},{"type":"apogeeComponent","attrs":{"name":"usPopulationMap","id":0,"state":""}}]}},"children":{"usStatePopulation":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"height":7000,"isViewActive":true},"Private":{"isViewActive":false}}}}},"usStatePopulationUrl":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"usPopulationMap":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":true},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"apiKey":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":1,"tabOpened":true}},"viewState":{"treeState":1}}},"viewState":{"treeState":1}}