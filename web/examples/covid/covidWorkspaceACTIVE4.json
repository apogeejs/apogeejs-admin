{"fileType":"apogee app js workspace","version":"0.50","references":{"refEntries":[{"url":"http://localhost:8888/applications/modules/chartjsmodule/Chart.min.js","nickname":"","entryType":"js link"},{"url":"http://localhost:8888/applications/modules/chartjsmodule/ChartJSComponentModule.js?r=4","nickname":"","entryType":"es module"}],"viewState":{"treeState":1,"lists":{"es module":{"treeState":1},"js link":{"treeState":1},"css link":{"treeState":0}}}},"code":{"model":{"fileType":"apogee model","version":0.2,"name":"COVID-19 Workspace","children":{"dataDownload":{"name":"dataDownload","type":"apogee.Folder","children":{"WORLD_GRID_COLUMNS":{"name":"WORLD_GRID_COLUMNS","type":"apogee.JsonTable","updateData":{"data":{"STATE":0,"COUNTRY":1,"LAT":2,"LON":3,"FIRST_DATA_ROW":4}}},"worldDownloadedData":{"name":"worldDownloadedData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return apogeeutil.textRequest(worldCasesUrl);","supplementalCode":""}},"worldDeathsUrl":{"name":"worldDeathsUrl","type":"apogee.JsonTable","updateData":{"data":"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"}},"worldRecoveredUrl":{"name":"worldRecoveredUrl","type":"apogee.JsonTable","updateData":{"data":"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv"}},"worldCasesUrl":{"name":"worldCasesUrl","type":"apogee.JsonTable","updateData":{"data":"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"}},"usCasesUrl":{"name":"usCasesUrl","type":"apogee.JsonTable","updateData":{"data":"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv"}},"usDeathsUrl":{"name":"usDeathsUrl","type":"apogee.JsonTable","updateData":{"data":"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_US.csv"}},"usCasesData":{"name":"usCasesData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return apogeeutil.textRequest(usCasesUrl);","supplementalCode":""}},"usCasesGrid":{"name":"usCasesGrid","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return simpleCsvParser(usCasesData);","supplementalCode":""}},"usDeathsGrid":{"name":"usDeathsGrid","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return simpleCsvParser(usDeathsData);","supplementalCode":""}},"usDeathsData":{"name":"usDeathsData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return apogeeutil.textRequest(usDeathsUrl);","supplementalCode":""}},"US_CASES_COLUMNS":{"name":"US_CASES_COLUMNS","type":"apogee.JsonTable","updateData":{"data":{"FIPS":4,"COUNTY":5,"STATE":6,"COUNTRY":7,"LAT":8,"LON":9,"COMBINED_KEY":10,"FIRST_DATA_ROW":11}}},"US_DEATHS_COLUMNS":{"name":"US_DEATHS_COLUMNS","type":"apogee.JsonTable","updateData":{"data":{"FIPS":4,"COUNTY":5,"STATE":6,"COUNTRY":7,"LAT":8,"LON":9,"COMBINED_KEY":10,"POPULATION":11,"FIRST_DATA_ROW":12}}},"worldDeathsData":{"name":"worldDeathsData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return apogeeutil.textRequest(worldDeathsUrl);","supplementalCode":""}},"worldRecoveredData":{"name":"worldRecoveredData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return apogeeutil.textRequest(worldRecoveredUrl);","supplementalCode":""}},"worldCasesGrid":{"name":"worldCasesGrid","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return simpleCsvParser(worldDownloadedData);\n","supplementalCode":""}},"worldDeathsGrid":{"name":"worldDeathsGrid","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return simpleCsvParser(worldDeathsData);","supplementalCode":""}},"worldRecoveredGrid":{"name":"worldRecoveredGrid","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return simpleCsvParser(worldRecoveredData);","supplementalCode":""}},"simpleCsvParser":{"name":"simpleCsvParser","type":"apogee.FunctionTable","updateData":{"argList":["csvText"],"functionBody":"let rowArray = csvText.split(\"\\n\");\n\nlet gridData = rowArray.map( row => {\n    //our parsing is simplified to handl this specific data rather than a general cvs file.\n    //only one (or zero) fields have quotes, we will pull it out.\n    let firstQuoteIndex = row.indexOf(\"\\\"\");\n    \n    //no quoted strings\n    if(firstQuoteIndex < 0) return row.split(\",\");\n    \n    let secondQuoteIndex = row.indexOf(\"\\\"\",firstQuoteIndex+1);\n    if(secondQuoteIndex < 0) throw new Error(\"Error: Only 1 delimited quote!\");\n    //make sure there are only two delimited\n    let thirdQuoteIndex = row.indexOf(\"\\\"\",secondQuoteIndex+1);\n    if(thirdQuoteIndex > 0) throw new Error(\"Error: More than 2 delimited quotes!\");\n    \n    \n    //split up and parse single the quoted field differently from the rest of the row.\n    let firstString = row.substr(0,firstQuoteIndex-1);\n    let secondString = row.substr(firstQuoteIndex+1,secondQuoteIndex-firstQuoteIndex-1);\n    let thirdString = row.substr(secondQuoteIndex+2);\n    \n    let firstArray = firstString.split(\",\")\n    let secondArray = secondString\n    let thirdArray = thirdString.split(\",\");\n    \n    return firstArray.concat(secondArray).concat(thirdArray);\n})\n\nreturn gridData;","supplementalCode":""}},"getTimeSeriesData":{"name":"getTimeSeriesData","type":"apogee.FunctionTable","updateData":{"argList":["row","columnDefs"],"functionBody":"return row.slice(columnDefs.FIRST_DATA_ROW).map(stringValue => parseInt(stringValue));\n","supplementalCode":""}},"getDateLabels":{"name":"getDateLabels","type":"apogee.FunctionTable","updateData":{"argList":["table","columnDefs"],"functionBody":"return table[0].slice(columnDefs.FIRST_DATA_ROW).map( value => value.trim());\n","supplementalCode":""}}}},"workspaceNotes":{"name":"workspaceNotes","type":"apogee.Folder","children":{}},"normalizedData":{"name":"normalizedData","type":"apogee.Folder","children":{"worldNormalizedData":{"name":"worldNormalizedData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let data = [];\n\ndataDownload.worldCasesGrid.forEach( (row,index) => {\n    if(index == 0) return;\n    \n    let entry = _createEntry(row,dataDownload.WORLD_GRID_COLUMNS);\n    if(entry) data.push(entry);\n});\n\ndataDownload.usCasesGrid.forEach( (row,index) => {\n    if(index == 0) return;\n    \n    let entry = _createEntry(row,dataDownload.US_CASES_COLUMNS);\n   if(entry) data.push(entry);\n});\n\nreturn data;","supplementalCode":"function _createEntry(row,columnDef) {\n    //create a region array\n    let entry = {}\n    entry.regionPath = [];\n    \n    let country = row[columnDef.COUNTRY];\n    if((country)&&(country != \"\")) entry.regionPath.push(country);\n    else return null;\n    \n    let state = row[columnDef.STATE];\n    if((state)&&(state != \"\")) entry.regionPath.push(state);\n    \n    let county = row[columnDef.COUNTY];\n    if((county)&&(county != \"\")) entry.regionPath.push(county);\n    \n    //get the data\n    entry.data = _getRowTimeSeries(row,columnDef);\n    \n    //latitude and longitude - assume 0.0 is an invalid value\n    let latString = row[columnDef.LAT];\n    let lonString = row[columnDef.LON];\n    if((latString != \"\")&&(lonString != \"\")) {\n        let lat = parseFloat(latString);\n        let lon = parseFloat(lonString);\n        if((lat != 0.0)&&(lon != 0.0)) {\n            entry.lat = lat;\n            entry.lon = lon;\n        }\n    }\n    \n    //fips (census info) - us only\n    if(columnDef.FIPS !== undefined) {\n        entry.fips = row[fips];\n    }\n    \n    return entry;\n}\n\nfunction _getRowTimeSeries(row,columnDef) {\n    return row.slice(columnDef.FIRST_DATA_ROW).map(stringValue => parseInt(stringValue));\n}"}},"dateLabels":{"name":"dateLabels","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let worldCasesDates = dataDownload.worldCasesGrid[0].slice(dataDownload.WORLD_GRID_COLUMNS.FIRST_DATA_ROW).map( value => value.trim());\nlet usCasesDates = dataDownload.usCasesGrid[0].slice(dataDownload.US_CASES_COLUMNS.FIRST_DATA_ROW).map( value => value.trim());\n\nif(!apogeeutil.jsonEquals(worldCasesDates,usCasesDates)) throw new Error(\"US cases and deaths dates do not match - program does not currently handle this.\");\n\nreturn usCasesDates\n","supplementalCode":""}},"hierarchicalData1":{"name":"hierarchicalData1","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let worldEntry = {};\nworldEntry.name = \"Earth\";\nworldEntry.type = \"world\";\n\nworldNormalizedData.forEach( inEntry => {\n    _addToEntry(worldEntry,inEntry,0);\n})\n\nreturn worldEntry;","supplementalCode":"//this function adds the inEntry to the given region entry, where the regionPathIndex specifies which level of the region path is applicable\n//e.g. country, state, county\nfunction _addToEntry(regionOutEntry,inEntry,regionPathIndex) {\n    if(!regionOutEntry.regions) regionOutEntry.regions = {};\n    \n    //lookup this child region in the parent out region\n    let childRegionName = inEntry.regionPath[regionPathIndex];\n    let childRegionOutEntry = regionOutEntry.regions[childRegionName];\n    if(!childRegionOutEntry) {\n        //create a new entry if needed\n        childRegionOutEntry = {};\n        childRegionOutEntry.name = childRegionName;\n        childRegionOutEntry.type = inEntry.type;\n        regionOutEntry.regions[childRegionName] = childRegionOutEntry;\n    }\n    \n    //check if we need to add as a child to the child region entry\n    if(inEntry.regionPath.length > regionPathIndex + 1) {\n        //add as a child to the child region entry\n        _addToEntry(childRegionOutEntry,inEntry,regionPathIndex+1);\n    }\n    else {\n        //add payload data to the current out entry - but give precedence to any existing data\n        if((!childRegionOutEntry.data)&&(inEntry.data)) {\n            childRegionOutEntry.data = inEntry.data;\n        }\n        if((!childRegionOutEntry.lat)&&(inEntry.lat)) {\n            childRegionOutEntry.lat = inEntry.lat;\n        }\n        if((!childRegionOutEntry.lon)&&(inEntry.lon)) {\n            childRegionOutEntry.lon = inEntry.lon;\n        }\n        if((!childRegionOutEntry.fips)&&(inEntry.fips)) {\n            childRegionOutEntry.fips = inEntry.fips;\n        }\n    }\n}"}},"mergedWorldData":{"name":"mergedWorldData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let worldEntry = apogeeutil.jsonCopy(hierarchicalData1);\n\n_fillInMisingData(worldEntry);\n\nreturn worldEntry;","supplementalCode":"function _fillInMisingData(entry) {\n    let childCount = 0;\n    //initialize summed data, if needed\n    let summedData;\n    let dataCount = 0;\n    if(entry.data === undefined) {\n        summedData = _createZeroArray(dateLabels.length);\n    };\n    //initialize averaged lat, lon, if needed\n    let summedLat, summedLon;\n    let latLonCount = 0;\n    if(entry.lat === undefined) {\n        summedLat = 0.0;\n        summedLon = 0.0;\n    }\n    \n    if(entry.regions) {\n        for(let childName in entry.regions) {\n            //first populate the child, if needed\n            let childEntry = entry.regions[childName];\n            _fillInMisingData(childEntry);\n            \n            //attempt to populate this entry\n            childCount++;\n            \n            if((summedData)&&(childEntry.data)) {\n                _addSecondArrayToFirstArray(summedData,childEntry.data);\n                dataCount++;\n            }\n            \n            if((summedLat !== undefined)&&(childEntry.lat !== undefined)) {\n                summedLat += childEntry.lat;\n                summedLon += childEntry.lon;\n                latLonCount++;\n            }\n        }\n        \n        //decide if we want the child data if we get entries\n        //from 80 percent for more (it will probably be all or nothing)\n        if((dataCount > 0)&&(dataCount > childCount * 0.8)) {\n            entry.data = summedData;\n        }\n        //just use 50 percent for lat lon (again, it will probably be all or nothing)\n        if((latLonCount > 0)&&(latLonCount > childCount * 0.5)) {\n            entry.lat = summedLat / latLonCount;\n            entry.lon = summedLon / latLonCount;\n        }\n    }\n}\n\n//this makes an array of 0s of the given length\nfunction _createZeroArray(length) {\n    let array = [];\n    array.length = length;\n    array.fill(0);\n    return array;\n}\n\n//this modified array 1;\nfunction _addSecondArrayToFirstArray(array1,array2) {\n    array2.forEach( (value,index) => array1[index] += value);\n}"}}}},"plots":{"name":"plots","type":"apogee.Folder","children":{"regionPath":{"name":"regionPath","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let path = [];\n\nlet country = regionSelector.data.country;\nif(country != \"-ALL-\") {\n    path.push(country);\n    let stateData = regionSelector.data[country + \"|state\"];\n    if((stateData)&&(stateData.state != \"-ALL-\")) {\n        path.push(stateData.state);\n        if((stateData.county)&&(stateData.county != \"-ALL-\")) {\n            path.push(stateData.county);\n        }\n    }\n} \n\nreturn path;","supplementalCode":""}},"regionSelector":{"name":"regionSelector","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"let layout = [];\n\n//add a selector for country\nlet worldEntry = normalizedData.mergedWorldData;\n//the region list is a list of all subregions, plus an entry for the parent if it has a data series.\nlet countryList = _getRegionList(worldEntry);\nif(!countryList) return;\nlayout.push(_getDropdownLayout(countryList,\"country\",\"Country: \"));\n\n//add a selector for the state, for each applicable country\ncountryList.forEach( countryName => {\n    let countryEntry = worldEntry.regions[countryName];\n    if(!countryEntry) return; //there is no country entry if all is selected\n    let stateList = _getRegionList(countryEntry);\n    if(!stateList) return;\n    \n    //create a panel fro this country, which will be displayed when the country is selected.\n    let statePanelLayout = _getPanelLayout(countryName + \"|state\");\n    //selector to control visibility\n    statePanelLayout.selector = {\n\t    parentKey: \"country\",\n\t    parentValue: countryName\n    };\n    layout.push(statePanelLayout);\n    \n    //state selector for this country\n    statePanelLayout.formData.push(_getDropdownLayout(stateList,\"state\",\"State: \"));\n    \n    //add a selector for county, for each applicable state\n    stateList.forEach( stateName => {\n        stateEntry = countryEntry.regions[stateName];\n        if(!stateEntry) return; //there is no state entry if all is selected\n        let countyList = _getRegionList(stateEntry);\n        if(!countyList) return;\n        \n        //county selector for this state \n        let countyListLayout = _getDropdownLayout(countyList,\"county\",\"County: \");\n        //add a selector so this is shown only if the given state is selected\n        countyListLayout.selector = {\n\t\t    parentKey: \"state\",\n\t\t    parentValue: stateName\n\t\t}\n        statePanelLayout.formData.push(countyListLayout);\n    });\n});\n\nreturn layout;\n","supplementalCode":"function _getRegionList(parentEntry) {\n    let regionMap = parentEntry.regions;\n    if(!regionMap) return null;\n    \n    let regionList = [];\n    //add an \"-ALL-\" selection if the parent entry has its own data\n    if(parentEntry.data) {\n        regionList.push(\"-ALL-\");\n    }\n    for(let regionName in regionMap) {\n        regionList.push(regionName);\n    }\n    return regionList;\n}\n\nfunction _getDropdownLayout(selectionList,key,label) {\n    return {\n        type: \"dropdown\",\n        label: label,\n        entries: selectionList,\n        key: key\n    }\n}\n\nfunction _getPanelLayout(key) {\n    return {\n        \"type\":\"panel\",\n        \"formData\": [\n        ],\n        \"key\": key\n    }\n}"}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":{"country":"France","France|state":{"state":"-ALL-"}}}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":""}}}},"selectedEntry":{"name":"selectedEntry","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(regionPath.length == 0) return normalizedData.mergedWorldData;\n\nreturn _lookupEntry(normalizedData.mergedWorldData,regionPath,0);","supplementalCode":"/** This method gets child entry from the parent, given the region path and the start index */\nfunction _lookupEntry(parentEntry,regionPath,pathIndex) {\n    if(!parentEntry.regions) return null;\n    \n    let regionName = regionPath[pathIndex];\n    let childEntry = parentEntry.regions[regionName];\n    if(!childEntry) return null;\n    \n    if(pathIndex + 1 < regionPath.length) return _lookupEntry(childEntry,regionPath,pathIndex+1);\n    else return childEntry;\n}"}},"regionChart":{"name":"regionChart","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"\n    return {\n        \"chartType\": \"line\",\n        \"xValuesInputType\": \"common\",\n        \"commonXValueArray\": normalizedData.dateLabels,\n        \"datasets\": chartDataSeries,\n        \"generalOptions\": chartOptions,\n        \"storedData\": {\"chartType\":\"line\",\"xValuesInputType\":\"common\",\"commonXValueArray\":\"normalizedData.dateLabels\",\"datasets\":\"chartDataSeries\",\"generalOptions\":\"chartOptions\"}\n    };","supplementalCode":""}},"chartDataSeries":{"name":"chartDataSeries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return [\n    {\n        yArray: (selectedPlotDataType == \"newCases\") ? newCasesData : totalCasesData,\n        datasetOptions: {\n            label: regionDisplayName + ((selectedPlotDataType == \"newCases\") ? \": New Cases\" : \": Total Cases\")\n        }\n    }\n    \n]","supplementalCode":""}},"chartOptions":{"name":"chartOptions","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return {\n\t\"title\": {\n\t\t\"display\": true,\n\t\t\"text\": \"COVID-19 Cases\"\n\t},\n\t\"scales\": {\n\t    \"xAxes\": [\n\t\t\t{\n\t\t\t\t\"type\": \"category\",\n\t\t\t\t\"display\": true\n\t\t\t}\n\t\t],\n\t\t\"yAxes\": [\n\t\t\t{\n\t\t\t\t\"type\": selectedScaleType,\n\t\t\t\t\"display\": true\n\t\t\t}\n\t\t]\n\t}\n}","supplementalCode":""}},"regionDisplayName":{"name":"regionDisplayName","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return regionPath.join(\", \");","supplementalCode":""}},"totalCasesData":{"name":"totalCasesData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return selectedEntry.data;","supplementalCode":""}},"newCasesData":{"name":"newCasesData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let previousCounts = 0;\nreturn totalCasesData.map( (value,index) => {\n    let delta = value - previousCounts;\n    previousCounts = value\n    return delta;\n});","supplementalCode":""}},"graphingOptions":{"name":"graphingOptions","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return [\n    {\n        type: \"radioButtonGroup\",\n        label: \"Plot Data: \",\n        entries: [[\"Total Cases\",\"totalCases\"],[\"New Cases\",\"newCases\"]],\n        groupName: \"plotDataType\",\n        key: \"plotDataType\"\n    },\n    {\n        type: \"radioButtonGroup\",\n        label: \"Y Scale: \",\n        entries: [[\"Linear\",\"linear\"],[\"Logarithmic\",\"logarithmic\"]],\n        groupName: \"scaleType\",\n        key: \"scaleType\"\n    }    \n]","supplementalCode":""}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":{"plotDataType":"totalCases","scaleType":"linear"}}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":""}}},"childrenNotWriteable":true},"selectedPlotDataType":{"name":"selectedPlotDataType","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((graphingOptions.data)&&(graphingOptions.data.plotDataType)) {\n    return graphingOptions.data.plotDataType; \n}\nelse {\n    return \"totalCases\";\n}","supplementalCode":""}},"selectedScaleType":{"name":"selectedScaleType","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((graphingOptions.data)&&(graphingOptions.data.scaleType)) {\n    return graphingOptions.data.scaleType; \n}\nelse {\n    return \"linear\";\n}","supplementalCode":""}}}},"testPage_multiplot":{"name":"testPage_multiplot","type":"apogee.Folder","children":{"stateSelector":{"name":"stateSelector","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return [\n    {\n        type: \"checkboxGroup\",\n        entries: stateList.map( value => [value + \"\\t\",value]),\n        key: \"states\",\n        horizontal: true\n    }\n]","supplementalCode":""}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":{"states":["California"]}}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":""}}}},"usDataEntry":{"name":"usDataEntry","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return normalizedData.mergedWorldData.regions.US;","supplementalCode":""}},"stateList":{"name":"stateList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let data = [];\nfor(let stateName in stateDataMap) {\n    data.push(stateName);\n}\nreturn data;","supplementalCode":""}},"selectedStateEntries":{"name":"selectedStateEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((!stateSelector.data)||(!stateSelector.data.states)) return apogeeutil.INVALID_VALUE;\n\nlet selectedStateEntries = [];\nstateSelector.data.states.forEach( state => {\n    selectedStateEntries.push(stateDataMap[state]);\n})\n\nreturn selectedStateEntries;","supplementalCode":""}},"stateCounts":{"name":"stateCounts","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"\n    return {\n        \"chartType\": \"line\",\n        \"xValuesInputType\": \"common\",\n        \"commonXValueArray\": normalizedData.dateLabels,\n        \"datasets\": datasets,\n        \"generalOptions\": options,\n        \"storedData\": {\"chartType\":\"line\",\"xValuesInputType\":\"common\",\"commonXValueArray\":\"normalizedData.dateLabels\",\"datasets\":\"datasets\",\"generalOptions\":\"options\"}\n    };","supplementalCode":""}},"differenceFunction":{"name":"differenceFunction","type":"apogee.FunctionTable","updateData":{"argList":["inData"],"functionBody":"let previousValue = 0;\nreturn inData.map( (value,index) => {\n    let delta = value - previousValue;\n    previousValue = value;\n    return delta;\n})","supplementalCode":""}},"processedStateData":{"name":"processedStateData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return selectedStateEntries.map( inEntry => {\n    let unscaledData;\n    if(graphingOptions.data.plotDataType == \"newCases\") {\n        //get the change in number of cases\n        unscaledData = differenceFunction(inEntry.data);\n    }\n    else {\n        unscaledData = inEntry.data;\n    }\n    //scale by population. If population not present, just 0 out the data.\n    let multiplier = inEntry.pop ? casesPer/inEntry.pop : 0;\n    let scaledDelta = multiplyFunction(unscaledData,multiplier);\n    \n    let outEntry = {};\n    outEntry.name = inEntry.name;\n    outEntry.data = scaledDelta;\n    return outEntry;\n})","supplementalCode":""}},"datasets":{"name":"datasets","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return processedStateData.map( (inEntry,index,array) => _createDataSet(inEntry,index,array.length));","supplementalCode":"function _createDataSet(inEntry,index,totalCount) {\n    return {\n        yArray: inEntry.data,\n        datasetOptions: {\n            label: inEntry.name,\n            fill: false,\n            borderColor: _getColor(index,totalCount),\n            borderWidth: 1,\n            pointRadius: 0,\n            lineTension: 0\n        }\n    }\n}\n\n/** This function generates a color for the index based on the total count. */\nfunction _getColor(index,totalCount) {\n    let r = [0,255];\n    let g = [0,0];\n    let b = [255,0];\n    \n    //this function will interpolate a given color based on the index\n    let pick = c => c[0] + (c[1]-c[0]) * index / totalCount;\n    \n    return \"rgb(\" + pick(r) + \",\" + pick(g) + \",\" + pick(b) + \")\";  \n}"}},"options":{"name":"options","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return {\n\t\"title\": {\n\t\t\"display\": true,\n\t\t\"text\": \"COVID-19 Cases\"\n\t},\n\t\"scales\": {\n\t\t\"xAxes\": [\n\t\t\t{\n\t\t\t\t\"type\": \"category\",\n\t\t\t\t\"display\": true\n\t\t\t}\n\t\t],\n\t\t\"yAxes\": [\n\t\t\t{\n\t\t\t\t\"type\": graphingOptions.data.scaleType,\n\t\t\t\t\"display\": true\n\t\t\t}\n\t\t]\n\t}\n}","supplementalCode":""}},"stateDataMap":{"name":"stateDataMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let data = {};\n\n for(let stateName in usDataEntry.regions) {\n     //lookup the population\n     let population = populationData.usPopulationMap[stateName];\n     if(!population) continue;\n    \n     let oldStateEntry = usDataEntry.regions[stateName];\n     let newStateEntry = {};\n     newStateEntry.name = oldStateEntry.name;\n     newStateEntry.data = oldStateEntry.data;\n     newStateEntry.pop = population;\n     data[stateName] = newStateEntry;\n }\n\nreturn data;","supplementalCode":""}},"multiplyFunction":{"name":"multiplyFunction","type":"apogee.FunctionTable","updateData":{"argList":["inData","multiplier"],"functionBody":"return inData.map( value => value*multiplier);","supplementalCode":""}},"casesPer":{"name":"casesPer","type":"apogee.JsonTable","updateData":{"data":1000000}},"graphingOptions":{"name":"graphingOptions","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return [\n    {\n        type: \"radioButtonGroup\",\n        label: \"Plot Data: \",\n        entries: [[\"Total Cases\",\"totalCases\"],[\"New Cases\",\"newCases\"]],\n        groupName: \"plotDataType\",\n        key: \"plotDataType\"\n    },\n    {\n        type: \"radioButtonGroup\",\n        label: \"Y Scale: \",\n        entries: [[\"Linear\",\"linear\"],[\"Logarithmic\",\"logarithmic\"]],\n        groupName: \"scaleType\",\n        key: \"scaleType\"\n    }    \n]","supplementalCode":""}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":{"plotDataType":"totalCases","scaleType":"linear"}}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":""}}},"childrenNotWriteable":true}}},"populationData":{"name":"populationData","type":"apogee.Folder","children":{"usStatePopulation":{"name":"usStatePopulation","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return apogeeutil.jsonRequest(usStatePopulationUrl + \"&key=\" + apiKey);","supplementalCode":""}},"usStatePopulationUrl":{"name":"usStatePopulationUrl","type":"apogee.JsonTable","updateData":{"data":"https://api.census.gov/data/2019/pep/population?get=POP,NAME&for=STATE:*"}},"usPopulationMap":{"name":"usPopulationMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let popMap = {};\nusStatePopulation.forEach( (entry,index) => {\n    //ignore header\n    if(index == 0) return;\n    \n    popMap[entry[1]] = parseInt(entry[0]);\n})\nreturn popMap;","supplementalCode":""}},"apiKey":{"name":"apiKey","type":"apogee.JsonTable","updateData":{"data":"099a777f03d58542cc4a8b149ed13ce61c34d5e2"}},"worldPopulations":{"name":"worldPopulations","type":"apogee.JsonTable","updateData":{"data":[["China","1,438,290,208"],["India","1,377,396,696"],["United States","330,625,106"],["Indonesia","272,966,447"],["Pakistan","220,070,084"],["Brazil","212,273,857"],["Nigeria","205,145,773"],["Bangladesh","164,376,690"],["Russia","145,924,857"],["Mexico","128,672,223"],["Japan","126,549,656"],["Ethiopia","114,410,977"],["Philippines","109,297,692"],["Egypt","101,962,258"],["Vietnam","97,173,329"],["DR Congo","89,030,807"],["Germany","83,742,086"],["Turkey","84,168,909"],["Iran","83,792,784"],["Thailand","69,766,816"],["United Kingdom","67,817,934"],["France","65,242,733"],["Italy","60,473,534"],["South Africa","59,164,683"],["Tanzania","59,402,806"],["Myanmar","54,337,376"],["Kenya","53,540,142"],["South Korea","51,257,827"],["Colombia","50,788,172"],["Spain","46,755,549"],["Argentina","45,116,269"],["Uganda","45,467,226"],["Ukraine","43,782,559"],["Algeria","43,701,709"],["Sudan","43,650,777"],["Iraq","40,039,084"],["Afghanistan","38,753,631"],["Poland","37,856,006"],["Canada","37,678,213"],["Morocco","36,826,498"],["Saudi Arabia","34,705,130"],["Uzbekistan","33,377,709"],["Peru","32,890,526"],["Malaysia","32,287,265"],["Angola","32,665,265"],["Ghana","30,947,442"],["Mozambique","31,085,768"],["Yemen","29,698,363"],["Nepal","29,047,698"],["Venezuela","28,427,106"],["Madagascar","27,552,690"],["Cameroon","26,417,561"],["Ivory Coast","26,251,725"],["North Korea","25,757,502"],["Australia","25,442,604"],["Taiwan","23,808,502"],["Niger","24,034,172"],["Sri Lanka","21,395,932"],["Burkina Faso","20,791,447"],["Mali","20,137,464"],["Romania","19,260,687"],["Chile","19,087,806"],["Malawi","19,033,059"],["Kazakhstan","18,733,449"],["Zambia","18,283,066"],["Guatemala","17,851,697"],["Ecuador","17,593,276"],["Netherlands","17,127,510"],["Syria","17,426,621"],["Cambodia","16,674,655"],["Senegal","16,658,462"],["Chad","16,333,599"],["Somalia","15,806,776"],["Zimbabwe","14,819,596"],["Guinea","13,064,928"],["Rwanda","12,890,801"],["Benin","12,061,433"],["Tunisia","11,795,833"],["Belgium","11,580,088"],["Burundi","11,822,216"],["Bolivia","11,642,313"],["Cuba","11,327,668"],["Haiti","11,375,746"],["South Sudan","11,163,297"],["Dominican Republic","10,827,227"],["Czech Republic","10,705,826"],["Greece","10,432,589"],["Portugal","10,202,809"],["Jordan","10,179,507"],["Azerbaijan","10,121,790"],["Sweden","10,087,136"],["United Arab Emirates","9,869,299"],["Honduras","9,874,249"],["Hungary","9,665,329"],["Belarus","9,450,024"],["Tajikistan","9,496,981"],["Austria","8,997,284"],["Papua New Guinea","8,914,353"],["Serbia","8,744,102"],["Switzerland","8,642,072"],["Israel","8,629,734"],["Togo","8,240,864"],["Sierra Leone","7,945,714"],["Hong Kong","7,485,833"],["Laos","7,255,579"],["Paraguay","7,115,782"],["Bulgaria","6,958,260"],["Lebanon","6,825,235"],["Libya","6,854,746"],["Nicaragua","6,609,480"],["El Salvador","6,480,105"],["Kyrgyzstan","6,503,723"],["Turkmenistan","6,014,303"],["Singapore","5,840,877"],["Denmark","5,788,136"],["Finland","5,538,897"],["Slovakia","5,459,221"],["Republic of the Congo","5,491,796"],["Norway","5,412,617"],["Costa Rica","5,085,214"],["Palestine","5,078,768"],["Oman","5,080,124"],["Liberia","5,034,474"],["Ireland","4,928,531"],["New Zealand","4,814,591"],["Central African Republic","4,814,202"],["Mauritania","4,625,891"],["Panama","4,301,867"],["Kuwait","4,256,829"],["Croatia","4,109,894"],["Moldova","4,035,716"],["Georgia","3,990,920"],["Eritrea","3,536,816"],["Uruguay","3,471,486"],["Bosnia and Herzegovina","3,285,306"],["Mongolia","3,268,264"],["Armenia","2,962,121"],["Jamaica","2,958,783"],["Puerto Rico","2,872,141"],["Albania","2,878,638"],["Qatar","2,870,116"],["Lithuania","2,729,090"],["Namibia","2,532,071"],["Gambia","2,403,417"],["Botswana","2,343,003"],["Gabon","2,215,288"],["Lesotho","2,139,024"],["Macedonia","2,083,444"],["Slovenia","2,078,938"],["Guinea-Bissau","1,958,957"],["Latvia","1,890,124"],["Bahrain","1,691,479"],["Trinidad and Tobago","1,398,647"],["Equatorial Guinea","1,394,011"],["Estonia","1,326,605"],["Timor-Leste","1,313,607"],["Mauritius","1,271,417"],["Cyprus","1,205,746"],["Swaziland","1,157,920"],["Djibouti","985,266"],["Fiji","895,253"],["Reunion","894,050"],["Comoros","866,025"],["Guyana","785,781"],["Bhutan","769,995"],["Solomon Islands","683,589"],["Macau","647,512"],["Montenegro","627,996"],["Luxembourg","624,085"],["Western Sahara","594,605"],["Suriname","585,650"],["Cape Verde","554,865"],["Maldives","538,861"],["Malta","441,263"],["Brunei","436,708"],["Guadeloupe","400,124"],["Belize","396,226"],["Bahamas","392,473"],["Martinique","375,405"],["Iceland","340,822"],["Vanuatu","305,743"],["French Guiana","297,210"],["Barbados","287,305"],["New Caledonia","285,007"],["French Polynesia","280,557"],["Mayotte","271,553"],["Sao Tome and Principe","218,318"],["Samoa","198,134"],["Saint Lucia","183,487"],["Guam","168,424"],["Curacao","163,953"],["Kiribati","119,098"],["Micronesia","114,813"],["Grenada","112,453"],["Saint Vincent and the Grenadines","110,940"],["Aruba","106,696"],["United States Virgin Islands","104,495"],["Tonga","105,485"],["Seychelles","98,277"],["Antigua and Barbuda","97,789"],["Isle of Man","85,033"],["Andorra","77,265"],["Dominica","71,986"],["Cayman Islands","65,722"],["Bermuda","62,278"],["Marshall Islands","59,190"],["Northern Mariana Islands","57,559"],["Greenland","56,770"],["American Samoa","55,191"],["Saint Kitts and Nevis","53,199"],["Faroe Islands","48,863"],["Sint Maarten","42,876"],["Monaco","39,242"],["Turks and Caicos Islands","38,717"],["Liechtenstein","38,128"],["Saint Martin","38,666"],["San Marino","33,931"],["Gibraltar","33,691"],["British Virgin Islands","30,231"],["Palau","18,094"],["Cook Islands","17,564"],["Anguilla","15,003"],["Tuvalu","11,792"],["Wallis and Futuna","11,239"],["Nauru","10,824"],["Saint Barthélemy","9,877"],["Saint Pierre and Miquelon","5,794"],["Montserrat","4,992"],["Falkland Islands","3,480"],["Niue","1,626"],["Tokelau","1,357"],["Vatican City","801"]]}},"CASES_PER":{"name":"CASES_PER","type":"apogee.JsonTable","updateData":{"data":1000000}}}},"usProcessedData":{"name":"usProcessedData","type":"apogee.Folder","children":{"combinedData":{"name":"combinedData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let usEntry = {};\nusEntry.name = \"US\";\nusEntry.type = \"country\";\nusEntry.regions = {};\n\ndataDownload.usCasesGrid.forEach( (row,index) => _addCasesData(row,index,dataDownload.US_CASES_COLUMNS,usEntry));\ndataDownload.usDeathsGrid.forEach( (row,index) => _addDeathsData(row,index,dataDownload.US_DEATHS_COLUMNS,usEntry));\nreturn usEntry;","supplementalCode":"function _addCasesData(row,index,columnDefs,usEntry) {\n    if(index == 0) return;  //header row\n    if(row.length <= 1) return; //invalid row\n    \n    let entry = _lookupEntry(row,index,columnDefs,usEntry);\n    \n    //add cases data\n    entry.casesData = dataDownload.getTimeSeriesData(row,columnDefs);\n    entry.lat = parseFloat(row[columnDefs.LAT]);\n    entry.lon = parseFloat(row[columnDefs.LON]);\n}\n\nfunction _addDeathsData(row,index,columnDefs,usEntry) {\n    if(index == 0) return;  //header row\n    if(row.length <= 1) return; //invalid row\n    \n    let entry = _lookupEntry(row,index,columnDefs,usEntry);\n    if(!entry) throw new Error(\"Missing cases entry for deaths data\");\n    \n    //add deaths data\n    entry.deathsData = dataDownload.getTimeSeriesData(row,columnDefs);\n    entry.population = parseInt(row[columnDefs.POPULATION]);\n}\n\nfunction _lookupEntry(row,index,columnDefs,usEntry) {\n    \n    let state = row[columnDefs.STATE];\n    let county = row[columnDefs.COUNTY];\n    \n    let stateEntry = _getChildEntry(state,\"state\",usEntry);\n    if(county) {\n        return _getChildEntry(county,\"county\",stateEntry);\n    }\n    else {\n        return stateEntry\n    }\n}\n\nfunction _getChildEntry(childName,childType,parentEntry) {\n    if(!parentEntry.regions) parentEntry.regions = {};\n    \n    let childEntry = parentEntry.regions[childName];\n    if(!childEntry) {\n        childEntry = {};\n        childEntry.name = childName;\n        childEntry.type = childType;\n        parentEntry.regions[childName] = childEntry;\n    }\n    return childEntry;\n}\n"}},"cleanedData":{"name":"cleanedData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let usEntry = apogeeutil.jsonCopy(combinedData);\nlet deletedEntries = [];\nusEntry.deletedEntries = deletedEntries;\n\nfor(let stateName in usEntry.regions) {\n    let stateEntry = usEntry.regions[stateName];\n    \n    //add the county entries to populate the state entries where needed.\n    if(stateEntry.regions) {\n        \n        //deleted unwanted county entries\n        for(let countyName in stateEntry.regions) {\n            let countyEntry = stateEntry.regions[countyName];\n            if((!countyEntry.lat)||(!countyEntry.population)) {\n                deletedEntries.push(stateName + \", \" + countyName);\n                delete stateEntry.regions[countyName];\n                continue;\n            }\n        }\n   \n        \n        if(!stateEntry.population) {\n            stateEntry.population = _sumChildValues(stateEntry,\"population\");\n        }\n        \n        if(!stateEntry.lat) {\n            let latSum = _sumChildValues(stateEntry,\"lat\");\n            let lonSum = _sumChildValues(stateEntry,\"lon\");\n            let childCount = apogeeutil.jsonObjectLength(stateEntry.regions);\n            stateEntry.lat = latSum/childCount;\n            stateEntry.lon = lonSum/childCount;\n        }\n        \n        if(!stateEntry.casesData) {\n            stateEntry.casesData = _sumChildArrays(stateEntry,\"casesData\");\n            stateEntry.deathsData = _sumChildArrays(stateEntry,\"deathsData\");\n        }\n    }\n    \n    //this is a signal for an entry we don't want \n    if(!stateEntry.lat) {\n        delete usEntry.regions[stateName];\n        deletedEntries.push(stateName);\n        continue;\n    }\n}\n\nreturn usEntry;","supplementalCode":"function _sumChildValues(stateEntry,propName) {\n    let value = 0;\n    for(let countyName in stateEntry.regions) {\n        let countyEntry = stateEntry.regions[countyName];\n        value += countyEntry[propName]\n    }\n    return value;\n}\n\nfunction _sumChildArrays(stateEntry,propName) {\n    let targetArray;\n    for(let countyName in stateEntry.regions) {\n        let countyEntry = stateEntry.regions[countyName];\n        let sourceArray = countyEntry[propName];\n        if(!targetArray) {\n            targetArray = apogeeutil.jsonCopy(sourceArray);\n        }\n        else {\n            sourceArray.forEach( (value,index) => targetArray[index] += value);\n        }\n    }\n    return targetArray;\n}"}},"dataValidation":{"name":"dataValidation","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let errors = [];\n_validateEntry(cleanedData,true,errors);\nreturn errors;","supplementalCode":"function _validateEntry(entry,onlyChildChecks,errors) {\n    if(!onlyChildChecks) {\n        if(!entry.population) _addError(\"Missing population\",entry,errors);\n        if(!entry.lat) _addError(\"Missing lat\",entry,errors);\n        if(!entry.lon) _addError(\"Missing lon\",entry,errors);\n        if(!entry.casesData) _addError(\"Missing cases\",entry,errors);\n        if(!entry.deathsData) _addError(\"Missing deaths\",entry,errors);\n    }\n    \n    if(entry.regions) {\n        for(let childName in entry.regions) {\n            let childEntry = entry.regions[childName];\n            _validateEntry(childEntry,false,errors);\n        }\n    }\n}\n\nfunction _addError(msg,entry,errors) {\n    errors.push( entry.type + \" = \" + entry.name + \": \" + msg);\n}"}},"stateWithCountyDataList":{"name":"stateWithCountyDataList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let states = [];\nfor(let stateName in cleanedData.regions) {\n    let stateEntry = cleanedData.regions[stateName];\n    if(stateEntry.regions) {\n        states.push(stateName);\n    }\n}\nreturn states;","supplementalCode":""}},"stateWithDataList":{"name":"stateWithDataList","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let states = [];\nfor(let stateName in cleanedData.regions) {\n    let stateEntry = cleanedData.regions[stateName];\n    if((stateEntry.casesData)&&(stateEntry.deathsData)) {\n        states.push(stateName);\n    }\n}\nreturn states;","supplementalCode":""}},"dateLabelList":{"name":"dateLabelList","type":"apogee.JsonTable","updateData":{"data":""}},"dateLabels":{"name":"dateLabels","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let usCasesDates = dataDownload.getDateLabels(dataDownload.usCasesGrid,dataDownload.US_CASES_COLUMNS);\nlet usDeathsDates = dataDownload.getDateLabels(dataDownload.usDeathsGrid,dataDownload.US_DEATHS_COLUMNS);\n\nif(!apogeeutil.jsonEquals(usCasesDates,usDeathsDates)) throw new Error(\"US cases and deaths dates do not match - program does not currently handle this.\");\n\nreturn usCasesDates\n","supplementalCode":""}}}},"usStatePlots":{"name":"usStatePlots","type":"apogee.Folder","children":{"graphingOptions":{"name":"graphingOptions","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return [\n    {\n        type: \"checkboxGroup\",\n        label: \"Plot Data: \",\n        entries: [[\"Filtered Data\",\"filteredData\"],[\"Raw Data\",\"rawData\"]],\n        horizontal: true,\n        groupName: \"plotDataType\",\n        key: \"plotDataType\"\n    } /*,\n    {\n        type: \"radioButtonGroup\",\n        label: \"Y Scale: \",\n        entries: [[\"Linear\",\"linear\"],[\"Logarithmic\",\"logarithmic\"]],\n        horizontal: true,\n        groupName: \"scaleType\",\n        key: \"scaleType\"\n    }   */ \n]","supplementalCode":""}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":{"plotDataType":["filteredData","rawData"]}}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":""}}}},"stateSelector":{"name":"stateSelector","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return [\n    {\n        type: \"checkboxGroup\",\n        entries: usProcessedData.stateWithDataList.map( value => [value + \"\\t\",value]), //the tab is added for better spacing. \n        key: \"states\",\n        horizontal: true\n    }\n]","supplementalCode":""}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":{"states":["California","West Virginia"]}}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":""}}}},"scaledCasesChart":{"name":"scaledCasesChart","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"\n    return {\n        \"chartType\": \"line\",\n        \"xValuesInputType\": \"common\",\n        \"commonXValueArray\": chartData.scaledCasesLabels,\n        \"datasets\": chartData.scaledCasesDatasets,\n        \"generalOptions\": chartData.scaledCasesOptions,\n        \"storedData\": {\"chartType\":\"line\",\"xValuesInputType\":\"common\",\"commonXValueArray\":\"chartData.scaledCasesLabels\",\"datasets\":\"chartData.scaledCasesDatasets\",\"generalOptions\":\"chartData.scaledCasesOptions\"}\n    };","supplementalCode":""}},"scaledNewCasesChart":{"name":"scaledNewCasesChart","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"\n    return {\n        \"chartType\": \"line\",\n        \"xValuesInputType\": \"common\",\n        \"commonXValueArray\": chartData.scaledNewCasesLabels,\n        \"datasets\": chartData.scaledNewCasesDatasets,\n        \"generalOptions\": chartData.scaledNewCasesOptions,\n        \"storedData\": {\"chartType\":\"line\",\"xValuesInputType\":\"common\",\"commonXValueArray\":\"chartData.scaledNewCasesLabels\",\"datasets\":\"chartData.scaledNewCasesDatasets\",\"generalOptions\":\"chartData.scaledNewCasesOptions\"}\n    };","supplementalCode":""}},"scaledDeathsChart":{"name":"scaledDeathsChart","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"\n    return {\n        \"chartType\": \"line\",\n        \"xValuesInputType\": \"common\",\n        \"commonXValueArray\": chartData.scaledDeathsLabels,\n        \"datasets\": chartData.scaledDeathsDatasets,\n        \"generalOptions\": chartData.scaledDeathsOptions,\n        \"storedData\": {\"chartType\":\"line\",\"xValuesInputType\":\"common\",\"commonXValueArray\":\"chartData.scaledDeathsLabels\",\"datasets\":\"chartData.scaledDeathsDatasets\",\"generalOptions\":\"chartData.scaledDeathsOptions\"}\n    };","supplementalCode":""}},"scaledNewDeathsChart":{"name":"scaledNewDeathsChart","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"\n    return {\n        \"chartType\": \"line\",\n        \"xValuesInputType\": \"common\",\n        \"commonXValueArray\": chartData.scaledNewDeathsLabels,\n        \"datasets\": chartData.scaledNewDeathsDatasets,\n        \"generalOptions\": chartData.scaledNewDeathsOptions,\n        \"storedData\": {\"chartType\":\"line\",\"xValuesInputType\":\"common\",\"commonXValueArray\":\"chartData.scaledNewDeathsLabels\",\"datasets\":\"chartData.scaledNewDeathsDatasets\",\"generalOptions\":\"chartData.scaledNewDeathsOptions\"}\n    };","supplementalCode":""}},"rawDateLabels":{"name":"rawDateLabels","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return usProcessedData.dateLabels;","supplementalCode":""}},"selectedDataToPlot":{"name":"selectedDataToPlot","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let plotTypeList;\n\n//if the input is not valid, plot the filtered data only.\nif((!graphingOptions.data)||(!graphingOptions.data.plotDataType)||(graphingOptions.data.plotDataType.length == 0)) {\n    plotTypeList = [\"filteredData\"];\n}\nelse {\n    plotTypeList = graphingOptions.data.plotDataType;\n}\n\nreturn plotTypeList;","supplementalCode":""}},"yAxisType":{"name":"yAxisType","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let scaleType;\n\n//if the input is not valid, plot the filtered data only.\nif((!graphingOptions.data)||(!graphingOptions.data.scaleType)) {\n    scaleType = \"linear\";\n}\nelse {\n    scaleType = graphingOptions.data.scaleType;\n}\n\nreturn scaleType;","supplementalCode":""}},"chartData":{"name":"chartData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return graphingUtilities.createGraphData(usDataEntry,selectedStateEntries,rawDateLabels,options); ","supplementalCode":""}},"FILTER_N_DAYS":{"name":"FILTER_N_DAYS","type":"apogee.JsonTable","updateData":{"data":5}},"usDataEntry":{"name":"usDataEntry","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return usProcessedData.cleanedData;","supplementalCode":""}},"options":{"name":"options","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return {\n\t\"CASES_PER\": populationData.CASES_PER,\n\t\"FILTER_N_DAYS\": FILTER_N_DAYS,\n\t\"plotDataType\": selectedDataToPlot,\n\t\"yAxisType\": yAxisType\n}","supplementalCode":""}},"selectedStateEntries":{"name":"selectedStateEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if((!stateSelector.data)||(!stateSelector.data.states)) return apogeeutil.INVALID_VALUE;\n\nreturn stateSelector.data.states;\n","supplementalCode":""}}}},"graphingUtilities":{"name":"graphingUtilities","type":"apogee.Folder","children":{"createGraphData":{"name":"createGraphData","type":"apogee.FolderFunction","updateData":{"argList":["parentDataEntry","regionList","labelList","options"],"returnValue":"results"},"children":{"body":{"name":"body","type":"apogee.Folder","children":{"FILTER_N_DAYS":{"name":"FILTER_N_DAYS","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(options.FILTER_N_DAYS) {\n    return options.FILTER_N_DAYS;\n}\nelse {\n    return DEFAULT_FILTER_N_DAYS;\n}","supplementalCode":""}},"rawDateLabels":{"name":"rawDateLabels","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(labelList) return labelList;\nelse throw new Error(\"Invalid label list!\");","supplementalCode":""}},"selectedStateEntries":{"name":"selectedStateEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return regionList.map( regionName => parentDataEntry.regions[regionName] )\n","supplementalCode":""}},"selectedDataToPlot":{"name":"selectedDataToPlot","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let plotFlags = {};\nlet plotTypeList;\n\n//if the input is not valid, plot the filtered data only.\nif((!options.plotDataType)||(options.plotDataType.length == 0)) {\n    plotTypeList = DEFAULT_PLOT_DATA_TYPES;\n}\nelse {\n    plotTypeList = options.plotDataType;\n}\n\nplotFlags.filteredData = (plotTypeList.indexOf(\"filteredData\") >= 0);\nplotFlags.rawData = (plotTypeList.indexOf(\"rawData\") >= 0);\n\nreturn plotFlags;","supplementalCode":""}},"yAxisType":{"name":"yAxisType","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let scaleType;\n\n//if the input is not valid, plot the filtered data only.\nif(!options.scaleType) {\n    DEFAULT_SCALE_TYPE = \"linear\";\n}\nelse {\n    scaleType =options.scaleType;\n}\n\nreturn scaleType;","supplementalCode":""}},"processedCasesData":{"name":"processedCasesData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return selectedStateEntries.map( inEntry => {\n    let populationMultiplier = CASES_PER / inEntry.population;\n    let smoothResults = dataProcessUtilities.smoothData(inEntry.casesData,FILTER_N_DAYS,rawDateLabels);\n    \n    let outEntry = {};\n    outEntry.name = inEntry.name;\n    \n    outEntry.scaledRawCasesData = dataProcessUtilities.multiplyFunction(smoothResults.modifiedDataArray,populationMultiplier);\n    outEntry.scaledRawDeltaCasesData = dataProcessUtilities.differenceFunction(outEntry.scaledRawCasesData);\n    outEntry.scaledFilteredCasesData = dataProcessUtilities.multiplyFunction(smoothResults.filteredDataArray,populationMultiplier);\n    outEntry.scaledFilteredDeltaCasesData = dataProcessUtilities.multiplyFunction(smoothResults.filteredDifferenceArray,populationMultiplier);\n    \n    outEntry.labelArray = smoothResults.modifiedLabelArray;\n    \n    return outEntry;\n})","supplementalCode":""}},"casesDateLabels":{"name":"casesDateLabels","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(processedCasesData.length < 1) return [];\n\nreturn processedCasesData[0].labelArray;","supplementalCode":""}},"processedDeathsData":{"name":"processedDeathsData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return selectedStateEntries.map( inEntry => {\n    let populationMultiplier = CASES_PER / inEntry.population;\n    let smoothResults = dataProcessUtilities.smoothData(inEntry.deathsData,FILTER_N_DAYS,rawDateLabels);\n    \n    let outEntry = {};\n    outEntry.name = inEntry.name;\n    \n    outEntry.scaledRawDeathsData = dataProcessUtilities.multiplyFunction(smoothResults.modifiedDataArray,populationMultiplier);\n    outEntry.scaledRawDeltaDeathsData = dataProcessUtilities.differenceFunction(outEntry.scaledRawDeathsData);\n    outEntry.scaledFilteredDeathsData = dataProcessUtilities.multiplyFunction(smoothResults.filteredDataArray,populationMultiplier);\n    outEntry.scaledFilteredDeltaDeathsData = dataProcessUtilities.multiplyFunction(smoothResults.filteredDifferenceArray,populationMultiplier);\n    \n    outEntry.labelArray = smoothResults.modifiedLabelArray;\n    \n    return outEntry;\n})","supplementalCode":""}},"deathsDateLabels":{"name":"deathsDateLabels","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if(processedDeathsData.length < 1) return [];\n\nreturn processedDeathsData[0].labelArray;","supplementalCode":""}},"createDataset":{"name":"createDataset","type":"apogee.FunctionTable","updateData":{"argList":["seriesName","seriesData","seriesNumber","seriesCount"],"functionBody":"return {\n    yArray: seriesData,\n    datasetOptions: {\n        label: seriesName,\n        fill: false,\n        borderColor: _getColor(seriesNumber,seriesCount),\n        borderWidth: 1,\n        pointRadius: 0,\n        lineTension: 0\n    }\n}","supplementalCode":"/** This function generates a color for the index based on the total count. */\nfunction _getColor(index,totalCount) {\n    let r = [0,255];\n    let g = [0,0];\n    let b = [255,0];\n    \n    //this function will interpolate a given color based on the index\n    let pick = c => c[0] + (c[1]-c[0]) * index / totalCount;\n    \n    return \"rgb(\" + pick(r) + \",\" + pick(g) + \",\" + pick(b) + \")\";  \n}"}},"createChartOptions":{"name":"createChartOptions","type":"apogee.FunctionTable","updateData":{"argList":["chartName","yAxisType"],"functionBody":"return {\n\t\"title\": {\n\t\t\"display\": true,\n\t\t\"text\": chartName\n\t},\n\t\"scales\": {\n\t\t\"xAxes\": [\n\t\t\t{\n\t\t\t\t\"type\": \"category\",\n\t\t\t\t\"display\": true\n\t\t\t}\n\t\t],\n\t\t\"yAxes\": [\n\t\t\t{\n\t\t\t\t\"type\": yAxisType,\n\t\t\t\t\"display\": true\n\t\t\t}\n\t\t]\n\t}\n}","supplementalCode":""}},"parentDataEntry":{"name":"parentDataEntry","type":"apogee.JsonTable","updateData":{"data":{"name":"US","type":"country","regions":{"California":{"name":"California","type":"state","population":21477737,"lat":28.94075487910448,"lon":-82.70074390925375,"casesData":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,3,3,7,10,13,15,24,30,45,64,100,101,190,306,432,564,762,1003,1227,1412,1682,2357,2900,3763,4246,5472,6739,6953,8999,10258,11536,12346,13317,14543,15453,16362,17529,18492,19893,21017,21625,22506,23337,24755,25489,26311,27056,27865],"deathsData":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,3,3,5,7,9,9,13,13,17,17,23,29,35,46,54,59,85,85,144,163,194,221,235,254,309,354,390,438,461,499,524,596,668,725,748,774,822,867]}}}}},"regionList":{"name":"regionList","type":"apogee.JsonTable","updateData":{"data":["California"]}},"options":{"name":"options","type":"apogee.JsonTable","updateData":{"data":{"CASES_PER":1000000,"FILTER_N_DAYS":5,"plotDataType":["filteredData"],"yAxisType":"linear"}}},"results":{"name":"results","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let results = {};\nresults.scaledCasesLabels = casesDateLabels;\nresults.scaledCasesDatasets = scaledCasesDatasets;\nresults.scaledCasesOptions = scaledCasesOptions;\nresults.scaledNewCasesLabels = casesDateLabels;\nresults.scaledNewCasesDatasets = scaledNewCasesDatasets;\nresults.scaledNewCasesOptions = scaledNewCasesOptions;\nresults.scaledDeathsLabels = deathsDateLabels;\nresults.scaledDeathsDatasets = scaledDeathsDatasets;\nresults.scaledDeathsOptions = scaledDeathsOptions;\nresults.scaledNewDeathsLabels = deathsDateLabels;\nresults.scaledNewDeathsDatasets = scaledNewDeathsDatasets;\nresults.scaledNewDeathsOptions = scaledNewDeathsOptions;\nreturn results","supplementalCode":""}},"labelList":{"name":"labelList","type":"apogee.JsonTable","updateData":{"data":["1/22/20","1/23/20","1/24/20","1/25/20","1/26/20","1/27/20","1/28/20","1/29/20","1/30/20","1/31/20","2/1/20","2/2/20","2/3/20","2/4/20","2/5/20","2/6/20","2/7/20","2/8/20","2/9/20","2/10/20","2/11/20","2/12/20","2/13/20","2/14/20","2/15/20","2/16/20","2/17/20","2/18/20","2/19/20","2/20/20","2/21/20","2/22/20","2/23/20","2/24/20","2/25/20","2/26/20","2/27/20","2/28/20","2/29/20","3/1/20","3/2/20","3/3/20","3/4/20","3/5/20","3/6/20","3/7/20","3/8/20","3/9/20","3/10/20","3/11/20","3/12/20","3/13/20","3/14/20","3/15/20","3/16/20","3/17/20","3/18/20","3/19/20","3/20/20","3/21/20","3/22/20","3/23/20","3/24/20","3/25/20","3/26/20","3/27/20","3/28/20","3/29/20","3/30/20","3/31/20","4/1/20","4/2/20","4/3/20","4/4/20","4/5/20","4/6/20","4/7/20","4/8/20","4/9/20","4/10/20","4/11/20","4/12/20","4/13/20","4/14/20","4/15/20","4/16/20","4/17/20","4/18/20","4/19/20","4/20/20","4/21/20"]}},"DEFAULT_FILTER_N_DAYS":{"name":"DEFAULT_FILTER_N_DAYS","type":"apogee.JsonTable","updateData":{"data":5}},"DEFAULT_PLOT_DATA_TYPES":{"name":"DEFAULT_PLOT_DATA_TYPES","type":"apogee.JsonTable","updateData":{"data":["filteredData"]}},"DEFAULT_Y_AXIS_TYPE":{"name":"DEFAULT_Y_AXIS_TYPE","type":"apogee.JsonTable","updateData":{"data":"linear"}},"scaledCasesDatasets":{"name":"scaledCasesDatasets","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let datasets = [];\n\nprocessedCasesData.forEach( (inEntry,index,array) => {\n    if(selectedDataToPlot.rawData) datasets.push( createDataset(inEntry.name,inEntry.scaledRawCasesData,index,array.length) );\n    if(selectedDataToPlot.filteredData) datasets.push( createDataset(inEntry.name,inEntry.scaledFilteredCasesData,index,array.length) );\n});\n\nreturn datasets;","supplementalCode":""}},"scaledCasesOptions":{"name":"scaledCasesOptions","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let title = \"COVID Cases per \" + CASES_PER + \" Residents\";\nreturn createChartOptions(title,yAxisType);","supplementalCode":""}},"scaledNewCasesDatasets":{"name":"scaledNewCasesDatasets","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let datasets = [];\n\nprocessedCasesData.forEach( (inEntry,index,array) => {\n    if(selectedDataToPlot.rawData) datasets.push( createDataset(inEntry.name + \" (raw)\",inEntry.scaledRawDeltaCasesData,index,array.length) );\n    if(selectedDataToPlot.filteredData) datasets.push( createDataset(inEntry.name + \" (filtered)\",inEntry.scaledFilteredDeltaCasesData,index,array.length) );\n});\n\nreturn datasets;","supplementalCode":""}},"scaledNewCasesOptions":{"name":"scaledNewCasesOptions","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let title = \"COVID New Cases per \" + CASES_PER + \" Residents\";\nreturn createChartOptions(title,yAxisType);","supplementalCode":""}},"scaledDeathsDatasets":{"name":"scaledDeathsDatasets","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let datasets = [];\n\nprocessedDeathsData.forEach( (inEntry,index,array) => {\n    if(selectedDataToPlot.rawData) datasets.push( createDataset(inEntry.name,inEntry.scaledRawDeathsData,index,array.length) );\n    if(selectedDataToPlot.filteredData) datasets.push( createDataset(inEntry.name,inEntry.scaledFilteredDeathsData,index,array.length) );\n});\n\nreturn datasets;","supplementalCode":""}},"scaledDeathsOptions":{"name":"scaledDeathsOptions","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let title = \"COVID Deaths per \" + CASES_PER + \" Residents\";\nreturn createChartOptions(title,yAxisType);","supplementalCode":""}},"scaledNewDeathsDatasets":{"name":"scaledNewDeathsDatasets","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let datasets = [];\n\nprocessedDeathsData.forEach( (inEntry,index,array) => {\n    if(selectedDataToPlot.rawData) datasets.push( createDataset(inEntry.name + \" (raw)\",inEntry.scaledRawDeltaDeathsData,index,array.length) );\n    if(selectedDataToPlot.filteredData) datasets.push( createDataset(inEntry.name + \" (filtered)\",inEntry.scaledFilteredDeltaDeathsData,index,array.length) );\n});\n\nreturn datasets;","supplementalCode":""}},"scaledNewDeathsOptions":{"name":"scaledNewDeathsOptions","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let title = \"COVID New Deaths per \" + CASES_PER + \" Residents\";\nreturn createChartOptions(title,yAxisType);","supplementalCode":""}},"DEFAULT_CASES_PER":{"name":"DEFAULT_CASES_PER","type":"apogee.JsonTable","updateData":{"data":1000000}},"CASES_PER":{"name":"CASES_PER","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let value;\nif(!options.CASES_PER) value = DEFAULT_CASES_PER;\nelse value = options.CASES_PER;\nreturn value;","supplementalCode":""}},"dataProcessUtilities":{"name":"dataProcessUtilities","type":"apogee.Folder","children":{"smoothData":{"name":"smoothData","type":"apogee.FolderFunction","updateData":{"argList":["dataArray","N","labelArray"],"returnValue":"results"},"children":{"body":{"name":"body","type":"apogee.Folder","children":{"dataArray":{"name":"dataArray","type":"apogee.JsonTable","updateData":{"data":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,11,29,39,51,78,106,131,157,196,242,381,517,587,694,825,899,987,1060,1233,1495,1614,1765,1952,2169,2328,2703,2947,3217,3563,3734,3953,4075,4345,4571,4712]}},"labelArray":{"name":"labelArray","type":"apogee.JsonTable","updateData":{"data":null}},"results":{"name":"results","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let data = {};\ndata.modifiedDataArray = workingInputData;\nif(workingInputLabels) data.modifiedLabelArray = workingInputLabels;\ndata.filteredDataArray = bezierPoints;\ndata.filteredDifferenceArray = bezierSlope;\ndata.intermediateDataArray = interpolatedData;\nreturn data;","supplementalCode":""}},"AMatrix":{"name":"AMatrix","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return piecewiseLinearModel.createTridiag(workingInputData.length);","supplementalCode":""}},"bVector":{"name":"bVector","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return piecewiseLinearModel.createBVector(workingInputData);","supplementalCode":""}},"solutionVector":{"name":"solutionVector","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return tridiagPage.tridiagSolver(AMatrix,bVector);","supplementalCode":""}},"interpolatedData":{"name":"interpolatedData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let outData = [];\nlet previousShortValue;\nfor(let shortIndex = 0; shortIndex < solutionVector.length; shortIndex++) {\n    let currentShortValue = solutionVector[shortIndex];\n    if(previousShortValue !== undefined) {\n        //interpolate the intermediate points\n        for(let intermediateIndex = 1; intermediateIndex < N; intermediateIndex++) {\n            let intermediateValue = previousShortValue + (currentShortValue - previousShortValue) * (intermediateIndex / N);\n            outData.push(intermediateValue);\n        }\n    }\n    outData.push(currentShortValue);\n    previousShortValue = currentShortValue;\n}\nreturn outData;","supplementalCode":""}},"workingInputData":{"name":"workingInputData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let goodLength = 1 + Math.floor( (dataArray.length - 1) / N) * N;\nlet pointsToTruncate = dataArray.length - goodLength;\n\nreturn dataArray.slice(pointsToTruncate);","supplementalCode":""}},"workingInputLabels":{"name":"workingInputLabels","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"if( (!labelArray)||(!Array.isArray(labelArray))||(labelArray.length == 0)) return null; \nif(labelArray.length != dataArray.length) return {Eror: \"Invalid input label array\"};\n\nlet goodLength = 1 + Math.floor( (labelArray.length - 1) / N) * N;\nlet pointsToTruncate = labelArray.length - goodLength;\n\nreturn labelArray.slice(pointsToTruncate);","supplementalCode":""}},"piecewiseLinearModel":{"name":"piecewiseLinearModel","type":"apogee.Folder","children":{"c1":{"name":"c1","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let value = 0;\nfor(let n = 1; n < N; n++) {\n    value += Math.pow( (N-n)/N , 2 );\n}\n\nreturn value;","supplementalCode":""}},"c2":{"name":"c2","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let value = 0;\nfor(let n = 1; n < N; n++) {\n    value += ((N-n) * n)/ (N*N)\n}\nreturn value;\n","supplementalCode":""}},"createBVector":{"name":"createBVector","type":"apogee.FunctionTable","updateData":{"argList":["data"],"functionBody":"let b = [];\nlet bLength = 1 + (data.length - 1) / N;\n\nfor(let bIndex = 0; bIndex < bLength; bIndex++) {\n    let bValue = 0;\n    for(let n = -N+1; n < N; n++) {\n        let dataIndex = bIndex * N + n;\n        if((dataIndex >= 0)&&(dataIndex < data.length)) {\n            bValue += (data[dataIndex] * (N-Math.abs(n))/N); \n        }\n    }\n    b.push(bValue);\n}\nreturn b;","supplementalCode":""}},"createTridiag":{"name":"createTridiag","type":"apogee.FunctionTable","updateData":{"argList":["dataLength"],"functionBody":"let A = [];\nlet ALength = 1 + (dataLength - 1) / N;\n//first row\nA.push([0,1+c1,c2]);\nfor(let index = 1; index < ALength-1; index++) {\n    A.push([c2,1+2*c1,c2]);\n}\n//last row\nA.push([c2,1+c1,0]);\nreturn A;","supplementalCode":""}}}},"tridiagPage":{"name":"tridiagPage","type":"apogee.Folder","children":{"AMatrix":{"name":"AMatrix","type":"apogee.JsonTable","updateData":{"data":[[0,1,1],[1,2,1],[1,2,0]]}},"bVector":{"name":"bVector","type":"apogee.JsonTable","updateData":{"data":[3,4,3]}},"xVector":{"name":"xVector","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return tridiagSolver(AMatrix,bVector);","supplementalCode":""}},"test":{"name":"test","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return tridiagMultiply(AMatrix,xVector);","supplementalCode":""}},"tridiagSolver":{"name":"tridiagSolver","type":"apogee.FunctionTable","updateData":{"argList":["A","b"],"functionBody":"//make sure out format is correct\nlet rows = A.length;\nif((A[0][0] != 0)||(A[rows-1][2] != 0)||(b.length != A.length)) throw new Error(\"Improper tridiag format\");\n\n//get in a solvable form\nlet ANew = [];\nlet bNew = [];\nlet curRow = A[0];\nlet curRowB = b[0];\nlet newRow;\nlet newRowB;\nfor(let r = 0; r < rows; r++) {\n    //scale this row so the diag value is one\n    let newRow = [0,1,curRow[2]/curRow[1]];\n    let newRowB = curRowB/curRow[1];\n    \n    //store these values\n    ANew.push(newRow);\n    prevRow = newRow;\n    bNew.push(newRowB);\n    prevRowB = newRowB;\n    \n    //subtract current from from next soit is upper diag\n    if(r < rows-1) {\n        let nextRow = A[r+1];\n        let nextRowB = b[r+1];\n        \n        let factor = nextRow[0];\n        curRow = [0,nextRow[1] - prevRow[2]*factor,nextRow[2]];\n        curRowB = nextRowB - prevRowB*factor;\n    }\n}\n\n//no wwe can solve starting with the last row\nxRev = [];\nxRowNext = 0; //this is the x value of the next row\nfor(let r = rows-1; r >= 0; r--) {\n    curRow = ANew[r];\n    curRowB = bNew[r];\n    let xRow = (curRowB - curRow[2] * xRowNext); //remember curRow[1] = 1 and curRow[0] = 0\n    xRev.push(xRow);\n    xRowNext = xRow;\n}\n\nreturn xRev.reverse();\n\n\n","supplementalCode":""}},"tridiagMultiply":{"name":"tridiagMultiply","type":"apogee.FunctionTable","updateData":{"argList":["A","x"],"functionBody":"let rows = A.length;\n\nlet b = [];\nfor(let r = 0; r < rows; r++) {\n    let row = A[r];\n    let value = 0;\n    if(r > 0) value += row[0] * x[r-1];\n    value += row[1] * x[r];\n    if(r < rows-1) value += row[2] * x[r+1];\n    b.push(value);\n}\n\nreturn b;","supplementalCode":""}}}},"lineSegmentInfo":{"name":"lineSegmentInfo","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let data = [];\nlet previousPoint;\nlet segmentLength = N;\nfor(index = 0; index < solutionVector.length; index++) {\n    let currentEntry;\n    let currentPoint = [segmentLength * index,solutionVector[index]];\n    \n    if(previousPoint) {\n        let segmentEntry = {};\n        segmentEntry.slope = (currentPoint[1] - previousPoint[1])/(currentPoint[0] - previousPoint[0])\n        segmentEntry.midPoint = [(currentPoint[0] + previousPoint[0])/2,(currentPoint[1] + previousPoint[1])/2];\n        data.push(segmentEntry);\n    }\n     \n    previousPoint = currentPoint;\n}\nreturn data;","supplementalCode":""}},"bezierSegmentInfo":{"name":"bezierSegmentInfo","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let segmentLength = N;\nlet controlPointLength = N/3;\n\nlet data = [];\n\n//start point - for this we will create a virtual point one segment length back from out first line midpoint\nlet firstInfo = _getPointInfo(0);\nlet firstBezierEntry = {};\nlet startVirtualPoint = _createPoint(firstInfo.point,firstInfo.slope,-segmentLength);\nfirstBezierEntry.p0 = startVirtualPoint;\nfirstBezierEntry.p1 = _createPoint(startVirtualPoint,firstInfo.slope,controlPointLength);\nfirstBezierEntry.p3 = firstInfo.point;\nfirstBezierEntry.p2 = _createPoint(firstInfo.point,firstInfo.slope,-controlPointLength);\ndata.push(firstBezierEntry);\n\n//normal points\nlet previousInfo = firstInfo;\nlet previousLineEntry = firstLineEntry;\nfor(let index = 1; index < lineSegmentInfo.length; index++) {\n    let currentLineEntry = lineSegmentInfo[index];\n    let currentInfo = _getPointInfo(index);\n    \n    let bezierEntry = {};\n    bezierEntry.p0 = previousInfo.point;\n    bezierEntry.p1 = _createPoint(previousInfo.point,previousInfo.slope,controlPointLength);\n    \n    bezierEntry.p3 = currentInfo.point;\n    bezierEntry.p2 = _createPoint(currentInfo.point,currentInfo.slope,-controlPointLength);\n    data.push(bezierEntry);\n    \n    previousInfo = currentInfo;\n}\n\n//end point - for this we will create a virtual point one segment length forward from out last line midpoint\nlet lastInfo = _getPointInfo(lineSegmentInfo.length-1);\nlet lastBezierEntry = {};\nlet endVirtualPoint = _createPoint(lastInfo.point,lastInfo.slope,segmentLength);\nlastBezierEntry.p0 = lastInfo.point;\nlastBezierEntry.p1 = _createPoint(lastInfo.point,lastInfo.slope,controlPointLength);\nlastBezierEntry.p3 = endVirtualPoint;\nlastBezierEntry.p2 = _createPoint(endVirtualPoint,lastInfo.slope,-controlPointLength);\ndata.push(lastBezierEntry);\n\nreturn data;","supplementalCode":"//This function gets the corrected point information for a given index\nfunction _getPointInfo(pointIndex) {\n    let lineEntry = lineSegmentInfo[pointIndex];\n    let deltaY = yCorrections[pointIndex];\n    let point = [lineEntry.midPoint[0],lineEntry.midPoint[1] + deltaY];\n    return {point: point, slope: lineEntry.slope};\n}\n\n//This creates a new point by projecting away from the input point\nfunction _createPoint(point,slope,deltaX) {\n    return [point[0] + deltaX, point[1] + slope * deltaX];\n}"}},"bezierInterpolatedData":{"name":"bezierInterpolatedData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let data = [];\n//init bezier data\nlet bezierSegmentIndex = 0;\nlet bezierSegment = bezierSegmentInfo[bezierSegmentIndex];\nlet getNextBezierSegment = () => {\n    bezierSegmentIndex++;\n    return bezierSegmentInfo[bezierSegmentIndex];\n}\nlet dtdx = 1/N;\n\n//get the bezier calculated values\nfor(let x = 0; x < workingInputData.length; x++) {\n     let entry = {};\n     entry.x = x;\n    \n    if(bezierSegment.p3[0] < x) bezierSegment = getNextBezierSegment();\n    let t = _getBezierT(bezierSegment,x);\n    \n    entry.y = _getBezierPointY(bezierSegment,t);\n    entry.dydx = _getBezierDerivativeY(bezierSegment,t) * dtdx;\n    data.push(entry);\n}\nreturn data;\n","supplementalCode":"function _getBezierT(bezierSegment,x) {\n    //here t is the fractional distance from start to end. This calculation is easy for our choice of control points \n    return (x - bezierSegment.p0[0])/(bezierSegment.p3[0] - bezierSegment.p0[0]);\n}\n\nfunction _getBezierPointY(bezierSegment,t) {\n    return Math.pow(1-t,3) * bezierSegment.p0[1] + 3 * Math.pow(1-t,2) * t * bezierSegment.p1[1] +  3 * (1-t) * Math.pow(t,2) * bezierSegment.p2[1] + Math.pow(t,3) * bezierSegment.p3[1];\n}\n\nfunction _getBezierDerivativeY(bezierSegment,t) {\n    return 3 * Math.pow(1-t,2) * (bezierSegment.p1[1] - bezierSegment.p0[1]) + 6 * (1-t) * t * (bezierSegment.p2[1] - bezierSegment.p1[1]) +  3 * Math.pow(t,2) * ( bezierSegment.p3[1] - bezierSegment.p2[1]);\n}\n\nfunction _getBezierSecondDerivativeY(bezierInfo,t) {\n    return 6 * (1-t) * (bezierSegment.p2[1] - 2 * bezierSegment.p0[1] + bezierInfo.anchorPoint) +  6 * t * ( bezierSegment.p3[1] - 2 * bezierSegment.p2[1] + bezierSegment.p1[1]);\n}\n"}},"bezierPoints":{"name":"bezierPoints","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return bezierInterpolatedData.map( entry => entry.y);","supplementalCode":""}},"bezierSlope":{"name":"bezierSlope","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return bezierInterpolatedData.map( entry => entry.dydx);","supplementalCode":""}},"yCorrections":{"name":"yCorrections","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let correctionArray = [];\n\nfor(let index = 0; index < lineSegmentInfo.length; index++) {\n    //get the change in slope between neighboring segments\n    let currentSegment = lineSegmentInfo[index];\n    let deltaSlopeSum = 0;\n    let deltaSlopeCount = 0;\n    if(index > 0) {\n        let previousSegment = lineSegmentInfo[index-1];\n        deltaSlopeSum += currentSegment.slope - previousSegment.slope;\n        deltaSlopeCount++;\n    }\n    if(index < lineSegmentInfo.length-1) {\n        let nextSegment = lineSegmentInfo[index+1];\n        deltaSlopeSum += nextSegment.slope - currentSegment.slope;\n        deltaSlopeCount++;\n    }\n    //average our slope changes and divide by the length for the change\n    let d2ydx2 = (deltaSlopeSum/deltaSlopeCount)/N\n    \n    //get the y correction the correct for curvature\n    let yCorrection = -Math.pow(N,2) * d2ydx2 / 24;\n    correctionArray.push(yCorrection);\n}\n\nreturn correctionArray;","supplementalCode":""}},"N":{"name":"N","type":"apogee.JsonTable","updateData":{"data":5}}}}}},"differenceFunction":{"name":"differenceFunction","type":"apogee.FunctionTable","updateData":{"argList":["inData"],"functionBody":"let previousValue = 0;\nreturn inData.map( (value,index) => {\n    let delta = value - previousValue;\n    previousValue = value;\n    return delta;\n})","supplementalCode":""}},"multiplyFunction":{"name":"multiplyFunction","type":"apogee.FunctionTable","updateData":{"argList":["inData","multiplier"],"functionBody":"return inData.map( value => value*multiplier);","supplementalCode":""}}}}}}}}}},"usCountyPlots":{"name":"usCountyPlots","type":"apogee.Folder","children":{"graphingOptions":{"name":"graphingOptions","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"return [\n    {\n        type: \"checkboxGroup\",\n        label: \"Plot Data: \",\n        entries: [[\"Filtered Data\",\"filteredData\"],[\"Raw Data\",\"rawData\"]],\n        horizontal: true,\n        groupName: \"plotDataType\",\n        key: \"plotDataType\"\n    } /*,\n    {\n        type: \"radioButtonGroup\",\n        label: \"Y Scale: \",\n        entries: [[\"Linear\",\"linear\"],[\"Logarithmic\",\"logarithmic\"]],\n        horizontal: true,\n        groupName: \"scaleType\",\n        key: \"scaleType\"\n    }   */ \n]","supplementalCode":""}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":{"plotDataType":["filteredData"]}}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":""}}}},"stateSelector":{"name":"stateSelector","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.FunctionTable","updateData":{"argList":[],"functionBody":"//create the layout with a state dropdown\nlet layout = [\n    {\n        type: \"dropdown\",\n        entries: usProcessedData.stateWithCountyDataList, \n        key: \"state\"\n    }\n]\n\n//add an entry to select counties for a given state\nfor(let stateName in usDataEntry.regions) {\n    let stateEntry = usDataEntry.regions[stateName];\n    layout.push(_getCountySelector(stateEntry));\n}\n\nreturn layout;","supplementalCode":"function _getCountySelector(stateEntry) {\n    let countyList = [];\n    for(let countyName in stateEntry.regions) {\n        countyList.push(countyName);\n    }\n    \n    return {\n        type: \"checkboxGroup\",\n        entries: countyList.map( value => [value + \"\\t\",value]), //the tab is added for better spacing. \n        key: stateEntry.name + \"|county\",\n        horizontal: true,\n        selector: {\n            parentKey: \"state\",\n            parentValue: stateEntry.name\n        }\n    }\n}"}},"data":{"name":"data","type":"apogee.JsonTable","updateData":{"data":{"state":"California","California|county":["Los Angeles","Orange","Santa Clara"]}}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionTable","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":""}}}},"scaledCasesChart":{"name":"scaledCasesChart","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"\n    return {\n        \"chartType\": \"line\",\n        \"xValuesInputType\": \"common\",\n        \"commonXValueArray\": chartData.scaledCasesLabels,\n        \"datasets\": chartData.scaledCasesDatasets,\n        \"generalOptions\": chartData.scaledCasesOptions,\n        \"storedData\": {\"chartType\":\"line\",\"xValuesInputType\":\"common\",\"commonXValueArray\":\"chartData.scaledCasesLabels\",\"datasets\":\"chartData.scaledCasesDatasets\",\"generalOptions\":\"chartData.scaledCasesOptions\"}\n    };","supplementalCode":""}},"scaledNewCasesChart":{"name":"scaledNewCasesChart","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"\n    return {\n        \"chartType\": \"line\",\n        \"xValuesInputType\": \"common\",\n        \"commonXValueArray\": chartData.scaledNewCasesLabels,\n        \"datasets\": chartData.scaledNewCasesDatasets,\n        \"generalOptions\": chartData.scaledNewCasesOptions,\n        \"storedData\": {\"chartType\":\"line\",\"xValuesInputType\":\"common\",\"commonXValueArray\":\"chartData.scaledNewCasesLabels\",\"datasets\":\"chartData.scaledNewCasesDatasets\",\"generalOptions\":\"chartData.scaledNewCasesOptions\"}\n    };","supplementalCode":""}},"scaledDeathsChart":{"name":"scaledDeathsChart","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"\n    return {\n        \"chartType\": \"line\",\n        \"xValuesInputType\": \"common\",\n        \"commonXValueArray\": chartData.scaledDeathsLabels,\n        \"datasets\": chartData.scaledDeathsDatasets,\n        \"generalOptions\": chartData.scaledDeathsOptions,\n        \"storedData\": {\"chartType\":\"line\",\"xValuesInputType\":\"common\",\"commonXValueArray\":\"chartData.scaledDeathsLabels\",\"datasets\":\"chartData.scaledDeathsDatasets\",\"generalOptions\":\"chartData.scaledDeathsOptions\"}\n    };","supplementalCode":""}},"scaledNewDeathsChart":{"name":"scaledNewDeathsChart","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"\n    return {\n        \"chartType\": \"line\",\n        \"xValuesInputType\": \"common\",\n        \"commonXValueArray\": chartData.scaledNewDeathsLabels,\n        \"datasets\": chartData.scaledNewDeathsDatasets,\n        \"generalOptions\": chartData.scaledNewDeathsOptions,\n        \"storedData\": {\"chartType\":\"line\",\"xValuesInputType\":\"common\",\"commonXValueArray\":\"chartData.scaledNewDeathsLabels\",\"datasets\":\"chartData.scaledNewDeathsDatasets\",\"generalOptions\":\"chartData.scaledNewDeathsOptions\"}\n    };","supplementalCode":""}},"chartData":{"name":"chartData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return graphingUtilities.createGraphData(stateDataEntry,selectedCountyEntries,rawDateLabels,options); ","supplementalCode":""}},"rawDateLabels":{"name":"rawDateLabels","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return usProcessedData.dateLabels;","supplementalCode":""}},"usDataEntry":{"name":"usDataEntry","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return usProcessedData.cleanedData;","supplementalCode":""}},"options":{"name":"options","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return {\n\t\"CASES_PER\": populationData.CASES_PER,\n\t\"FILTER_N_DAYS\": FILTER_N_DAYS,\n\t\"plotDataType\": selectedDataToPlot,\n\t\"yAxisType\": yAxisType\n}","supplementalCode":""}},"FILTER_N_DAYS":{"name":"FILTER_N_DAYS","type":"apogee.JsonTable","updateData":{"data":5}},"selectedDataToPlot":{"name":"selectedDataToPlot","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let plotTypeList;\n\n//if the input is not valid, plot the filtered data only.\nif((!graphingOptions.data)||(!graphingOptions.data.plotDataType)||(graphingOptions.data.plotDataType.length == 0)) {\n    plotTypeList = [\"filteredData\"];\n}\nelse {\n    plotTypeList = graphingOptions.data.plotDataType;\n}\n\nreturn plotTypeList;","supplementalCode":""}},"yAxisType":{"name":"yAxisType","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let scaleType;\n\n//if the input is not valid, plot the filtered data only.\nif((!graphingOptions.data)||(!graphingOptions.data.scaleType)) {\n    scaleType = \"linear\";\n}\nelse {\n    scaleType = graphingOptions.data.scaleType;\n}\n\nreturn scaleType;","supplementalCode":""}},"selectedState":{"name":"selectedState","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return stateSelector.data.state;","supplementalCode":""}},"stateDataEntry":{"name":"stateDataEntry","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return usDataEntry.regions[selectedState];","supplementalCode":""}},"selectedCountyEntries":{"name":"selectedCountyEntries","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let stateKey = selectedState + \"|county\"\n\nif((!stateSelector.data)||(!stateSelector.data[stateKey])) return apogeeutil.INVALID_VALUE;\n\nreturn stateSelector.data[stateKey];\n","supplementalCode":""}}}}}},"components":{"dataDownload":{"type":"apogeeapp.app.FolderComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Data Download"}]},{"type":"paragraph","content":[{"type":"text","text":"This data is downloaded from a Github site managed by Johns Hopkins: "},{"type":"text","marks":[{"type":"link","attrs":{"href":"https://github.com/CSSEGISandData/COVID-19","title":null}}],"text":"https://github.com/CSSEGISandData/COVID-19"},{"type":"text","text":"."}]},{"type":"heading2","content":[{"type":"text","text":"World Data"}]},{"type":"paragraph","content":[{"type":"text","text":"The url below is raw world cases data in csv format."}]},{"type":"apogeeComponent","attrs":{"name":"worldCasesUrl","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"The url below is raw world deaths data in csv format."}]},{"type":"apogeeComponent","attrs":{"name":"worldDeathsUrl","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"The url below is raw world recovered data in csv format."}]},{"type":"apogeeComponent","attrs":{"name":"worldRecoveredUrl","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the raw downloaded cases data:"}]},{"type":"apogeeComponent","attrs":{"name":"worldDownloadedData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the raw downloaded deathsdata:"}]},{"type":"apogeeComponent","attrs":{"name":"worldDeathsData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the raw downloaded recovered data:"}]},{"type":"apogeeComponent","attrs":{"name":"worldRecoveredData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the world cases data processed in to a row and column array. The field header is kept on."}]},{"type":"apogeeComponent","attrs":{"name":"worldCasesGrid","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the world deaths data processed in to a row and column array. The field header is kept on."}]},{"type":"apogeeComponent","attrs":{"name":"worldDeathsGrid","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the world recovered data processed in to a row and column array. The field header is kept on."}]},{"type":"apogeeComponent","attrs":{"name":"worldRecoveredGrid","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Below is the column numbering for the data, with the first column being column 0. This applies to all three world tables."}]},{"type":"apogeeComponent","attrs":{"name":"WORLD_GRID_COLUMNS","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"These are the data labels for the world data."}]},{"type":"heading2","content":[{"type":"text","text":"US Data"}]},{"type":"paragraph","content":[{"type":"text","text":"The url below is raw cases data in csv format for the US."}]},{"type":"apogeeComponent","attrs":{"name":"usCasesUrl","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"The url below is raw cases data in csv format for the US."}]},{"type":"apogeeComponent","attrs":{"name":"usDeathsUrl","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the raw cases data."}]},{"type":"apogeeComponent","attrs":{"name":"usCasesData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the raw deaths data."}]},{"type":"apogeeComponent","attrs":{"name":"usDeathsData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the US cases processed in to a row and column array. The field header is kept on."}]},{"type":"apogeeComponent","attrs":{"name":"usCasesGrid","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the US deaths processed in to a row and column array. The field header is kept on."}]},{"type":"apogeeComponent","attrs":{"name":"usDeathsGrid","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Below are some column numbers from the above grid, with the first column being column 0. This only applies to the cases data. The deaths data has an additional column, population."}]},{"type":"apogeeComponent","attrs":{"name":"US_CASES_COLUMNS","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Below are some column numbers from the deaths grid data, with the first column being 0. Note that this table contains one additional column not in the cases data."}]},{"type":"apogeeComponent","attrs":{"name":"US_DEATHS_COLUMNS","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Data Access Utilities"}]},{"type":"paragraph","content":[{"type":"text","text":"This function gets the time series data for a given row."}]},{"type":"apogeeComponent","attrs":{"name":"getTimeSeriesData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This function gets the data labels for a given table. The table should be the grid data table."}]},{"type":"apogeeComponent","attrs":{"name":"getDateLabels","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Simple CSV Parser"}]},{"type":"paragraph","content":[{"type":"text","text":"This is a simple CSV parser. It will work if there are ZERO or ONE of the internal fields that are quote delimited. It will throw an error if this condition is not met. This works with our current input data."}]},{"type":"apogeeComponent","attrs":{"name":"simpleCsvParser","id":0,"state":""}},{"type":"paragraph"}]}},"children":{"WORLD_GRID_COLUMNS":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"worldDownloadedData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"worldDeathsUrl":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"worldRecoveredUrl":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"worldCasesUrl":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"usCasesUrl":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"usDeathsUrl":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"usCasesData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"usCasesGrid":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"usDeathsGrid":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":true},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"usDeathsData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"US_CASES_COLUMNS":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"US_DEATHS_COLUMNS":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"worldDeathsData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"worldRecoveredData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"worldCasesGrid":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"worldDeathsGrid":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"worldRecoveredGrid":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"simpleCsvParser":{"type":"apogeeapp.app.FunctionComponent","viewState":{"childDisplayState":{"views":{"Code":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"getTimeSeriesData":{"type":"apogeeapp.app.FunctionComponent","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"getDateLabels":{"type":"apogeeapp.app.FunctionComponent","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":-1,"tabOpened":true}},"workspaceNotes":{"type":"apogeeapp.app.FolderComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Workspace Notes"}]},{"type":"paragraph","content":[{"type":"text","text":"This page contains various notes regarding the workspace, such as items I want to go back and improve."}]},{"type":"heading2","content":[{"type":"text","text":"To Do"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"For the selector on the plots page, I need to add an \"all\" entry for each child list (country, state, county) if there is data for \"all\"."}]}]},{"type":"paragraph"},{"type":"heading2","content":[{"type":"text","text":"To Improve"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"The parsing of the text data is really a cludge. I will parse the data if there are 0 or 1 fields that are delimited with quotes (because of an included comma). I should generalize this."}]},{"type":"listItem","content":[{"type":"text","text":"Right now I have a lot of code in a number of cells."}]}]},{"type":"heading2","content":[{"type":"text","text":"Other Issues"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"The grids will often get corrupted  (I think if you scroll from the top and leave the page). This is a bug in my grid view."}]}]}]}},"viewState":{"childDisplayState":null}},"normalizedData":{"type":"apogeeapp.app.FolderComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Normalized Data"}]},{"type":"paragraph","content":[{"type":"text","text":"This page contains normalized data created from the downloaded data. We will combine the US and World data into one hierarchical structure."}]},{"type":"heading2","content":[{"type":"text","text":"Step 1. Modified Row Data"}]},{"type":"paragraph","content":[{"type":"text","text":"This cell contains an array of elements, each of which contains the data from a row of the world or US data."}]},{"type":"apogeeComponent","attrs":{"name":"worldNormalizedData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This function gets the times series data from an input grid row. It can also be used on the header row to get the date entries. "}]},{"type":"apogeeComponent","attrs":{"name":"dateLabels","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Step 2. Combine into Hierarchical Data"}]},{"type":"paragraph","content":[{"type":"text","text":"Here we create the hierarchical data. This has a single world entry, with child entries for countries, which in turn have child entries for states (provinces, etc) , which in turn have child entries for counties (or immediate other sub-state  admin region)."}]},{"type":"apogeeComponent","attrs":{"name":"hierarchicalData1","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Step 3. Fill in Missing Data"}]},{"type":"paragraph","content":[{"type":"text","text":"Here we sum child entries to populate missing data for parent entries - meaning counts (based on the sum of all child counts) and lat lon (based on the simple, equally weighted average of the child lat lons)."}]},{"type":"apogeeComponent","attrs":{"name":"mergedWorldData","id":0,"state":""}},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"}]}},"children":{"worldNormalizedData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":true,"height":7000}}}}},"dateLabels":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"height":7000,"isViewActive":true},"Private":{"isViewActive":false}}}}},"hierarchicalData1":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false,"height":7000}}}}},"mergedWorldData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"height":7000,"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":-1,"tabOpened":true}},"plots":{"type":"apogeeapp.app.FolderComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Plot Data"}]},{"type":"paragraph","content":[{"type":"text","text":"This table should hold the name of the county, including the full state name and country abbreviation."}]},{"type":"apogeeComponent","attrs":{"name":"regionSelector","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here are some graphing options:"}]},{"type":"apogeeComponent","attrs":{"name":"graphingOptions","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Chart"}]},{"type":"paragraph","content":[{"type":"text","text":"This is a chart of COVID-19 cases for the selected region."}]},{"type":"apogeeComponent","attrs":{"name":"regionChart","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"The following tables are input to the chart."}]},{"type":"paragraph","content":[{"type":"text","text":"The data series:"}]},{"type":"apogeeComponent","attrs":{"name":"chartDataSeries","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"The chart options:"}]},{"type":"apogeeComponent","attrs":{"name":"chartOptions","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Selected Data"}]},{"type":"paragraph","content":[{"type":"text","text":"Here we process the form selections to create the chart data."}]},{"type":"apogeeComponent","attrs":{"name":"selectedPlotDataType","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"selectedScaleType","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"regionPath","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"regionDisplayName","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the selected data entry:"}]},{"type":"apogeeComponent","attrs":{"name":"selectedEntry","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the selected time series for total cases:"}]},{"type":"apogeeComponent","attrs":{"name":"totalCasesData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the selected time series for new cases:"}]},{"type":"apogeeComponent","attrs":{"name":"newCasesData","id":0,"state":""}},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"}]}},"children":{"regionPath":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false,"height":7000}}}}},"regionSelector":{"type":"apogeeapp.app.FormDataComponent","viewState":{"childDisplayState":{"views":{"Form":{"isViewActive":true},"Layout Code":{"isViewActive":true,"height":7000},"Layout Private":{"isViewActive":true,"height":7000},"isInputValid(formValue)":{"isViewActive":false},"isInputValid Private":{"isViewActive":false},"Form Value":{"isViewActive":false}}}}},"selectedEntry":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"height":7000,"isViewActive":false}}}}},"regionChart":{"type":"apogeeapp.app.ChartJSComponent","viewState":{"childDisplayState":{"views":{"Chart":{"isViewActive":true},"Input":{"isViewActive":false},"Config (Debug)":{"height":280,"isViewActive":false}}}}},"chartDataSeries":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":true},"Private":{"isViewActive":false}}}}},"chartOptions":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":true},"Private":{"isViewActive":false}}}}},"regionDisplayName":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"totalCasesData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"newCasesData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"graphingOptions":{"type":"apogeeapp.app.FormDataComponent","viewState":{"childDisplayState":{"views":{"Form":{"isViewActive":true},"Layout Code":{"height":7000,"isViewActive":false},"Layout Private":{"isViewActive":false},"isInputValid(formValue)":{"isViewActive":false},"isInputValid Private":{"isViewActive":false},"Form Value":{"height":280,"isViewActive":false}}}}},"selectedPlotDataType":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"selectedScaleType":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":-1,"tabOpened":true}},"testPage_multiplot":{"type":"apogeeapp.app.FolderComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Multiplot Test"}]},{"type":"paragraph","content":[{"type":"text","text":"We will plot the number of cases per the following population for the given states"}]},{"type":"apogeeComponent","attrs":{"name":"casesPer","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This form selects the data to plot for the selected states."}]},{"type":"apogeeComponent","attrs":{"name":"graphingOptions","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This form selects the state to plot."}]},{"type":"apogeeComponent","attrs":{"name":"stateSelector","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"stateCounts","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Chart Data"}]},{"type":"apogeeComponent","attrs":{"name":"datasets","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"options","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Data Processing"}]},{"type":"paragraph","content":[{"type":"text","text":"This is the data entry for the US."}]},{"type":"apogeeComponent","attrs":{"name":"usDataEntry","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here we merge the COVID data with the downloaded population, where available, and reformat into a state map."}]},{"type":"apogeeComponent","attrs":{"name":"stateDataMap","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is a list of the states and other US regions."}]},{"type":"apogeeComponent","attrs":{"name":"stateList","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is an array of entries for the selected states."}]},{"type":"apogeeComponent","attrs":{"name":"selectedStateEntries","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the processed state data, showing the number of new cases per given population number as given by the field "},{"type":"text","marks":[{"type":"italic"}],"text":"casesPer"},{"type":"text","text":"."}]},{"type":"apogeeComponent","attrs":{"name":"processedStateData","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Time Series Processing Functions"}]},{"type":"paragraph","content":[{"type":"text","text":"All these functions take a time series input and return a time series of the same length."}]},{"type":"paragraph","content":[{"type":"text","text":"This function takes a difference of entries. To end up with the same length of array, this creates a virtual entry of index -1 with value 0."}]},{"type":"apogeeComponent","attrs":{"name":"differenceFunction","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":" This function divides each entry by the input number"}]},{"type":"apogeeComponent","attrs":{"name":"multiplyFunction","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"xxx"}]},{"type":"paragraph"}]}},"children":{"stateSelector":{"type":"apogeeapp.app.FormDataComponent","viewState":{"childDisplayState":{"views":{"Form":{"isViewActive":true},"Layout Code":{"height":7000,"isViewActive":true},"Layout Private":{"isViewActive":true,"height":7000},"isInputValid(formValue)":{"isViewActive":false},"isInputValid Private":{"isViewActive":false},"Form Value":{"isViewActive":false,"height":280}}}}},"usDataEntry":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"stateList":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"selectedStateEntries":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"stateCounts":{"type":"apogeeapp.app.ChartJSComponent","viewState":{"childDisplayState":{"views":{"Chart":{"isViewActive":true},"Input":{"isViewActive":false},"Config (Debug)":{"isViewActive":false}}}}},"differenceFunction":{"type":"apogeeapp.app.FunctionComponent","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"processedStateData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"datasets":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false,"height":7000}}}}},"options":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"stateDataMap":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"height":7000,"isViewActive":false}}}}},"multiplyFunction":{"type":"apogeeapp.app.FunctionComponent","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"casesPer":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"graphingOptions":{"type":"apogeeapp.app.FormDataComponent","viewState":{"childDisplayState":{"views":{"Form":{"isViewActive":true},"Layout Code":{"height":7000,"isViewActive":false},"Layout Private":{"isViewActive":false},"isInputValid(formValue)":{"isViewActive":false},"isInputValid Private":{"isViewActive":false},"Form Value":{"height":280,"isViewActive":true}}}}}},"viewState":{"childDisplayState":null,"treeState":-1,"tabOpened":true}},"populationData":{"type":"apogeeapp.app.FolderComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Population Data"}]},{"type":"heading2","content":[{"type":"text","text":"Global Settings"}]},{"type":"paragraph","content":[{"type":"text","text":"We will plot the number of cases per the following population in our graphs where we graph per population count."}]},{"type":"apogeeComponent","attrs":{"name":"CASES_PER","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"US Population Data"}]},{"type":"paragraph","content":[{"type":"text","text":"This is a URL to download state population from the US Census. Unfortunately I haven't figured out how to get data for the US territories included in the COVID data."}]},{"type":"apogeeComponent","attrs":{"name":"usStatePopulationUrl","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the API key."}]},{"type":"apogeeComponent","attrs":{"name":"apiKey","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the data."}]},{"type":"apogeeComponent","attrs":{"name":"usStatePopulation","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the data reformatted into a lookup table."}]},{"type":"apogeeComponent","attrs":{"name":"usPopulationMap","id":0,"state":""}},{"type":"heading1","content":[{"type":"text","text":"World Population Table"}]},{"type":"paragraph","content":[{"type":"text","text":"This is a 2020 population of countries taken from the web  page "},{"type":"text","marks":[{"type":"link","attrs":{"href":"https://worldpopulationreview.com/","title":null}}],"text":"https://worldpopulationreview.com/"}]},{"type":"apogeeComponent","attrs":{"name":"worldPopulations","id":0,"state":""}},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"}]}},"children":{"usStatePopulation":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"height":7000,"isViewActive":true},"Private":{"isViewActive":false}}}}},"usStatePopulationUrl":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"usPopulationMap":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":true},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"apiKey":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"worldPopulations":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Grid","viewState":{"childDisplayState":{"views":{"Data":{"height":300,"isViewActive":false},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"CASES_PER":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":-1,"tabOpened":true}},"usProcessedData":{"type":"apogeeapp.app.FolderComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"US Processed Data"}]},{"type":"paragraph","content":[{"type":"text","text":"This is data processed from the US datasets."}]},{"type":"heading2","content":[{"type":"text","text":"Formatted Data"}]},{"type":"paragraph","content":[{"type":"text","text":"Here we combine the cases and deaths data."}]},{"type":"apogeeComponent","attrs":{"name":"combinedData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here we clean up the data:"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"delete entries with incomplete data (There are some territories at the end)"}]},{"type":"listItem","content":[{"type":"text","text":"add the counts from counties and put these in the state entries."}]}]},{"type":"apogeeComponent","attrs":{"name":"cleanedData","id":0,"state":""}},{"type":"heading3","content":[{"type":"text","text":"Data Lists"}]},{"type":"paragraph","content":[{"type":"text","text":"This is a list of states that have cases and death data available at the state level."}]},{"type":"apogeeComponent","attrs":{"name":"stateWithDataList","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is a list of states that have cases and deaths available at the county level."}]},{"type":"apogeeComponent","attrs":{"name":"stateWithCountyDataList","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the label list for the data."}]},{"type":"apogeeComponent","attrs":{"name":"dateLabels","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Step 2. Comb"}]},{"type":"apogeeComponent","attrs":{"name":"dateLabelList","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Tests"}]},{"type":"paragraph","content":[{"type":"text","text":"Here we do a few additional checks. The array result should be a list of errors."}]},{"type":"apogeeComponent","attrs":{"name":"dataValidation","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Utilities"}]},{"type":"paragraph","content":[{"type":"text","text":"vvv"}]}]}},"children":{"combinedData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"height":7000,"isViewActive":false}}}}},"cleanedData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"height":7000,"isViewActive":false}}}}},"dataValidation":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"height":7000,"isViewActive":false}}}}},"stateWithCountyDataList":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"stateWithDataList":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"dateLabelList":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"dateLabels":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":1,"tabOpened":true}},"usStatePlots":{"type":"apogeeapp.app.FolderComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"US State COVID Plots"}]},{"type":"paragraph","content":[{"type":"text","text":"We will plot the number of cases per the following population for the given states"}]},{"type":"paragraph","content":[{"type":"text","text":"This form gets some options for the graphs."}]},{"type":"apogeeComponent","attrs":{"name":"graphingOptions","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This form selects the states to plot."}]},{"type":"apogeeComponent","attrs":{"name":"stateSelector","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Charts"}]},{"type":"paragraph","content":[{"type":"text","text":"The following charts give the number cases, new cases, deaths and new deaths scaled by population size."}]},{"type":"apogeeComponent","attrs":{"name":"scaledCasesChart","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"scaledNewCasesChart","id":0,"state":""}},{"type":"heading2"},{"type":"apogeeComponent","attrs":{"name":"scaledDeathsChart","id":0,"state":""}},{"type":"heading2"},{"type":"apogeeComponent","attrs":{"name":"scaledNewDeathsChart","id":0,"state":""}},{"type":"heading2"},{"type":"heading2","content":[{"type":"text","text":"Chart Data"}]},{"type":"paragraph","content":[{"type":"text","text":"Here is our compiled chart data."}]},{"type":"apogeeComponent","attrs":{"name":"chartData","id":0,"state":""}},{"type":"paragraph"},{"type":"heading2","content":[{"type":"text","text":"Data Inputs"}]},{"type":"paragraph","content":[{"type":"text","text":"This are the date labels for the original data."}]},{"type":"apogeeComponent","attrs":{"name":"rawDateLabels","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the input data entry - the US country entry."}]},{"type":"apogeeComponent","attrs":{"name":"usDataEntry","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"These are the selected states."}]},{"type":"apogeeComponent","attrs":{"name":"selectedStateEntries","id":0,"state":""}},{"type":"heading3","content":[{"type":"text","text":"Options"}]},{"type":"paragraph","content":[{"type":"text","text":"These are the options used to create the graph data."}]},{"type":"apogeeComponent","attrs":{"name":"options","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the filtering constant that is used for this data."}]},{"type":"apogeeComponent","attrs":{"name":"FILTER_N_DAYS","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"These are the data series to plot"}]},{"type":"apogeeComponent","attrs":{"name":"selectedDataToPlot","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the axis type:"}]},{"type":"apogeeComponent","attrs":{"name":"yAxisType","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"End"}]},{"type":"paragraph","content":[{"type":"text","text":"End2"}]},{"type":"paragraph"}]}},"children":{"graphingOptions":{"type":"apogeeapp.app.FormDataComponent","viewState":{"childDisplayState":{"views":{"Form":{"isViewActive":true},"Layout Code":{"height":7000,"isViewActive":false},"Layout Private":{"isViewActive":false},"isInputValid(formValue)":{"isViewActive":false},"isInputValid Private":{"isViewActive":false},"Form Value":{"height":280,"isViewActive":false}}}}},"stateSelector":{"type":"apogeeapp.app.FormDataComponent","viewState":{"childDisplayState":{"views":{"Form":{"isViewActive":true},"Layout Code":{"height":7000,"isViewActive":false},"Layout Private":{"isViewActive":false,"height":7000},"isInputValid(formValue)":{"isViewActive":false},"isInputValid Private":{"isViewActive":false},"Form Value":{"isViewActive":false,"height":280}}}}},"scaledCasesChart":{"type":"apogeeapp.app.ChartJSComponent","viewState":{"childDisplayState":{"views":{"Chart":{"isViewActive":true},"Input":{"isViewActive":true},"Config (Debug)":{"isViewActive":false}}}}},"scaledNewCasesChart":{"type":"apogeeapp.app.ChartJSComponent","viewState":{"childDisplayState":{"views":{"Chart":{"isViewActive":true},"Input":{"isViewActive":true},"Config (Debug)":{"isViewActive":false}}}}},"scaledDeathsChart":{"type":"apogeeapp.app.ChartJSComponent","viewState":{"childDisplayState":{"views":{"Chart":{"isViewActive":true},"Input":{"isViewActive":true},"Config (Debug)":{"isViewActive":false}}}}},"scaledNewDeathsChart":{"type":"apogeeapp.app.ChartJSComponent","viewState":{"childDisplayState":{"views":{"Chart":{"isViewActive":true},"Input":{"isViewActive":true},"Config (Debug)":{"isViewActive":false}}}}},"rawDateLabels":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"selectedDataToPlot":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"yAxisType":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"chartData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"FILTER_N_DAYS":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"usDataEntry":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"options":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"selectedStateEntries":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":-1,"tabOpened":true}},"graphingUtilities":{"type":"apogeeapp.app.FolderComponent","data":{"doc":{"type":"doc","content":[{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"createGraphData","id":0,"state":""}}]}},"children":{"createGraphData":{"type":"apogeeapp.app.FolderFunctionComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Create Graph Data"}]},{"type":"paragraph","content":[{"type":"text","text":"This function.."}]},{"type":"heading2","content":[{"type":"text","text":"Input Data"}]},{"type":"apogeeComponent","attrs":{"name":"parentDataEntry","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"regionList","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"labelList","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"options","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Output"}]},{"type":"apogeeComponent","attrs":{"name":"results","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Default Options"}]},{"type":"paragraph","content":[{"type":"text","text":"These are the default options that will be used if the options are not specified."}]},{"type":"apogeeComponent","attrs":{"name":"DEFAULT_CASES_PER","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"DEFAULT_FILTER_N_DAYS","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"DEFAULT_PLOT_DATA_TYPES","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"DEFAULT_Y_AXIS_TYPE","id":0,"state":""}},{"type":"heading2"},{"type":"heading2","content":[{"type":"text","text":"Data Processing"}]},{"type":"paragraph","content":[{"type":"text","text":"This is the reference population used for scaling the output."}]},{"type":"apogeeComponent","attrs":{"name":"CASES_PER","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the filtering constant that is used for this data."}]},{"type":"apogeeComponent","attrs":{"name":"FILTER_N_DAYS","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"These are the date labels"}]},{"type":"apogeeComponent","attrs":{"name":"rawDateLabels","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"These are the data entries for the selected states."}]},{"type":"apogeeComponent","attrs":{"name":"selectedStateEntries","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"These are the data series to plot"}]},{"type":"apogeeComponent","attrs":{"name":"selectedDataToPlot","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the axis type:"}]},{"type":"apogeeComponent","attrs":{"name":"yAxisType","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the processed state data, showing the number of new cases per given population number as given by the field "},{"type":"text","marks":[{"type":"italic"}],"text":"casesPer"},{"type":"text","text":"."}]},{"type":"apogeeComponent","attrs":{"name":"processedCasesData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"These are the labels for the cases data."}]},{"type":"apogeeComponent","attrs":{"name":"casesDateLabels","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the processed deaths data."}]},{"type":"apogeeComponent","attrs":{"name":"processedDeathsData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"These are the data labels for the processed deaths data."}]},{"type":"apogeeComponent","attrs":{"name":"deathsDateLabels","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Chart Data"}]},{"type":"paragraph","content":[{"type":"text","text":"These are some input data sets created for the charts."}]},{"type":"apogeeComponent","attrs":{"name":"scaledCasesDatasets","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"scaledCasesOptions","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"scaledNewCasesDatasets","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"scaledNewCasesOptions","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"scaledDeathsDatasets","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"scaledDeathsOptions","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"scaledNewDeathsDatasets","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"scaledNewDeathsOptions","id":0,"state":""}},{"type":"heading2"},{"type":"paragraph"},{"type":"heading2","content":[{"type":"text","text":"Chart Source Functions"}]},{"type":"paragraph","content":[{"type":"text","text":"This creates a data set for a chart."}]},{"type":"apogeeComponent","attrs":{"name":"createDataset","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This creates chart options for a chart."}]},{"type":"apogeeComponent","attrs":{"name":"createChartOptions","id":0,"state":""}},{"type":"paragraph"}]}},"children":{"FILTER_N_DAYS":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"rawDateLabels":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":true},"Private":{"isViewActive":false}}}}},"selectedStateEntries":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"selectedDataToPlot":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"height":7000,"isViewActive":true},"Private":{"isViewActive":false}}}}},"yAxisType":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"processedCasesData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"casesDateLabels":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"processedDeathsData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"deathsDateLabels":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"createDataset":{"type":"apogeeapp.app.FunctionComponent","viewState":{"childDisplayState":{"views":{"Code":{"height":7000,"isViewActive":false},"Private":{"height":7000,"isViewActive":false}}}}},"createChartOptions":{"type":"apogeeapp.app.FunctionComponent","viewState":{"childDisplayState":{"views":{"Code":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"parentDataEntry":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"regionList":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"options":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"results":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"labelList":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"DEFAULT_FILTER_N_DAYS":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"DEFAULT_PLOT_DATA_TYPES":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"DEFAULT_Y_AXIS_TYPE":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"scaledCasesDatasets":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false,"height":7000}}}}},"scaledCasesOptions":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"scaledNewCasesDatasets":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false,"height":7000}}}}},"scaledNewCasesOptions":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"scaledDeathsDatasets":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false,"height":7000}}}}},"scaledDeathsOptions":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"scaledNewDeathsDatasets":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false,"height":7000}}}}},"scaledNewDeathsOptions":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"DEFAULT_CASES_PER":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"CASES_PER":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"dataProcessUtilities":{"type":"apogeeapp.app.FolderComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Data Processing Utilities"}]},{"type":"heading2","content":[{"type":"text","text":"Smoothing"}]},{"type":"paragraph","content":[{"type":"text","text":"This function smooths the data. For documentation open the associated child page."}]},{"type":"paragraph","content":[{"type":"text","marks":[{"type":"bold"},{"type":"textcolor","attrs":{"color":"red"}}],"text":"NOTE: This function will alter the data series length!"}]},{"type":"apogeeComponent","attrs":{"name":"smoothData","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Time Series Manipulation"}]},{"type":"paragraph","content":[{"type":"text","text":"This function takes a difference of entries. To end up with the same length of array, this creates a virtual entry of index -1 with value 0."}]},{"type":"apogeeComponent","attrs":{"name":"differenceFunction","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":" This function divides each entry by the input number"}]},{"type":"apogeeComponent","attrs":{"name":"multiplyFunction","id":0,"state":""}},{"type":"heading2"}]}},"children":{"smoothData":{"type":"apogeeapp.app.FolderFunctionComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"COVID Smoothing Estimator"}]},{"type":"paragraph","content":[{"type":"text","text":"This is a function that smooths the COVID data. Note that the data array may have some samples trimmed from the start, to fit a length requirement based on the filter size parameter N."}]},{"type":"heading2","content":[{"type":"text","text":"Inputs"}]},{"type":"paragraph","content":[{"type":"text","text":"This is the input array of data samples."}]},{"type":"apogeeComponent","attrs":{"name":"dataArray","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the filtering parameters in units of days (or whatever the X axis units are). This is the period over which data is averaged."}]},{"type":"apogeeComponent","attrs":{"name":"N","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is an optional array of labels. The input data may have truncated samples from the start of the array. If this value is input, the return value will include a similarly truncated label array."}]},{"type":"apogeeComponent","attrs":{"name":"labelArray","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Outputs"}]},{"type":"paragraph","content":[{"type":"text","text":"This is the output. It includes the following fields:"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"modifiedDataArray = This is the input data array as processed. It may have samples truncated from the start of the input data array."}]},{"type":"listItem","content":[{"type":"text","text":"modifiedLabelArray - If included, this will be returned. It and the data array may have samples removed from the start."}]},{"type":"listItem","content":[{"type":"text","text":"filteredDataArray - This is the filter data array."}]},{"type":"listItem","content":[{"type":"text","text":"filteredDifferenceArray - This is an estimate of the rate of change of the data array, in terms of the change between successive days."}]},{"type":"listItem","content":[{"type":"text","text":"intermediateDataArray - This is a piecewise linear curve that estimates the data array. This is an intermediate stage of the smoothing calculation."}]}]},{"type":"apogeeComponent","attrs":{"name":"results","id":0,"state":""}},{"type":"heading1","content":[{"type":"text","text":"Business Logic"}]},{"type":"heading2","content":[{"type":"text","text":"Modified Input Arrays"}]},{"type":"paragraph","content":[{"type":"text","text":"Our current calculation requires the proper number of points, so we will modify the input arrays here by truncating extra points from the "},{"type":"text","marks":[{"type":"italic"}],"text":"front"},{"type":"text","text":" of the array (since that data is less interesting)."}]},{"type":"apogeeComponent","attrs":{"name":"workingInputData","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"workingInputLabels","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Piece-wise Line Fitting Calculation"}]},{"type":"paragraph","content":[{"type":"text","text":"We will break out interval into fixed size segments, given by Model.N. We will use least squares to find a series of line segment, length N, that best fit the input data."}]},{"type":"paragraph","content":[{"type":"text","text":"This is the tridiagonal matrix to find the solution"}]},{"type":"apogeeComponent","attrs":{"name":"AMatrix","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the b vector to find the solution."}]},{"type":"apogeeComponent","attrs":{"name":"bVector","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the solution for the points at the end of the line segments."}]},{"type":"apogeeComponent","attrs":{"name":"solutionVector","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here we expand the data to give a value for each point in the original data set."}]},{"type":"apogeeComponent","attrs":{"name":"interpolatedData","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Bezier Interpolation"}]},{"type":"paragraph","content":[{"type":"text","text":"The above solution is a series of straight line segments. Here we will define bezier segments to get a smoother interpolation."}]},{"type":"paragraph","content":[{"type":"text","text":"The bezier points will be placed at the midpoint X of each of our line segments. The slope to the control points will be the slope of the line. We choose a length to the control points to be 1/3 the distance of between the main points. This is choosen mainly because it makes associating X and the bezier t parameter easy. (That is a weak reason. This strength of these control points could be an input. If this is done, the conversino from t to x must be improved.) "}]},{"type":"paragraph","content":[{"type":"text","text":"As for the Y value of our bezier points, they will be moved slightly from the midpoint Y value of our line segments. Curvature of the data will force the line midpoints to be above (or below) the actual data value at the midpoint X. We will attempt to correct for this offset."}]},{"type":"paragraph","content":[{"type":"text","text":"This first cell collects some information for each line segment in our above solution."}]},{"type":"apogeeComponent","attrs":{"name":"lineSegmentInfo","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This next cell calculate the Y value offset for our bezier points based off of the curvature. The curvature is measured from the change in the line segment slopes."}]},{"type":"paragraph","content":[{"type":"text","marks":[{"type":"italic"},{"type":"textcolor","attrs":{"color":"blue"}}],"text":"NOTE: The correction I derived should translate both the X and Y values for the bezier point. However, for now at least, I am requiring the X values be the specified numbers, purely because I this gives an easy correspondence between X and the bezier T parameter. If I do a proper calculation between x and t, then I can move the X values, meaning I can change the control point lengths and add other corrections to the X point values."},{"type":"text","text":"  "}]},{"type":"apogeeComponent","attrs":{"name":"yCorrections","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Below we create the collection of Bezier segments. "}]},{"type":"paragraph","content":[{"type":"text","text":"Since the bezier segments are offset from the line segments, we need a little more data at the start and end. We will create additional data at the start and end by extending the first and last line segments with a constant slope."}]},{"type":"paragraph","content":[{"type":"text","text":"This boundary condition does have a noticable impact on the data. We might want to look at other treatments. "}]},{"type":"apogeeComponent","attrs":{"name":"bezierSegmentInfo","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here we get the interpolated data for both the data and its derivative, since we are interested in the change in our data also. "}]},{"type":"apogeeComponent","attrs":{"name":"bezierInterpolatedData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here we extract the interpolated date."}]},{"type":"apogeeComponent","attrs":{"name":"bezierPoints","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here we extract the interpolated slope."}]},{"type":"apogeeComponent","attrs":{"name":"bezierSlope","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":" "}]},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"}]}},"children":{"dataArray":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"labelArray":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"results":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"AMatrix":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"bVector":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"solutionVector":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"interpolatedData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"workingInputData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"workingInputLabels":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"piecewiseLinearModel":{"type":"apogeeapp.app.FolderComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Piecewise Linear Model"}]},{"type":"paragraph","content":[{"type":"text","text":"This page contains code necessary to create a piecewise linear model for a data sample. The basic idea is to place a reference point every N points of our input data, and fit the best set of these points."}]},{"type":"paragraph","content":[{"type":"text","text":"To use this page, the value N, the linear segment length in samples, must be defined within the scope of this pace. "}]},{"type":"heading2","content":[{"type":"text","text":"Parameters"}]},{"type":"paragraph","content":[{"type":"text","text":"Doing a least squares fit of the data will create a tridiagonal system. The coefficients of the fitted parameters (the A matrix) do not depend on the data. The data is only present in the b Vector (in the equations b = Ax),"}]},{"type":"paragraph","content":[{"type":"text","text":"The following two parameters compose the tridiagonal matrix."}]},{"type":"apogeeComponent","attrs":{"name":"c1","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"c2","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Model Creation Functions"}]},{"type":"paragraph","content":[{"type":"text","text":"For now I will assume the data has a number of points so we don't have any odd sized segments."}]},{"type":"apogeeComponent","attrs":{"name":"createBVector","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"We will model the tridiagonal A matrix by giving only the tridiagonal elements (so the dimensions of the matrix are m x 3)."}]},{"type":"apogeeComponent","attrs":{"name":"createTridiag","id":0,"state":""}},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"}]}},"children":{"c1":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"c2":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"createBVector":{"type":"apogeeapp.app.FunctionComponent","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"createTridiag":{"type":"apogeeapp.app.FunctionComponent","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":-1}},"tridiagPage":{"type":"apogeeapp.app.FolderComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Tridiagonal Matrix Solver"}]},{"type":"heading2","content":[{"type":"text","text":"Tridiagonal Solver Functions"}]},{"type":"paragraph","content":[{"type":"text","text":"This function returns the solution vector for the passed tridiagonal system. The matrix A should consist of the tridiagonal elements. It is a matrix with only 3 columns."}]},{"type":"apogeeComponent","attrs":{"name":"tridiagSolver","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This function multiplies a tridiagonal matrix by a vector."}]},{"type":"apogeeComponent","attrs":{"name":"tridiagMultiply","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Test"}]},{"type":"paragraph","content":[{"type":"text","text":"This is the input matrix. It should have dimensions of N x 3 and model a tridiagonal matrix."}]},{"type":"apogeeComponent","attrs":{"name":"AMatrix","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the b vector for the equation bVector = AMatrix * xVector;"}]},{"type":"apogeeComponent","attrs":{"name":"bVector","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the result vector from the input calculation"}]},{"type":"apogeeComponent","attrs":{"name":"xVector","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here we mutliply our solution to see it matches the original b vector."}]},{"type":"apogeeComponent","attrs":{"name":"test","id":0,"state":""}},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"}]}},"children":{"AMatrix":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"bVector":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"xVector":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"height":7000,"isViewActive":true},"Private":{"isViewActive":false}}}}},"test":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"height":7000,"isViewActive":true},"Private":{"isViewActive":false}}}}},"tridiagSolver":{"type":"apogeeapp.app.FunctionComponent","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"tridiagMultiply":{"type":"apogeeapp.app.FunctionComponent","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false,"height":7000}}}}}},"viewState":{"childDisplayState":null,"treeState":-1}},"lineSegmentInfo":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"bezierSegmentInfo":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":602,"isViewActive":true},"Private":{"height":7000,"isViewActive":false}}}}},"bezierInterpolatedData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"height":7000,"isViewActive":false}}}}},"bezierPoints":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"bezierSlope":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"yCorrections":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":true},"Private":{"isViewActive":false}}}}},"N":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}}},"viewState":{"treeState":1}},"differenceFunction":{"type":"apogeeapp.app.FunctionComponent","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"multiplyFunction":{"type":"apogeeapp.app.FunctionComponent","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":-1}}},"viewState":{"treeState":1}}},"viewState":{"childDisplayState":null,"treeState":-1}},"usCountyPlots":{"type":"apogeeapp.app.FolderComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"US County Plots"}]},{"type":"paragraph","content":[{"type":"text","text":"We will plot the number of cases per the following population for the given counties in the selected states."}]},{"type":"paragraph","content":[{"type":"text","text":"This form gets some options for the graphs."}]},{"type":"apogeeComponent","attrs":{"name":"graphingOptions","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This form selects the states to plot."}]},{"type":"apogeeComponent","attrs":{"name":"stateSelector","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Charts"}]},{"type":"paragraph","content":[{"type":"text","text":"The following charts give the number cases, new cases, deaths and new deaths scaled by population size."}]},{"type":"apogeeComponent","attrs":{"name":"scaledCasesChart","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"scaledNewCasesChart","id":0,"state":""}},{"type":"heading2"},{"type":"apogeeComponent","attrs":{"name":"scaledDeathsChart","id":0,"state":""}},{"type":"heading2"},{"type":"apogeeComponent","attrs":{"name":"scaledNewDeathsChart","id":0,"state":""}},{"type":"heading2"},{"type":"heading2","content":[{"type":"text","text":"Chart Data"}]},{"type":"paragraph","content":[{"type":"text","text":"Here is our compiled chart data."}]},{"type":"apogeeComponent","attrs":{"name":"chartData","id":0,"state":""}},{"type":"paragraph"},{"type":"heading2","content":[{"type":"text","text":"Data Inputs"}]},{"type":"paragraph","content":[{"type":"text","text":"This are the date labels for the original data."}]},{"type":"apogeeComponent","attrs":{"name":"rawDateLabels","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the input data entry - the US country entry."}]},{"type":"apogeeComponent","attrs":{"name":"usDataEntry","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the selected state:"}]},{"type":"apogeeComponent","attrs":{"name":"selectedState","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the selected state entry"}]},{"type":"apogeeComponent","attrs":{"name":"stateDataEntry","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"These are the selected states."}]},{"type":"apogeeComponent","attrs":{"name":"selectedCountyEntries","id":0,"state":""}},{"type":"heading3","content":[{"type":"text","text":"Options"}]},{"type":"paragraph","content":[{"type":"text","text":"These are the options used to create the graph data."}]},{"type":"apogeeComponent","attrs":{"name":"options","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the filtering constant that is used for this data."}]},{"type":"apogeeComponent","attrs":{"name":"FILTER_N_DAYS","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"These are the data series to plot"}]},{"type":"apogeeComponent","attrs":{"name":"selectedDataToPlot","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the axis type:"}]},{"type":"apogeeComponent","attrs":{"name":"yAxisType","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"E"}]}]}},"children":{"graphingOptions":{"type":"apogeeapp.app.FormDataComponent","viewState":{"childDisplayState":{"views":{"Form":{"isViewActive":true},"Layout Code":{"height":7000,"isViewActive":false},"Layout Private":{"isViewActive":false},"isInputValid(formValue)":{"isViewActive":false},"isInputValid Private":{"isViewActive":false},"Form Value":{"height":280,"isViewActive":false}}}}},"stateSelector":{"type":"apogeeapp.app.FormDataComponent","viewState":{"childDisplayState":{"views":{"Form":{"isViewActive":true},"Layout Code":{"height":7000,"isViewActive":false},"Layout Private":{"isViewActive":false,"height":7000},"isInputValid(formValue)":{"isViewActive":false},"isInputValid Private":{"isViewActive":false},"Form Value":{"isViewActive":false,"height":280}}}}},"scaledCasesChart":{"type":"apogeeapp.app.ChartJSComponent","viewState":{"childDisplayState":{"views":{"Chart":{"isViewActive":true},"Input":{"isViewActive":true},"Config (Debug)":{"isViewActive":false}}}}},"scaledNewCasesChart":{"type":"apogeeapp.app.ChartJSComponent","viewState":{"childDisplayState":{"views":{"Chart":{"isViewActive":true},"Input":{"isViewActive":true},"Config (Debug)":{"isViewActive":false}}}}},"scaledDeathsChart":{"type":"apogeeapp.app.ChartJSComponent","viewState":{"childDisplayState":{"views":{"Chart":{"isViewActive":true},"Input":{"isViewActive":true},"Config (Debug)":{"isViewActive":false}}}}},"scaledNewDeathsChart":{"type":"apogeeapp.app.ChartJSComponent","viewState":{"childDisplayState":{"views":{"Chart":{"isViewActive":true},"Input":{"isViewActive":true},"Config (Debug)":{"isViewActive":false}}}}},"chartData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"rawDateLabels":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"usDataEntry":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"options":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"FILTER_N_DAYS":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"selectedDataToPlot":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"yAxisType":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"selectedState":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"stateDataEntry":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"selectedCountyEntries":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":-1,"tabOpened":true,"tabShowing":true}},"viewState":{"treeState":1}}},"viewState":{"treeState":1}}