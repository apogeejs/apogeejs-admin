{"fileType":"apogee app js workspace","version":"0.60","references":{"refEntries":[{"url":"/applications/modules/chartjsmodule/src/ChartJSComponentModule.js","nickname":"ChartJSComponentModule.j","entryType":"es module"},{"url":"/applications/modules/csvmodule/src/CSVComponentModule.js","nickname":"CSVComponentModule.js","entryType":"es module"}],"viewState":{"treeState":1,"lists":{"es module":{"treeState":1},"js link":{"treeState":0},"css link":{"treeState":0}}}},"code":{"model":{"fileType":"apogee model","version":0.3,"name":"UsCovidWorkspace","children":{"dataDownload":{"name":"dataDownload","type":"apogee.Folder","children":{"usCasesUrl":{"name":"usCasesUrl","type":"apogee.JsonMember","updateData":{"data":"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv"}},"usDeathsUrl":{"name":"usDeathsUrl","type":"apogee.JsonMember","updateData":{"data":"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_US.csv"}},"usCasesData":{"name":"usCasesData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return apogeeutil.textRequest(usCasesUrl);","supplementalCode":""}},"usDeathsData":{"name":"usDeathsData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return apogeeutil.textRequest(usDeathsUrl);","supplementalCode":""}},"dateList":{"name":"dateList","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"const FIRST_DATE = \"1/22/20\";\nlet firstDateIndex = usCasesJson.data.header.indexOf(FIRST_DATE);\nreturn usCasesJson.data.header.slice(firstDateIndex);","supplementalCode":""}},"usCasesJson":{"name":"usCasesJson","type":"apogee.Folder","children":{"formData":{"name":"formData","type":"apogee.JsonMember","updateData":{"data":{"input":"usCasesData","outputFormat":"maps","dynamicTyping":true,"skipEmptyLines":true}}},"formResult":{"name":"formResult","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let output = {};\noutput[\"input\"] = usCasesData\noutput[\"outputFormat\"] = \"maps\"\noutput[\"dynamicTyping\"] = true\noutput[\"skipEmptyLines\"] = true\noutput[\"storedFormValue\"] = {\"input\":\"usCasesData\",\"outputFormat\":\"maps\",\"dynamicTyping\":true,\"skipEmptyLines\":true}\nreturn output;","supplementalCode":"","contextParentGeneration":2}},"data":{"name":"data","type":"apogeeapp.ParseCSVCell-data"}}},"usDeathsJson":{"name":"usDeathsJson","type":"apogee.Folder","children":{"formData":{"name":"formData","type":"apogee.JsonMember","updateData":{"data":{"input":"usDeathsData","outputFormat":"maps","dynamicTyping":true,"skipEmptyLines":true}}},"formResult":{"name":"formResult","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let output = {};\noutput[\"input\"] = usDeathsData\noutput[\"outputFormat\"] = \"maps\"\noutput[\"dynamicTyping\"] = true\noutput[\"skipEmptyLines\"] = true\noutput[\"storedFormValue\"] = {\"input\":\"usDeathsData\",\"outputFormat\":\"maps\",\"dynamicTyping\":true,\"skipEmptyLines\":true}\nreturn output;","supplementalCode":"","contextParentGeneration":2}},"data":{"name":"data","type":"apogeeapp.ParseCSVCell-data"}}}}},"processedData":{"name":"processedData","type":"apogee.Folder","children":{"compiledData":{"name":"compiledData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let stateMap = {};\n//add the cases data\ndataDownload.usCasesJson.data.body.forEach( inputEntry => {\n    let state = inputEntry[\"Province_State\"];\n    if(state) {\n        let stateEntry = _getStateEntry(stateMap,state);\n        let county = inputEntry[\"Admin2\"];\n        if(county) {\n            countyEntry = {};\n            countyEntry.county = county;\n            countyEntry.state = state;\n            countyEntry.latlon = [inputEntry[\"Lat\"],inputEntry[\"Long_\"]];\n            countyEntry.cases = _getTimeSeries(inputEntry);\n            stateEntry.counties[county] = countyEntry;\n        }\n        else {\n            //if there is no county this is state information\n            stateEntry.latlon = [inputEntry[\"Lat\"],inputEntry[\"Long_\"]];\n            stateEntry.cases = _getTimeSeries(inputEntry);\n        }\n    }\n})\n//add the deaths data. This input also provides the population\ndataDownload.usDeathsJson.data.body.forEach( inputEntry => {\n    let state = inputEntry[\"Province_State\"];\n    if(state) {\n        let stateEntry = _getStateEntry(stateMap,state);\n        let county = inputEntry[\"Admin2\"];\n        if(county) {\n            countyEntry = stateEntry.counties[county];\n            //only process if we already have cases data\n            if(countyEntry) {\n                countyEntry.deaths = _getTimeSeries(inputEntry);\n                countyEntry.population = inputEntry[\"Population\"];\n                stateEntry.counties[county] = countyEntry;\n            }\n        }\n        else {\n            //if there is no county this is state information\n            stateEntry.deaths = _getTimeSeries(inputEntry);\n            stateEntry.population = inputEntry[\"Population\"];\n        }\n    }\n})\nreturn stateMap;","supplementalCode":"function _getStateEntry(stateMap,state) {\n    let stateEntry = stateMap[state];\n    if(!stateEntry) {\n        stateEntry = {};\n        stateEntry.state = state;\n        stateEntry.counties = {};\n        stateMap[state] = stateEntry;\n    }\n    return stateEntry;\n}\n\nfunction _getTimeSeries(inputEntry) {\n    return dataDownload.dateList.map( date => inputEntry[date]);\n}"}},"cleanedData":{"name":"cleanedData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"//make a copy we can edit\nlet stateMap = apogeeutil.jsonCopy(compiledData);\n\nfor(let state in stateMap) {\n    let stateEntry = stateMap[state];\n    \n    //delete incomplete counties\n    _deleteIncompleteEntries(stateEntry.counties);\n    \n    //if cases is missing, we assume deaths is also missing\n    //if so, we will replace all values with sums from the counties\n    //so population is the population with on cases/deaths data, even if this \n    //undercounts the state population\n    if(stateEntry.cases === undefined) {\n        let summedCountyData = _sumCountyData(stateEntry.counties);\n        if(summedCountyData) {\n            stateEntry.cases = summedCountyData.cases;\n            stateEntry.deaths = summedCountyData.deaths;\n            stateEntry.population = summedCountyData.population;\n            stateEntry.latlon = summedCountyData.latlon;\n        }\n    }\n}\n\n//delete incomplete state data\n_deleteIncompleteEntries(stateMap);\n\nreturn stateMap;","supplementalCode":"function _deleteIncompleteEntries(entryMap) {\n    for(let key in entryMap) {\n        let entry = entryMap[key];\n        //criteria\n        //cases or deaths missing; population 0 or missing; latlon missing; lat or lon 0 or missing;\n        let doDelete = ((!entry.cases)||(!entry.deaths)||(!entry.population)||(!entry.latlon)||(!entry.latlon[0])||(!entry.latlon[1])); \n        \n        if(doDelete) delete entryMap[key];\n    }\n}\n\nfunction _sumCountyData(countyMap) {\n    let summedData = {};\n    //sum/average data from the counties\n    summedData.cases;\n    let addToStateCases = (value,index) => { summedData.cases[index] += value; };\n    summedData.deaths;\n    let addToStateDeaths = (value,index) => { summedData.deaths[index] += value; };\n    \n    summedData.population = 0;\n    summedData.latlon = [0,0];\n    let countyCount = 0;\n    \n    for(let county in countyMap) {\n        let countyEntry = countyMap[county];\n\n        if(!summedData.cases) {\n            //first pass - populate initial cases and deaths array\n            summedData.cases = apogeeutil.jsonCopy(countyEntry.cases);\n            summedData.deaths = apogeeutil.jsonCopy(countyEntry.deaths);\n        }\n        else {\n            countyEntry.cases.forEach(addToStateCases);\n            countyEntry.deaths.forEach(addToStateDeaths);\n        }\n\n        summedData.population += countyEntry.population;\n        summedData.latlon[0] += countyEntry.latlon[0];\n        summedData.latlon[1] += countyEntry.latlon[1];\n        countyCount++;\n    }\n    \n    if(countyCount === 0) {\n        return null;\n    }\n    \n    summedData.latlon[0] /= countyCount;\n    summedData.latlon[1] /= countyCount;\n    \n    return summedData;\n}\n\n"}},"statesWithData":{"name":"statesWithData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let stateList = [];\n\nfor(let state in cleanedData) {\n    stateList.push(state);\n}\n\nreturn stateList;","supplementalCode":""}},"countiesWithData":{"name":"countiesWithData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let stateMap = {};\n\nfor(let state in cleanedData) {\n    let stateEntry = cleanedData[state];\n    let countyList = [];\n    for(let county in stateEntry.counties) {\n        countyList.push(county);\n    }\n    if(countyList.length > 0) {\n        stateMap[state] = countyList;\n    }\n}\n\nreturn stateMap;","supplementalCode":""}},"statesWithCountyData":{"name":"statesWithCountyData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let stateList = [];\nfor(let state in countiesWithData) {\n    stateList.push(state);\n}\nreturn stateList;","supplementalCode":""}}}},"dataProcessingUtilities":{"name":"dataProcessingUtilities","type":"apogee.Folder","children":{"smoothData":{"name":"smoothData","type":"apogee.FolderFunction","updateData":{"argList":["dataArray","N"],"returnValue":"results"},"children":{"body":{"name":"body","type":"apogee.Folder","children":{"dataArray":{"name":"dataArray","type":"apogee.JsonMember","updateData":{"data":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,11,29,39,51,78,106,131,157,196,242,381,517,587,694,825,899,987,1060,1233,1495,1614,1765,1952,2169,2328,2703,2947,3217,3563,3734,3953,4075,4345,4571,4712]}},"results":{"name":"results","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let data = {};\ndata.filteredDataArray = fullLengthBezierPoints;\ndata.filteredDifferenceArray = fullLengthBezierSlope;\nreturn data;","supplementalCode":""}},"AMatrix":{"name":"AMatrix","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return piecewiseLinearModel.createTridiag(workingInputData.length);","supplementalCode":""}},"bVector":{"name":"bVector","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return piecewiseLinearModel.createBVector(workingInputData);","supplementalCode":""}},"solutionVector":{"name":"solutionVector","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return tridiagPage.tridiagSolver(AMatrix,bVector);","supplementalCode":""}},"interpolatedData":{"name":"interpolatedData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let outData = [];\nlet previousShortValue;\nfor(let shortIndex = 0; shortIndex < solutionVector.length; shortIndex++) {\n    let currentShortValue = solutionVector[shortIndex];\n    if(previousShortValue !== undefined) {\n        //interpolate the intermediate points\n        for(let intermediateIndex = 1; intermediateIndex < N; intermediateIndex++) {\n            let intermediateValue = previousShortValue + (currentShortValue - previousShortValue) * (intermediateIndex / N);\n            outData.push(intermediateValue);\n        }\n    }\n    outData.push(currentShortValue);\n    previousShortValue = currentShortValue;\n}\nreturn outData;","supplementalCode":""}},"workingInputData":{"name":"workingInputData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let goodLength = 1 + Math.floor( (dataArray.length - 1) / N) * N;\nlet pointsToTruncate = dataArray.length - goodLength;\n\nreturn dataArray.slice(pointsToTruncate);","supplementalCode":""}},"workingInputLabels":{"name":"workingInputLabels","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"if( (!labelArray)||(!Array.isArray(labelArray))||(labelArray.length == 0)) return null; \nif(labelArray.length != dataArray.length) return {Eror: \"Invalid input label array\"};\n\nlet goodLength = 1 + Math.floor( (labelArray.length - 1) / N) * N;\nlet pointsToTruncate = labelArray.length - goodLength;\n\nreturn labelArray.slice(pointsToTruncate);","supplementalCode":""}},"piecewiseLinearModel":{"name":"piecewiseLinearModel","type":"apogee.Folder","children":{"c1":{"name":"c1","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let value = 0;\nfor(let n = 1; n < N; n++) {\n    value += Math.pow( (N-n)/N , 2 );\n}\n\nreturn value;","supplementalCode":""}},"c2":{"name":"c2","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let value = 0;\nfor(let n = 1; n < N; n++) {\n    value += ((N-n) * n)/ (N*N)\n}\nreturn value;\n","supplementalCode":""}},"createBVector":{"name":"createBVector","type":"apogee.FunctionMember","updateData":{"argList":["data"],"functionBody":"let b = [];\nlet bLength = 1 + (data.length - 1) / N;\n\nfor(let bIndex = 0; bIndex < bLength; bIndex++) {\n    let bValue = 0;\n    for(let n = -N+1; n < N; n++) {\n        let dataIndex = bIndex * N + n;\n        if((dataIndex >= 0)&&(dataIndex < data.length)) {\n            bValue += (data[dataIndex] * (N-Math.abs(n))/N); \n        }\n    }\n    b.push(bValue);\n}\nreturn b;","supplementalCode":""}},"createTridiag":{"name":"createTridiag","type":"apogee.FunctionMember","updateData":{"argList":["dataLength"],"functionBody":"let A = [];\nlet ALength = 1 + (dataLength - 1) / N;\n//first row\nA.push([0,1+c1,c2]);\nfor(let index = 1; index < ALength-1; index++) {\n    A.push([c2,1+2*c1,c2]);\n}\n//last row\nA.push([c2,1+c1,0]);\nreturn A;","supplementalCode":""}}}},"tridiagPage":{"name":"tridiagPage","type":"apogee.Folder","children":{"AMatrix":{"name":"AMatrix","type":"apogee.JsonMember","updateData":{"data":[[0,1,1],[1,2,1],[1,2,0]]}},"bVector":{"name":"bVector","type":"apogee.JsonMember","updateData":{"data":[3,4,3]}},"xVector":{"name":"xVector","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return tridiagSolver(AMatrix,bVector);","supplementalCode":""}},"test":{"name":"test","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return tridiagMultiply(AMatrix,xVector);","supplementalCode":""}},"tridiagSolver":{"name":"tridiagSolver","type":"apogee.FunctionMember","updateData":{"argList":["A","b"],"functionBody":"//make sure out format is correct\nlet rows = A.length;\nif((A[0][0] != 0)||(A[rows-1][2] != 0)||(b.length != A.length)) throw new Error(\"Improper tridiag format\");\n\n//get in a solvable form\nlet ANew = [];\nlet bNew = [];\nlet curRow = A[0];\nlet curRowB = b[0];\nlet newRow;\nlet newRowB;\nfor(let r = 0; r < rows; r++) {\n    //scale this row so the diag value is one\n    let newRow = [0,1,curRow[2]/curRow[1]];\n    let newRowB = curRowB/curRow[1];\n    \n    //store these values\n    ANew.push(newRow);\n    prevRow = newRow;\n    bNew.push(newRowB);\n    prevRowB = newRowB;\n    \n    //subtract current from from next soit is upper diag\n    if(r < rows-1) {\n        let nextRow = A[r+1];\n        let nextRowB = b[r+1];\n        \n        let factor = nextRow[0];\n        curRow = [0,nextRow[1] - prevRow[2]*factor,nextRow[2]];\n        curRowB = nextRowB - prevRowB*factor;\n    }\n}\n\n//no wwe can solve starting with the last row\nxRev = [];\nxRowNext = 0; //this is the x value of the next row\nfor(let r = rows-1; r >= 0; r--) {\n    curRow = ANew[r];\n    curRowB = bNew[r];\n    let xRow = (curRowB - curRow[2] * xRowNext); //remember curRow[1] = 1 and curRow[0] = 0\n    xRev.push(xRow);\n    xRowNext = xRow;\n}\n\nreturn xRev.reverse();\n\n\n","supplementalCode":""}},"tridiagMultiply":{"name":"tridiagMultiply","type":"apogee.FunctionMember","updateData":{"argList":["A","x"],"functionBody":"let rows = A.length;\n\nlet b = [];\nfor(let r = 0; r < rows; r++) {\n    let row = A[r];\n    let value = 0;\n    if(r > 0) value += row[0] * x[r-1];\n    value += row[1] * x[r];\n    if(r < rows-1) value += row[2] * x[r+1];\n    b.push(value);\n}\n\nreturn b;","supplementalCode":""}}}},"lineSegmentInfo":{"name":"lineSegmentInfo","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let data = [];\nlet previousPoint;\nlet segmentLength = N;\nfor(index = 0; index < solutionVector.length; index++) {\n    let currentEntry;\n    let currentPoint = [segmentLength * index,solutionVector[index]];\n    \n    if(previousPoint) {\n        let segmentEntry = {};\n        segmentEntry.slope = (currentPoint[1] - previousPoint[1])/(currentPoint[0] - previousPoint[0])\n        segmentEntry.midPoint = [(currentPoint[0] + previousPoint[0])/2,(currentPoint[1] + previousPoint[1])/2];\n        data.push(segmentEntry);\n    }\n     \n    previousPoint = currentPoint;\n}\nreturn data;","supplementalCode":""}},"bezierSegmentInfo":{"name":"bezierSegmentInfo","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let segmentLength = N;\nlet controlPointLength = N/3;\n\nlet data = [];\n\n//start point - for this we will create a virtual point one segment length back from out first line midpoint\nlet firstInfo = _getPointInfo(0);\nlet firstBezierEntry = {};\nlet startVirtualPoint = _createPoint(firstInfo.point,firstInfo.slope,-segmentLength);\nfirstBezierEntry.p0 = startVirtualPoint;\nfirstBezierEntry.p1 = _createPoint(startVirtualPoint,firstInfo.slope,controlPointLength);\nfirstBezierEntry.p3 = firstInfo.point;\nfirstBezierEntry.p2 = _createPoint(firstInfo.point,firstInfo.slope,-controlPointLength);\ndata.push(firstBezierEntry);\n\n//normal points\nlet previousInfo = firstInfo;\nlet previousLineEntry = firstLineEntry;\nfor(let index = 1; index < lineSegmentInfo.length; index++) {\n    let currentLineEntry = lineSegmentInfo[index];\n    let currentInfo = _getPointInfo(index);\n    \n    let bezierEntry = {};\n    bezierEntry.p0 = previousInfo.point;\n    bezierEntry.p1 = _createPoint(previousInfo.point,previousInfo.slope,controlPointLength);\n    \n    bezierEntry.p3 = currentInfo.point;\n    bezierEntry.p2 = _createPoint(currentInfo.point,currentInfo.slope,-controlPointLength);\n    data.push(bezierEntry);\n    \n    previousInfo = currentInfo;\n}\n\n//end point - for this we will create a virtual point one segment length forward from out last line midpoint\nlet lastInfo = _getPointInfo(lineSegmentInfo.length-1);\nlet lastBezierEntry = {};\nlet endVirtualPoint = _createPoint(lastInfo.point,lastInfo.slope,segmentLength);\nlastBezierEntry.p0 = lastInfo.point;\nlastBezierEntry.p1 = _createPoint(lastInfo.point,lastInfo.slope,controlPointLength);\nlastBezierEntry.p3 = endVirtualPoint;\nlastBezierEntry.p2 = _createPoint(endVirtualPoint,lastInfo.slope,-controlPointLength);\ndata.push(lastBezierEntry);\n\nreturn data;","supplementalCode":"//This function gets the corrected point information for a given index\nfunction _getPointInfo(pointIndex) {\n    let lineEntry = lineSegmentInfo[pointIndex];\n    let deltaY = yCorrections[pointIndex];\n    let point = [lineEntry.midPoint[0],lineEntry.midPoint[1] + deltaY];\n    return {point: point, slope: lineEntry.slope};\n}\n\n//This creates a new point by projecting away from the input point\nfunction _createPoint(point,slope,deltaX) {\n    return [point[0] + deltaX, point[1] + slope * deltaX];\n}"}},"bezierInterpolatedData":{"name":"bezierInterpolatedData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let data = [];\n//init bezier data\nlet bezierSegmentIndex = 0;\nlet bezierSegment = bezierSegmentInfo[bezierSegmentIndex];\nlet getNextBezierSegment = () => {\n    bezierSegmentIndex++;\n    return bezierSegmentInfo[bezierSegmentIndex];\n}\nlet dtdx = 1/N;\n\n//get the bezier calculated values\nfor(let x = 0; x < workingInputData.length; x++) {\n     let entry = {};\n     entry.x = x;\n    \n    if(bezierSegment.p3[0] < x) bezierSegment = getNextBezierSegment();\n    let t = _getBezierT(bezierSegment,x);\n    \n    entry.y = _getBezierPointY(bezierSegment,t);\n    entry.dydx = _getBezierDerivativeY(bezierSegment,t) * dtdx;\n    data.push(entry);\n}\nreturn data;\n","supplementalCode":"function _getBezierT(bezierSegment,x) {\n    //here t is the fractional distance from start to end. This calculation is easy for our choice of control points \n    return (x - bezierSegment.p0[0])/(bezierSegment.p3[0] - bezierSegment.p0[0]);\n}\n\nfunction _getBezierPointY(bezierSegment,t) {\n    return Math.pow(1-t,3) * bezierSegment.p0[1] + 3 * Math.pow(1-t,2) * t * bezierSegment.p1[1] +  3 * (1-t) * Math.pow(t,2) * bezierSegment.p2[1] + Math.pow(t,3) * bezierSegment.p3[1];\n}\n\nfunction _getBezierDerivativeY(bezierSegment,t) {\n    return 3 * Math.pow(1-t,2) * (bezierSegment.p1[1] - bezierSegment.p0[1]) + 6 * (1-t) * t * (bezierSegment.p2[1] - bezierSegment.p1[1]) +  3 * Math.pow(t,2) * ( bezierSegment.p3[1] - bezierSegment.p2[1]);\n}\n\nfunction _getBezierSecondDerivativeY(bezierInfo,t) {\n    return 6 * (1-t) * (bezierSegment.p2[1] - 2 * bezierSegment.p0[1] + bezierInfo.anchorPoint) +  6 * t * ( bezierSegment.p3[1] - 2 * bezierSegment.p2[1] + bezierSegment.p1[1]);\n}\n"}},"bezierPoints":{"name":"bezierPoints","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return bezierInterpolatedData.map( entry => entry.y);","supplementalCode":""}},"bezierSlope":{"name":"bezierSlope","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return bezierInterpolatedData.map( entry => entry.dydx);","supplementalCode":""}},"yCorrections":{"name":"yCorrections","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let correctionArray = [];\n\nfor(let index = 0; index < lineSegmentInfo.length; index++) {\n    //get the change in slope between neighboring segments\n    let currentSegment = lineSegmentInfo[index];\n    let deltaSlopeSum = 0;\n    let deltaSlopeCount = 0;\n    if(index > 0) {\n        let previousSegment = lineSegmentInfo[index-1];\n        deltaSlopeSum += currentSegment.slope - previousSegment.slope;\n        deltaSlopeCount++;\n    }\n    if(index < lineSegmentInfo.length-1) {\n        let nextSegment = lineSegmentInfo[index+1];\n        deltaSlopeSum += nextSegment.slope - currentSegment.slope;\n        deltaSlopeCount++;\n    }\n    //average our slope changes and divide by the length for the change\n    let d2ydx2 = (deltaSlopeSum/deltaSlopeCount)/N\n    \n    //get the y correction the correct for curvature\n    let yCorrection = -Math.pow(N,2) * d2ydx2 / 24;\n    correctionArray.push(yCorrection);\n}\n\nreturn correctionArray;","supplementalCode":""}},"N":{"name":"N","type":"apogee.JsonMember","updateData":{"data":5}},"startIndex":{"name":"startIndex","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let goodLength = 1 + Math.floor( (dataArray.length - 1) / N) * N;\nreturn dataArray.length - goodLength;","supplementalCode":""}},"fullLengthBezierPoints":{"name":"fullLengthBezierPoints","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return prefixPoints.concat(bezierPoints);","supplementalCode":""}},"prefixPoints":{"name":"prefixPoints","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let points = new Array(startIndex);\n\npoints.fill(0);\n\nreturn points;","supplementalCode":""}},"fullLengthBezierSlope":{"name":"fullLengthBezierSlope","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return prefixPoints.concat(bezierSlope);","supplementalCode":""}}}}}},"differenceFunction":{"name":"differenceFunction","type":"apogee.FunctionMember","updateData":{"argList":["inData"],"functionBody":"let previousValue = 0;\nreturn inData.map( (value,index) => {\n    let delta = value - previousValue;\n    previousValue = value;\n    return delta;\n})","supplementalCode":""}},"multiplyFunction":{"name":"multiplyFunction","type":"apogee.FunctionMember","updateData":{"argList":["inData","multiplier"],"functionBody":"return inData.map( value => value*multiplier);","supplementalCode":""}}}},"statePlots":{"name":"statePlots","type":"apogee.Folder","children":{"stateSelector":{"name":"stateSelector","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.FunctionMember","updateData":{"argList":[],"functionBody":"return [\n    {\n        type: \"checkboxGroup\",\n        entries: processedData.statesWithData,\n        key: \"states\",\n        horizontal: true\n    }\n]","supplementalCode":""}},"data":{"name":"data","type":"apogee.JsonMember","updateData":{"data":{"states":["Arizona","Florida","Mississippi","South Carolina"]}}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionMember","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":""}}}},"settings":{"name":"settings","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let settings = {};\nif(graphingOptions.data.plotDataType) {\n    settings.doFiltered = (graphingOptions.data.plotDataType.indexOf(\"filteredData\") >= 0);\n    settings.doRaw = (graphingOptions.data.plotDataType.indexOf(\"rawData\") >= 0);\n}\nelse {\n    settings.doFiltered = true;\n    settings.doRaw = false;\n}\nsettings.scaling = (graphingOptions.data.scaling == \"total\") ? \"total\" : \"percapita\";\nsettings.yScaleType =  (graphingOptions.data.yScaleType == \"logarithmic\") ? \"logarithmic\" : \"linear\";\n\nreturn settings;","supplementalCode":""}},"graphingOptions":{"name":"graphingOptions","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.FunctionMember","updateData":{"argList":[],"functionBody":"return [\n    {\n        type: \"checkboxGroup\",\n        label: \"Plot Data: \",\n        entries: [[\"Filtered Data\",\"filteredData\"],[\"Raw Data\",\"rawData\"]],\n        horizontal: true,\n        key: \"plotDataType\"\n    },\n    {\n        type: \"radioButtonGroup\",\n        label: \"Total or Per Capita: \",\n        entries: [[\"Total\",\"total\"],[\"Per Capita\",\"percapita\"]],\n        horizontal: true,\n        key: \"scaling\"\n    } /*,\n    {\n        type: \"radioButtonGroup\",\n        label: \"Y Scale: \",\n        entries: [[\"Linear\",\"linear\"],[\"Logarithmic\",\"logarithmic\"]],\n        horizontal: true,\n        key: \"yScaleType\"\n    }  */\n]","supplementalCode":""}},"data":{"name":"data","type":"apogee.JsonMember","updateData":{"data":{"plotDataType":["filteredData"],"scaling":"percapita"}}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionMember","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":""}}},"childrenNotWriteable":true},"selectedStateEntries":{"name":"selectedStateEntries","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let states = stateSelector.data.states;\nif((states)&&(states.length > 0)) {\n    return states.map( state => processedData.cleanedData[state]);\n}\nelse {\n    return [];\n}","supplementalCode":""}},"chartConfigMap":{"name":"chartConfigMap","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return graphingUtilities.createCombinedChartConfigData(selectedStateEntries,dataDownload.dateList,settings,\"state\");","supplementalCode":""}},"casesChart":{"name":"casesChart","type":"apogee.Folder","children":{"formData":{"name":"formData","type":"apogee.JsonMember","updateData":{"data":{"inputType":"config","configFormat":"apogee","chartType":"line","configJson":"chartConfigMap.cases"}}},"formResult":{"name":"formResult","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let output = {};\noutput[\"inputType\"] = \"config\"\noutput[\"configFormat\"] = \"apogee\"\noutput[\"chartType\"] = \"line\"\noutput[\"configJson\"] = chartConfigMap.cases\noutput[\"storedFormValue\"] = {\"inputType\":\"config\",\"configFormat\":\"apogee\",\"chartType\":\"line\",\"configJson\":\"chartConfigMap.cases\"}\nreturn output;","supplementalCode":"","contextParentGeneration":2}},"data":{"name":"data","type":"apogeeapp.ChartJSCell-data"}}},"newCasesChart":{"name":"newCasesChart","type":"apogee.Folder","children":{"formData":{"name":"formData","type":"apogee.JsonMember","updateData":{"data":{"inputType":"config","configFormat":"apogee","chartType":"line","configJson":"chartConfigMap.newCases"}}},"formResult":{"name":"formResult","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let output = {};\noutput[\"inputType\"] = \"config\"\noutput[\"configFormat\"] = \"apogee\"\noutput[\"chartType\"] = \"line\"\noutput[\"configJson\"] = chartConfigMap.newCases\noutput[\"storedFormValue\"] = {\"inputType\":\"config\",\"configFormat\":\"apogee\",\"chartType\":\"line\",\"configJson\":\"chartConfigMap.newCases\"}\nreturn output;","supplementalCode":"","contextParentGeneration":2}},"data":{"name":"data","type":"apogeeapp.ChartJSCell-data"}}},"deathsChart":{"name":"deathsChart","type":"apogee.Folder","children":{"formData":{"name":"formData","type":"apogee.JsonMember","updateData":{"data":{"inputType":"config","configFormat":"apogee","chartType":"line","configJson":"chartConfigMap.deaths"}}},"formResult":{"name":"formResult","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let output = {};\noutput[\"inputType\"] = \"config\"\noutput[\"configFormat\"] = \"apogee\"\noutput[\"chartType\"] = \"line\"\noutput[\"configJson\"] = chartConfigMap.deaths\noutput[\"storedFormValue\"] = {\"inputType\":\"config\",\"configFormat\":\"apogee\",\"chartType\":\"line\",\"configJson\":\"chartConfigMap.deaths\"}\nreturn output;","supplementalCode":"","contextParentGeneration":2}},"data":{"name":"data","type":"apogeeapp.ChartJSCell-data"}}},"newDeathsChart":{"name":"newDeathsChart","type":"apogee.Folder","children":{"formData":{"name":"formData","type":"apogee.JsonMember","updateData":{"data":{"inputType":"config","configFormat":"apogee","chartType":"line","configJson":"chartConfigMap.newDeaths"}}},"formResult":{"name":"formResult","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let output = {};\noutput[\"inputType\"] = \"config\"\noutput[\"configFormat\"] = \"apogee\"\noutput[\"chartType\"] = \"line\"\noutput[\"configJson\"] = chartConfigMap.newDeaths\noutput[\"storedFormValue\"] = {\"inputType\":\"config\",\"configFormat\":\"apogee\",\"chartType\":\"line\",\"configJson\":\"chartConfigMap.newDeaths\"}\nreturn output;","supplementalCode":"","contextParentGeneration":2}},"data":{"name":"data","type":"apogeeapp.ChartJSCell-data"}}}}},"countyPlots":{"name":"countyPlots","type":"apogee.Folder","children":{"graphingOptions":{"name":"graphingOptions","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.FunctionMember","updateData":{"argList":[],"functionBody":"return [\n    {\n        type: \"checkboxGroup\",\n        label: \"Plot Data: \",\n        entries: [[\"Filtered Data\",\"filteredData\"],[\"Raw Data\",\"rawData\"]],\n        horizontal: true,\n        key: \"plotDataType\"\n    },\n    {\n        type: \"radioButtonGroup\",\n        label: \"Total or Per Capita: \",\n        entries: [[\"Total\",\"total\"],[\"Per Capita\",\"percapita\"]],\n        horizontal: true,\n        key: \"scaling\"\n    } /*,\n    {\n        type: \"radioButtonGroup\",\n        label: \"Y Scale: \",\n        entries: [[\"Linear\",\"linear\"],[\"Logarithmic\",\"logarithmic\"]],\n        horizontal: true,\n        key: \"yScaleType\"\n    }  */\n]","supplementalCode":""}},"data":{"name":"data","type":"apogee.JsonMember","updateData":{"data":{"plotDataType":["filteredData"],"scaling":"percapita"}}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionMember","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":""}}},"childrenNotWriteable":true},"stateSelector":{"name":"stateSelector","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.FunctionMember","updateData":{"argList":[],"functionBody":"//create the layout with a state dropdown\nlet layout = [\n    {\n        type: \"dropdown\",\n        entries: processedData.statesWithCountyData, \n        key: \"state\"\n    }\n]\n\nreturn layout;","supplementalCode":"function _getCountySelector(stateEntry) {\n    let countyList = [];\n    for(let countyName in stateEntry.regions) {\n        countyList.push(countyName);\n    }\n    \n    return {\n        type: \"checkboxGroup\",\n        entries: countyList.map( value => [value + \"\\t\",value]), //the tab is added for better spacing. \n        key: stateEntry.name + \"|county\",\n        horizontal: true,\n        selector: {\n            parentKey: \"state\",\n            parentValue: stateEntry.name\n        }\n    }\n}"}},"data":{"name":"data","type":"apogee.JsonMember","updateData":{"data":{"state":"California"}}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionMember","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":""}}}},"countySelector":{"name":"countySelector","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.FunctionMember","updateData":{"argList":[],"functionBody":"let state = stateSelector.data.state;\nlet countyList;\nif(state) {\n    countyList = processedData.countiesWithData[state];\n}\nelse {\n    countyList = [];\n}\n\n//create a checkbox group with all counties\nreturn [\n    {\n        type: \"invisible\",\n        value: state,\n        key: \"state\"\n    },\n    {\n        type: \"checkboxGroup\",\n        entries: countyList,\n        key: state + \"|counties\",\n        horizontal: true\n    }\n]","supplementalCode":""}},"data":{"name":"data","type":"apogee.JsonMember","updateData":{"data":{"state":"Alaska","California|counties":["Alameda","Contra Costa","San Francisco","San Mateo","Santa Clara"]}}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionMember","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":""}}}},"settings":{"name":"settings","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let settings = {};\nif(graphingOptions.data.plotDataType) {\n    settings.doFiltered = (graphingOptions.data.plotDataType.indexOf(\"filteredData\") >= 0);\n    settings.doRaw = (graphingOptions.data.plotDataType.indexOf(\"rawData\") >= 0);\n}\nelse {\n    settings.doFiltered = true;\n    settings.doRaw = false;\n}\nsettings.scaling = (graphingOptions.data.scaling == \"total\") ? \"total\" : \"percapita\";\nsettings.yScaleType =  (graphingOptions.data.yScaleType == \"logarithmic\") ? \"logarithmic\" : \"linear\";\n\nreturn settings;","supplementalCode":""}},"selectedCountyEntries":{"name":"selectedCountyEntries","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let state = stateSelector.data.state;\nlet counties = countySelector.data[state + \"|counties\"];\nif((counties)&&(counties.length > 0)) {\n    return counties.map( county => processedData.cleanedData[state].counties[county]);\n}\nelse {\n    return [];\n}","supplementalCode":""}},"chartConfigMap":{"name":"chartConfigMap","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return graphingUtilities.createCombinedChartConfigData(selectedCountyEntries,dataDownload.dateList,settings,\"county\");","supplementalCode":""}},"casesChart":{"name":"casesChart","type":"apogee.Folder","children":{"formData":{"name":"formData","type":"apogee.JsonMember","updateData":{"data":{"inputType":"config","configFormat":"apogee","chartType":"line","configJson":"chartConfigMap.cases"}}},"formResult":{"name":"formResult","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let output = {};\noutput[\"inputType\"] = \"config\"\noutput[\"configFormat\"] = \"apogee\"\noutput[\"chartType\"] = \"line\"\noutput[\"configJson\"] = chartConfigMap.cases\noutput[\"storedFormValue\"] = {\"inputType\":\"config\",\"configFormat\":\"apogee\",\"chartType\":\"line\",\"configJson\":\"chartConfigMap.cases\"}\nreturn output;","supplementalCode":"","contextParentGeneration":2}},"data":{"name":"data","type":"apogeeapp.ChartJSCell-data"}}},"newCasesChart":{"name":"newCasesChart","type":"apogee.Folder","children":{"formData":{"name":"formData","type":"apogee.JsonMember","updateData":{"data":{"inputType":"config","configFormat":"apogee","chartType":"line","configJson":"chartConfigMap.newCases"}}},"formResult":{"name":"formResult","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let output = {};\noutput[\"inputType\"] = \"config\"\noutput[\"configFormat\"] = \"apogee\"\noutput[\"chartType\"] = \"line\"\noutput[\"configJson\"] = chartConfigMap.newCases\noutput[\"storedFormValue\"] = {\"inputType\":\"config\",\"configFormat\":\"apogee\",\"chartType\":\"line\",\"configJson\":\"chartConfigMap.newCases\"}\nreturn output;","supplementalCode":"","contextParentGeneration":2}},"data":{"name":"data","type":"apogeeapp.ChartJSCell-data"}}},"deathsChart":{"name":"deathsChart","type":"apogee.Folder","children":{"formData":{"name":"formData","type":"apogee.JsonMember","updateData":{"data":{"inputType":"config","configFormat":"apogee","chartType":"line","configJson":"chartConfigMap.deaths"}}},"formResult":{"name":"formResult","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let output = {};\noutput[\"inputType\"] = \"config\"\noutput[\"configFormat\"] = \"apogee\"\noutput[\"chartType\"] = \"line\"\noutput[\"configJson\"] = chartConfigMap.deaths\noutput[\"storedFormValue\"] = {\"inputType\":\"config\",\"configFormat\":\"apogee\",\"chartType\":\"line\",\"configJson\":\"chartConfigMap.deaths\"}\nreturn output;","supplementalCode":"","contextParentGeneration":2}},"data":{"name":"data","type":"apogeeapp.ChartJSCell-data"}}},"newDeathsChart":{"name":"newDeathsChart","type":"apogee.Folder","children":{"formData":{"name":"formData","type":"apogee.JsonMember","updateData":{"data":{"inputType":"config","configFormat":"apogee","chartType":"line","configJson":"chartConfigMap.newDeaths"}}},"formResult":{"name":"formResult","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let output = {};\noutput[\"inputType\"] = \"config\"\noutput[\"configFormat\"] = \"apogee\"\noutput[\"chartType\"] = \"line\"\noutput[\"configJson\"] = chartConfigMap.newDeaths\noutput[\"storedFormValue\"] = {\"inputType\":\"config\",\"configFormat\":\"apogee\",\"chartType\":\"line\",\"configJson\":\"chartConfigMap.newDeaths\"}\nreturn output;","supplementalCode":"","contextParentGeneration":2}},"data":{"name":"data","type":"apogeeapp.ChartJSCell-data"}}}}},"graphingUtilities":{"name":"graphingUtilities","type":"apogee.Folder","children":{"scaleForPopulation":{"name":"scaleForPopulation","type":"apogee.FunctionMember","updateData":{"argList":["timeSeries","population"],"functionBody":"let multiplier = BASE_POPULATION_SCALE / population;\nreturn dataProcessingUtilities.multiplyFunction(timeSeries,multiplier);","supplementalCode":""}},"getDataSeriesConfig":{"name":"getDataSeriesConfig","type":"apogee.FunctionMember","updateData":{"argList":["timeSeries","label","color","lineStyle"],"functionBody":"return {\n\t\"dataType\": \"array\",\n\t\"dataArray\": timeSeries,\n\t\"options\": {\n\t\t\"label\": label,\n \t\t\"line\": {\n \t\t\t\"borderColor\": color,\n \t\t\t\"borderDash\": lineStyle\n \t\t}\n\t}\n}","supplementalCode":""}},"getChartOptionsConfig":{"name":"getChartOptionsConfig","type":"apogee.FunctionMember","updateData":{"argList":["title","yScaleType"],"functionBody":"return {\n\t\"xValuesType\": \"category\",\n\t\"title\": {\n\t\t\"display\": true,\n\t\t\"text\": title\n\t},\n\t\"legend\": {\n\t\t\"display\": true\n\t},\n\t\"point\": {\n\t\t\"showPoints\": false,\n\t},\n\t\"line\": {\n\t    borderWidth: 1\n\t},\n\t\"yAxes\": {\n\t\t\"type\": yScaleType\n\t}\n}","supplementalCode":""}},"getColor":{"name":"getColor","type":"apogee.FunctionMember","updateData":{"argList":["index"],"functionBody":"return lineColors[ index % lineColors.length];","supplementalCode":""}},"lineColors":{"name":"lineColors","type":"apogee.JsonMember","updateData":{"data":["blue","red","green","orange","purple","cyan","brown","black"]}},"LINE_STYLE_SOLID":{"name":"LINE_STYLE_SOLID","type":"apogee.JsonMember","updateData":{"data":[]}},"LINE_STYLE_DASH":{"name":"LINE_STYLE_DASH","type":"apogee.JsonMember","updateData":{"data":[4,2]}},"BASE_POPULATION_SCALE":{"name":"BASE_POPULATION_SCALE","type":"apogee.JsonMember","updateData":{"data":1000000}},"FILTER_LENGTH":{"name":"FILTER_LENGTH","type":"apogee.JsonMember","updateData":{"data":7}},"createCombinedChartConfigData":{"name":"createCombinedChartConfigData","type":"apogee.FolderFunction","updateData":{"argList":["dataEntries","categoryList","settings","dataEntryNameKey"],"returnValue":"chartConfigMap"},"children":{"body":{"name":"body","type":"apogee.Folder","children":{"dataEntries":{"name":"dataEntries","type":"apogee.JsonMember","updateData":{"data":[{"county":"Monongalia","state":"West Virginia","latlon":[39.63218457,-80.04766838],"cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,5,16,18,24,23,29,31,31,32,35,35,40,49,53,60,68,76,78,78,81,83,81,83,83,83,84,87,90,89,90,89,97,97,101,102,103,103,102,102,105,105,107,108,108,111,111,111,114,113,114,114,114,114,115,117,116,116,118,118,119,119,121,121,121,129,131,132,133,133,133,137,135,135,138,140,141,141,141,142,142,142,143,145,145,145,147,147,149,150,151,154,160,159,161,164,166,167,171,171,180,193,207,230,240,299,309,395,419,468,524,539,568,610,638,648,669,701,727,754,763,767,799,806,814,817,830,840,855,867,885,909,916,925,929,929,929,935,938,939,945,950,953,962,973,986,989,992,1001,1003,1014,1030,1040,1053,1060,1059,1072,1075,1083,1093,1113,1126,1170,1209,1259,1294,1342,1371,1401,1433,1504,1547,1581,1661,1691,1715,1745,1768,1791,1836,1867,1876,1902,1936,1948,1959,1980,1992,1999],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"population":105612}]}},"settings":{"name":"settings","type":"apogee.JsonMember","updateData":{"data":{"doFiltered":true,"doRaw":true,"scaling":"total","yScaleType":"linear"}}},"unformattedChartData":{"name":"unformattedChartData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let data = [];\nfor(let i = 0; i < dataEntries.length; i++) {\n    let inputEntry = dataEntries[i];\n    let dataEntry = {};\n    dataEntry.name = inputEntry[dataEntryNameKey];\n    if(settings.doFiltered) {\n        let filteredCasesData = dataProcessingUtilities.smoothData(inputEntry.cases,graphingUtilities.FILTER_LENGTH);\n        dataEntry.filteredCases = filteredCasesData.filteredDataArray;\n        dataEntry.filteredNewCases = filteredCasesData.filteredDifferenceArray;\n        \n        let filteredDeathsData = dataProcessingUtilities.smoothData(inputEntry.deaths,graphingUtilities.FILTER_LENGTH);\n        dataEntry.filteredDeaths = filteredDeathsData.filteredDataArray;\n        dataEntry.filteredNewDeaths = filteredDeathsData.filteredDifferenceArray;\n    }\n    if(settings.doRaw) {\n        dataEntry.rawCases = inputEntry.cases;\n        dataEntry.rawNewCases = dataProcessingUtilities.differenceFunction(inputEntry.cases);\n        \n        dataEntry.rawDeaths = inputEntry.deaths;\n        dataEntry.rawNewDeaths = dataProcessingUtilities.differenceFunction(inputEntry.deaths);\n    }\n    //if we want per capita data, we will scale the data here\n    if(settings.scaling == \"percapita\") {\n        for(let key in dataEntry) {\n            if(Array.isArray(dataEntry[key])) dataEntry[key] = graphingUtilities.scaleForPopulation(dataEntry[key],inputEntry.population);\n        }\n    }\n    \n    data.push(dataEntry);\n}\nreturn data;","supplementalCode":""}},"formattedChartData":{"name":"formattedChartData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let chartConfigMap = {};\n\n//create config for each chart - add dat series later\nchartConfigMap.cases = _createConfig(categoryList,_getTitle(\"Cases\"),settings.yScaleType);\nchartConfigMap.newCases = _createConfig(categoryList,_getTitle(\"New Cases\"),settings.yScaleType);\nchartConfigMap.deaths = _createConfig(categoryList,_getTitle(\"Deaths\"),settings.yScaleType);\nchartConfigMap.newDeaths = _createConfig(categoryList,_getTitle(\"New Deaths\"),settings.yScaleType);\n\n//create the data series\nunformattedChartData.forEach( (inEntry,index) => {\n    //color for this county\n    let color = graphingUtilities.getColor(index);\n\n    if(inEntry.rawCases) _addSeries(inEntry.rawCases,inEntry.name + \" - raw\",color,graphingUtilities.LINE_STYLE_DASH,chartConfigMap.cases);\n    if(inEntry.filteredCases) _addSeries(inEntry.filteredCases,inEntry.name + \" - filtered\",color,graphingUtilities.LINE_STYLE_SOLID,chartConfigMap.cases);\n    \n    if(inEntry.rawNewCases) _addSeries(inEntry.rawNewCases,inEntry.name + \" - raw\",color,graphingUtilities.LINE_STYLE_DASH,chartConfigMap.newCases);\n    if(inEntry.filteredNewCases) _addSeries(inEntry.filteredNewCases,inEntry.name + \" - filtered\",color,graphingUtilities.LINE_STYLE_SOLID,chartConfigMap.newCases);\n    \n    if(inEntry.rawDeaths) _addSeries(inEntry.rawDeaths,inEntry.name + \" - raw\",color,graphingUtilities.LINE_STYLE_DASH,chartConfigMap.deaths);\n    if(inEntry.filteredDeaths) _addSeries(inEntry.filteredDeaths,inEntry.name + \" - filtered\",color,graphingUtilities.LINE_STYLE_SOLID,chartConfigMap.deaths);\n    \n    if(inEntry.rawNewDeaths) _addSeries(inEntry.rawNewDeaths,inEntry.name + \" - raw\",color,graphingUtilities.LINE_STYLE_DASH,chartConfigMap.newDeaths);\n    if(inEntry.filteredNewDeaths) _addSeries(inEntry.filteredNewDeaths,inEntry.name + \" - filtered\",color,graphingUtilities.LINE_STYLE_SOLID,chartConfigMap.newDeaths);\n    \n});\n\n\nreturn chartConfigMap;","supplementalCode":"/** This sets the title to specify scaling by population or not. */\nfunction _getTitle(baseTitle) {\n    if(settings.scaling == \"percapita\") {\n        return baseTitle + \" per \" + graphingUtilities.BASE_POPULATION_SCALE + \" People\"; \n    }\n    else {\n        return baseTitle;\n    }\n}\n\n/** This creates a chart config object, not including the data series */\nfunction _createConfig(categoryList,title,yScaleType) {\n    let chartConfig = {};\n    chartConfig.xCategories = categoryList;\n    chartConfig.categoryDataSeries = [];\n    chartConfig.options = graphingUtilities.getChartOptionsConfig(title,yScaleType);\n    return chartConfig;\n}\n\n/** This creates a chart data series and adds it to the chart config. */\nfunction _addSeries(inDataArray,label,color,lineStyle,chartConfig) {\n    let seriesConfig = graphingUtilities.getDataSeriesConfig(inDataArray,label,color,lineStyle);\n    chartConfig.categoryDataSeries.push(seriesConfig);\n}"}},"dataEntryNameKey":{"name":"dataEntryNameKey","type":"apogee.JsonMember","updateData":{"data":"county"}},"chartConfigMap":{"name":"chartConfigMap","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return formattedChartData;","supplementalCode":""}},"categoryList":{"name":"categoryList","type":"apogee.JsonMember","updateData":{"data":["1/22/20","1/23/20","1/24/20","1/25/20","1/26/20","1/27/20","1/28/20","1/29/20","1/30/20","1/31/20","2/1/20","2/2/20","2/3/20","2/4/20","2/5/20","2/6/20","2/7/20","2/8/20","2/9/20","2/10/20","2/11/20","2/12/20","2/13/20","2/14/20","2/15/20","2/16/20","2/17/20","2/18/20","2/19/20","2/20/20","2/21/20","2/22/20","2/23/20","2/24/20","2/25/20","2/26/20","2/27/20","2/28/20","2/29/20","3/1/20","3/2/20","3/3/20","3/4/20","3/5/20","3/6/20","3/7/20","3/8/20","3/9/20","3/10/20","3/11/20","3/12/20","3/13/20","3/14/20","3/15/20","3/16/20","3/17/20","3/18/20","3/19/20","3/20/20","3/21/20","3/22/20","3/23/20","3/24/20","3/25/20","3/26/20","3/27/20","3/28/20","3/29/20","3/30/20","3/31/20","4/1/20","4/2/20","4/3/20","4/4/20","4/5/20","4/6/20","4/7/20","4/8/20","4/9/20","4/10/20","4/11/20","4/12/20","4/13/20","4/14/20","4/15/20","4/16/20","4/17/20","4/18/20","4/19/20","4/20/20","4/21/20","4/22/20","4/23/20","4/24/20","4/25/20","4/26/20","4/27/20","4/28/20","4/29/20","4/30/20","5/1/20","5/2/20","5/3/20","5/4/20","5/5/20","5/6/20","5/7/20","5/8/20","5/9/20","5/10/20","5/11/20","5/12/20","5/13/20","5/14/20","5/15/20","5/16/20","5/17/20","5/18/20","5/19/20","5/20/20","5/21/20","5/22/20","5/23/20","5/24/20","5/25/20","5/26/20","5/27/20","5/28/20","5/29/20","5/30/20","5/31/20","6/1/20","6/2/20","6/3/20","6/4/20","6/5/20","6/6/20","6/7/20","6/8/20","6/9/20","6/10/20","6/11/20","6/12/20","6/13/20","6/14/20","6/15/20","6/16/20","6/17/20","6/18/20","6/19/20","6/20/20","6/21/20","6/22/20","6/23/20","6/24/20","6/25/20","6/26/20","6/27/20","6/28/20","6/29/20","6/30/20","7/1/20","7/2/20","7/3/20","7/4/20","7/5/20","7/6/20","7/7/20","7/8/20","7/9/20","7/10/20","7/11/20","7/12/20","7/13/20","7/14/20","7/15/20","7/16/20","7/17/20","7/18/20","7/19/20","7/20/20","7/21/20","7/22/20","7/23/20","7/24/20","7/25/20","7/26/20","7/27/20","7/28/20","7/29/20","7/30/20","7/31/20","8/1/20","8/2/20","8/3/20","8/4/20","8/5/20","8/6/20","8/7/20","8/8/20","8/9/20","8/10/20","8/11/20","8/12/20","8/13/20","8/14/20","8/15/20","8/16/20","8/17/20","8/18/20","8/19/20","8/20/20","8/21/20","8/22/20","8/23/20","8/24/20","8/25/20","8/26/20","8/27/20","8/28/20","8/29/20","8/30/20","8/31/20","9/1/20","9/2/20","9/3/20","9/4/20","9/5/20","9/6/20","9/7/20","9/8/20","9/9/20","9/10/20","9/11/20","9/12/20","9/13/20","9/14/20","9/15/20","9/16/20","9/17/20","9/18/20","9/19/20","9/20/20","9/21/20","9/22/20","9/23/20","9/24/20","9/25/20","9/26/20","9/27/20"]}}}}}}}}}},"components":{"dataDownload":{"type":"apogeeapp.PageComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Data Download"}]},{"type":"paragraph","content":[{"type":"text","text":"This data is downloaded from a Github site managed by Johns Hopkins: https://github.com/CSSEGISandData/COVID-19."}]},{"type":"heading2","content":[{"type":"text","text":"Raw Data"}]},{"type":"paragraph","content":[{"type":"text","text":"The url below is raw cases data in csv format for the US."}]},{"type":"apogeeComponent","attrs":{"name":"usCasesUrl","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"The url below is raw cases data in csv format for the US."}]},{"type":"apogeeComponent","attrs":{"name":"usDeathsUrl","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the raw cases data."}]},{"type":"apogeeComponent","attrs":{"name":"usCasesData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the raw deaths data."}]},{"type":"apogeeComponent","attrs":{"name":"usDeathsData","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Parsed Data"}]},{"type":"paragraph","content":[{"type":"text","text":"Here we parse the downloaded CSV text data."}]},{"type":"apogeeComponent","attrs":{"name":"usCasesJson","id":0,"state":""}},{"type":"apogeeComponent","attrs":{"name":"usDeathsJson","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here we extract the column labels for the time series data (the date list). We are assuming the value of the first date, and that the US cases and US deaths have the same date range."}]},{"type":"apogeeComponent","attrs":{"name":"dateList","id":0,"state":""}},{"type":"paragraph"}]}},"children":{"usCasesUrl":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"usDeathsUrl":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":true},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"usCasesData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"usDeathsData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":true},"Private":{"isViewActive":false}}}}},"dateList":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":true},"Formula":{"height":7000,"isViewActive":true},"Private":{"isViewActive":false}}}}},"usCasesJson":{"type":"apogeeapp.ParseCSVCell","viewState":{"childDisplayState":{"views":{"Header":{"height":75,"isViewActive":false},"Data":{"height":280,"isViewActive":false},"Input":{"isViewActive":true}}}}},"usDeathsJson":{"type":"apogeeapp.ParseCSVCell","viewState":{"childDisplayState":{"views":{"Header":{"isViewActive":false},"Data":{"isViewActive":false},"Input":{"isViewActive":true}}}}}},"viewState":{"childDisplayState":null,"treeState":-1}},"processedData":{"type":"apogeeapp.PageComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Processed Data"}]},{"type":"heading2","content":[{"type":"text","text":"Cleaned Data"}]},{"type":"paragraph","content":[{"type":"text","text":"First we will collect the cases and deaths data into a single structure."}]},{"type":"apogeeComponent","attrs":{"name":"compiledData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"We will clean this data a little. We will create state data by summing county data where needed."}]},{"type":"paragraph","content":[{"type":"text","text":"If we are summing county cases and deaths data, we will sum the county population too. This may under count if we don't have all counties, but it should be a more accurate count of the population for which we have cases and deaths data."}]},{"type":"apogeeComponent","attrs":{"name":"cleanedData","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Helper Lists"}]},{"type":"paragraph","content":[{"type":"text","text":"These structures will come in hand for letting uses choose data to plot"}]},{"type":"apogeeComponent","attrs":{"name":"statesWithData","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"countiesWithData","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"statesWithCountyData","id":0,"state":""}}]}},"children":{"compiledData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"height":7000,"isViewActive":false}}}}},"cleanedData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":518,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"height":7000,"isViewActive":false}}}}},"statesWithData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"countiesWithData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"statesWithCountyData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"height":7000,"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":-1}},"dataProcessingUtilities":{"type":"apogeeapp.PageComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Data Processing Utilities"}]},{"type":"heading2","content":[{"type":"text","text":"Smoothing"}]},{"type":"paragraph","content":[{"type":"text","text":"This function smooths the data. For documentation open the associated child page."}]},{"type":"apogeeComponent","attrs":{"name":"smoothData","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Time Series Manipulation"}]},{"type":"paragraph","content":[{"type":"text","text":"This function takes a difference of entries. To end up with the same length of array, this creates a virtual entry of index -1 with value 0."}]},{"type":"apogeeComponent","attrs":{"name":"differenceFunction","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":" This function divides each entry by the input number"}]},{"type":"apogeeComponent","attrs":{"name":"multiplyFunction","id":0,"state":""}},{"type":"heading2"},{"type":"paragraph"}]}},"children":{"smoothData":{"type":"apogeeapp.PageFunctionComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"COVID Smoothing Estimator"}]},{"type":"paragraph","content":[{"type":"text","text":"This is a function that smooths the COVID data. Note that the data array may have some samples trimmed from the start, to fit a length requirement based on the filter size parameter N."}]},{"type":"heading2","content":[{"type":"text","text":"Inputs"}]},{"type":"paragraph","content":[{"type":"text","text":"This is the input array of data samples."}]},{"type":"apogeeComponent","attrs":{"name":"dataArray","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the filtering parameters in units of days (or whatever the X axis units are). This is the period over which data is averaged."}]},{"type":"apogeeComponent","attrs":{"name":"N","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Outputs"}]},{"type":"paragraph","content":[{"type":"text","text":"This is the output. It includes the following fields:"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"filteredDataArray - This is the filter data array."}]},{"type":"listItem","content":[{"type":"text","text":"filteredDifferenceArray - This is an estimate of the rate of change of the data array, in terms of the change between successive days."}]}]},{"type":"apogeeComponent","attrs":{"name":"results","id":0,"state":""}},{"type":"heading1","content":[{"type":"text","text":"Business Logic"}]},{"type":"heading2","content":[{"type":"text","text":"Modified Input Arrays"}]},{"type":"paragraph","content":[{"type":"text","text":"We are filtering here based on fixed intervals. To do this, we will NOT filter the first few points that don't create a full interval. (In our case, the end data is more meaningful from the start data, so we truncate at the start.)"}]},{"type":"apogeeComponent","attrs":{"name":"startIndex","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the \"properly\" sized array we will plug into our algorithm, "}]},{"type":"apogeeComponent","attrs":{"name":"workingInputData","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"workingInputLabels","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Piece-wise Line Fitting Calculation"}]},{"type":"paragraph","content":[{"type":"text","text":"We will break out interval into fixed size segments, given by Model.N. We will use least squares to find a series of line segment, length N, that best fit the input data."}]},{"type":"paragraph","content":[{"type":"text","text":"This is the tridiagonal matrix to find the solution"}]},{"type":"apogeeComponent","attrs":{"name":"AMatrix","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the b vector to find the solution."}]},{"type":"apogeeComponent","attrs":{"name":"bVector","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the solution for the points at the end of the line segments."}]},{"type":"apogeeComponent","attrs":{"name":"solutionVector","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here we expand the data to give a value for each point in the working input data set."}]},{"type":"apogeeComponent","attrs":{"name":"interpolatedData","id":0,"state":""}},{"type":"paragraph"},{"type":"heading2","content":[{"type":"text","text":"Bezier Interpolation"}]},{"type":"paragraph","content":[{"type":"text","text":"The above solution is a series of straight line segments. Here we will define bezier segments to get a smoother interpolation."}]},{"type":"paragraph","content":[{"type":"text","text":"The bezier points will be placed at the midpoint X of each of our line segments. The slope to the control points will be the slope of the line. We choose a length to the control points to be 1/3 the distance of between the main points. This is choosen mainly because it makes associating X and the bezier t parameter easy. (That is a weak reason. This strength of these control points could be an input. If this is done, the conversino from t to x must be improved.) "}]},{"type":"paragraph","content":[{"type":"text","text":"As for the Y value of our bezier points, they will be moved slightly from the midpoint Y value of our line segments. Curvature of the data will force the line midpoints to be above (or below) the actual data value at the midpoint X. We will attempt to correct for this offset."}]},{"type":"paragraph","content":[{"type":"text","text":"This first cell collects some information for each line segment in our above solution."}]},{"type":"apogeeComponent","attrs":{"name":"lineSegmentInfo","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This next cell calculate the Y value offset for our bezier points based off of the curvature. The curvature is measured from the change in the line segment slopes."}]},{"type":"paragraph","content":[{"type":"text","marks":[{"type":"italic"},{"type":"textcolor","attrs":{"color":"blue"}}],"text":"NOTE: The correction I derived should translate both the X and Y values for the bezier point. However, for now at least, I am requiring the X values be the specified numbers, purely because I this gives an easy correspondence between X and the bezier T parameter. If I do a proper calculation between x and t, then I can move the X values, meaning I can change the control point lengths and add other corrections to the X point values."},{"type":"text","text":"  "}]},{"type":"apogeeComponent","attrs":{"name":"yCorrections","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Below we create the collection of Bezier segments. "}]},{"type":"paragraph","content":[{"type":"text","text":"Since the bezier segments are offset from the line segments, we need a little more data at the start and end. We will create additional data at the start and end by extending the first and last line segments with a constant slope."}]},{"type":"paragraph","content":[{"type":"text","text":"This boundary condition does have a noticable impact on the data. We might want to look at other treatments. "}]},{"type":"apogeeComponent","attrs":{"name":"bezierSegmentInfo","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here we get the interpolated data for both the data and its derivative, since we are interested in the change in our data also. "}]},{"type":"apogeeComponent","attrs":{"name":"bezierInterpolatedData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here we extract the interpolated date."}]},{"type":"apogeeComponent","attrs":{"name":"bezierPoints","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here we extract the interpolated slope."}]},{"type":"apogeeComponent","attrs":{"name":"bezierSlope","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":" Adding Initial Points"}]},{"type":"paragraph","content":[{"type":"text","text":"We want our output to cover the full range of the input, which maynot be the case with our filtered data above. To fix this, temporarily, we will just concatenate zeros on the front of our data."}]},{"type":"apogeeComponent","attrs":{"name":"prefixPoints","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"fullLengthBezierPoints","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"fullLengthBezierSlope","id":0,"state":""}},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"}]}},"children":{"dataArray":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":true},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"results":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"AMatrix":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false,"height":7000}}}}},"bVector":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"solutionVector":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"interpolatedData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"workingInputData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"workingInputLabels":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":true},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"piecewiseLinearModel":{"type":"apogeeapp.PageComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Piecewise Linear Model"}]},{"type":"paragraph","content":[{"type":"text","text":"This page contains code necessary to create a piecewise linear model for a data sample. The basic idea is to place a reference point every N points of our input data, and fit the best set of these points."}]},{"type":"paragraph","content":[{"type":"text","text":"To use this page, the value N, the linear segment length in samples, must be defined within the scope of this pace. "}]},{"type":"heading2","content":[{"type":"text","text":"Parameters"}]},{"type":"paragraph","content":[{"type":"text","text":"Doing a least squares fit of the data will create a tridiagonal system. The coefficients of the fitted parameters (the A matrix) do not depend on the data. The data is only present in the b Vector (in the equations b = Ax),"}]},{"type":"paragraph","content":[{"type":"text","text":"The following two parameters compose the tridiagonal matrix."}]},{"type":"apogeeComponent","attrs":{"name":"c1","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"c2","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Model Creation Functions"}]},{"type":"paragraph","content":[{"type":"text","text":"For now I will assume the data has a number of points so we don't have any odd sized segments."}]},{"type":"apogeeComponent","attrs":{"name":"createBVector","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"We will model the tridiagonal A matrix by giving only the tridiagonal elements (so the dimensions of the matrix are m x 3)."}]},{"type":"apogeeComponent","attrs":{"name":"createTridiag","id":0,"state":""}},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"}]}},"children":{"c1":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"c2":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"createBVector":{"type":"apogeeapp.FunctionCell","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"createTridiag":{"type":"apogeeapp.FunctionCell","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":1}},"tridiagPage":{"type":"apogeeapp.PageComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Tridiagonal Matrix Solver"}]},{"type":"heading2","content":[{"type":"text","text":"Tridiagonal Solver Functions"}]},{"type":"paragraph","content":[{"type":"text","text":"This function returns the solution vector for the passed tridiagonal system. The matrix A should consist of the tridiagonal elements. It is a matrix with only 3 columns."}]},{"type":"apogeeComponent","attrs":{"name":"tridiagSolver","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This function multiplies a tridiagonal matrix by a vector."}]},{"type":"apogeeComponent","attrs":{"name":"tridiagMultiply","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Test"}]},{"type":"paragraph","content":[{"type":"text","text":"This is the input matrix. It should have dimensions of N x 3 and model a tridiagonal matrix."}]},{"type":"apogeeComponent","attrs":{"name":"AMatrix","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the b vector for the equation bVector = AMatrix * xVector;"}]},{"type":"apogeeComponent","attrs":{"name":"bVector","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the result vector from the input calculation"}]},{"type":"apogeeComponent","attrs":{"name":"xVector","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here we mutliply our solution to see it matches the original b vector."}]},{"type":"apogeeComponent","attrs":{"name":"test","id":0,"state":""}},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"}]}},"children":{"AMatrix":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"bVector":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"xVector":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"height":7000,"isViewActive":true},"Private":{"isViewActive":false}}}}},"test":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"height":7000,"isViewActive":true},"Private":{"isViewActive":false}}}}},"tridiagSolver":{"type":"apogeeapp.FunctionCell","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"tridiagMultiply":{"type":"apogeeapp.FunctionCell","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false,"height":7000}}}}}},"viewState":{"childDisplayState":null,"treeState":-1}},"lineSegmentInfo":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"bezierSegmentInfo":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":602,"isViewActive":true},"Private":{"height":7000,"isViewActive":false}}}}},"bezierInterpolatedData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"height":7000,"isViewActive":false}}}}},"bezierPoints":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"bezierSlope":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"yCorrections":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":true},"Private":{"isViewActive":false}}}}},"N":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"startIndex":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"fullLengthBezierPoints":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"prefixPoints":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"fullLengthBezierSlope":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}}},"viewState":{"treeState":-1}},"differenceFunction":{"type":"apogeeapp.FunctionCell","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"multiplyFunction":{"type":"apogeeapp.FunctionCell","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":-1}},"statePlots":{"type":"apogeeapp.PageComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"US State COVID Plots"}]},{"type":"paragraph","content":[{"type":"text","text":"We will plot the number of cases per the following population for the given states"}]},{"type":"paragraph","content":[{"type":"text","text":"This form gets some options for the graphs."}]},{"type":"apogeeComponent","attrs":{"name":"graphingOptions","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This form selects the states to plot."}]},{"type":"apogeeComponent","attrs":{"name":"stateSelector","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Charts"}]},{"type":"paragraph","content":[{"type":"text","text":"Here are the US State COVID cases and deaths graphs for the forms filled out above."}]},{"type":"apogeeComponent","attrs":{"name":"casesChart","id":0,"state":""}},{"type":"apogeeComponent","attrs":{"name":"newCasesChart","id":0,"state":""}},{"type":"apogeeComponent","attrs":{"name":"deathsChart","id":0,"state":""}},{"type":"apogeeComponent","attrs":{"name":"newDeathsChart","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Data Processing"}]},{"type":"paragraph","content":[{"type":"text","text":"These are the settings for the data we will graph, as entered from the form above, with some defaults set:"}]},{"type":"apogeeComponent","attrs":{"name":"settings","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Some Constants we will use:"}]},{"type":"heading3","content":[{"type":"text","text":"Source Data"}]},{"type":"paragraph","content":[{"type":"text","text":"These are the data series selected with the form above:"}]},{"type":"apogeeComponent","attrs":{"name":"selectedStateEntries","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Chart Configs"}]},{"type":"paragraph","content":[{"type":"text","text":"Here we convert our selected state entries into properly formatted chart config data, for the four charts we are interested in. We use a multi-cell function for this."}]},{"type":"apogeeComponent","attrs":{"name":"chartConfigMap","id":0,"state":""}},{"type":"paragraph"}]}},"children":{"stateSelector":{"type":"apogeeapp.DataFormCell","viewState":{"childDisplayState":{"views":{"Form":{"isViewActive":true},"Layout Code":{"height":7000,"isViewActive":false},"Layout Private":{"isViewActive":false,"height":7000},"isInputValid(formValue)":{"isViewActive":false},"isInputValid Private":{"isViewActive":false},"Form Value":{"isViewActive":false,"height":280}}}}},"settings":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":true},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"graphingOptions":{"type":"apogeeapp.DataFormCell","viewState":{"childDisplayState":{"views":{"Form":{"isViewActive":true},"Layout Code":{"height":7000,"isViewActive":false},"Layout Private":{"isViewActive":false},"isInputValid(formValue)":{"isViewActive":false},"isInputValid Private":{"isViewActive":false},"Form Value":{"height":280,"isViewActive":false}}}}},"selectedStateEntries":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"chartConfigMap":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":true},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"casesChart":{"type":"apogeeapp.ChartJSCell","viewState":{"childDisplayState":{"views":{"Chart":{"isViewActive":true},"Input":{"isViewActive":false}}}}},"newCasesChart":{"type":"apogeeapp.ChartJSCell","viewState":{"childDisplayState":{"views":{"Chart":{"isViewActive":true},"Input":{"isViewActive":false}}}}},"deathsChart":{"type":"apogeeapp.ChartJSCell","viewState":{"childDisplayState":{"views":{"Chart":{"isViewActive":true},"Input":{"isViewActive":false}}}}},"newDeathsChart":{"type":"apogeeapp.ChartJSCell","viewState":{"childDisplayState":{"views":{"Chart":{"isViewActive":true},"Input":{"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":1,"tabOpened":true}},"countyPlots":{"type":"apogeeapp.PageComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"US County Plots"}]},{"type":"paragraph","content":[{"type":"text","text":"We will plot the number of cases per the following population for the given counties in the selected states."}]},{"type":"paragraph","content":[{"type":"text","text":"This form gets some options for the graphs."}]},{"type":"apogeeComponent","attrs":{"name":"graphingOptions","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This form selects the states to plot."}]},{"type":"apogeeComponent","attrs":{"name":"stateSelector","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This form selects the counties to plot."}]},{"type":"apogeeComponent","attrs":{"name":"countySelector","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Charts"}]},{"type":"paragraph","content":[{"type":"text","text":"Here are the US County COVID cases and deaths graphs for the forms filled out above."}]},{"type":"apogeeComponent","attrs":{"name":"casesChart","id":0,"state":""}},{"type":"apogeeComponent","attrs":{"name":"newCasesChart","id":0,"state":""}},{"type":"apogeeComponent","attrs":{"name":"deathsChart","id":0,"state":""}},{"type":"apogeeComponent","attrs":{"name":"newDeathsChart","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Data Processing"}]},{"type":"paragraph","content":[{"type":"text","text":"These are the settings for the data we will graph, as entered from the form above, with some defaults set:"}]},{"type":"apogeeComponent","attrs":{"name":"settings","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Some Constants we will use:"}]},{"type":"heading3","content":[{"type":"text","text":"Source Data"}]},{"type":"paragraph","content":[{"type":"text","text":"These are the data series selected with the form above:"}]},{"type":"apogeeComponent","attrs":{"name":"selectedCountyEntries","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Chart Configs"}]},{"type":"paragraph","content":[{"type":"text","text":"Here we convert our selected state entries into properly formatted chart config data, for the four charts we are interested in. We use a multi-cell function for this."}]},{"type":"apogeeComponent","attrs":{"name":"chartConfigMap","id":0,"state":""}},{"type":"paragraph"}]}},"children":{"graphingOptions":{"type":"apogeeapp.DataFormCell","viewState":{"childDisplayState":{"views":{"Form":{"isViewActive":true},"Layout Code":{"height":7000,"isViewActive":false},"Layout Private":{"isViewActive":false},"isInputValid(formValue)":{"isViewActive":false},"isInputValid Private":{"isViewActive":false},"Form Value":{"height":280,"isViewActive":false}}}}},"stateSelector":{"type":"apogeeapp.DataFormCell","viewState":{"childDisplayState":{"views":{"Form":{"isViewActive":true},"Layout Code":{"height":7000,"isViewActive":false},"Layout Private":{"isViewActive":false,"height":7000},"isInputValid(formValue)":{"isViewActive":false},"isInputValid Private":{"isViewActive":false},"Form Value":{"isViewActive":false,"height":280}}}}},"countySelector":{"type":"apogeeapp.DataFormCell","viewState":{"childDisplayState":{"views":{"Form":{"isViewActive":true},"Layout Code":{"height":7000,"isViewActive":false},"Layout Private":{"isViewActive":false,"height":7000},"isInputValid(formValue)":{"isViewActive":false},"isInputValid Private":{"isViewActive":false},"Form Value":{"isViewActive":false,"height":280}}}}},"settings":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":true},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"selectedCountyEntries":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"chartConfigMap":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"casesChart":{"type":"apogeeapp.ChartJSCell","viewState":{"childDisplayState":{"views":{"Chart":{"isViewActive":true},"Input":{"isViewActive":false}}}}},"newCasesChart":{"type":"apogeeapp.ChartJSCell","viewState":{"childDisplayState":{"views":{"Chart":{"isViewActive":true},"Input":{"isViewActive":false}}}}},"deathsChart":{"type":"apogeeapp.ChartJSCell","viewState":{"childDisplayState":{"views":{"Chart":{"isViewActive":true},"Input":{"isViewActive":false}}}}},"newDeathsChart":{"type":"apogeeapp.ChartJSCell","viewState":{"childDisplayState":{"views":{"Chart":{"isViewActive":true},"Input":{"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":1,"tabOpened":true,"tabShowing":true}},"graphingUtilities":{"type":"apogeeapp.PageComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Graphing Utilities"}]},{"type":"paragraph","content":[{"type":"text","text":"These are some common graphing utilities we will use."}]},{"type":"heading2","content":[{"type":"text","text":"Constants"}]},{"type":"paragraph","content":[{"type":"text","text":"This is the population we will use in displaying per capita data."}]},{"type":"apogeeComponent","attrs":{"name":"BASE_POPULATION_SCALE","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is a constant we will use for our filter."}]},{"type":"apogeeComponent","attrs":{"name":"FILTER_LENGTH","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Combined Create Chart Config Function"}]},{"type":"paragraph","content":[{"type":"text","text":"This is a function to take a list of data entries and settings and create the chart config data for the four charts we are interested in. We are using the Multi-cell function. This is let's you write a notebook-like page to process a sample set of data. Then, you can use it as a function putting in arbitrary data."}]},{"type":"apogeeComponent","attrs":{"name":"createCombinedChartConfigData","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Utility Functions"}]},{"type":"apogeeComponent","attrs":{"name":"scaleForPopulation","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Chart Config Functions"}]},{"type":"paragraph","content":[{"type":"text","text":"These functions generate a config json for a chart."}]},{"type":"paragraph","content":[{"type":"text","text":"This function gets the configuration for a data series."}]},{"type":"apogeeComponent","attrs":{"name":"getDataSeriesConfig","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This function gets the configuration for the chart options."}]},{"type":"apogeeComponent","attrs":{"name":"getChartOptionsConfig","id":0,"state":""}},{"type":"paragraph"},{"type":"heading2","content":[{"type":"text","text":"Line Styles"}]},{"type":"paragraph","content":[{"type":"text","text":"We will define out own colors based on index of the data"}]},{"type":"apogeeComponent","attrs":{"name":"getColor","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is a lookup table to retrieve line colors."}]},{"type":"apogeeComponent","attrs":{"name":"lineColors","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"These are some constants to give different line styles."}]},{"type":"apogeeComponent","attrs":{"name":"LINE_STYLE_SOLID","id":0,"state":""}},{"type":"apogeeComponent","attrs":{"name":"LINE_STYLE_DASH","id":0,"state":""}},{"type":"paragraph"},{"type":"paragraph","content":[{"type":"text","text":" "}]},{"type":"paragraph"}]}},"children":{"scaleForPopulation":{"type":"apogeeapp.FunctionCell","viewState":{"childDisplayState":{"views":{"Code":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"getDataSeriesConfig":{"type":"apogeeapp.FunctionCell","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"getChartOptionsConfig":{"type":"apogeeapp.FunctionCell","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"getColor":{"type":"apogeeapp.FunctionCell","viewState":{"childDisplayState":{"views":{"Code":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"lineColors":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"LINE_STYLE_SOLID":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"LINE_STYLE_DASH":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"BASE_POPULATION_SCALE":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"FILTER_LENGTH":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"createCombinedChartConfigData":{"type":"apogeeapp.PageFunctionComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Create Combined Chart Config Data"}]},{"type":"heading2","content":[{"type":"text","text":"Inputs"}]},{"type":"paragraph","content":[{"type":"text","text":"This is a list of entries that we want to plot."}]},{"type":"apogeeComponent","attrs":{"name":"dataEntries","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"These are the category values:"}]},{"type":"apogeeComponent","attrs":{"name":"categoryList","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"These are settings flags to control how we plot the data."}]},{"type":"apogeeComponent","attrs":{"name":"settings","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the key for the name of each entry. We didn't standardize this, so it is different for different input data sets."}]},{"type":"apogeeComponent","attrs":{"name":"dataEntryNameKey","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Output"}]},{"type":"paragraph","content":[{"type":"text","text":"This is the return value. We are just taking the value of the formattedCharData cell below."}]},{"type":"apogeeComponent","attrs":{"name":"chartConfigMap","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Processing"}]},{"type":"paragraph","content":[{"type":"text","text":"Here we create the data that will be charted. We will take a second step below to put this data in the format to configure the charts."}]},{"type":"apogeeComponent","attrs":{"name":"unformattedChartData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here we convert our chart data into properly formatted config JSONs for our four charts."}]},{"type":"apogeeComponent","attrs":{"name":"formattedChartData","id":0,"state":""}},{"type":"paragraph"},{"type":"paragraph"}]}},"children":{"dataEntries":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":true},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"settings":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"unformattedChartData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false,"height":7000}}}}},"formattedChartData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":true,"height":7000}}}}},"dataEntryNameKey":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"chartConfigMap":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"categoryList":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}}},"viewState":{"treeState":1}}},"viewState":{"childDisplayState":null,"treeState":1}},"viewState":{"treeState":1}}},"viewState":{"treeState":1}}