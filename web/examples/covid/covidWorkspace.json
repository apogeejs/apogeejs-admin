{"fileType":"apogee app js workspace","version":"0.60","references":{"refEntries":[{"url":"http://localhost:8888/applications/modules/chartjsmodule/dist/chartjsmodule.esm.js","nickname":"","entryType":"es module"}],"viewState":{"treeState":1,"lists":{"es module":{"treeState":-1},"js link":{"treeState":0},"css link":{"treeState":0}}}},"code":{"model":{"fileType":"apogee model","version":0.3,"name":"COVID-19 Workspace","children":{"dataDownload":{"name":"dataDownload","type":"apogee.Folder","children":{"usCasesUrl":{"name":"usCasesUrl","type":"apogee.JsonMember","updateData":{"data":"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv"}},"usDeathsUrl":{"name":"usDeathsUrl","type":"apogee.JsonMember","updateData":{"data":"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_US.csv"}},"usCasesData":{"name":"usCasesData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return apogeeutil.textRequest(usCasesUrl);","supplementalCode":""}},"usCasesGrid":{"name":"usCasesGrid","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return simpleCsvParser(usCasesData);","supplementalCode":""}},"usDeathsGrid":{"name":"usDeathsGrid","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return simpleCsvParser(usDeathsData);","supplementalCode":""}},"usDeathsData":{"name":"usDeathsData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return apogeeutil.textRequest(usDeathsUrl);","supplementalCode":""}},"US_CASES_COLUMNS":{"name":"US_CASES_COLUMNS","type":"apogee.JsonMember","updateData":{"data":{"FIPS":4,"COUNTY":5,"STATE":6,"COUNTRY":7,"LAT":8,"LON":9,"COMBINED_KEY":10,"FIRST_DATA_ROW":11}}},"US_DEATHS_COLUMNS":{"name":"US_DEATHS_COLUMNS","type":"apogee.JsonMember","updateData":{"data":{"FIPS":4,"COUNTY":5,"STATE":6,"COUNTRY":7,"LAT":8,"LON":9,"COMBINED_KEY":10,"POPULATION":11,"FIRST_DATA_ROW":12}}},"simpleCsvParser":{"name":"simpleCsvParser","type":"apogee.FunctionMember","updateData":{"argList":["csvText"],"functionBody":"let rowArray = csvText.split(\"\\n\");\n\nlet gridData = rowArray.map( row => {\n    //our parsing is simplified to handl this specific data rather than a general cvs file.\n    //only one (or zero) fields have quotes, we will pull it out.\n    let firstQuoteIndex = row.indexOf(\"\\\"\");\n    \n    //no quoted strings\n    if(firstQuoteIndex < 0) return row.split(\",\");\n    \n    let secondQuoteIndex = row.indexOf(\"\\\"\",firstQuoteIndex+1);\n    if(secondQuoteIndex < 0) throw new Error(\"Error: Only 1 delimited quote!\");\n    //make sure there are only two delimited\n    let thirdQuoteIndex = row.indexOf(\"\\\"\",secondQuoteIndex+1);\n    if(thirdQuoteIndex > 0) throw new Error(\"Error: More than 2 delimited quotes!\");\n    \n    \n    //split up and parse single the quoted field differently from the rest of the row.\n    let firstString = row.substr(0,firstQuoteIndex-1);\n    let secondString = row.substr(firstQuoteIndex+1,secondQuoteIndex-firstQuoteIndex-1);\n    let thirdString = row.substr(secondQuoteIndex+2);\n    \n    let firstArray = firstString.split(\",\")\n    let secondArray = secondString\n    let thirdArray = thirdString.split(\",\");\n    \n    return firstArray.concat(secondArray).concat(thirdArray);\n})\n\nreturn gridData;","supplementalCode":""}},"getTimeSeriesData":{"name":"getTimeSeriesData","type":"apogee.FunctionMember","updateData":{"argList":["row","columnDefs"],"functionBody":"return row.slice(columnDefs.FIRST_DATA_ROW).map(stringValue => parseInt(stringValue));\n","supplementalCode":""}},"getDateLabels":{"name":"getDateLabels","type":"apogee.FunctionMember","updateData":{"argList":["table","columnDefs"],"functionBody":"return table[0].slice(columnDefs.FIRST_DATA_ROW).map( value => value.trim());\n","supplementalCode":""}}}},"workspaceNotes":{"name":"workspaceNotes","type":"apogee.Folder","children":{}},"usProcessedData":{"name":"usProcessedData","type":"apogee.Folder","children":{"combinedData":{"name":"combinedData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let usData = {};\nusData.name = \"United States\";\nusData.type = \"country\",\nusData.regions = {};\n\ncasesData.forEach( casesEntry => _addData(usData,casesEntry));\ndeathsData.forEach( deathsEntry => _addData(usData,deathsEntry));\n\nreturn usData;","supplementalCode":"function _addData(usData,entryToAdd) {\n    //here we are disgarding entries with no county\n    let addedEntry = _lookupEntry(usData,entryToAdd.state,entryToAdd.county);\n    if(entryToAdd.cases) addedEntry.cases = entryToAdd.cases;\n    if(entryToAdd.deaths) addedEntry.deaths = entryToAdd.deaths;\n    if((entryToAdd.population)&&(!addedEntry.population)) addedEntry.population = entryToAdd.population;\n}\n\nfunction _lookupEntry(usData,state,county) {\n    if(state == undefined) throw new Error(\"State missing!\");\n    \n    let stateEntry = usData.regions[state];\n    if(!stateEntry) {\n        stateEntry = {};\n        stateEntry.name = state;\n        stateEntry.type = \"state\";\n        stateEntry.regions = {};\n        usData.regions[state] = stateEntry;\n    }\n    \n    if(county === undefined) return stateEntry;\n    \n    let countyEntry = stateEntry.regions[county];\n    if(!countyEntry) {\n        countyEntry = {};\n        countyEntry.name = county;\n        countyEntry.type = \"county\";\n        stateEntry.regions[county] = countyEntry;\n    }\n    \n    return countyEntry;\n}\n"}},"cleanedData":{"name":"cleanedData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let usEntry = apogeeutil.jsonCopy(combinedData);\nlet deletedEntries = [];\nusEntry.deletedEntries = deletedEntries;\n\nfor(let stateName in usEntry.regions) {\n    let stateEntry = usEntry.regions[stateName];\n    \n    //add the county entries to populate the state entries where needed.\n    if(stateEntry.regions) {\n        \n        //deleted counties with no population\n        for(let countyName in stateEntry.regions) {\n            let countyEntry = stateEntry.regions[countyName];\n            if((!countyEntry.population)||(!countyEntry.cases)||(!countyEntry.deaths)) {\n                deletedEntries.push(stateName + \", \" + countyName);\n                delete stateEntry.regions[countyName];\n                continue;\n            }\n        }\n   \n        //create a state entry population from counties populations\n        if(!stateEntry.population) {\n            stateEntry.population = _sumChildValues(stateEntry,\"population\");\n        }\n        \n        if(!stateEntry.cases) {\n            stateEntry.cases = _sumChildArrays(stateEntry,\"cases\");\n        }\n        \n        if(!stateEntry.deaths) {\n            stateEntry.deaths = _sumChildArrays(stateEntry,\"deaths\");\n        }\n    }\n    \n    //this is a signal for an entry we don't want \n    if(!stateEntry.population) {\n        delete usEntry.regions[stateName];\n        deletedEntries.push(stateName);\n        continue;\n    }\n}\n\nreturn usEntry;","supplementalCode":"function _sumChildValues(stateEntry,propName) {\n    let value = 0;\n    for(let countyName in stateEntry.regions) {\n        let countyEntry = stateEntry.regions[countyName];\n        value += countyEntry[propName]\n    }\n    return value;\n}\n\nfunction _sumChildArrays(stateEntry,propName) {\n    let targetArray;\n    for(let countyName in stateEntry.regions) {\n        let countyEntry = stateEntry.regions[countyName];\n        let sourceArray = countyEntry[propName];\n        if(!targetArray) {\n            targetArray = apogeeutil.jsonCopy(sourceArray);\n        }\n        else {\n            sourceArray.forEach( (value,index) => targetArray[index] += value);\n        }\n    }\n    return targetArray;\n}"}},"stateWithCountyDataList":{"name":"stateWithCountyDataList","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let states = [];\nfor(let stateName in cleanedData.regions) {\n    let stateEntry = cleanedData.regions[stateName];\n    if(stateEntry.regions) {\n        states.push(stateName);\n    }\n}\nreturn states;","supplementalCode":""}},"stateWithDataList":{"name":"stateWithDataList","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let states = [];\nfor(let stateName in cleanedData.regions) {\n    let stateEntry = cleanedData.regions[stateName];\n    if((stateEntry.cases)&&(stateEntry.deaths)) {\n        states.push(stateName);\n    }\n}\nreturn states;","supplementalCode":""}},"dateLabels":{"name":"dateLabels","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let usCasesDates = dataDownload.getDateLabels(dataDownload.usCasesGrid,dataDownload.US_CASES_COLUMNS);\nlet usDeathsDates = dataDownload.getDateLabels(dataDownload.usDeathsGrid,dataDownload.US_DEATHS_COLUMNS);\n\nif(!apogeeutil.jsonEquals(usCasesDates,usDeathsDates)) throw new Error(\"US cases and deaths dates do not match - program does not currently handle this.\");\n\nreturn usCasesDates\n","supplementalCode":""}},"casesData":{"name":"casesData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let data = [];\ndataDownload.usCasesGrid.forEach( (row,index) => {\n    if(index == 0) return; //header row\n    if(row.length <= 1) return; //invalid row\n    \n    //county may be emtpy string. If so we will not add it.\n    let county = row[dataDownload.US_CASES_COLUMNS.COUNTY];\n    \n    let entry = {};\n    entry.state = row[dataDownload.US_CASES_COLUMNS.STATE];\n    if(county != \"\") entry.county = county;\n    entry.cases = dataDownload.getTimeSeriesData(row,dataDownload.US_CASES_COLUMNS);\n    data.push(entry);\n})\nreturn data;","supplementalCode":""}},"deathsData":{"name":"deathsData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let data = [];\ndataDownload.usDeathsGrid.forEach( (row,index) => {\n    if(index == 0) return; //header row\n    if(row.length <= 1) return; //invalid row\n    \n    //county may be emtpy string. If so we will not add it.\n    let county = row[dataDownload.US_DEATHS_COLUMNS.COUNTY];\n    //poplation maybe \n    let population;\n    let populationString = row[dataDownload.US_DEATHS_COLUMNS.POPULATION]; //for some reason we population here butnot in cases data\n    if((populationString != \"\")&&(populationString != \"0\")) {\n        population = parseInt(populationString);\n    }\n    \n    let entry = {};\n    entry.state = row[dataDownload.US_DEATHS_COLUMNS.STATE];\n    if(county != \"\") entry.county = county;\n    if(population !== undefined) entry.population = population;\n    entry.deaths = dataDownload.getTimeSeriesData(row,dataDownload.US_DEATHS_COLUMNS);\n    data.push(entry);\n})\nreturn data;","supplementalCode":""}}}},"usStatePlots":{"name":"usStatePlots","type":"apogee.Folder","children":{"graphingOptions":{"name":"graphingOptions","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.FunctionMember","updateData":{"argList":[],"functionBody":"return [\n    {\n        type: \"checkboxGroup\",\n        label: \"Plot Data: \",\n        entries: [[\"Filtered Data\",\"filteredData\"],[\"Raw Data\",\"rawData\"]],\n        horizontal: true,\n        groupName: \"plotDataType\",\n        key: \"plotDataType\"\n    } /*,\n    {\n        type: \"radioButtonGroup\",\n        label: \"Y Scale: \",\n        entries: [[\"Linear\",\"linear\"],[\"Logarithmic\",\"logarithmic\"]],\n        horizontal: true,\n        groupName: \"scaleType\",\n        key: \"scaleType\"\n    }   */ \n]","supplementalCode":""}},"data":{"name":"data","type":"apogee.JsonMember","updateData":{"data":{"plotDataType":["filteredData"]}}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionMember","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":""}}},"childrenNotWriteable":true},"stateSelector":{"name":"stateSelector","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.FunctionMember","updateData":{"argList":[],"functionBody":"return [\n    {\n        type: \"checkboxGroup\",\n        entries: usProcessedData.stateWithDataList.map( value => [value + \"\\t\",value]), //the tab is added for better spacing. \n        key: \"states\",\n        horizontal: true\n    }\n]","supplementalCode":""}},"data":{"name":"data","type":"apogee.JsonMember","updateData":{"data":{"states":["Arizona","Florida","Mississippi","South Carolina"]}}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionMember","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":""}}}},"scaledCasesChart":{"name":"scaledCasesChart","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"\n    return {\n        \"chartType\": \"line\",\n        \"xValuesInputType\": \"common\",\n        \"commonXValueArray\": dateLabels,\n        \"datasets\": chartData.totalCases.plotSeriesData,\n        \"generalOptions\": chartData.totalCases.chartOptions,\n        \"storedData\": {\"chartType\":\"line\",\"xValuesInputType\":\"common\",\"commonXValueArray\":\"dateLabels\",\"datasets\":\"chartData.totalCases.plotSeriesData\",\"generalOptions\":\"chartData.totalCases.chartOptions\"}\n    };","supplementalCode":""}},"scaledNewCasesChart":{"name":"scaledNewCasesChart","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"\n    return {\n        \"chartType\": \"line\",\n        \"xValuesInputType\": \"common\",\n        \"commonXValueArray\": dateLabels,\n        \"datasets\": chartData.newCases.plotSeriesData,\n        \"generalOptions\": chartData.newCases.chartOptions,\n        \"storedData\": {\"chartType\":\"line\",\"xValuesInputType\":\"common\",\"commonXValueArray\":\"dateLabels\",\"datasets\":\"chartData.newCases.plotSeriesData\",\"generalOptions\":\"chartData.newCases.chartOptions\"}\n    };","supplementalCode":""}},"scaledDeathsChart":{"name":"scaledDeathsChart","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"\n    return {\n        \"chartType\": \"line\",\n        \"xValuesInputType\": \"common\",\n        \"commonXValueArray\": dateLabels,\n        \"datasets\": chartData.totalDeaths.plotSeriesData,\n        \"generalOptions\": chartData.totalDeaths.chartOptions,\n        \"storedData\": {\"chartType\":\"line\",\"xValuesInputType\":\"common\",\"commonXValueArray\":\"dateLabels\",\"datasets\":\"chartData.totalDeaths.plotSeriesData\",\"generalOptions\":\"chartData.totalDeaths.chartOptions\"}\n    };","supplementalCode":""}},"scaledNewDeathsChart":{"name":"scaledNewDeathsChart","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"\n    return {\n        \"chartType\": \"line\",\n        \"xValuesInputType\": \"common\",\n        \"commonXValueArray\": dateLabels,\n        \"datasets\": chartData.newDeaths.plotSeriesData,\n        \"generalOptions\": chartData.newDeaths.chartOptions,\n        \"storedData\": {\"chartType\":\"line\",\"xValuesInputType\":\"common\",\"commonXValueArray\":\"dateLabels\",\"datasets\":\"chartData.newDeaths.plotSeriesData\",\"generalOptions\":\"chartData.newDeaths.chartOptions\"}\n    };","supplementalCode":""}},"selectedDataToPlot":{"name":"selectedDataToPlot","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let plotTypeList;\n\n//if the input is not valid, plot the filtered data only.\nif((!graphingOptions.data)||(!graphingOptions.data.plotDataType)||(graphingOptions.data.plotDataType.length == 0)) {\n    plotTypeList = [\"filteredData\"];\n}\nelse {\n    plotTypeList = graphingOptions.data.plotDataType;\n}\n\nreturn plotTypeList;","supplementalCode":""}},"yAxisType":{"name":"yAxisType","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let scaleType;\n\n//if the input is not valid, plot the filtered data only.\nif((!graphingOptions.data)||(!graphingOptions.data.scaleType)) {\n    scaleType = \"linear\";\n}\nelse {\n    scaleType = graphingOptions.data.scaleType;\n}\n\nreturn scaleType;","supplementalCode":""}},"chartData":{"name":"chartData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return graphingUtilities.createChartData(usDataEntry,selectedStates,selectedDataToPlot,yAxisType); ","supplementalCode":""}},"usDataEntry":{"name":"usDataEntry","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return usProcessedData.cleanedData;","supplementalCode":""}},"selectedStates":{"name":"selectedStates","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"if((!stateSelector.data)||(!stateSelector.data.states)) return apogeeutil.INVALID_VALUE;\n\nreturn stateSelector.data.states;\n","supplementalCode":""}},"dateLabels":{"name":"dateLabels","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return usProcessedData.dateLabels;","supplementalCode":""}}}},"graphingUtilities":{"name":"graphingUtilities","type":"apogee.Folder","children":{"getDatasetOptions":{"name":"getDatasetOptions","type":"apogee.FunctionMember","updateData":{"argList":["label","dataIndex","dataCount"],"functionBody":"let styleInfo = getStyle(dataIndex,dataCount);\n\nreturn {\n    label: label,\n    fill: false,\n    borderColor: styleInfo.color,\n    borderDash: styleInfo.borderDash,\n    borderWidth: 1,\n    pointRadius: 0,\n    lineTension: 0\n}","supplementalCode":""}},"getStyle":{"name":"getStyle","type":"apogee.FunctionMember","updateData":{"argList":["index","totalCount"],"functionBody":"if(totalCount > lineColors.length * lineStyles.length) throw new Error(\"Not enough predetermined line styles to display the data.\"); \n    \n    let colorIndex = index % lineColors.length;\n    let color = lineColors[colorIndex];\n    \n    let borderDashIndex = Math.floor(index / lineColors.length);\n    let borderDash = lineStyles[borderDashIndex];\n    return {color,borderDash};","supplementalCode":""}},"lineColors":{"name":"lineColors","type":"apogee.JsonMember","updateData":{"data":["blue","red","green","orange","purple","cyan","brown","black"]}},"lineStyles":{"name":"lineStyles","type":"apogee.JsonMember","updateData":{"data":[[],[6,2],[4,4],[2,6],[4,2,2,2]]}},"createChartData":{"name":"createChartData","type":"apogee.FolderFunction","updateData":{"argList":["parentDataEntry","selectedRegions","dataToPlot","yAxisType"],"returnValue":"chartData"},"children":{"body":{"name":"body","type":"apogee.Folder","children":{"parentDataEntry":{"name":"parentDataEntry","type":"apogee.JsonMember","updateData":{"data":{"name":"California","type":"state","regions":{"Alameda":{"name":"Alameda","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,3,5,5,7,11,11,18,27,30,38,48,68,71,118,135,135,178,220,220,270,283,313,313,359,443,443,566,588,634,674,674,766,806,845,888,888,964,1007,1063,1114,1164,1193,1241,1242,1352,1403,1439,1470,1500,1533,1568,1603,1636,1706,1749,1776,1809,1863,1917,1961,2023,2064,2101,2133,2178,2234,2367,2351,2392,2457,2522,2560,2609,2708,2760,2847,2874,2986,3049,3097,3195,3289,3390,3470,3515,3548,3641,3725,3805,3805,3945,3985,4033,4232,4216,4217,4320,4373,4481,4533,4638,4702,4924,4924,5007,5267,5275,5382,5493,5493,5670],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,4,4,4,6,7,7,7,8,12,12,12,13,15,16,16,20,21,23,23,23,36,39,40,41,42,42,43,43,46,48,52,52,52,55,57,60,62,63,63,63,66,66,67,70,71,71,71,74,76,79,83,83,83,83,86,88,90,90,92,93,93,93,93,94,95,95,96,96,97,97,97,101,101,101,101,102,105,109,109,109,112,112,112,116,117,119,119,119,120,121,122,128,130,130,133],"population":1671329},"Alpine":{"name":"Alpine","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"population":1129},"Amador":{"name":"Amador","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,0,3,3,3,3,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,19,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,12,12,12,12,13,13,22,16,19,20,20,20,21],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"population":39752},"Butte":{"name":"Butte","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,4,5,5,5,5,5,8,8,9,10,11,11,11,12,13,13,13,14,14,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,18,18,18,18,18,20,20,20,22,22,22,22,24,26,30,31,34,34,34,34,40,40,40,44,44,44,51,51,55,60,65,65,65,68,71,73,73,74,74,74,82,88,90,90,94,94,94,111,119,127,133,143,143,143],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2],"population":219186},"Calaveras":{"name":"Calaveras","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,5,5,5,5,8,8,8,8,9,9,11,11,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,15,15,15,15,15,15,15,15,16,19,19,19,19,19,21,25,25,26,26,26,26,26,26,28,28,28,28,29,29,29,32,32,32],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"population":45905},"Colusa":{"name":"Colusa","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,5,5,5,5,5,5,5,5,5,5,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,11,14,16,17,17,17],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"population":21547},"Contra Costa":{"name":"Contra Costa","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,3,3,9,9,9,10,17,25,29,29,34,39,39,41,46,51,61,71,86,108,131,147,168,168,187,212,249,250,307,307,386,417,442,462,484,511,530,539,552,552,615,631,648,685,693,707,749,763,770,786,805,817,820,842,862,891,907,934,945,947,969,985,999,1014,1036,1048,1048,1066,1080,1089,1100,1121,1146,1155,1192,1209,1234,1259,1296,1321,1336,1353,1375,1384,1404,1426,1450,1468,1506,1513,1547,1577,1633,1668,1706,1774,1798,1829,1877,1921,1959,1983,2026,2071,2111,2148,2240,2294,2369,2454,2523,2576,2676,2688,2802],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,3,3,3,3,3,3,5,6,7,7,7,8,9,11,11,11,11,14,16,19,19,20,22,22,22,23,23,25,29,25,25,25,27,28,28,28,28,29,29,29,29,32,31,32,32,33,33,33,33,33,33,33,33,36,36,36,36,37,37,37,37,37,37,37,38,37,38,38,38,38,39,40,43,43,44,44,44,44,44,49,50,55,56,56,62,62,62,67,72,73,73,74],"population":1153526},"Del Norte":{"name":"Del Norte","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,8,8,13,15,15,20,23,23,37,40,40,44,44,45,45,46,46,47,47,47,47,47,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,49,49,49,49,50,50],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1],"population":27812},"El Dorado":{"name":"El Dorado","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,3,3,9,12,12,12,15,18,18,19,22,22,22,22,28,29,30,32,32,32,34,35,35,36,36,36,36,38,39,40,42,42,42,42,44,44,44,47,47,47,47,53,54,54,54,54,54,56,60,60,62,64,64,64,67,67,67,67,67,74,74,78,78,80,84,84,90,90,96,96,96,98,102,106,106,109,111,111,111,113,113,113,117,118,121,125,130,130,130,145,150,153,158,158,158,158],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"population":192843},"Fresno":{"name":"Fresno","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,1,1,1,2,2,2,3,6,6,6,6,13,18,19,27,31,43,43,53,68,82,94,100,103,108,124,146,156,173,191,201,201,222,251,265,295,311,315,315,351,371,419,443,443,458,458,498,538,538,615,615,633,633,672,777,777,813,841,885,945,984,984,1074,1074,1156,1192,1192,1287,1338,1338,1372,1417,1448,1482,1482,1535,1658,1658,1714,1743,1743,1882,1914,1944,2014,2080,2122,2122,2216,2318,2395,2395,2547,2547,2706,2788,2788,3058,3187,3245,3245,3485,3672,3892,4053,4374,4474,4474],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,3,3,3,5,5,5,5,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,9,9,9,9,9,9,9,10,10,13,13,16,16,16,17,20,20,22,22,22,22,22,26,32,32,35,35,35,36,37,37,40,43,43,43,46,49,51,51,52,52,55,57,57,62,66,66,66,67,70,71,71,72,72,72],"population":999101},"Glenn":{"name":"Glenn","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,9,9,9,9,9,12,12,12,12,12,12,12,12,13,14,14,16,16,16,17,17,17,17,18,18,19,19,23,23,24,24,24,32,34,34,42,42,42,42,42,66,74,87,87,87,87],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"population":28393},"Humboldt":{"name":"Humboldt","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,4,5,10,12,14,18,18,21,27,28,37,44,44,44,49,50,50,50,50,50,50,50,51,52,52,52,52,52,52,52,52,53,53,53,53,53,54,54,54,54,54,54,54,55,55,55,55,57,61,64,64,68,68,72,77,77,86,88,88,88,93,93,93,94,98,98,98,99,101,101,102,103,104,104,104,104,105,105,105,105,105,106,106,106,107,107,108,108,110,110,112,113,122,127,129,129,129],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],"population":135558},"Imperial":{"name":"Imperial","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,4,4,6,6,6,9,9,17,21,25,25,33,38,43,52,55,57,65,68,73,75,79,79,87,87,100,117,127,143,155,155,160,175,195,232,251,251,251,281,284,319,319,333,358,358,368,400,419,455,512,512,512,564,603,647,712,786,786,786,876,902,985,1076,1076,1145,1145,1274,1352,1352,1443,1634,1634,1634,1751,1798,2025,2493,2568,2568,2568,3013,3133,3386,3405,3724,4157,4157,4298,4389,4478,4659,4744,4800,4800,4800,5270,5549,5744,5838,6041,6041],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,5,8,8,8,8,8,8,8,8,9,9,9,9,9,10,11,12,12,12,12,13,14,15,15,15,15,15,18,19,21,21,23,23,23,24,24,26,27,27,27,29,29,29,30,33,33,33,38,38,41,43,43,43,43,47,52,54,60,64,64,64,64,68,70,73,73,81,81],"population":181215},"Inyo":{"name":"Inyo","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,5,8,8,8,9,9,10,10,11,11,11,11,11,12,12,12,12,12,17,17,17,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,22,22,22,22,22,22,22,23,23,24,24,24,24,24,24,24,25,27,27,27,29,27,30],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"population":18039},"Kern":{"name":"Kern","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,3,4,5,5,12,13,15,29,33,47,51,60,83,110,142,173,210,230,239,252,271,303,337,371,396,436,462,533,565,578,610,623,643,671,683,699,735,755,809,828,847,866,893,939,969,1005,1016,1045,1073,1133,1166,1228,1254,1286,1316,1343,1393,1428,1473,1515,1537,1571,1605,1644,1695,1757,1824,1871,1876,1941,2007,2076,2145,2250,2322,2376,2418,2462,2534,2650,2720,2794,2870,2942,3016,3130,3195,3281,3367,3452,3512,3590,3706,3793,3890,3965,4049,4108,4182,4300,4340,4478],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,5,5,6,7,8,8,8,8,11,11,13,15,15,15,15,17,17,21,24,25,25,25,25,25,25,27,29,29,29,29,36,37,37,38,38,38,39,40,45,45,45,45,47,47,51,51,53,53,53,53,54,57,58,58,60,60,60,60,63,64,65,65,67],"population":900202},"Kings":{"name":"Kings","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,4,5,5,5,5,5,5,5,8,8,9,10,10,12,13,13,18,20,28,30,32,32,35,47,47,52,67,71,79,96,123,146,158,172,198,233,233,244,265,275,319,319,325,348,358,372,399,399,416,416,457,488,506,517,647,688,698,704,714,735,746,1122,1137,1168,1187,1452,1483,1492,1538,1576,1637,1688,1724,1759,1759,1831,1831,1870,1976,2057,2057,2091,2158,2158,2234,2284,2298,2318,2318],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,4,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,8,9,10,12,12,15,18,18,20,21,21,22,22],"population":152940},"Lake":{"name":"Lake","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,3,4,4,4,4,4,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,10,11,12,12,12,12,12,12,14,19,23,23,21,21,21,26,30,30,30,30,30,30,30,30,31,32,32,32,34,34,34,34,34,35,35,40,41,41,42,42,45,51],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"population":64386},"Lassen":{"name":"Lassen","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,4,4,4,5,5,5,5,5,5,5,5,6,6,6,8,8,9,9,9,9,9,9,9,9,9,9,9,11,11,15,15,89,172,220,220],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"population":30573},"Los Angeles":{"name":"Los Angeles","type":"county","cases":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,11,13,14,14,14,20,27,32,40,53,53,94,144,190,231,292,292,407,536,662,812,1229,1465,1465,1829,2474,3019,3518,4045,4566,4605,5955,6377,6936,7559,7955,8443,8453,8894,9433,10047,10517,10854,11400,12021,12341,13823,15153,16447,17537,18545,19133,19567,20423,20996,22485,23220,24262,24894,25699,26225,27836,28665,29511,30319,31241,31703,32263,33211,34538,35392,36316,37360,38011,38458,39573,40895,42037,43070,44121,45017,46023,47845,48761,49860,51678,53746,55001,56011,57219,58261,59692,61068,62382,63844,64690,65945,67111,68959,70529,72057,73018,73832,75162,77260,78348,79655,81709,83414,86017,88512,89633,91577,93391,95385,97918],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,5,7,11,13,21,26,26,32,44,54,64,78,89,93,132,147,169,198,223,242,244,269,322,360,405,457,497,576,600,619,663,732,797,850,895,916,944,1002,1056,1111,1174,1209,1231,1257,1315,1369,1418,1470,1515,1531,1570,1616,1660,1711,1753,1793,1821,1840,1913,1973,2016,2053,2092,2106,2116,2145,2201,2241,2294,2339,2362,2386,2448,2489,2532,2569,2624,2645,2656,2710,2768,2818,2834,2894,2907,2926,2960,2992,3027,3065,3112,3121,3137,3171,3207,3247,3269,3285,3305],"population":10039107},"Madera":{"name":"Madera","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,6,6,7,10,11,15,18,21,23,25,28,28,28,28,28,28,28,30,32,32,33,33,33,33,33,33,34,34,36,36,39,39,39,40,41,44,46,46,46,46,51,51,54,55,55,62,66,67,67,69,69,69,69,70,71,71,81,82,82,83,82,84,84,85,90,94,98,104,106,106,114,117,129,141,155,163,172,172,178,188,188,198,198,226,250,275,295,314,314,314,334,359,370,383,415,415,415],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,5],"population":157327},"Marin":{"name":"Marin","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,3,3,5,5,9,11,15,15,38,38,38,38,47,53,60,65,68,74,93,99,107,108,118,131,137,141,143,148,149,154,154,153,164,170,171,184,187,187,189,195,199,200,209,212,212,223,224,224,226,235,237,239,240,240,241,247,247,255,257,259,265,271,271,279,279,299,317,317,336,343,343,352,369,388,403,417,420,436,436,450,483,483,501,506,525,530,551,571,589,635,635,651,664,697,730,751,772,842,861,917,1030,1110,1250,1349,1470,1573,1636,1746,1936],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,4,4,6,6,6,7,7,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,12,12,12,12,12,12,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18],"population":258826},"Mariposa":{"name":"Mariposa","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,3,13,13,13,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,18,18,18,18,18,18,21,21,22,23,23,23],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"population":17203},"Mendocino":{"name":"Mendocino","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,14,14,14,15,15,21,21,21,21,22,23,25,30,30,30,30,30,30,33,33,33,33,36,36,36,36,38,38,38,38,47,47,54,54,54,54,62,62,72,74,76,76,76],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"population":86749},"Merced":{"name":"Merced","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,4,7,8,9,10,10,12,16,16,27,29,29,34,40,52,59,65,65,74,76,79,82,86,90,90,92,93,100,102,102,103,108,116,118,125,134,140,140,143,147,152,155,157,163,163,173,177,180,189,189,200,200,216,222,226,234,251,251,251,261,268,273,280,280,283,283,283,301,310,310,320,334,334,334,367,387,391,391,409,409,409,470,470,538,564,564,616,661,710,741,791,824,824,824],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,9,9,9,10,11,11,11,11],"population":277680},"Modoc":{"name":"Modoc","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"population":8841},"Mono":{"name":"Mono","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,4,4,6,8,11,13,13,13,18,18,19,19,19,19,19,20,20,21,21,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,26,26,26,26,26,26,26,26,27,28,28,29,29,32,32,33,33,33,33,34,34,34,34,34,34,34,34,34,34,35,35,35,35,37,37,37,37,37,37,37,37,38,38,38,37,37,37,37,37,37,37,37,37,37,37,40,40,40,40,40,40,40],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"population":14444},"Monterey":{"name":"Monterey","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,4,5,11,11,14,20,24,24,24,32,36,36,40,42,48,53,57,62,62,62,64,69,71,79,82,87,87,100,108,119,119,136,141,148,150,154,169,169,183,183,185,191,206,213,222,235,235,237,241,247,250,267,279,279,299,299,308,317,322,341,341,349,349,355,362,371,395,413,429,429,469,477,509,530,545,571,586,621,640,667,732,751,763,791,814,865,899,949,995,1015,1075,1121,1156,1181,1225,1291,1341,1397,1416,1429,1444,1548],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,8,8,8,8,8,8,8,8,8,8,8,8,9,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13],"population":434061},"Napa":{"name":"Napa","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,2,2,2,6,6,9,10,14,14,15,18,18,20,20,22,22,25,25,32,32,34,34,38,38,39,44,47,47,48,48,54,57,58,60,60,64,66,67,67,68,70,70,74,75,78,78,78,78,79,79,81,81,83,83,90,90,92,92,94,95,96,101,101,101,109,109,111,111,112,112,113,113,124,126,129,141,141,153,157,161,163,168,183,183,190,199,202,206,216,224,224,239,239,251,258,270,270,270],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4],"population":137744},"Nevada":{"name":"Nevada","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,3,4,7,8,12,12,17,21,26,26,30,31,31,32,32,34,34,34,34,34,34,34,34,34,34,36,36,36,38,38,36,37,37,37,37,39,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,42,48,49,49,50,50,50,50,50,52,52,52,52,55,57,57,71,75,75,75,82,92,92,101,108,108,108],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"population":99755},"Orange":{"name":"Orange","type":"county","cases":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,4,5,5,6,9,14,14,17,22,29,53,65,78,95,125,152,187,256,321,403,431,464,502,606,656,711,786,834,882,931,1016,1079,1138,1221,1277,1283,1299,1376,1425,1501,1556,1636,1676,1691,1753,1827,1845,1969,2074,2126,2151,2252,2393,2537,2636,2743,2819,2873,3004,3092,3240,3380,3502,3557,3602,3749,3968,4125,4222,4376,4434,4500,4742,4841,4941,5157,5336,5469,5578,5646,5744,5923,6100,6261,6474,6574,6678,6783,7064,7321,7440,7527,7614,7737,7987,8153,8269,8573,8759,8999,9197,9292,9576,9988,10422,10595,10737,11016,11511,11960,12462,12608],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,3,4,4,4,7,10,13,13,14,14,14,15,17,17,17,18,19,19,19,22,25,28,32,32,33,33,34,36,36,38,39,39,42,44,45,50,52,52,57,69,65,66,71,74,76,76,77,80,80,84,86,88,88,88,98,112,118,130,131,133,131,136,142,145,146,147,147,150,158,165,174,176,177,177,185,198,202,210,217,221,221,233,243,250,257,267,269,269,273,299,306,323,323,326],"population":3175692},"Placer":{"name":"Placer","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,5,5,5,7,7,7,7,4,7,5,5,5,9,9,9,9,12,12,20,30,30,30,41,53,53,57,78,90,97,97,103,106,106,117,117,123,123,124,127,128,129,130,130,131,132,132,133,133,136,139,139,141,143,145,145,147,150,159,159,162,162,163,165,165,168,169,170,170,170,172,174,174,175,175,177,176,176,184,185,184,185,188,194,196,199,214,215,217,228,240,259,265,275,284,294,304,314,327,344,358,372,390,411,432,460,476,490,502,519,534,556,579,593,611,627],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,4,4,4,4,4,5,5,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,11,11,11],"population":398329},"Plumas":{"name":"Plumas","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,6,6,6,6,6,6,7,7,7,7,7],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"population":18807},"Riverside":{"name":"Riverside","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,4,6,8,8,14,14,15,15,16,22,28,28,29,46,57,68,105,149,183,195,291,371,371,493,493,638,799,946,1016,1179,1280,1350,1431,1619,1619,1961,1961,2105,2457,2457,2638,2847,2847,2960,3218,3315,3315,3563,3643,3735,3942,4031,4079,4079,4180,4354,4454,4672,4756,4756,4992,4992,5189,5248,5248,5440,5618,5618,5618,5952,6053,6184,6343,6464,6464,6464,7004,7139,7139,7341,7486,7486,7486,7982,8155,8155,8303,8777,8777,8777,9206,9590,9911,10240,10490,10490,10490,11285,11694,11951,12467,12778,12778,12778,13800,14431,14905,15142,15643,15643,15643],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,4,4,6,6,6,7,8,8,8,8,9,13,13,14,14,15,19,25,28,32,33,39,41,41,41,50,50,54,69,69,75,85,85,93,100,112,112,118,141,141,143,149,156,156,161,181,184,186,192,192,204,204,217,225,225,235,242,242,242,261,270,270,284,290,290,290,292,303,303,313,323,323,323,331,342,342,345,355,355,355,356,365,372,377,383,383,383,384,395,399,408,410,410,410,424,431,432,435,438,438,438],"population":2470546},"Sacramento":{"name":"Sacramento","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,10,11,17,17,29,29,33,40,40,45,53,53,53,88,88,113,113,164,164,164,224,224,224,314,390,390,442,462,525,580,580,653,653,707,739,816,853,879,896,914,925,940,954,971,987,1019,1019,1037,1045,1053,1068,1077,1090,1107,1117,1127,1133,1142,1153,1160,1165,1167,1173,1181,1183,1194,1211,1222,1237,1245,1250,1255,1266,1272,1289,1293,1302,1310,1319,1349,1373,1400,1400,1429,1439,1463,1490,1519,1537,1569,1588,1624,1642,1670,1704,1716,1753,1794,1825,1892,1940,1976,2069,2160,2243,2374,2440,2512,2666,2666,2776],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,2,2,2,3,3,3,3,4,4,5,5,6,6,6,7,7,7,9,10,10,16,18,21,22,33,24,24,26,27,28,32,32,32,33,34,34,35,36,41,41,41,41,41,41,42,43,42,42,42,47,47,47,49,50,50,50,50,50,51,54,54,54,55,56,56,56,56,56,56,56,56,56,56,56,56,56,56,58,58,58,58,59,59,59,61,61,62,63,63,63,63,63,63,67,67,67,67,67,66,66,66,66,66,66,66],"population":1552058},"San Benito":{"name":"San Benito","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,5,5,5,6,6,7,9,13,14,14,14,17,21,23,23,23,23,23,23,33,33,34,35,35,35,39,39,41,44,44,44,44,44,45,47,47,47,47,47,48,50,50,51,51,51,51,52,53,53,54,55,55,56,58,58,59,59,60,61,61,63,64,64,66,69,70,72,76,76,85,85,87,87,87,88,90,96,102,105,105,107,109,109,109,112,121,125,129,129,140,153,161,164,170,181,185,191,194,198,205,205],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"population":62808},"San Bernardino":{"name":"San Bernardino","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,5,9,10,17,17,31,38,54,54,76,76,111,125,183,254,304,353,372,373,530,547,641,729,810,810,887,977,977,996,1032,1219,1286,1406,1489,1489,1608,1666,1666,1732,1772,1827,1928,2058,2113,2182,2182,2182,2329,2432,2562,2629,2902,2902,3015,3078,3153,3198,3311,3463,3511,3593,3707,3795,3984,4146,4315,4365,4365,4567,4567,4914,5034,5200,5246,5355,5501,5650,5650,5930,6040,6040,6247,6417,6593,6742,6976,7161,7359,7515,7796,8014,8454,8714,8959,9156,9361,10010,10407,10769,11290,11290,11501],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,4,6,6,8,13,13,13,16,17,20,24,25,25,31,31,31,39,47,57,57,60,67,67,77,80,80,82,82,85,89,93,94,97,97,97,101,104,108,111,114,114,115,120,138,139,150,155,155,155,157,158,164,173,176,176,176,176,176,190,199,204,204,204,208,209,209,217,224,224,224,224,225,227,229,229,229,228,228,229,230,230,233,233,234,234,245,248,248,248,249],"population":2180085},"San Diego":{"name":"San Diego","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,5,8,10,16,55,55,60,80,127,127,155,201,226,238,293,341,413,484,515,603,733,849,966,1112,1209,1326,1404,1454,1530,1628,1693,1761,1804,1847,1930,2012,2087,2158,2213,2268,2325,2491,2643,2826,2943,2943,3043,3141,3432,3432,3564,3711,3927,3927,4020,4319,4319,4429,4662,4776,5065,5161,5161,5391,5391,5662,5836,5836,6026,6140,6140,6315,6559,6559,6701,6797,6882,7100,7100,7385,7481,7481,7554,7674,7798,7940,8345,8345,8619,8619,8837,8998,8998,9314,9440,9610,9730,9730,10092,10350,10484,10794,11096,11294,11626,11961,12401,12837,13334],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,3,3,6,7,7,7,9,15,16,17,18,19,19,31,36,40,44,45,45,47,53,60,63,70,71,71,72,96,100,102,111,111,111,113,120,120,124,134,139,139,144,158,158,165,169,175,175,190,190,200,200,209,209,209,222,230,230,241,249,249,249,249,249,260,260,269,269,269,269,276,283,288,296,296,296,296,305,308,308,319,319,320,323,323,331,332,338,338,338,341,347,352,358,360,361],"population":3338330},"San Francisco":{"name":"San Francisco","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,9,9,9,14,14,18,23,28,28,40,43,51,70,76,84,108,131,152,178,223,279,308,340,374,397,434,450,497,529,568,583,622,676,724,797,857,872,957,987,1013,1019,1058,1137,1157,1216,1231,1233,1302,1340,1354,1408,1424,1468,1490,1499,1523,1543,1602,1624,1728,1754,1806,1853,1891,1943,1954,1977,1994,1999,2026,2054,2091,2131,2179,2185,2198,2320,2350,2367,2386,2399,2408,2437,2473,2532,2588,2570,2587,2613,2644,2698,2712,2747,2779,2793,2809,2840,2878,2906,2928,2952,2971,2982,3020,3057,3058,3058,3185,3219,3249,3297,3400,3468,3512],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,4,6,6,7,7,7,8,8,9,9,10,10,13,13,14,15,15,17,17,20,20,20,20,20,21,21,22,22,22,23,23,23,25,28,29,29,29,31,31,32,33,33,34,35,35,35,35,36,36,36,36,36,37,37,40,40,40,40,40,40,40,41,41,42,43,43,43,43,43,43,43,43,44,44,44,44,44,45,46,46,47,47,47,47,47,48,48,48,48,48,49,50],"population":881549},"San Joaquin":{"name":"San Joaquin","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,6,8,8,8,13,14,17,25,31,31,41,51,68,71,90,93,113,123,136,151,173,180,185,191,206,217,223,237,253,257,266,293,314,341,365,371,400,415,428,449,460,487,495,505,512,528,529,540,543,557,560,570,574,578,579,581,597,605,612,621,629,638,644,659,670,689,699,709,716,733,752,752,752,752,771,771,842,858,858,858,908,982,1080,1024,1050,1118,1161,1195,1259,1309,1388,1444,1547,1652,1716,1749,1888,1927,1926,2519,2519,2400,2560,2742,2884,3031,3093,3093],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,3,3,3,4,4,6,6,8,9,9,11,11,11,13,13,14,14,14,15,16,17,17,17,17,17,17,17,18,20,22,24,24,25,25,25,25,25,25,25,25,26,26,27,28,28,28,29,29,30,31,31,31,31,32,32,33,33,33,33,33,33,33,33,33,35,34,34,34,34,35,35,36,36,37,37,37,39,40,42,42,42,42,42,47,46,47,48,48,48,48,48,49,49,52,52,52],"population":762148},"San Luis Obispo":{"name":"San Luis Obispo","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,7,13,16,21,27,27,42,46,54,59,67,67,71,80,80,89,93,93,95,95,95,99,102,104,110,114,117,117,120,125,127,131,132,132,134,134,149,163,165,166,169,173,181,184,188,196,201,202,204,208,211,211,214,220,226,227,232,237,240,243,243,246,247,249,251,253,259,258,259,263,263,268,269,269,269,271,278,279,288,291,291,291,299,302,306,317,324,324,324,347,356,376,389,404,404,404,442,453,473,489,508,508,508],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"population":283111},"San Mateo":{"name":"San Mateo","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,8,15,20,20,32,32,41,64,80,89,100,110,117,142,161,165,195,239,274,277,309,309,388,453,486,538,555,579,589,617,633,638,652,652,701,721,747,767,797,838,838,920,935,958,966,989,1019,1019,1080,1099,1136,1177,1197,1233,1233,1281,1315,1341,1377,1397,1425,1425,1464,1497,1515,1536,1575,1602,1602,1671,1687,1697,1738,1783,1833,1833,1833,1904,1963,2022,2061,2104,2104,2165,2188,2212,2244,2299,2330,2330,2394,2437,2475,2494,2533,2533,2553,2594,2625,2653,2678,2721,2721,2721,2825,2901,2961,2996,3049,3083,3083],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,5,5,6,6,6,6,10,10,10,13,13,13,13,21,21,21,21,21,21,21,21,21,28,28,28,28,28,28,39,39,41,41,41,41,48,48,48,51,51,51,51,56,56,56,56,56,56,56,65,65,65,66,66,66,66,75,75,75,76,76,76,76,82,82,82,84,84,84,84,84,84,84,88,88,88,88,93,93,93,99,99,99,99,99,99,99,103,103,103,103,104,104,104,106,106,106],"population":766573},"Santa Barbara":{"name":"Santa Barbara","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,8,9,9,13,18,18,24,26,32,47,64,68,88,99,111,139,152,168,174,192,218,228,243,260,264,267,284,313,334,354,373,385,394,416,429,451,460,469,469,471,473,485,485,506,506,514,514,526,613,613,722,1250,1250,1362,1371,1371,1387,1387,1418,1474,1474,1517,1520,1520,1540,1551,1551,1551,1551,1604,1636,1636,1649,1649,1649,1669,1697,1714,1737,1787,1787,1817,1817,1864,1910,1910,1971,1971,2069,2115,2115,2253,2319,2319,2319,2446,2509,2590,2631,2742,2712,2712],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,3,3,4,4,4,5,5,6,7,7,7,7,8,8,8,8,8,8,8,9,9,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,14,14,14,15,15,15,15,16,16,16,18,18,18,22,22,22,22,22,22,27,27,27,28,28,28,28],"population":446499},"Santa Clara":{"name":"Santa Clara","type":"county","cases":[0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,9,11,11,20,20,32,38,38,43,48,52,79,95,91,138,155,175,189,196,263,263,302,375,459,542,574,591,646,848,890,956,1019,1019,1148,1207,1207,1285,1380,1380,1442,1484,1566,1666,1666,1793,1833,1870,1870,1870,1922,1922,1962,1987,2018,2040,2084,2105,2122,2134,2163,2179,2205,2231,2244,2255,2268,2281,2290,2307,2339,2341,2362,2364,2391,2391,2418,2453,2453,2483,2492,2492,2492,2571,2617,2652,2675,2688,2701,2707,2731,2776,2776,2819,2832,2850,2892,2920,2942,2973,3017,3032,3063,3117,3157,3197,3230,3254,3288,3363,3398,3458,3547,3606,3727,3832,3888,3984,3984,4162],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,2,4,6,6,8,8,8,10,16,17,19,20,25,25,28,30,32,36,36,39,39,39,43,46,46,47,50,51,60,60,65,69,73,73,73,83,83,94,95,98,99,100,103,106,107,111,113,114,115,117,121,126,127,128,128,129,129,130,130,134,134,135,135,135,137,138,138,138,139,139,139,139,140,140,140,141,141,141,143,144,144,144,144,144,145,146,146,148,150,150,151,151,151,151,152,152,152,152,154,154,154,155,155,155,155],"population":1927852},"Santa Cruz":{"name":"Santa Cruz","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,4,7,7,7,9,13,13,14,15,15,15,22,22,24,25,32,34,41,44,45,49,54,57,59,69,69,76,76,76,80,80,88,91,91,96,96,98,101,104,106,108,111,114,115,115,120,124,125,127,131,132,134,137,137,138,138,139,140,141,141,141,146,146,149,149,157,159,163,165,168,174,186,192,192,200,200,205,206,206,212,213,217,217,219,219,221,226,231,234,235,239,249,254,255,257,257,260,269,273,283,286,296,296,322,330,337,344,349,349],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3],"population":273213},"Shasta":{"name":"Shasta","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3,3,3,3,4,4,6,7,7,11,12,17,20,21,23,24,24,24,24,24,25,25,25,26,26,26,26,26,26,28,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,31,31,32,32,32,33,33,33,34,34,34,34,34,34,36,36,36,36,37,37,37,37,39,39,39,40,40,42,42,42,46,46,47,48,48,49,50,51,51,51,62,76,80,81,86,88,92,96,97,101,105],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],"population":180080},"Sierra":{"name":"Sierra","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"population":3005},"Siskiyou":{"name":"Siskiyou","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,3,3,3,3,4,3,3,3,3,3,3,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,8,9,9,9,9,12,12,13,14,14,14,15,16,18,20,20,21,21,22,23,24,25,26,26,26,27,27],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"population":43539},"Solano":{"name":"Solano","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,6,6,6,6,6,7,7,8,8,13,13,13,14,21,24,31,34,34,34,34,43,49,54,61,73,73,73,88,99,112,115,121,121,121,135,140,141,169,169,169,180,180,181,191,199,199,199,199,249,254,263,266,266,266,267,320,337,337,342,351,351,379,388,388,408,408,410,410,410,430,435,435,449,455,455,455,455,499,509,509,517,517,517,546,547,559,565,566,566,590,590,617,643,643,657,657,685,687,687,811,860,860,860,933,1020,1064,1094,1118,1118,1118],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,4,4,4,4,4,4,5,5,5,5,5,5,6,7,7,7,7,7,10,11,11,14,14,16,16,16,16,18,18,19,20,20,20,20,20,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23],"population":447643},"Sonoma":{"name":"Sonoma","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,3,3,3,3,3,1,2,5,4,8,6,9,22,22,29,29,34,37,44,50,58,58,73,78,91,95,105,107,111,111,120,136,142,145,145,147,152,160,163,172,180,180,181,182,192,194,217,217,218,220,222,228,232,244,248,252,257,261,272,286,292,300,309,309,312,333,337,351,364,373,387,391,411,433,444,467,482,500,515,524,530,531,548,553,564,566,579,593,610,624,642,653,664,671,680,701,722,752,758,765,774,803,822,835,853,885,935,956,974,1006,1006,1092],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5],"population":494336},"Stanislaus":{"name":"Stanislaus","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,3,3,5,5,5,5,5,8,11,12,13,17,23,29,31,33,39,44,51,58,65,71,81,90,95,103,116,121,131,146,163,177,187,206,221,226,232,236,251,264,264,286,294,312,339,339,380,380,411,411,428,461,461,476,488,496,508,517,517,537,537,559,571,571,593,598,598,611,621,629,646,659,670,683,683,699,744,744,750,767,792,816,840,865,937,937,1023,1072,1072,1110,1212,1242,1267,1267,1322,1473,1514,1599,1639,1714,1789,1871,1940,2000,2115],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,4,4,4,4,4,4,4,4,5,5,5,5,5,7,11,11,13,13,14,14,15,17,17,19,19,20,21,22,22,23,23,24,24,24,26,26,26,28,28,28,28,28,28,28,28,28,29,29,29,30,30,31,31,33,33,33,33,33,33,34,34,35,35,35,35,35,35,35,37,37,38,38,38,41,41],"population":550660},"Sutter":{"name":"Sutter","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,3,6,6,9,10,14,14,16,16,16,16,19,20,37,37,37,37,23,24,24,24,25,25,26,26,26,44,44,44,45,45,29,30,30,31,31,31,31,31,31,31,31,32,33,34,34,35,37,37,37,38,40,40,40,40,40,40,40,40,42,42,42,42,43,46,46,46,46,48,51,55,55,65,65,67,69,69,83,86,88,89,89,97,99,101,101,161,125,127,140,147,152,160],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,3,3,3,3,3,3],"population":96971},"Tehama":{"name":"Tehama","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,5,6,6,7,8,8,9,11,12,12,20,21,21,27,28,28,32,34,34,34,53,54,59,62,62,62,62],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"population":65084},"Trinity":{"name":"Trinity","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"population":12285},"Tulare":{"name":"Tulare","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,2,3,4,7,7,11,12,16,17,17,18,20,24,29,35,43,45,74,81,81,116,135,157,157,168,203,203,227,264,296,352,372,382,397,411,422,422,441,453,472,491,504,532,578,626,640,680,720,743,757,858,916,969,1013,1079,1140,1159,1241,1268,1295,1338,1426,1430,1436,1539,1552,1603,1641,1641,1641,1641,1771,1796,1835,1844,1844,1844,1897,2004,2026,2083,2116,2116,2116,2220,2381,2432,2475,2564,2564,2564,2664,2664,2881,3004,3046,3046,3046,3177,3434,3533,3646,3705,3705,3705],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,3,5,6,7,7,9,11,11,11,13,13,15,17,17,17,17,18,18,25,25,28,32,32,32,35,36,40,40,40,40,40,40,41,43,44,46,48,50,52,54,54,64,67,67,67,71,73,74,75,75,75,75,79,79,80,84,84,84,89,89,90,92,92,92,92,94,94,96,98,98,98,98,98,98,106,107,111,111,111,113,116,118,119,122,122,122],"population":466195},"Tuolumne":{"name":"Tuolumne","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,4,4,4,4,4,4,4,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,4,4,4,4,4,4,4,4,5,5,7,7,7,7,7,8,8,8,9,9,9,9,9,9,10,12,12,14,15,22,22,22,28],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"population":54478},"Ventura":{"name":"Ventura","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,5,5,4,10,10,13,19,19,25,30,35,39,50,61,83,98,109,126,149,160,177,203,221,221,243,263,274,298,298,309,314,317,365,384,396,396,422,428,428,443,465,476,476,496,497,508,517,535,544,559,566,577,595,608,631,631,652,666,678,698,725,748,764,764,764,764,825,837,858,883,912,912,912,912,1017,1062,1062,1078,1078,1152,1164,1164,1190,1216,1261,1261,1341,1341,1404,1404,1518,1518,1518,1633,1655,1706,1706,1835,1835,1835,2030,2161,2161,2287,2336,2336,2336],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,3,3,4,4,5,5,6,6,6,6,6,7,7,10,10,10,10,10,13,13,13,13,13,13,13,13,16,16,16,16,17,17,17,18,18,19,19,19,19,19,19,19,19,19,19,19,24,25,25,25,25,25,25,28,29,29,30,30,30,30,32,32,32,33,33,34,34,34,35,35,35,35,35,35,38,38,40,40,40,41,41,41,41,42,42,42,43,43,43,44,44,44,44],"population":846006},"Yolo":{"name":"Yolo","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,4,4,5,5,6,6,6,8,10,11,13,16,16,16,24,25,28,33,37,37,37,50,56,67,71,75,88,93,101,102,116,125,126,137,137,142,146,151,157,157,161,161,162,163,164,169,169,171,171,171,172,172,172,172,172,174,177,177,182,182,183,184,184,185,185,185,186,190,190,194,198,200,207,207,210,211,211,213,213,216,216,221,221,225,226,227,240,240,252,253,255,265,265,302,310,321,330,347,366,386,408,438,458,479],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3,3,3,3,4,4,7,7,8,8,9,10,10,12,13,13,13,14,16,16,16,16,16,17,19,19,20,20,20,20,20,20,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,40,40,24,24,24,24,24,24,24,24,24,24,24,24,24,24],"population":220500},"Yuba":{"name":"Yuba","type":"county","cases":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,0,3,3,3,3,4,6,7,8,8,9,9,11,11,13,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,17,18,19,19,19,19,19,19,19,20,20,20,21,23,23,25,25,25,25,26,28,28,28,28,28,28,28,28,28,28,29,30,30,30,30,31,31,31,32,32,32,32,33,34,34,35,35,36,37,37,39,41,42,42,43,43,49,51,57,61,65],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"population":78668}},"population":39512223,"cases":[0,0,0,0,2,2,2,2,2,3,3,3,6,6,6,6,6,6,6,6,7,7,8,8,8,8,8,8,8,8,10,10,10,10,10,10,11,11,12,12,21,25,35,51,59,81,95,101,144,178,221,281,371,373,557,700,828,1005,1243,1405,1646,2108,2538,2998,3899,4645,5095,5852,7138,8210,9399,10773,12004,12837,15034,15976,17309,18730,19706,21077,21702,22787,23931,25356,26686,27677,29157,30491,31431,33686,35465,37344,39561,41355,42368,43558,44966,46164,48747,50130,52026,53347,54903,55884,58456,60616,62148,63779,66558,67600,69329,70978,72798,74871,76693,78725,80166,81457,83752,85997,88031,90252,92539,94020,96400,99387,101050,103813,106622,109895,111951,114733,117215,119348,122168,125738,128593,130615,133816,136641,139715,143377,146659,150018,152300,155726,158961,162798,167086,170862,175213,178546,184765,191477,195925,201112,206844,210584,215296],"deaths":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,4,4,4,3,5,7,12,16,18,24,25,30,39,50,65,81,94,110,123,146,173,198,238,263,289,348,380,432,493,542,583,604,640,714,767,860,956,1037,1140,1175,1223,1280,1419,1531,1619,1687,1723,1777,1862,1944,2029,2124,2178,2214,2276,2379,2462,2533,2613,2687,2716,2779,2879,2957,3052,3136,3208,3240,3279,3403,3497,3583,3665,3737,3753,3768,3818,3894,3993,4077,4144,4172,4217,4305,4374,4444,4529,4607,4632,4657,4745,4854,4934,4978,5076,5099,5114,5200,5271,5355,5426,5494,5515,5566,5626,5725,5806,5868,5899,5932]}}},"chartData":{"name":"chartData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return {\n    totalCases: {\n        plotSeriesData: casesPlotSeriesData,\n        chartOptions: casesChartOptions\n    },\n    newCases: {\n        plotSeriesData: newCasesPlotSeriesData,\n        chartOptions: newCasesChartOptions\n    },\n    totalDeaths: {\n        plotSeriesData: deathsPlotSeriesData,\n        chartOptions: deathsChartOptions\n    },\n    newDeaths: {\n        plotSeriesData: newDeathsPlotSeriesData,\n        chartOptions: newDeathsChartOptions\n    }\n}","supplementalCode":""}},"rawScaledCasesData":{"name":"rawScaledCasesData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let getData = region => {\n    let regionData = parentDataEntry.regions[region];\n    return dataProcessUtilities.multiplyFunction(regionData.cases,CASES_PER/regionData.population);\n}\n\nreturn selectedRegions.map(getData);","supplementalCode":""}},"rawScaledDeathsData":{"name":"rawScaledDeathsData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let getData = region => {\n    let regionData = parentDataEntry.regions[region];\n    return dataProcessUtilities.multiplyFunction(regionData.deaths,CASES_PER/regionData.population);\n}\n\nreturn selectedRegions.map(getData);","supplementalCode":""}},"rawScaledNewCasesData":{"name":"rawScaledNewCasesData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return rawScaledCasesData.map( data => dataProcessUtilities.differenceFunction(data) );","supplementalCode":""}},"rawScaledNewDeathsData":{"name":"rawScaledNewDeathsData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return rawScaledDeathsData.map( data => dataProcessUtilities.differenceFunction(data) );","supplementalCode":""}},"combinedFilteredCasesData":{"name":"combinedFilteredCasesData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let data = {};\ndata.filteredData = [];\ndata.filteredDifferenceData = [];\n\nlet addFilteredData = dataSeries => {\n    let filteredResult = dataProcessUtilities.smoothData(dataSeries,FILTER_N_DAYS);\n    data.filteredData.push(filteredResult.filteredDataArray);\n    data.filteredDifferenceData.push(filteredResult.filteredDifferenceArray);\n}\n\nrawScaledCasesData.forEach(addFilteredData);\n\nreturn data;","supplementalCode":""}},"combinedFilteredDeathsData":{"name":"combinedFilteredDeathsData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let data = {};\ndata.filteredData = [];\ndata.filteredDifferenceData = [];\n\nlet addFilteredData = dataSeries => {\n    let filteredResult = dataProcessUtilities.smoothData(dataSeries,FILTER_N_DAYS);\n    data.filteredData.push(filteredResult.filteredDataArray);\n    data.filteredDifferenceData.push(filteredResult.filteredDifferenceArray);\n}\n\nrawScaledDeathsData.forEach(addFilteredData);\n\nreturn data;","supplementalCode":""}},"casesPlotSeriesData":{"name":"casesPlotSeriesData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return getCombinedChartSeriesData(rawScaledCasesData,combinedFilteredCasesData.filteredData);\n","supplementalCode":""}},"casesChartOptions":{"name":"casesChartOptions","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let title = \"Cases per \" + CASES_PER + \" people\"\nreturn createChartOptions(title,undefined);","supplementalCode":""}},"newCasesPlotSeriesData":{"name":"newCasesPlotSeriesData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return getCombinedChartSeriesData(rawScaledNewCasesData,combinedFilteredCasesData.filteredDifferenceData);\n","supplementalCode":""}},"newCasesChartOptions":{"name":"newCasesChartOptions","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let title = \"New Cases per \" + CASES_PER + \" people\"\nreturn createChartOptions(title,undefined);","supplementalCode":""}},"deathsPlotSeriesData":{"name":"deathsPlotSeriesData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return getCombinedChartSeriesData(rawScaledDeathsData,combinedFilteredDeathsData.filteredData);\n","supplementalCode":""}},"deathsChartOptions":{"name":"deathsChartOptions","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let title = \"Deaths per \" + CASES_PER + \" people\"\nreturn createChartOptions(title,undefined);","supplementalCode":""}},"newDeathsPlotSeriesData":{"name":"newDeathsPlotSeriesData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return getCombinedChartSeriesData(rawScaledNewDeathsData,combinedFilteredDeathsData.filteredDifferenceData);\n","supplementalCode":""}},"newDeathsChartOptions":{"name":"newDeathsChartOptions","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let title = \"New Deaths per \" + CASES_PER + \" people\"\nreturn createChartOptions(title,\"linear\");","supplementalCode":""}},"getCombinedChartSeriesData":{"name":"getCombinedChartSeriesData","type":"apogee.FunctionMember","updateData":{"argList":["rawSeries","filteredSeries"],"functionBody":"let seriesData = [];\n\nif(dataToPlot.includes(\"rawData\")) {\n    let rawDataSeries = rawSeries.map( (dataSeries,index) => {\n        let label = selectedRegions[index] + \"(raw)\";\n        return getChartSeriesData(dataSeries,label,index,selectedRegions.length);\n    });\n    seriesData = seriesData.concat(rawDataSeries);\n}\n\nif(dataToPlot.includes(\"filteredData\")) {\n    let filteredDataSeries = filteredSeries.map( (dataSeries,index) => {\n        let label = selectedRegions[index] + \"(filtered)\";\n        return getChartSeriesData(dataSeries,label,index,selectedRegions.length);\n    });\n    seriesData = seriesData.concat(filteredDataSeries);\n}\n\nreturn seriesData;","supplementalCode":""}},"getChartSeriesData":{"name":"getChartSeriesData","type":"apogee.FunctionMember","updateData":{"argList":["dataSeries","label","dataIndex","dataCount"],"functionBody":"return {\n    yArray: dataSeries,\n    datasetOptions: getDatasetOptions(label,dataIndex,dataCount)\n}","supplementalCode":""}},"selectedRegions":{"name":"selectedRegions","type":"apogee.JsonMember","updateData":{"data":["Alameda","Contra Costa","San Francisco","San Mateo","Santa Clara"]}},"dataToPlot":{"name":"dataToPlot","type":"apogee.JsonMember","updateData":{"data":["filteredData"]}},"yAxisType":{"name":"yAxisType","type":"apogee.JsonMember","updateData":{"data":"linear"}}}}}},"FILTER_N_DAYS":{"name":"FILTER_N_DAYS","type":"apogee.JsonMember","updateData":{"data":7}},"CASES_PER":{"name":"CASES_PER","type":"apogee.JsonMember","updateData":{"data":1000000}},"createChartOptions":{"name":"createChartOptions","type":"apogee.FunctionMember","updateData":{"argList":["chartName","yAxisType"],"functionBody":"return {\n\t\"title\": {\n\t\t\"display\": true,\n\t\t\"text\": chartName\n\t},\n\t\"scales\": {\n\t\t\"xAxes\": [\n\t\t\t{\n\t\t\t\t\"type\": \"category\",\n\t\t\t\t\"display\": true\n\t\t\t}\n\t\t],\n\t\t\"yAxes\": [\n\t\t\t{\n\t\t\t\t\"type\": yAxisType,\n\t\t\t\t\"display\": true\n\t\t\t}\n\t\t]\n\t}\n}","supplementalCode":""}}}},"usCountyPlots":{"name":"usCountyPlots","type":"apogee.Folder","children":{"graphingOptions":{"name":"graphingOptions","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.FunctionMember","updateData":{"argList":[],"functionBody":"return [\n    {\n        type: \"checkboxGroup\",\n        label: \"Plot Data: \",\n        entries: [[\"Filtered Data\",\"filteredData\"],[\"Raw Data\",\"rawData\"]],\n        horizontal: true,\n        groupName: \"plotDataType\",\n        key: \"plotDataType\"\n    } /*,\n    {\n        type: \"radioButtonGroup\",\n        label: \"Y Scale: \",\n        entries: [[\"Linear\",\"linear\"],[\"Logarithmic\",\"logarithmic\"]],\n        horizontal: true,\n        groupName: \"scaleType\",\n        key: \"scaleType\"\n    }   */ \n]","supplementalCode":""}},"data":{"name":"data","type":"apogee.JsonMember","updateData":{"data":{"plotDataType":["filteredData"]}}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionMember","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":""}}}},"stateSelector":{"name":"stateSelector","type":"apogee.Folder","children":{"layout":{"name":"layout","type":"apogee.FunctionMember","updateData":{"argList":[],"functionBody":"//create the layout with a state dropdown\nlet layout = [\n    {\n        type: \"dropdown\",\n        entries: usProcessedData.stateWithCountyDataList, \n        key: \"state\"\n    }\n]\n\n//add an entry to select counties for a given state\nfor(let stateName in usDataEntry.regions) {\n    let stateEntry = usDataEntry.regions[stateName];\n    layout.push(_getCountySelector(stateEntry));\n}\n\nreturn layout;","supplementalCode":"function _getCountySelector(stateEntry) {\n    let countyList = [];\n    for(let countyName in stateEntry.regions) {\n        countyList.push(countyName);\n    }\n    \n    return {\n        type: \"checkboxGroup\",\n        entries: countyList.map( value => [value + \"\\t\",value]), //the tab is added for better spacing. \n        key: stateEntry.name + \"|county\",\n        horizontal: true,\n        selector: {\n            parentKey: \"state\",\n            parentValue: stateEntry.name\n        }\n    }\n}"}},"data":{"name":"data","type":"apogee.JsonMember","updateData":{"data":{"state":"California","California|county":["Alameda","Contra Costa","San Francisco","San Mateo","Santa Clara"]}}},"isInputValid":{"name":"isInputValid","type":"apogee.FunctionMember","updateData":{"argList":["formValue"],"functionBody":"//If data valid, return true. If data is invalid, return an error message.\nreturn true;","supplementalCode":""}}}},"scaledCasesChart":{"name":"scaledCasesChart","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"\n    return {\n        \"chartType\": \"line\",\n        \"xValuesInputType\": \"common\",\n        \"commonXValueArray\": dateLabels,\n        \"datasets\": chartData.totalCases.plotSeriesData,\n        \"generalOptions\": chartData.totalCases.chartOptions,\n        \"storedData\": {\"chartType\":\"line\",\"xValuesInputType\":\"common\",\"commonXValueArray\":\"dateLabels\",\"datasets\":\"chartData.totalCases.plotSeriesData\",\"generalOptions\":\"chartData.totalCases.chartOptions\"}\n    };","supplementalCode":""}},"scaledNewCasesChart":{"name":"scaledNewCasesChart","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"\n    return {\n        \"chartType\": \"line\",\n        \"xValuesInputType\": \"common\",\n        \"commonXValueArray\": dateLabels,\n        \"datasets\": chartData.newCases.plotSeriesData,\n        \"generalOptions\": chartData.newCases.chartOptions,\n        \"storedData\": {\"chartType\":\"line\",\"xValuesInputType\":\"common\",\"commonXValueArray\":\"dateLabels\",\"datasets\":\"chartData.newCases.plotSeriesData\",\"generalOptions\":\"chartData.newCases.chartOptions\"}\n    };","supplementalCode":""}},"scaledDeathsChart":{"name":"scaledDeathsChart","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"\n    return {\n        \"chartType\": \"line\",\n        \"xValuesInputType\": \"common\",\n        \"commonXValueArray\": dateLabels,\n        \"datasets\": chartData.totalDeaths.plotSeriesData,\n        \"generalOptions\": chartData.totalDeaths.chartOptions,\n        \"storedData\": {\"chartType\":\"line\",\"xValuesInputType\":\"common\",\"commonXValueArray\":\"dateLabels\",\"datasets\":\"chartData.totalDeaths.plotSeriesData\",\"generalOptions\":\"chartData.totalDeaths.chartOptions\"}\n    };","supplementalCode":""}},"scaledNewDeathsChart":{"name":"scaledNewDeathsChart","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"\n    return {\n        \"chartType\": \"line\",\n        \"xValuesInputType\": \"common\",\n        \"commonXValueArray\": dateLabels,\n        \"datasets\": chartData.newDeaths.plotSeriesData,\n        \"generalOptions\": chartData.newDeaths.chartOptions,\n        \"storedData\": {\"chartType\":\"line\",\"xValuesInputType\":\"common\",\"commonXValueArray\":\"dateLabels\",\"datasets\":\"chartData.newDeaths.plotSeriesData\",\"generalOptions\":\"chartData.newDeaths.chartOptions\"}\n    };","supplementalCode":""}},"selectedDataToPlot":{"name":"selectedDataToPlot","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let plotTypeList;\n\n//if the input is not valid, plot the filtered data only.\nif((!graphingOptions.data)||(!graphingOptions.data.plotDataType)||(graphingOptions.data.plotDataType.length == 0)) {\n    plotTypeList = [\"filteredData\"];\n}\nelse {\n    plotTypeList = graphingOptions.data.plotDataType;\n}\n\nreturn plotTypeList;","supplementalCode":""}},"yAxisType":{"name":"yAxisType","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let scaleType;\n\n//if the input is not valid, plot the filtered data only.\nif((!graphingOptions.data)||(!graphingOptions.data.scaleType)) {\n    scaleType = \"linear\";\n}\nelse {\n    scaleType = graphingOptions.data.scaleType;\n}\n\nreturn scaleType;","supplementalCode":""}},"selectedState":{"name":"selectedState","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return stateSelector.data.state;","supplementalCode":""}},"selectedCounties":{"name":"selectedCounties","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let stateKey = selectedState + \"|county\"\n\nif((!stateSelector.data)||(!stateSelector.data[stateKey])) return apogeeutil.INVALID_VALUE;\n\nreturn stateSelector.data[stateKey];\n","supplementalCode":""}},"dateLabels":{"name":"dateLabels","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return usProcessedData.dateLabels;","supplementalCode":""}},"chartData":{"name":"chartData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return graphingUtilities.createChartData(stateDataEntry,selectedCounties,selectedDataToPlot,yAxisType);","supplementalCode":""}},"usDataEntry":{"name":"usDataEntry","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return usProcessedData.cleanedData","supplementalCode":""}},"stateDataEntry":{"name":"stateDataEntry","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return usDataEntry.regions[selectedState];","supplementalCode":""}}}},"dataProcessUtilities":{"name":"dataProcessUtilities","type":"apogee.Folder","children":{"smoothData":{"name":"smoothData","type":"apogee.FolderFunction","updateData":{"argList":["dataArray","N"],"returnValue":"results"},"children":{"body":{"name":"body","type":"apogee.Folder","children":{"dataArray":{"name":"dataArray","type":"apogee.JsonMember","updateData":{"data":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,11,29,39,51,78,106,131,157,196,242,381,517,587,694,825,899,987,1060,1233,1495,1614,1765,1952,2169,2328,2703,2947,3217,3563,3734,3953,4075,4345,4571,4712]}},"results":{"name":"results","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let data = {};\ndata.filteredDataArray = fullLengthBezierPoints;\ndata.filteredDifferenceArray = fullLengthBezierSlope;\nreturn data;","supplementalCode":""}},"AMatrix":{"name":"AMatrix","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return piecewiseLinearModel.createTridiag(workingInputData.length);","supplementalCode":""}},"bVector":{"name":"bVector","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return piecewiseLinearModel.createBVector(workingInputData);","supplementalCode":""}},"solutionVector":{"name":"solutionVector","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return tridiagPage.tridiagSolver(AMatrix,bVector);","supplementalCode":""}},"interpolatedData":{"name":"interpolatedData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let outData = [];\nlet previousShortValue;\nfor(let shortIndex = 0; shortIndex < solutionVector.length; shortIndex++) {\n    let currentShortValue = solutionVector[shortIndex];\n    if(previousShortValue !== undefined) {\n        //interpolate the intermediate points\n        for(let intermediateIndex = 1; intermediateIndex < N; intermediateIndex++) {\n            let intermediateValue = previousShortValue + (currentShortValue - previousShortValue) * (intermediateIndex / N);\n            outData.push(intermediateValue);\n        }\n    }\n    outData.push(currentShortValue);\n    previousShortValue = currentShortValue;\n}\nreturn outData;","supplementalCode":""}},"workingInputData":{"name":"workingInputData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let goodLength = 1 + Math.floor( (dataArray.length - 1) / N) * N;\nlet pointsToTruncate = dataArray.length - goodLength;\n\nreturn dataArray.slice(pointsToTruncate);","supplementalCode":""}},"workingInputLabels":{"name":"workingInputLabels","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"if( (!labelArray)||(!Array.isArray(labelArray))||(labelArray.length == 0)) return null; \nif(labelArray.length != dataArray.length) return {Eror: \"Invalid input label array\"};\n\nlet goodLength = 1 + Math.floor( (labelArray.length - 1) / N) * N;\nlet pointsToTruncate = labelArray.length - goodLength;\n\nreturn labelArray.slice(pointsToTruncate);","supplementalCode":""}},"piecewiseLinearModel":{"name":"piecewiseLinearModel","type":"apogee.Folder","children":{"c1":{"name":"c1","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let value = 0;\nfor(let n = 1; n < N; n++) {\n    value += Math.pow( (N-n)/N , 2 );\n}\n\nreturn value;","supplementalCode":""}},"c2":{"name":"c2","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let value = 0;\nfor(let n = 1; n < N; n++) {\n    value += ((N-n) * n)/ (N*N)\n}\nreturn value;\n","supplementalCode":""}},"createBVector":{"name":"createBVector","type":"apogee.FunctionMember","updateData":{"argList":["data"],"functionBody":"let b = [];\nlet bLength = 1 + (data.length - 1) / N;\n\nfor(let bIndex = 0; bIndex < bLength; bIndex++) {\n    let bValue = 0;\n    for(let n = -N+1; n < N; n++) {\n        let dataIndex = bIndex * N + n;\n        if((dataIndex >= 0)&&(dataIndex < data.length)) {\n            bValue += (data[dataIndex] * (N-Math.abs(n))/N); \n        }\n    }\n    b.push(bValue);\n}\nreturn b;","supplementalCode":""}},"createTridiag":{"name":"createTridiag","type":"apogee.FunctionMember","updateData":{"argList":["dataLength"],"functionBody":"let A = [];\nlet ALength = 1 + (dataLength - 1) / N;\n//first row\nA.push([0,1+c1,c2]);\nfor(let index = 1; index < ALength-1; index++) {\n    A.push([c2,1+2*c1,c2]);\n}\n//last row\nA.push([c2,1+c1,0]);\nreturn A;","supplementalCode":""}}}},"tridiagPage":{"name":"tridiagPage","type":"apogee.Folder","children":{"AMatrix":{"name":"AMatrix","type":"apogee.JsonMember","updateData":{"data":[[0,1,1],[1,2,1],[1,2,0]]}},"bVector":{"name":"bVector","type":"apogee.JsonMember","updateData":{"data":[3,4,3]}},"xVector":{"name":"xVector","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return tridiagSolver(AMatrix,bVector);","supplementalCode":""}},"test":{"name":"test","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return tridiagMultiply(AMatrix,xVector);","supplementalCode":""}},"tridiagSolver":{"name":"tridiagSolver","type":"apogee.FunctionMember","updateData":{"argList":["A","b"],"functionBody":"//make sure out format is correct\nlet rows = A.length;\nif((A[0][0] != 0)||(A[rows-1][2] != 0)||(b.length != A.length)) throw new Error(\"Improper tridiag format\");\n\n//get in a solvable form\nlet ANew = [];\nlet bNew = [];\nlet curRow = A[0];\nlet curRowB = b[0];\nlet newRow;\nlet newRowB;\nfor(let r = 0; r < rows; r++) {\n    //scale this row so the diag value is one\n    let newRow = [0,1,curRow[2]/curRow[1]];\n    let newRowB = curRowB/curRow[1];\n    \n    //store these values\n    ANew.push(newRow);\n    prevRow = newRow;\n    bNew.push(newRowB);\n    prevRowB = newRowB;\n    \n    //subtract current from from next soit is upper diag\n    if(r < rows-1) {\n        let nextRow = A[r+1];\n        let nextRowB = b[r+1];\n        \n        let factor = nextRow[0];\n        curRow = [0,nextRow[1] - prevRow[2]*factor,nextRow[2]];\n        curRowB = nextRowB - prevRowB*factor;\n    }\n}\n\n//no wwe can solve starting with the last row\nxRev = [];\nxRowNext = 0; //this is the x value of the next row\nfor(let r = rows-1; r >= 0; r--) {\n    curRow = ANew[r];\n    curRowB = bNew[r];\n    let xRow = (curRowB - curRow[2] * xRowNext); //remember curRow[1] = 1 and curRow[0] = 0\n    xRev.push(xRow);\n    xRowNext = xRow;\n}\n\nreturn xRev.reverse();\n\n\n","supplementalCode":""}},"tridiagMultiply":{"name":"tridiagMultiply","type":"apogee.FunctionMember","updateData":{"argList":["A","x"],"functionBody":"let rows = A.length;\n\nlet b = [];\nfor(let r = 0; r < rows; r++) {\n    let row = A[r];\n    let value = 0;\n    if(r > 0) value += row[0] * x[r-1];\n    value += row[1] * x[r];\n    if(r < rows-1) value += row[2] * x[r+1];\n    b.push(value);\n}\n\nreturn b;","supplementalCode":""}}}},"lineSegmentInfo":{"name":"lineSegmentInfo","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let data = [];\nlet previousPoint;\nlet segmentLength = N;\nfor(index = 0; index < solutionVector.length; index++) {\n    let currentEntry;\n    let currentPoint = [segmentLength * index,solutionVector[index]];\n    \n    if(previousPoint) {\n        let segmentEntry = {};\n        segmentEntry.slope = (currentPoint[1] - previousPoint[1])/(currentPoint[0] - previousPoint[0])\n        segmentEntry.midPoint = [(currentPoint[0] + previousPoint[0])/2,(currentPoint[1] + previousPoint[1])/2];\n        data.push(segmentEntry);\n    }\n     \n    previousPoint = currentPoint;\n}\nreturn data;","supplementalCode":""}},"bezierSegmentInfo":{"name":"bezierSegmentInfo","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let segmentLength = N;\nlet controlPointLength = N/3;\n\nlet data = [];\n\n//start point - for this we will create a virtual point one segment length back from out first line midpoint\nlet firstInfo = _getPointInfo(0);\nlet firstBezierEntry = {};\nlet startVirtualPoint = _createPoint(firstInfo.point,firstInfo.slope,-segmentLength);\nfirstBezierEntry.p0 = startVirtualPoint;\nfirstBezierEntry.p1 = _createPoint(startVirtualPoint,firstInfo.slope,controlPointLength);\nfirstBezierEntry.p3 = firstInfo.point;\nfirstBezierEntry.p2 = _createPoint(firstInfo.point,firstInfo.slope,-controlPointLength);\ndata.push(firstBezierEntry);\n\n//normal points\nlet previousInfo = firstInfo;\nlet previousLineEntry = firstLineEntry;\nfor(let index = 1; index < lineSegmentInfo.length; index++) {\n    let currentLineEntry = lineSegmentInfo[index];\n    let currentInfo = _getPointInfo(index);\n    \n    let bezierEntry = {};\n    bezierEntry.p0 = previousInfo.point;\n    bezierEntry.p1 = _createPoint(previousInfo.point,previousInfo.slope,controlPointLength);\n    \n    bezierEntry.p3 = currentInfo.point;\n    bezierEntry.p2 = _createPoint(currentInfo.point,currentInfo.slope,-controlPointLength);\n    data.push(bezierEntry);\n    \n    previousInfo = currentInfo;\n}\n\n//end point - for this we will create a virtual point one segment length forward from out last line midpoint\nlet lastInfo = _getPointInfo(lineSegmentInfo.length-1);\nlet lastBezierEntry = {};\nlet endVirtualPoint = _createPoint(lastInfo.point,lastInfo.slope,segmentLength);\nlastBezierEntry.p0 = lastInfo.point;\nlastBezierEntry.p1 = _createPoint(lastInfo.point,lastInfo.slope,controlPointLength);\nlastBezierEntry.p3 = endVirtualPoint;\nlastBezierEntry.p2 = _createPoint(endVirtualPoint,lastInfo.slope,-controlPointLength);\ndata.push(lastBezierEntry);\n\nreturn data;","supplementalCode":"//This function gets the corrected point information for a given index\nfunction _getPointInfo(pointIndex) {\n    let lineEntry = lineSegmentInfo[pointIndex];\n    let deltaY = yCorrections[pointIndex];\n    let point = [lineEntry.midPoint[0],lineEntry.midPoint[1] + deltaY];\n    return {point: point, slope: lineEntry.slope};\n}\n\n//This creates a new point by projecting away from the input point\nfunction _createPoint(point,slope,deltaX) {\n    return [point[0] + deltaX, point[1] + slope * deltaX];\n}"}},"bezierInterpolatedData":{"name":"bezierInterpolatedData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let data = [];\n//init bezier data\nlet bezierSegmentIndex = 0;\nlet bezierSegment = bezierSegmentInfo[bezierSegmentIndex];\nlet getNextBezierSegment = () => {\n    bezierSegmentIndex++;\n    return bezierSegmentInfo[bezierSegmentIndex];\n}\nlet dtdx = 1/N;\n\n//get the bezier calculated values\nfor(let x = 0; x < workingInputData.length; x++) {\n     let entry = {};\n     entry.x = x;\n    \n    if(bezierSegment.p3[0] < x) bezierSegment = getNextBezierSegment();\n    let t = _getBezierT(bezierSegment,x);\n    \n    entry.y = _getBezierPointY(bezierSegment,t);\n    entry.dydx = _getBezierDerivativeY(bezierSegment,t) * dtdx;\n    data.push(entry);\n}\nreturn data;\n","supplementalCode":"function _getBezierT(bezierSegment,x) {\n    //here t is the fractional distance from start to end. This calculation is easy for our choice of control points \n    return (x - bezierSegment.p0[0])/(bezierSegment.p3[0] - bezierSegment.p0[0]);\n}\n\nfunction _getBezierPointY(bezierSegment,t) {\n    return Math.pow(1-t,3) * bezierSegment.p0[1] + 3 * Math.pow(1-t,2) * t * bezierSegment.p1[1] +  3 * (1-t) * Math.pow(t,2) * bezierSegment.p2[1] + Math.pow(t,3) * bezierSegment.p3[1];\n}\n\nfunction _getBezierDerivativeY(bezierSegment,t) {\n    return 3 * Math.pow(1-t,2) * (bezierSegment.p1[1] - bezierSegment.p0[1]) + 6 * (1-t) * t * (bezierSegment.p2[1] - bezierSegment.p1[1]) +  3 * Math.pow(t,2) * ( bezierSegment.p3[1] - bezierSegment.p2[1]);\n}\n\nfunction _getBezierSecondDerivativeY(bezierInfo,t) {\n    return 6 * (1-t) * (bezierSegment.p2[1] - 2 * bezierSegment.p0[1] + bezierInfo.anchorPoint) +  6 * t * ( bezierSegment.p3[1] - 2 * bezierSegment.p2[1] + bezierSegment.p1[1]);\n}\n"}},"bezierPoints":{"name":"bezierPoints","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return bezierInterpolatedData.map( entry => entry.y);","supplementalCode":""}},"bezierSlope":{"name":"bezierSlope","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return bezierInterpolatedData.map( entry => entry.dydx);","supplementalCode":""}},"yCorrections":{"name":"yCorrections","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let correctionArray = [];\n\nfor(let index = 0; index < lineSegmentInfo.length; index++) {\n    //get the change in slope between neighboring segments\n    let currentSegment = lineSegmentInfo[index];\n    let deltaSlopeSum = 0;\n    let deltaSlopeCount = 0;\n    if(index > 0) {\n        let previousSegment = lineSegmentInfo[index-1];\n        deltaSlopeSum += currentSegment.slope - previousSegment.slope;\n        deltaSlopeCount++;\n    }\n    if(index < lineSegmentInfo.length-1) {\n        let nextSegment = lineSegmentInfo[index+1];\n        deltaSlopeSum += nextSegment.slope - currentSegment.slope;\n        deltaSlopeCount++;\n    }\n    //average our slope changes and divide by the length for the change\n    let d2ydx2 = (deltaSlopeSum/deltaSlopeCount)/N\n    \n    //get the y correction the correct for curvature\n    let yCorrection = -Math.pow(N,2) * d2ydx2 / 24;\n    correctionArray.push(yCorrection);\n}\n\nreturn correctionArray;","supplementalCode":""}},"N":{"name":"N","type":"apogee.JsonMember","updateData":{"data":5}},"startIndex":{"name":"startIndex","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let goodLength = 1 + Math.floor( (dataArray.length - 1) / N) * N;\nreturn dataArray.length - goodLength;","supplementalCode":""}},"fullLengthBezierPoints":{"name":"fullLengthBezierPoints","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return prefixPoints.concat(bezierPoints);","supplementalCode":""}},"prefixPoints":{"name":"prefixPoints","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let points = new Array(startIndex);\n\npoints.fill(0);\n\nreturn points;","supplementalCode":""}},"fullLengthBezierSlope":{"name":"fullLengthBezierSlope","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return prefixPoints.concat(bezierSlope);","supplementalCode":""}}}}}},"differenceFunction":{"name":"differenceFunction","type":"apogee.FunctionMember","updateData":{"argList":["inData"],"functionBody":"let previousValue = 0;\nreturn inData.map( (value,index) => {\n    let delta = value - previousValue;\n    previousValue = value;\n    return delta;\n})","supplementalCode":""}},"multiplyFunction":{"name":"multiplyFunction","type":"apogee.FunctionMember","updateData":{"argList":["inData","multiplier"],"functionBody":"return inData.map( value => value*multiplier);","supplementalCode":""}}}}}},"components":{"dataDownload":{"type":"apogeeapp.PageComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Data Download"}]},{"type":"paragraph","content":[{"type":"text","text":"This data is downloaded from a Github site managed by Johns Hopkins: "},{"type":"text","marks":[{"type":"link","attrs":{"href":"https://github.com/CSSEGISandData/COVID-19","title":null}}],"text":"https://github.com/CSSEGISandData/COVID-19"},{"type":"text","text":"."}]},{"type":"heading2","content":[{"type":"text","text":"US Data"}]},{"type":"paragraph","content":[{"type":"text","text":"The url below is raw cases data in csv format for the US."}]},{"type":"apogeeComponent","attrs":{"name":"usCasesUrl","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"The url below is raw cases data in csv format for the US."}]},{"type":"apogeeComponent","attrs":{"name":"usDeathsUrl","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the raw cases data."}]},{"type":"apogeeComponent","attrs":{"name":"usCasesData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the raw deaths data."}]},{"type":"apogeeComponent","attrs":{"name":"usDeathsData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the US cases processed in to a row and column array. The field header is kept on."}]},{"type":"apogeeComponent","attrs":{"name":"usCasesGrid","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the US deaths processed in to a row and column array. The field header is kept on."}]},{"type":"apogeeComponent","attrs":{"name":"usDeathsGrid","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Below are some column numbers from the above grid, with the first column being column 0. This only applies to the cases data. The deaths data has an additional column, population."}]},{"type":"apogeeComponent","attrs":{"name":"US_CASES_COLUMNS","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Below are some column numbers from the deaths grid data, with the first column being 0. Note that this table contains one additional column not in the cases data."}]},{"type":"apogeeComponent","attrs":{"name":"US_DEATHS_COLUMNS","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Data Access Utilities"}]},{"type":"paragraph","content":[{"type":"text","text":"This function gets the time series data for a given row."}]},{"type":"apogeeComponent","attrs":{"name":"getTimeSeriesData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This function gets the data labels for a given table. The table should be the grid data table."}]},{"type":"apogeeComponent","attrs":{"name":"getDateLabels","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Simple CSV Parser"}]},{"type":"paragraph","content":[{"type":"text","text":"This is a simple CSV parser. It will work if there are ZERO or ONE of the internal fields that are quote delimited. It will throw an error if this condition is not met. This works with our current input data."}]},{"type":"apogeeComponent","attrs":{"name":"simpleCsvParser","id":0,"state":""}},{"type":"paragraph"}]}},"children":{"usCasesUrl":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"usDeathsUrl":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":true},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"usCasesData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"usCasesGrid":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"usDeathsGrid":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"usDeathsData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":true},"Private":{"isViewActive":false}}}}},"US_CASES_COLUMNS":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"US_DEATHS_COLUMNS":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"simpleCsvParser":{"type":"apogeeapp.FunctionCell","viewState":{"childDisplayState":{"views":{"Code":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"getTimeSeriesData":{"type":"apogeeapp.FunctionCell","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"getDateLabels":{"type":"apogeeapp.FunctionCell","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":-1}},"workspaceNotes":{"type":"apogeeapp.PageComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Workspace Notes"}]},{"type":"paragraph","content":[{"type":"text","text":"This page contains various notes regarding the workspace, such as items I want to go back and improve."}]},{"type":"heading2","content":[{"type":"text","text":"To Do"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"Maybe add an option to show absolute counts rather than counts per fixed population?"}]}]},{"type":"heading2","content":[{"type":"text","text":"To Improve"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"The parsing of the text data is really a cludge. I will parse the data if there are 0 or 1 fields that are delimited with quotes (because of an included comma). I should generalize this."}]},{"type":"listItem","content":[{"type":"text","text":"I should clean up the filter code."}]},{"type":"listItem","content":[{"type":"text","text":"One shortcoming in the filter that I have a number of points, between 0 and the filter length, that I ignore from the start of the data. In the filter output I set this and the \"delta\" of it to 0. I should update the filter to allow for a partial data interval (shorter than the filter length) at the start of the input data."}]},{"type":"listItem","content":[{"type":"text","text":"The filter slope output also settles to a constant value at the end (and start) of the data. I should figure out what I want to do with this. It is a little deceiving in this context because it makes it look like the rate of change is flattening. In reality, the rate of change is flat for each region EXCEPT that I interpolate the change in slope between regions. I make no account for this at the end (and start)."}]}]},{"type":"heading2","content":[{"type":"text","text":"Other Issues"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"The scroll on the grids will often get out of synch  (I think if you scroll from the top and leave the page). This is a bug in my grid view."}]}]}]}},"viewState":{"childDisplayState":null}},"usProcessedData":{"type":"apogeeapp.PageComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"US Processed Data"}]},{"type":"paragraph","content":[{"type":"text","text":"This is data processed from the downloaded data."}]},{"type":"paragraph","content":[{"type":"text","text":"Data Notes:"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"For some reason, the deaths data includes population but the cases data does not."}]},{"type":"listItem","content":[{"type":"text","text":"Generally, the grid data includes county values. The state values are not given, except in the instance below."}]},{"type":"listItem","content":[{"type":"text","text":"For some \"states\" (which are not actually states but territories), the county is left as the empty string in the CSV data. In these cases the row gives  the state/territory data rather than county data. "}]},{"type":"listItem","content":[{"type":"text","text":"There are some additional \"counties\" for each state, such \"Unassigned\" and \"Out of Alabama\" "}]}]},{"type":"heading2","content":[{"type":"text","text":"Formatted Data"}]},{"type":"paragraph","content":[{"type":"text","text":"Here we put the data into a better working structure."}]},{"type":"paragraph","content":[{"type":"text","text":"NOTES:"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"For entries with not county, the \"county\" field is left undefined"}]}]},{"type":"apogeeComponent","attrs":{"name":"casesData","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"deathsData","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Merged Data"}]},{"type":"paragraph","content":[{"type":"text","text":"Here we combine the cases and deaths data."}]},{"type":"apogeeComponent","attrs":{"name":"combinedData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here we clean up the data:"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"Delete entries with incomplete data, meaning missing cases, deaths or population."}]},{"type":"listItem","content":[{"type":"text","text":"add the counts from counties and put these in the state entries, if needed."}]}]},{"type":"apogeeComponent","attrs":{"name":"cleanedData","id":0,"state":""}},{"type":"heading3","content":[{"type":"text","text":"Data Lists"}]},{"type":"paragraph","content":[{"type":"text","text":"This is a list of states that have cases and death data available at the state level."}]},{"type":"apogeeComponent","attrs":{"name":"stateWithDataList","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is a list of states that have cases and deaths available at the county level."}]},{"type":"apogeeComponent","attrs":{"name":"stateWithCountyDataList","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the label list for the data."}]},{"type":"apogeeComponent","attrs":{"name":"dateLabels","id":0,"state":""}},{"type":"paragraph"},{"type":"paragraph"}]}},"children":{"combinedData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"height":7000,"isViewActive":false}}}}},"cleanedData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"height":7000,"isViewActive":false}}}}},"stateWithCountyDataList":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":true},"Private":{"isViewActive":false}}}}},"stateWithDataList":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":true},"Private":{"isViewActive":false}}}}},"dateLabels":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"casesData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":224,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"deathsData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":-1}},"usStatePlots":{"type":"apogeeapp.PageComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"US State COVID Plots"}]},{"type":"paragraph","content":[{"type":"text","text":"We will plot the number of cases per the following population for the given states"}]},{"type":"paragraph","content":[{"type":"text","text":"This form gets some options for the graphs."}]},{"type":"apogeeComponent","attrs":{"name":"graphingOptions","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This form selects the states to plot."}]},{"type":"apogeeComponent","attrs":{"name":"stateSelector","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Charts"}]},{"type":"paragraph","content":[{"type":"text","text":"The following charts give the number cases, new cases, deaths and new deaths scaled by population size."}]},{"type":"apogeeComponent","attrs":{"name":"scaledCasesChart","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"scaledNewCasesChart","id":0,"state":""}},{"type":"heading2"},{"type":"apogeeComponent","attrs":{"name":"scaledDeathsChart","id":0,"state":""}},{"type":"heading2"},{"type":"apogeeComponent","attrs":{"name":"scaledNewDeathsChart","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Chart Data"}]},{"type":"paragraph","content":[{"type":"text","text":"Here is our compiled chart data."}]},{"type":"apogeeComponent","attrs":{"name":"chartData","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Data Inputs"}]},{"type":"paragraph","content":[{"type":"text","text":"This are the date labels for the original data."}]},{"type":"apogeeComponent","attrs":{"name":"dateLabels","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the input data entry - the US country entry."}]},{"type":"apogeeComponent","attrs":{"name":"usDataEntry","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"These are the selected states."}]},{"type":"apogeeComponent","attrs":{"name":"selectedStates","id":0,"state":""}},{"type":"heading3","content":[{"type":"text","text":"Options"}]},{"type":"paragraph","content":[{"type":"text","text":"These are the data series to plot"}]},{"type":"apogeeComponent","attrs":{"name":"selectedDataToPlot","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the axis type:"}]},{"type":"apogeeComponent","attrs":{"name":"yAxisType","id":0,"state":""}},{"type":"paragraph"},{"type":"paragraph"}]}},"children":{"graphingOptions":{"type":"apogeeapp.DataFormCell","viewState":{"childDisplayState":{"views":{"Form":{"isViewActive":true},"Layout Code":{"height":7000,"isViewActive":false},"Layout Private":{"isViewActive":false},"isInputValid(formValue)":{"isViewActive":false},"isInputValid Private":{"isViewActive":false},"Form Value":{"height":280,"isViewActive":false}}}}},"stateSelector":{"type":"apogeeapp.DataFormCell","viewState":{"childDisplayState":{"views":{"Form":{"isViewActive":true},"Layout Code":{"height":7000,"isViewActive":false},"Layout Private":{"isViewActive":false,"height":7000},"isInputValid(formValue)":{"isViewActive":false},"isInputValid Private":{"isViewActive":false},"Form Value":{"isViewActive":false,"height":280}}}}},"scaledCasesChart":{"type":"apogeeapp.ChartJSCell","viewState":{"childDisplayState":{"views":{"Chart":{"isViewActive":true},"Input":{"isViewActive":true},"Config (Debug)":{"isViewActive":false}}}}},"scaledNewCasesChart":{"type":"apogeeapp.ChartJSCell","viewState":{"childDisplayState":{"views":{"Chart":{"isViewActive":true},"Input":{"isViewActive":true},"Config (Debug)":{"isViewActive":false}}}}},"scaledDeathsChart":{"type":"apogeeapp.ChartJSCell","viewState":{"childDisplayState":{"views":{"Chart":{"isViewActive":true},"Input":{"isViewActive":true},"Config (Debug)":{"isViewActive":false}}}}},"scaledNewDeathsChart":{"type":"apogeeapp.ChartJSCell","viewState":{"childDisplayState":{"views":{"Chart":{"isViewActive":true},"Input":{"isViewActive":true},"Config (Debug)":{"isViewActive":false}}}}},"selectedDataToPlot":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"yAxisType":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"chartData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"usDataEntry":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"selectedStates":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"dateLabels":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":-1,"tabOpened":true,"tabShowing":true}},"graphingUtilities":{"type":"apogeeapp.PageComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Graphing Utilities"}]},{"type":"paragraph","content":[{"type":"text","text":"This function creates the complete set of chart data for the given inputs."}]},{"type":"apogeeComponent","attrs":{"name":"createChartData","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Global Options"}]},{"type":"paragraph","content":[{"type":"text","text":"We will plot the number of cases per the following population in our graphs where we graph per population count."}]},{"type":"apogeeComponent","attrs":{"name":"CASES_PER","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the filtering constant that is used for this data."}]},{"type":"apogeeComponent","attrs":{"name":"FILTER_N_DAYS","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Chart Options"}]},{"type":"paragraph","content":[{"type":"text","text":"This creates chart options for a chart."}]},{"type":"apogeeComponent","attrs":{"name":"createChartOptions","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Dataset Options"}]},{"type":"apogeeComponent","attrs":{"name":"getDatasetOptions","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"These labels are used for line style selection for datasets"}]},{"type":"apogeeComponent","attrs":{"name":"getStyle","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is a lookup table to retrieve line colors."}]},{"type":"apogeeComponent","attrs":{"name":"lineColors","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is a lookup table to retrieve line dash styles"}]},{"type":"apogeeComponent","attrs":{"name":"lineStyles","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":" "}]},{"type":"paragraph"},{"type":"paragraph"}]}},"children":{"getDatasetOptions":{"type":"apogeeapp.FunctionCell","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"getStyle":{"type":"apogeeapp.FunctionCell","viewState":{"childDisplayState":{"views":{"Code":{"height":7000,"isViewActive":true},"Private":{"isViewActive":false}}}}},"lineColors":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"lineStyles":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"createChartData":{"type":"apogeeapp.PageFunctionComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Create Chart Data"}]},{"type":"paragraph","content":[{"type":"text","text":"This function takes the parent data entry (for example, the state entry if we are interested in the counties of that state) and the chart options to create the bundle of chart data to create the different charts for this set of data."}]},{"type":"heading2","content":[{"type":"text","text":"Inputs"}]},{"type":"paragraph","content":[{"type":"text","text":"This is the parent data entry, containing the raw cases series, raw deaths series and the population for each included region."}]},{"type":"apogeeComponent","attrs":{"name":"parentDataEntry","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"These are the regions of the parent entry to plot."}]},{"type":"apogeeComponent","attrs":{"name":"selectedRegions","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the data that should be plotted. It should be an array including the possible values: \"filteredData\" and \"rawData\"."}]},{"type":"apogeeComponent","attrs":{"name":"dataToPlot","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the y axis type. It should be either \"linear\" or \"logarithmic\"."}]},{"type":"apogeeComponent","attrs":{"name":"yAxisType","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Output"}]},{"type":"paragraph","content":[{"type":"text","text":"This is the complete set of chart data, to make four charts including data from each region: cases, new cases, deaths, new deaths."}]},{"type":"apogeeComponent","attrs":{"name":"chartData","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Processing"}]},{"type":"heading2","content":[{"type":"text","text":"Chart Input"}]},{"type":"heading3","content":[{"type":"text","text":"Raw Data"}]},{"type":"paragraph","content":[{"type":"text","text":"This is an array of raw cases data for our selected counties."}]},{"type":"apogeeComponent","attrs":{"name":"rawScaledCasesData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is an array of raw deaths data for our selected counties."}]},{"type":"apogeeComponent","attrs":{"name":"rawScaledDeathsData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the delta counts for the raw cases data:"}]},{"type":"apogeeComponent","attrs":{"name":"rawScaledNewCasesData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the delta counts for the raw deaths data:"}]},{"type":"apogeeComponent","attrs":{"name":"rawScaledNewDeathsData","id":0,"state":""}},{"type":"heading3","content":[{"type":"text","text":"FilteredData"}]},{"type":"paragraph","content":[{"type":"text","text":"Here we have the filtered data. In calling the filter, we get both the counts and the delta counts."}]},{"type":"apogeeComponent","attrs":{"name":"combinedFilteredCasesData","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"combinedFilteredDeathsData","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Chart Data"}]},{"type":"paragraph","content":[{"type":"text","text":"Because we have variable inputs: filtered, raw or both, we need to construct the chart input here, rather than just using an array form for each input."}]},{"type":"paragraph","content":[{"type":"text","text":"In each plot series data cell, we include the chart data as requested fro raw and filtered data."}]},{"type":"heading3","content":[{"type":"text","text":"Total Cases"}]},{"type":"apogeeComponent","attrs":{"name":"casesPlotSeriesData","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"casesChartOptions","id":0,"state":""}},{"type":"heading3","content":[{"type":"text","text":"New Cases"}]},{"type":"apogeeComponent","attrs":{"name":"newCasesPlotSeriesData","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"newCasesChartOptions","id":0,"state":""}},{"type":"heading3","content":[{"type":"text","text":"Total Deaths"}]},{"type":"apogeeComponent","attrs":{"name":"deathsPlotSeriesData","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"deathsChartOptions","id":0,"state":""}},{"type":"heading3","content":[{"type":"text","text":"New Deaths"}]},{"type":"apogeeComponent","attrs":{"name":"newDeathsPlotSeriesData","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"newDeathsChartOptions","id":0,"state":""}},{"type":"paragraph"},{"type":"heading3","content":[{"type":"text","text":"Chart Series Generator"}]},{"type":"paragraph","content":[{"type":"text","text":"This function gets the proper chart series data, including the filtered and raw data as needed. "}]},{"type":"apogeeComponent","attrs":{"name":"getCombinedChartSeriesData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This function will get a properly formatted chart data series array, including style options, from an array of data series. "}]},{"type":"apogeeComponent","attrs":{"name":"getChartSeriesData","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":" "}]},{"type":"heading2"}]}},"children":{"parentDataEntry":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"chartData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"rawScaledCasesData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"rawScaledDeathsData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"rawScaledNewCasesData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"rawScaledNewDeathsData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"combinedFilteredCasesData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":true},"Private":{"isViewActive":false}}}}},"combinedFilteredDeathsData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":true},"Private":{"isViewActive":false}}}}},"casesPlotSeriesData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"casesChartOptions":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"newCasesPlotSeriesData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"newCasesChartOptions":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"deathsPlotSeriesData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"deathsChartOptions":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"newDeathsPlotSeriesData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"newDeathsChartOptions":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"getCombinedChartSeriesData":{"type":"apogeeapp.FunctionCell","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"getChartSeriesData":{"type":"apogeeapp.FunctionCell","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"selectedRegions":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"dataToPlot":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"yAxisType":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}}},"viewState":{"treeState":1}},"FILTER_N_DAYS":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"CASES_PER":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"createChartOptions":{"type":"apogeeapp.FunctionCell","viewState":{"childDisplayState":{"views":{"Code":{"height":7000,"isViewActive":true},"Private":{"isViewActive":false,"height":7000}}}}}},"viewState":{"childDisplayState":null,"treeState":-1}},"usCountyPlots":{"type":"apogeeapp.PageComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"US County Plots"}]},{"type":"paragraph","content":[{"type":"text","text":"We will plot the number of cases per the following population for the given counties in the selected states."}]},{"type":"paragraph","content":[{"type":"text","text":"This form gets some options for the graphs."}]},{"type":"apogeeComponent","attrs":{"name":"graphingOptions","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This form selects the states to plot."}]},{"type":"apogeeComponent","attrs":{"name":"stateSelector","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Charts"}]},{"type":"paragraph","content":[{"type":"text","text":"The following charts give the number cases, new cases, deaths and new deaths scaled by population size."}]},{"type":"apogeeComponent","attrs":{"name":"scaledCasesChart","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"scaledNewCasesChart","id":0,"state":""}},{"type":"heading2"},{"type":"apogeeComponent","attrs":{"name":"scaledDeathsChart","id":0,"state":""}},{"type":"heading2"},{"type":"apogeeComponent","attrs":{"name":"scaledNewDeathsChart","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Chart Data"}]},{"type":"paragraph","content":[{"type":"text","text":"This is the complied chart data."}]},{"type":"apogeeComponent","attrs":{"name":"chartData","id":0,"state":""}},{"type":"paragraph"},{"type":"heading2","content":[{"type":"text","text":"Data Inputs"}]},{"type":"paragraph","content":[{"type":"text","text":"This are the date labels for the original data."}]},{"type":"apogeeComponent","attrs":{"name":"dateLabels","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the US data entry"}]},{"type":"apogeeComponent","attrs":{"name":"usDataEntry","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the selected state:"}]},{"type":"apogeeComponent","attrs":{"name":"selectedState","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"These are the selected counties."}]},{"type":"apogeeComponent","attrs":{"name":"selectedCounties","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the input data entry - the US country entry."}]},{"type":"apogeeComponent","attrs":{"name":"stateDataEntry","id":0,"state":""}},{"type":"heading3","content":[{"type":"text","text":"Options"}]},{"type":"paragraph","content":[{"type":"text","text":"These are the data series to plot"}]},{"type":"apogeeComponent","attrs":{"name":"selectedDataToPlot","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the axis type:"}]},{"type":"apogeeComponent","attrs":{"name":"yAxisType","id":0,"state":""}},{"type":"paragraph"}]}},"children":{"graphingOptions":{"type":"apogeeapp.DataFormCell","viewState":{"childDisplayState":{"views":{"Form":{"isViewActive":true},"Layout Code":{"height":7000,"isViewActive":false},"Layout Private":{"isViewActive":false},"isInputValid(formValue)":{"isViewActive":false},"isInputValid Private":{"isViewActive":false},"Form Value":{"height":280,"isViewActive":false}}}}},"stateSelector":{"type":"apogeeapp.DataFormCell","viewState":{"childDisplayState":{"views":{"Form":{"isViewActive":true},"Layout Code":{"height":7000,"isViewActive":false},"Layout Private":{"isViewActive":false,"height":7000},"isInputValid(formValue)":{"isViewActive":false},"isInputValid Private":{"isViewActive":false},"Form Value":{"isViewActive":false,"height":280}}}}},"scaledCasesChart":{"type":"apogeeapp.ChartJSCell","viewState":{"childDisplayState":{"views":{"Chart":{"isViewActive":true},"Input":{"isViewActive":true},"Config (Debug)":{"isViewActive":false,"height":280}}}}},"scaledNewCasesChart":{"type":"apogeeapp.ChartJSCell","viewState":{"childDisplayState":{"views":{"Chart":{"isViewActive":true},"Input":{"isViewActive":true},"Config (Debug)":{"isViewActive":false}}}}},"scaledDeathsChart":{"type":"apogeeapp.ChartJSCell","viewState":{"childDisplayState":{"views":{"Chart":{"isViewActive":true},"Input":{"isViewActive":true},"Config (Debug)":{"isViewActive":false}}}}},"scaledNewDeathsChart":{"type":"apogeeapp.ChartJSCell","viewState":{"childDisplayState":{"views":{"Chart":{"isViewActive":true},"Input":{"isViewActive":true},"Config (Debug)":{"isViewActive":false}}}}},"selectedDataToPlot":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"yAxisType":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"selectedState":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"selectedCounties":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":true},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"dateLabels":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"chartData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"usDataEntry":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"stateDataEntry":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":true},"Formula":{"height":7000,"isViewActive":true},"Private":{"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":-1,"tabOpened":true}},"dataProcessUtilities":{"type":"apogeeapp.PageComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Data Processing Utilities"}]},{"type":"heading2","content":[{"type":"text","text":"Smoothing"}]},{"type":"paragraph","content":[{"type":"text","text":"This function smooths the data. For documentation open the associated child page."}]},{"type":"apogeeComponent","attrs":{"name":"smoothData","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Time Series Manipulation"}]},{"type":"paragraph","content":[{"type":"text","text":"This function takes a difference of entries. To end up with the same length of array, this creates a virtual entry of index -1 with value 0."}]},{"type":"apogeeComponent","attrs":{"name":"differenceFunction","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":" This function divides each entry by the input number"}]},{"type":"apogeeComponent","attrs":{"name":"multiplyFunction","id":0,"state":""}},{"type":"heading2"}]}},"children":{"smoothData":{"type":"apogeeapp.PageFunctionComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"COVID Smoothing Estimator"}]},{"type":"paragraph","content":[{"type":"text","text":"This is a function that smooths the COVID data. Note that the data array may have some samples trimmed from the start, to fit a length requirement based on the filter size parameter N."}]},{"type":"heading2","content":[{"type":"text","text":"Inputs"}]},{"type":"paragraph","content":[{"type":"text","text":"This is the input array of data samples."}]},{"type":"apogeeComponent","attrs":{"name":"dataArray","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the filtering parameters in units of days (or whatever the X axis units are). This is the period over which data is averaged."}]},{"type":"apogeeComponent","attrs":{"name":"N","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Outputs"}]},{"type":"paragraph","content":[{"type":"text","text":"This is the output. It includes the following fields:"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"filteredDataArray - This is the filter data array."}]},{"type":"listItem","content":[{"type":"text","text":"filteredDifferenceArray - This is an estimate of the rate of change of the data array, in terms of the change between successive days."}]}]},{"type":"apogeeComponent","attrs":{"name":"results","id":0,"state":""}},{"type":"heading1","content":[{"type":"text","text":"Business Logic"}]},{"type":"heading2","content":[{"type":"text","text":"Modified Input Arrays"}]},{"type":"paragraph","content":[{"type":"text","text":"We are filtering here based on fixed intervals. To do this, we will NOT filter the first few points that don't create a full interval. (In our case, the end data is more meaningful from the start data, so we truncate at the start.)"}]},{"type":"apogeeComponent","attrs":{"name":"startIndex","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the \"properly\" sized array we will plug into our algorithm, "}]},{"type":"apogeeComponent","attrs":{"name":"workingInputData","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"workingInputLabels","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Piece-wise Line Fitting Calculation"}]},{"type":"paragraph","content":[{"type":"text","text":"We will break out interval into fixed size segments, given by Model.N. We will use least squares to find a series of line segment, length N, that best fit the input data."}]},{"type":"paragraph","content":[{"type":"text","text":"This is the tridiagonal matrix to find the solution"}]},{"type":"apogeeComponent","attrs":{"name":"AMatrix","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the b vector to find the solution."}]},{"type":"apogeeComponent","attrs":{"name":"bVector","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the solution for the points at the end of the line segments."}]},{"type":"apogeeComponent","attrs":{"name":"solutionVector","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here we expand the data to give a value for each point in the working input data set."}]},{"type":"apogeeComponent","attrs":{"name":"interpolatedData","id":0,"state":""}},{"type":"paragraph"},{"type":"heading2","content":[{"type":"text","text":"Bezier Interpolation"}]},{"type":"paragraph","content":[{"type":"text","text":"The above solution is a series of straight line segments. Here we will define bezier segments to get a smoother interpolation."}]},{"type":"paragraph","content":[{"type":"text","text":"The bezier points will be placed at the midpoint X of each of our line segments. The slope to the control points will be the slope of the line. We choose a length to the control points to be 1/3 the distance of between the main points. This is choosen mainly because it makes associating X and the bezier t parameter easy. (That is a weak reason. This strength of these control points could be an input. If this is done, the conversino from t to x must be improved.) "}]},{"type":"paragraph","content":[{"type":"text","text":"As for the Y value of our bezier points, they will be moved slightly from the midpoint Y value of our line segments. Curvature of the data will force the line midpoints to be above (or below) the actual data value at the midpoint X. We will attempt to correct for this offset."}]},{"type":"paragraph","content":[{"type":"text","text":"This first cell collects some information for each line segment in our above solution."}]},{"type":"apogeeComponent","attrs":{"name":"lineSegmentInfo","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This next cell calculate the Y value offset for our bezier points based off of the curvature. The curvature is measured from the change in the line segment slopes."}]},{"type":"paragraph","content":[{"type":"text","marks":[{"type":"italic"},{"type":"textcolor","attrs":{"color":"blue"}}],"text":"NOTE: The correction I derived should translate both the X and Y values for the bezier point. However, for now at least, I am requiring the X values be the specified numbers, purely because I this gives an easy correspondence between X and the bezier T parameter. If I do a proper calculation between x and t, then I can move the X values, meaning I can change the control point lengths and add other corrections to the X point values."},{"type":"text","text":"  "}]},{"type":"apogeeComponent","attrs":{"name":"yCorrections","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Below we create the collection of Bezier segments. "}]},{"type":"paragraph","content":[{"type":"text","text":"Since the bezier segments are offset from the line segments, we need a little more data at the start and end. We will create additional data at the start and end by extending the first and last line segments with a constant slope."}]},{"type":"paragraph","content":[{"type":"text","text":"This boundary condition does have a noticable impact on the data. We might want to look at other treatments. "}]},{"type":"apogeeComponent","attrs":{"name":"bezierSegmentInfo","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here we get the interpolated data for both the data and its derivative, since we are interested in the change in our data also. "}]},{"type":"apogeeComponent","attrs":{"name":"bezierInterpolatedData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here we extract the interpolated date."}]},{"type":"apogeeComponent","attrs":{"name":"bezierPoints","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here we extract the interpolated slope."}]},{"type":"apogeeComponent","attrs":{"name":"bezierSlope","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":" Adding Initial Points"}]},{"type":"paragraph","content":[{"type":"text","text":"We want our output to cover the full range of the input, which maynot be the case with our filtered data above. To fix this, temporarily, we will just concatenate zeros on the front of our data."}]},{"type":"apogeeComponent","attrs":{"name":"prefixPoints","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"fullLengthBezierPoints","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"fullLengthBezierSlope","id":0,"state":""}},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"}]}},"children":{"dataArray":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":true},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"results":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"AMatrix":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false,"height":7000}}}}},"bVector":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"solutionVector":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"interpolatedData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"workingInputData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"workingInputLabels":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":true},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"piecewiseLinearModel":{"type":"apogeeapp.PageComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Piecewise Linear Model"}]},{"type":"paragraph","content":[{"type":"text","text":"This page contains code necessary to create a piecewise linear model for a data sample. The basic idea is to place a reference point every N points of our input data, and fit the best set of these points."}]},{"type":"paragraph","content":[{"type":"text","text":"To use this page, the value N, the linear segment length in samples, must be defined within the scope of this pace. "}]},{"type":"heading2","content":[{"type":"text","text":"Parameters"}]},{"type":"paragraph","content":[{"type":"text","text":"Doing a least squares fit of the data will create a tridiagonal system. The coefficients of the fitted parameters (the A matrix) do not depend on the data. The data is only present in the b Vector (in the equations b = Ax),"}]},{"type":"paragraph","content":[{"type":"text","text":"The following two parameters compose the tridiagonal matrix."}]},{"type":"apogeeComponent","attrs":{"name":"c1","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"c2","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Model Creation Functions"}]},{"type":"paragraph","content":[{"type":"text","text":"For now I will assume the data has a number of points so we don't have any odd sized segments."}]},{"type":"apogeeComponent","attrs":{"name":"createBVector","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"We will model the tridiagonal A matrix by giving only the tridiagonal elements (so the dimensions of the matrix are m x 3)."}]},{"type":"apogeeComponent","attrs":{"name":"createTridiag","id":0,"state":""}},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"}]}},"children":{"c1":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"c2":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"createBVector":{"type":"apogeeapp.FunctionCell","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"createTridiag":{"type":"apogeeapp.FunctionCell","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":1}},"tridiagPage":{"type":"apogeeapp.PageComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Tridiagonal Matrix Solver"}]},{"type":"heading2","content":[{"type":"text","text":"Tridiagonal Solver Functions"}]},{"type":"paragraph","content":[{"type":"text","text":"This function returns the solution vector for the passed tridiagonal system. The matrix A should consist of the tridiagonal elements. It is a matrix with only 3 columns."}]},{"type":"apogeeComponent","attrs":{"name":"tridiagSolver","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This function multiplies a tridiagonal matrix by a vector."}]},{"type":"apogeeComponent","attrs":{"name":"tridiagMultiply","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Test"}]},{"type":"paragraph","content":[{"type":"text","text":"This is the input matrix. It should have dimensions of N x 3 and model a tridiagonal matrix."}]},{"type":"apogeeComponent","attrs":{"name":"AMatrix","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the b vector for the equation bVector = AMatrix * xVector;"}]},{"type":"apogeeComponent","attrs":{"name":"bVector","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the result vector from the input calculation"}]},{"type":"apogeeComponent","attrs":{"name":"xVector","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here we mutliply our solution to see it matches the original b vector."}]},{"type":"apogeeComponent","attrs":{"name":"test","id":0,"state":""}},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"}]}},"children":{"AMatrix":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"bVector":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"xVector":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"height":7000,"isViewActive":true},"Private":{"isViewActive":false}}}}},"test":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"height":7000,"isViewActive":true},"Private":{"isViewActive":false}}}}},"tridiagSolver":{"type":"apogeeapp.FunctionCell","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"tridiagMultiply":{"type":"apogeeapp.FunctionCell","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false,"height":7000}}}}}},"viewState":{"childDisplayState":null,"treeState":-1}},"lineSegmentInfo":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"bezierSegmentInfo":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":602,"isViewActive":true},"Private":{"height":7000,"isViewActive":false}}}}},"bezierInterpolatedData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"height":7000,"isViewActive":false}}}}},"bezierPoints":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"bezierSlope":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"yCorrections":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"height":280,"isViewActive":false},"Formula":{"height":7000,"isViewActive":true},"Private":{"isViewActive":false}}}}},"N":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"startIndex":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"fullLengthBezierPoints":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"prefixPoints":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"fullLengthBezierSlope":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}}},"viewState":{"treeState":-1}},"differenceFunction":{"type":"apogeeapp.FunctionCell","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"multiplyFunction":{"type":"apogeeapp.FunctionCell","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":-1}},"viewState":{"treeState":1}}},"viewState":{"treeState":1}}