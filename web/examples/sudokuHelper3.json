{"fileType":"apogee app js workspace","version":"0.60","references":{"viewState":{"treeState":-1,"lists":{"es module":{"treeState":0},"js link":{"treeState":0},"css link":{"treeState":0}}}},"code":{"model":{"fileType":"apogee model","version":0.3,"name":"SudokuHelper3","children":{"Model":{"name":"Model","type":"apogee.Folder","children":{"gameBoard":{"name":"gameBoard","type":"apogee.JsonMember","updateData":{"data":[["1","5","4","2","3","9","6","7","8"],["7","8","6","5","4","1","2","3","9"],["3","2","9","6","7","8","1","5","4"],["4","1","5","3","6","2","8","9","7"],["9","6","7","8","5","4","3","1","2"],["8","3","2","1","9","7","5","4","6"],["2","4","1","7","8","3","9","6","5"],["5","7","8","9","1","6","4","2","3"],["6","9","3","4","2","5","7","8","1"]]}},"gameBoardData":{"name":"gameBoardData","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let data = [];\n\nfor(let ir = 0; ir < 9; ir++) {\n    data[ir] = [];\n    for(let ic = 0; ic < 9; ic++) {\n        let stringValue = gameBoard[ir][ic];\n        if(ALLOWED_SELECTIONS.indexOf(stringValue) > -1) {\n            data[ir][ic] = stringValue;\n        }\n        else {\n            throw new Error(\"Invalid value in square row = \" + (ir+1) + \", column = \" + (ic + 1) + \" (Note - sqaure value should be a string)\");\n        }\n    }\n}\n\nreturn data;","supplementalCode":""}},"getAllowedSquareValues":{"name":"getAllowedSquareValues","type":"apogee.FolderFunction","updateData":{"argList":["rowIndex","columnIndex","gameBoardData"],"returnValue":"allowedSquareValues"},"children":{"body":{"name":"body","type":"apogee.Folder","children":{"rowIndex":{"name":"rowIndex","type":"apogee.JsonMember","updateData":{"data":3}},"columnIndex":{"name":"columnIndex","type":"apogee.JsonMember","updateData":{"data":2}},"gameBoardData":{"name":"gameBoardData","type":"apogee.JsonMember","updateData":{"data":[["","","7","","1","","","4","2"],["","","","","7","","9","",""],["6","1","9","","","","","",""],["","","5","4","2","","","","7"],["","4","","","","","","5",""],["2","","","","9","5","1","",""],["","","","","","","7","6","1"],["","","1","","3","","","",""],["7","9","","","4","","8","",""]]}},"sectionNumber":{"name":"sectionNumber","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return 3 * Math.floor(rowIndex / 3) + Math.floor(columnIndex / 3);","supplementalCode":""}},"sectionIndex":{"name":"sectionIndex","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return 3 * (rowIndex % 3) + (columnIndex % 3);","supplementalCode":""}},"rowSelections":{"name":"rowSelections","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let row = gameBoardData[rowIndex];\nlet rowSelections = [];\n\nrow.forEach( (value,index) => {\n    if((index != columnIndex)&&(value !== \"\")) rowSelections.push(value);\n});\n\nreturn rowSelections;","supplementalCode":""}},"columnSelections":{"name":"columnSelections","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let columnSelections = [];\n\ngameBoardData.forEach( (row,index) => {\n    let value = row[columnIndex];\n    if((index != rowIndex)&&(value != \"\")) columnSelections.push(value)\n});\n\nreturn columnSelections;","supplementalCode":""}},"sectionSelections":{"name":"sectionSelections","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let sectionSelections = [];\nlet iFirstRow = Math.floor(sectionNumber / 3) * 3;\nlet iFirstCol = (sectionNumber % 3) * 3;\n\nfor(let iSecRow = 0; iSecRow < 3; iSecRow++) {\n    for(let iSecCol = 0; iSecCol < 3; iSecCol++) {\n        \n        let localSectionIndex = iSecRow*3 + iSecCol;\n        if(localSectionIndex == sectionIndex) continue;\n        \n        let value = gameBoardData[iFirstRow + iSecRow][iFirstCol + iSecCol];\n        if(value != \"\") sectionSelections.push(value);   \n    }\n}\n\nreturn sectionSelections;","supplementalCode":""}},"allowedSquareValues":{"name":"allowedSquareValues","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"\n//start with all values allowed - expresssed as an array of booleans\n//we will map the index of the array to selection values. Note that the\n//array is 0=based while the selections are one-based.\nlet allowedValueBools = (new Array(9).fill(true));\n\n//this function removes a selection from the array\nlet removeFromAllowedValues = selection => {\n    allowedValueBools[selection-1] = false;\n}\n\n//exclude values from other sqaures in the same row\nrowSelections.forEach(removeFromAllowedValues);\n\n//exclude values from other sqaures in the same row\ncolumnSelections.forEach(removeFromAllowedValues);\n\n//exclude values from other sqaures in the same row\nsectionSelections.forEach(removeFromAllowedValues);\n\n//now we will convert our arry of bools to a list of selections\nallowedValues = [];\nallowedValueBools.forEach( (allowed,index) => {\n    if(allowed) allowedValues.push(String(index+1));\n});\n\nreturn allowedValues;\n\n\n\n\n","supplementalCode":""}}}}}},"boardAnalysis":{"name":"boardAnalysis","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"console.log(\"Board analysis done!\");\n\nlet squareResults = [];\n\nfor(let ir = 0; ir < 9; ir++) {\n    squareResults[ir] = [];\n    for(let ic = 0; ic < 9; ic++) {\n        let squareSelection = gameBoardData[ir][ic];\n        let squareResult = {};\n        if(squareSelection == \"\") {\n            //if there is no selection, find the allowed values\n            squareResult.options = getAllowedSquareValues(ir,ic,gameBoardData);\n        }\n        else {\n            //otherwise, show the current selection\n            squareResult.selection = squareSelection;\n        }\n        \n        squareResults[ir][ic] = squareResult;\n    }\n}\n\nreturn squareResults;","supplementalCode":""}},"updater":{"name":"updater","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let updatedSquare = [];\n\nfor(let ir = 0; ir < 9; ir++) {\n    updatedSquare[ir] = [];\n    for(let ic = 0; ic < 9; ic++) {\n        let squareResult = boardAnalysis[ir][ic];\n        if(squareResult.options) {\n            //try to find a selection from the options\n            let selection = NO_SELECTION_VALUE;\n            \n            //level 1 selection\n            if(settings.assistLevel > 0) {\n                let selection1 = getSelectionFromSingleOption(squareResult.options);\n                selection = mergeSelectionValue(selection,selection1);\n            }\n            \n            //level 2 selection\n            if(settings.assistLevel > 1) {\n                let selection2 = getSelectionFromOnlyOption(ir,ic,boardAnalysis);\n                selection = mergeSelectionValue(selection,selection2);\n            }\n            \n            if(selection == BAD_BOARD_VALUE) {\n                //indicate an error\n                apogeeMessenger.dataUpdate(\"gameBoardSelectionError\",new Error(\"Bad board - illegal selection determined\"));\n                return;\n            }\n            else {\n                //clear the error\n                //apogeeMessenger.dataUpdate(\"gameBoardSelectionError\",\"\");\n            }\n            \n            if(selection !== NO_SELECTION_VALUE) {\n                //add the selection for this value\n                updatedSquare[ir][ic] = selection;\n            }\n            else {\n                //the square uses and empty string for no selection\n                updatedSquare[ir][ic] = \"\";\n            }\n        }\n        else {\n            //otherwise, show the current selection\n            updatedSquare[ir][ic] = squareResult.selection;\n        }\n    }\n}\n\n\nif(!apogeeutil.jsonEquals(updatedSquare,gameBoard)) {\n    apogeeMessenger.dataUpdate(\"gameBoard\",updatedSquare);\n    //this entry is required for the history\n    apogeeMessenger.dataUpdate(\"lastUpdaterResult\",updatedSquare);\n    return \"update sent!\";\n}\nelse {\n    return \"no update\";\n}\n","supplementalCode":""}},"allowedMoves":{"name":"allowedMoves","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"//calculate allowed moves\nlet allowedSquareValuesGrid = [];\n\nfor(let ir = 0; ir < 9; ir++) {\n    allowedSquareValuesGrid[ir] = [];\n    for(let ic = 0; ic < 9; ic++) {\n        let squareResult = boardAnalysis[ir][ic];\n        if(squareResult.options) {\n            //if there is no selection, find the allowed values\n            allowedSquareValuesGrid[ir][ic] = squareResult.options.toString();\n        }\n        else {\n            //otherwise, show the current selection\n            allowedSquareValuesGrid[ir][ic] = `<${squareResult.selection}>`;\n        }\n    }\n}\n\nreturn allowedSquareValuesGrid;","supplementalCode":""}},"history":{"name":"history","type":"apogee.JsonMember","updateData":{"data":{"currentEntry":2,"boards":[[["1","","","","","9","","","8"],["","","","5","","","2","3",""],["","","","","7","","","","4"],["","1","5","3","6","","","9",""],["","","","","","","","",""],["","3","","","9","7","5","4",""],["2","","","","8","","","",""],["","7","8","","","6","","",""],["6","","","4","","","","","1"]],[["1","","","","","9","6","","8"],["","8","","5","4","1","2","3",""],["","","","","7","","","","4"],["","1","5","3","6","","","9",""],["","","","","","","","",""],["8","3","","1","9","7","5","4",""],["2","","1","7","8","","","",""],["","7","8","9","1","6","","",""],["6","","","4","","","","","1"]],[["1","","","2","3","9","6","7","8"],["","8","6","5","4","1","2","3",""],["","2","","6","7","8","","","4"],["","1","5","3","6","","8","9",""],["","6","","8","","","","",""],["8","3","2","1","9","7","5","4","6"],["2","","1","7","8","","","6",""],["","7","8","9","1","6","","",""],["6","","","4","","","7","8","1"]]]}}},"gameBoards":{"name":"gameBoards","type":"apogee.Folder","children":{"easy_1":{"name":"easy_1","type":"apogee.JsonMember","updateData":{"data":[["","","","7","9","6","","8","2"],["1","","","2","","","3","","4"],["9","","","","3","4","","7",""],["3","","9","","4","","2","",""],["","","","","7","","","",""],["","","1","","5","","4","","8"],["","2","","8","1","","","","6"],["8","","5","","","9","","","3"],["6","9","","5","2","7","","",""]]}},"medium_1":{"name":"medium_1","type":"apogee.JsonMember","updateData":{"data":[["5","9","6","","8","2","","",""],["","8","","","","","6","",""],["7","","1","6","9","","","","8"],["","","7","","2","","","3",""],["","","","7","","5","","",""],["","1","","","4","","5","",""],["9","","","","3","8","4","","6"],["","","3","","","","","9",""],["","","","4","5","","8","7","3"]]}},"hard_1":{"name":"hard_1","type":"apogee.JsonMember","updateData":{"data":[["","","7","","1","","","4","2"],["","","","","7","","9","",""],["6","1","9","","","","","",""],["","","5","4","2","","","","7"],["","4","","","","","","5",""],["2","","","","9","5","1","",""],["","","","","","","7","6","1"],["","","1","","3","","","",""],["7","9","","","4","","8","",""]]}},"evil_1":{"name":"evil_1","type":"apogee.JsonMember","updateData":{"data":[["1","","","","","9","","","8"],["","","","5","","","2","3",""],["","","","","7","","","","4"],["","1","5","3","6","","","9",""],["","","","","","","","",""],["","3","","","9","7","5","4",""],["2","","","","8","","","",""],["","7","8","","","6","","",""],["6","","","4","","","","","1"]]}}}},"getSelectionFromSingleOption":{"name":"getSelectionFromSingleOption","type":"apogee.FunctionMember","updateData":{"argList":["squareOptions"],"functionBody":"if(squareOptions.length == 1) return squareOptions[0];\nelse if(squareOptions.length == 0) return BAD_BOARD_VALUE;\nelse return NO_SELECTION_VALUE;","supplementalCode":""}},"getSelectionFromOnlyOption":{"name":"getSelectionFromOnlyOption","type":"apogee.FolderFunction","updateData":{"argList":["rowIndex","columnIndex","boardAnalysis"],"returnValue":"selection"},"children":{"body":{"name":"body","type":"apogee.Folder","children":{"rowIndex":{"name":"rowIndex","type":"apogee.JsonMember","updateData":{"data":5}},"columnIndex":{"name":"columnIndex","type":"apogee.JsonMember","updateData":{"data":8}},"sectionNumber":{"name":"sectionNumber","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return 3 * Math.floor(rowIndex / 3) + Math.floor(columnIndex / 3);","supplementalCode":""}},"sectionIndex":{"name":"sectionIndex","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return 3 * (rowIndex % 3) + (columnIndex % 3);","supplementalCode":""}},"boardAnalysis":{"name":"boardAnalysis","type":"apogee.JsonMember","updateData":{"data":[[{"options":[3,5,8]},{"options":[3,5,8]},{"selection":7},{"options":[3,5,6,8,9]},{"selection":1},{"options":[3,6,8,9]},{"options":[3,5,6]},{"selection":4},{"selection":2}],[{"options":[3,4,5,8]},{"options":[2,3,5,8]},{"options":[2,3,4,8]},{"options":[2,3,5,6,8]},{"selection":7},{"options":[2,3,4,6,8]},{"selection":9},{"options":[1,3,8]},{"options":[3,5,6,8]}],[{"selection":6},{"selection":1},{"selection":9},{"options":[2,3,5,8]},{"options":[5,8]},{"options":[2,3,4,8]},{"options":[3,5]},{"options":[3,7,8]},{"options":[3,5,8]}],[{"options":[1,3,8,9]},{"options":[3,6,8]},{"selection":5},{"selection":4},{"selection":2},{"options":[1,3,6,8]},{"options":[3,6]},{"options":[3,8,9]},{"selection":7}],[{"options":[1,3,8,9]},{"selection":4},{"options":[3,6,8]},{"options":[1,3,6,7,8]},{"options":[6,8]},{"options":[1,3,6,7,8]},{"options":[2,3,6]},{"selection":5},{"options":[3,6,8,9]}],[{"selection":2},{"options":[3,6,7,8]},{"options":[3,6,8]},{"options":[3,6,7,8]},{"selection":9},{"selection":5},{"selection":1},{"options":[3,8]},{"options":[3,4,6,8]}],[{"options":[3,4,5,8]},{"options":[2,3,5,8]},{"options":[2,3,4,8]},{"options":[2,5,8,9]},{"options":[5,8]},{"options":[2,8,9]},{"selection":7},{"selection":6},{"selection":1}],[{"options":[4,5,8]},{"options":[2,5,6,8]},{"selection":1},{"options":[2,5,6,7,8,9]},{"selection":3},{"options":[2,6,7,8,9]},{"options":[2,4,5]},{"options":[2,9]},{"options":[4,5,9]}],[{"selection":7},{"selection":9},{"options":[2,3,6]},{"options":[1,2,5,6]},{"selection":4},{"options":[1,2,6]},{"selection":8},{"options":[2,3]},{"options":[3,5]}]]}},"rowOptions":{"name":"rowOptions","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let rowData = boardAnalysis[rowIndex];\nlet rowOptions = {};\n\nrowData.forEach( analysisEntry => {\n    if(analysisEntry.options) {\n        //count the number of squares that has this as an option\n        analysisEntry.options.forEach( option => {\n            if(rowOptions[option]) rowOptions[option]++\n            else rowOptions[option] = 1;\n        })\n    }\n});\n\nreturn rowOptions;","supplementalCode":""}},"columnOptions":{"name":"columnOptions","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let columnOptions = {};\n\nboardAnalysis.forEach( (rowData,index) => {\n    let analysisEntry = rowData[columnIndex];\n    if(analysisEntry.options) {\n        //count the number of squares that has this as an option\n        analysisEntry.options.forEach( option => {\n            if(columnOptions[option]) columnOptions[option]++\n            else columnOptions[option] = 1;\n        })\n    }\n});\n\nreturn columnOptions;","supplementalCode":""}},"sectionOptions":{"name":"sectionOptions","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let sectionOptions = {};\nlet iFirstRow = Math.floor(sectionNumber / 3) * 3;\nlet iFirstCol = (sectionNumber % 3) * 3;\n\nfor(let iSecRow = 0; iSecRow < 3; iSecRow++) {\n    for(let iSecCol = 0; iSecCol < 3; iSecCol++) {\n        let localSectionIndex = iSecRow*3 + iSecCol;\n        let analysisEntry = boardAnalysis[iFirstRow + iSecRow][iFirstCol + iSecCol];\n        if(analysisEntry.options) {\n            //count the number of squares that has this as an option\n            analysisEntry.options.forEach( option => {\n                if(sectionOptions[option]) sectionOptions[option]++\n                else sectionOptions[option] = 1;\n            })\n        }   \n    }\n}\n\nreturn sectionOptions;","supplementalCode":""}},"selection":{"name":"selection","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let squareEntry = boardAnalysis[rowIndex][columnIndex];\nlet selection = NO_SELECTION_VALUE;\nif(squareEntry.options) {\n    //check if this square has an option in no other square in the row\n    let rowSelection = _getSelection(squareEntry.options,rowOptions);\n    selection = mergeSelectionValue(selection,rowSelection);\n    \n    //check if this square has an option in no other square in the column\n    let columnSelection = _getSelection(squareEntry.options,columnOptions);\n    selection = mergeSelectionValue(selection,columnSelection);\n    \n    //check if this square has an option in no other square in the section\n    let sectionSelection = _getSelection(squareEntry.options,sectionOptions);\n    selection = mergeSelectionValue(selection,sectionSelection);\n    \n    return selection;\n}\nelse {\n    return NO_SELECTION_VALUE;\n}\n\n\n\n\n","supplementalCode":"function _getSelection(squareOptions,groupOptions) {\n    let selection = NO_SELECTION_VALUE;\n    squareOptions.forEach( squareOption => {\n        let groupCount = groupOptions[squareOption];\n        if(groupCount == 1) selection = mergeSelectionValue(selection,squareOption);\n    })\n    return selection;\n}"}}}}}},"BAD_BOARD_VALUE":{"name":"BAD_BOARD_VALUE","type":"apogee.JsonMember","updateData":{"data":["bad board"]}},"NO_SELECTION_VALUE":{"name":"NO_SELECTION_VALUE","type":"apogee.JsonMember","updateData":{"data":["no selection"]}},"mergeSelectionValue":{"name":"mergeSelectionValue","type":"apogee.FunctionMember","updateData":{"argList":["activeSelection","newSelection"],"functionBody":"//if any bad board is found, keep that as the result\nif((activeSelection == BAD_BOARD_VALUE)||(newSelection == BAD_BOARD_VALUE)) return BAD_BOARD_VALUE;\n\nif(newSelection != NO_SELECTION_VALUE) {\n    if(activeSelection == NO_SELECTION_VALUE) return newSelection;\n    else if(activeSelection != newSelection) return BAD_BAORD_VALUE; //they should NOT disagree\n    else return activeSelection; //the agree \n}\nelse {\n    //keep the old selection\n    return activeSelection;\n}","supplementalCode":""}},"gameBoardSelectionError":{"name":"gameBoardSelectionError","type":"apogee.JsonMember","updateData":{"data":""}},"gameForm":{"name":"gameForm","type":"apogee.FunctionMember","updateData":{"argList":["admin"],"functionBody":"let gameList = [];\nfor(let boardName in gameBoards) {\n    gameList.push(boardName);\n}\n\nlet onSubmit = formValue => {\n    if(formValue.selectedGame) {\n        let selectedGameBoard = gameBoards[formValue.selectedGame];\n        if(selectedGameBoard) {\n            //create the settings value\n            let newSettings = {};\n            newSettings.selectedGame = formValue.selectedGame;\n            if(formValue.assistLevel !== undefined) newSettings.assistLevel = parseInt(formValue.assistLevel);\n            else newSettings.assistLevel = DEFAULT_ASSIST_LEVEL;\n            \n            //we need to load the initial history too\n            let initialHistory = getInitialHistory(selectedGameBoard);\n            \n            admin.getCommandMessenger().compoundDataCommand([[\"gameBoard\",selectedGameBoard],[\"settings\",newSettings],[\"lastUpdaterResult\",\"\"],[\"history\",initialHistory]]);\n            \n        }\n        else {\n            alert(\"Error reading game board! Selection not made\");\n        }\n    }\n    else {\n        alert(\"A game board must be selected\")\n    }\n}\n\nreturn [\n    {\n        type: \"dropdown\",\n        label: \"Select Game Board: \",\n        entries: gameList,\n        value: (settings.selectedGame !== undefined) ? settings.selectedGame : DEFAULT_GAME_NAME,\n        key: \"selectedGame\"\n    },\n    {\n        type: \"radioButtonGroup\",\n        label: \"Auto select: \",\n        entries: [[\"Level 0\",0],[\"Level 1\",1],[\"Level 2\",2]],\n        value: (settings.assistLevel !== undefined) ? settings.assistLevel : DEFAULT_ASSIST_LEVEL,\n        horizontal: true,\n        key: \"assistLevel\"\n    },\n    {\n        type: \"submit\",\n        submitLabel: \"Start New Game\",\n        onSubmit: onSubmit\n    }\n];","supplementalCode":""}},"historyUpdater":{"name":"historyUpdater","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"//add to the history, if this is not from the updater\nif(history.currentEntry >= 0) {\n    let latestBoardIsInHistory = apogeeutil.jsonEquals(history.boards[history.currentEntry],gameBoard);\n    if(latestBoardIsInHistory) {\n        return \"up to date\";\n    }\n}\n\n\nlet latestBoardIsFromUpdater = apogeeutil.jsonEquals(gameBoard,lastUpdaterResult);\nif(!latestBoardIsFromUpdater) {\n    //add this game board to the history\n    _addToHistory(gameBoard);\n    return \"Selection from player\";\n}\nelse {\n    return \"Selection from updater\";\n}","supplementalCode":"/** This function inserts the gameboard into the history. */\nfunction _addToHistory(gameboard) {\n    let oldBoards;\n    if(history.currentEntry < history.boards.length-1) {\n        oldBoards = history.boards.slice(0,history.currentEntry+1);\n    }\n    else {\n        oldBoards = history.boards;\n    }\n    \n    let newHistory = {};\n    newHistory.boards = oldBoards.concat([gameBoard]);\n    newHistory.currentEntry = history.currentEntry+1;\n    \n    apogeeMessenger.dataUpdate(\"history\",newHistory);\n}"}},"undoForm":{"name":"undoForm","type":"apogee.FunctionMember","updateData":{"argList":["admin"],"functionBody":"//the revert available function takes a gratuitous instance of history. \n//this is because we need this cell to depend on history, so the button status updates.\nlet commandMessenger = admin.getCommandMessenger();\nlet onSubmit = () => undoFromHistory(commandMessenger);\nlet onCancel = () => redoFromHistory(commandMessenger)\n\nreturn [\n    {\n        type: \"submit\",\n        submitLabel: \"Undo Last Move\",\n        cancelLabel: \"Redo Last Move\",\n        onSubmit: onSubmit,\n        onCancel: onCancel,\n        submitDisabled: !undoAvailable(history),\n        cancalDisabled: !redoAvailable(history)\n    }\n];","supplementalCode":""}},"ALLOWED_SELECTIONS":{"name":"ALLOWED_SELECTIONS","type":"apogee.JsonMember","updateData":{"data":["","1","2","3","4","5","6","7","8","9"]}},"getInitialHistory":{"name":"getInitialHistory","type":"apogee.FunctionMember","updateData":{"argList":["firstBoard"],"functionBody":"let newHistory = {};\nnewHistory.boards = [firstBoard];\nnewHistory.currentEntry = 0;\n\nreturn newHistory;","supplementalCode":""}},"lastUpdaterResult":{"name":"lastUpdaterResult","type":"apogee.JsonMember","updateData":{"data":[["1","5","4","2","3","9","6","7","8"],["7","8","6","5","4","1","2","3","9"],["3","2","9","6","7","8","1","5","4"],["4","1","5","3","6","2","8","9","7"],["9","6","7","8","5","4","3","1","2"],["8","3","2","1","9","7","5","4","6"],["2","4","1","7","8","3","9","6","5"],["5","7","8","9","1","6","4","2","3"],["6","9","3","4","2","5","7","8","1"]]}},"DEFAULT_GAME_NAME":{"name":"DEFAULT_GAME_NAME","type":"apogee.JsonMember","updateData":{"data":"easy_1"}},"DEFAULT_ASSIST_LEVEL":{"name":"DEFAULT_ASSIST_LEVEL","type":"apogee.JsonMember","updateData":{"data":"0"}},"settings":{"name":"settings","type":"apogee.JsonMember","updateData":{"data":{"selectedGame":"evil_1","assistLevel":2}}},"undoAvailable":{"name":"undoAvailable","type":"apogee.FunctionMember","updateData":{"argList":["historyForUndo"],"functionBody":"return (historyForUndo.currentEntry > 0);","supplementalCode":""}},"redoAvailable":{"name":"redoAvailable","type":"apogee.FunctionMember","updateData":{"argList":["historyForRedo"],"functionBody":"return (historyForRedo.currentEntry < historyForRedo.boards.length-1);","supplementalCode":""}},"undoFromHistory":{"name":"undoFromHistory","type":"apogee.FunctionMember","updateData":{"argList":["commandMessenger"],"functionBody":"if(history.currentEntry > 0) {\n    let previousGameBoard = history.boards[history.currentEntry-1];\n    let newHistory = {};\n    newHistory.currentEntry = history.currentEntry-1;\n    newHistory.boards = history.boards;\n    \n    //set the game board and the clear last updater result\n    //also update the history\n    commandMessenger.compoundDataCommand([[\"gameBoard\",previousGameBoard],[\"lastUpdaterResult\",\"\"],[\"history\",newHistory]]);\n}","supplementalCode":""}},"redoFromHistory":{"name":"redoFromHistory","type":"apogee.FunctionMember","updateData":{"argList":["commandMessenger"],"functionBody":"if(history.currentEntry < history.boards.length - 1) {\n    let nextGameBoard = history.boards[history.currentEntry+1];\n    let newHistory = {};\n    newHistory.currentEntry = history.currentEntry+1;\n    newHistory.boards = history.boards;\n    \n    //set the game board and the clear last updater result\n    //also update the history\n    commandMessenger.compoundDataCommand([[\"gameBoard\",nextGameBoard],[\"lastUpdaterResult\",\"\"],[\"history\",newHistory]]);\n}","supplementalCode":""}}}}}},"components":{"Model":{"type":"apogeeapp.PageComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Sudoku Helper III"}]},{"type":"paragraph","content":[{"type":"text","text":"This workspace is an aid for playing sudoku. It determines which squares are ruled out based on the other entries in a given row, column or section of the board. "}]},{"type":"paragraph","content":[{"type":"text","text":"TO DO:"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"My history supports \"redo\" but I don't have it. I should add it."}]},{"type":"listItem","content":[{"type":"text","text":"Possibly I should have the updater send an empty result to the last update table if it does not send an update. This would prevent false matches to the last updated table from add scenarios (like the user doing a funny move). Clearing would cause the board to be send to the history EXCEPT the history will not reach that check because that board would already be in the history (need to verify). I need to decide which I like better."}]},{"type":"listItem","content":[{"type":"text","text":"I need better handling of errors. "}]},{"type":"listItem","content":[{"type":"text","text":"it doesn't solve evil. We need another level for the updated to do that. (an evil game was pasted in)"}]},{"type":"listItem","content":[{"type":"text","text":"later, sudoku generator, made into a server, with selectable difficulty level (related to solver level used)"}]},{"type":"listItem","content":[{"type":"text","text":"later, sudoku helper with selectable level of help, made into an app"}]}]},{"type":"paragraph","content":[{"type":"text","text":"source of boards: "},{"type":"text","marks":[{"type":"link","attrs":{"href":"https://www.websudoku.com/?level=4","title":null}}],"text":"https://www.websudoku.com/?level=4"},{"type":"text","text":" (well, level 4 is the hardest option)"}]},{"type":"heading2","content":[{"type":"text","text":"Game User Interface"}]},{"type":"paragraph","content":[{"type":"text","text":"This form starts a game, including some game settings for auto-updating the board."}]},{"type":"apogeeComponent","attrs":{"name":"gameForm","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This form undoes moves."}]},{"type":"apogeeComponent","attrs":{"name":"undoForm","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the game board that should be edited."}]},{"type":"apogeeComponent","attrs":{"name":"gameBoard","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This board contains the allowed moves for each square, based on the other values present in the given row, column and section. We use the function getAllowedSquareValues to find the value for each square that does not have a selection in it."}]},{"type":"apogeeComponent","attrs":{"name":"allowedMoves","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Settings Info"}]},{"type":"paragraph","content":[{"type":"text","text":"Settings constants:"}]},{"type":"apogeeComponent","attrs":{"name":"DEFAULT_GAME_NAME","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"DEFAULT_ASSIST_LEVEL","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Settings values for the current game. This should just be set by the form where the user starts a new game."}]},{"type":"apogeeComponent","attrs":{"name":"settings","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Processing"}]},{"type":"paragraph","content":[{"type":"text","text":"This data cell contains the allowed moves for each cell."}]},{"type":"apogeeComponent","attrs":{"name":"boardAnalysis","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"In the following table we just make a copy of the game board, verifying the input in the process."}]},{"type":"apogeeComponent","attrs":{"name":"gameBoardData","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"These are the legal selections:"}]},{"type":"apogeeComponent","attrs":{"name":"ALLOWED_SELECTIONS","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here we have a folder function to find the allowed values for a specific square given the current game board."}]},{"type":"apogeeComponent","attrs":{"name":"getAllowedSquareValues","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Updater"}]},{"type":"paragraph","content":[{"type":"text","text":"Here we do some auto-updating of the game board. From the UI we see there are three levels of assistance for the user:"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"Level 0 - We just tell what the allowed moves are"}]},{"type":"listItem","content":[{"type":"text","text":"Level 1 - We automatically play a move if it is the only option for a square."}]},{"type":"listItem","content":[{"type":"text","text":"Level 2 - We automatically place a move if that square is the only member of a group (row, column or section) that has the given number as an option "}]}]},{"type":"paragraph","content":[{"type":"text","text":"This doesn't solve all puzzles, which is good if it is just a helper, but at some point I want to add more levels to possibly just solve all puzzles."}]},{"type":"paragraph","content":[{"type":"text","text":"The updater traverses through each cell in the board and, is the assist level is enabled, it checks if there is a selection for the square using the given assistance rule."}]},{"type":"paragraph","content":[{"type":"text","text":"The assistance rules are implemented in functions below."}]},{"type":"paragraph","content":[{"type":"text","text":"If any updates are found they are sent to the game board using the messenger. At the same time, a copy of the update is sent to the table lastUpdaterResponse. This is used by the history/undo mechanism to differentiate a move made by the plary versus an automatic move done by the updater."}]},{"type":"paragraph","content":[{"type":"text","text":"Since there are multiple checks for the solution to the sqaure, it is possible different checks give different results. In theory this should not happen. If it does it is a board error."}]},{"type":"paragraph","content":[{"type":"text","text":"If an error is found, it writes the error to the "},{"type":"text","marks":[{"type":"italic"}],"text":"gameBoardSelectionError"},{"type":"text","text":" cell below. (I need a better way of reporting this error.)"}]},{"type":"apogeeComponent","attrs":{"name":"updater","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This holds a copy of the last update send by the updater."}]},{"type":"apogeeComponent","attrs":{"name":"lastUpdaterResult","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This will hold an error is the game board was detected to have a problem."}]},{"type":"apogeeComponent","attrs":{"name":"gameBoardSelectionError","id":0,"state":""}},{"type":"heading3","content":[{"type":"text","text":"Selection Finder Methods"}]},{"type":"paragraph","content":[{"type":"text","text":"This is the \"level 1\" function used to find a selection for a square. It simply chooses the option if it is the only option available."}]},{"type":"apogeeComponent","attrs":{"name":"getSelectionFromSingleOption","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the \"level 2\" function to find a selection for a square. It chooses an option if this square is the only member of a row, column or section to hold that option."}]},{"type":"apogeeComponent","attrs":{"name":"getSelectionFromOnlyOption","id":0,"state":""}},{"type":"heading3","content":[{"type":"text","text":"Updater Utilities"}]},{"type":"paragraph","content":[{"type":"text","text":"Below are some utilities used in the updater code"}]},{"type":"paragraph","content":[{"type":"text","text":"This is a constant used within the updated to indicate no known selection for a square."}]},{"type":"apogeeComponent","attrs":{"name":"NO_SELECTION_VALUE","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is a constant used within the updater to indicate no valid selection for a square."}]},{"type":"apogeeComponent","attrs":{"name":"BAD_BOARD_VALUE","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This function is is used where there are multiple attempts to find the selection. If more than one comes up with an answer the better agree or there is a problem on the board. This function merges new selections in to the current selection."}]},{"type":"apogeeComponent","attrs":{"name":"mergeSelectionValue","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"History"}]},{"type":"paragraph","content":[{"type":"text","text":"This cell updates the history based on moves made. It only puts moves made by the player in the history, and skips moves played by the auto-updater. To accomplish this, the auto-updater writes data to both the gameBoard and the dummy table lastUpdaterResult. We know a board was played by the auto-updater if it is in the lastUpdaterResult cell."}]},{"type":"paragraph","content":[{"type":"text","text":"In this method, we make sure we also do not add the same board to the history twice, since the cell can be triggered to update for extra reasons besides a board update."}]},{"type":"apogeeComponent","attrs":{"name":"historyUpdater","id":0,"state":""}},{"type":"heading3","content":[{"type":"text","text":"History Utility Functions"}]},{"type":"paragraph","content":[{"type":"text","text":"Here are some functions to trigger an undo and redo from the user interface."}]},{"type":"paragraph","content":[{"type":"text","text":"From the user interface, the "},{"type":"text","marks":[{"type":"italic"}],"text":"commandMessenger"},{"type":"text","text":" is used rather than the "},{"type":"text","marks":[{"type":"italic"}],"text":"apogeeMessenger"},{"type":"text","text":", which is used when doing an update from a data cell. There is a slight difference between the two that can be seen in other documentation."}]},{"type":"paragraph","content":[{"type":"text","text":"We provide these functions that make it easier for the UI to do these actions, however this is not very robust. The command messenger  (and apogee messenger) take the table name as would be called from the local code. By passing the messenger in to the function, this functions won't work as is if we called them from a different page. Then we might need to add something like the page name to the messenger destination. So that is something that would have to be kept in mind if this is refactored."}]},{"type":"paragraph","content":[{"type":"text","text":"This is a bit sloppy. My defenses are that I haven't figured out the best practices for using this yet. And I want to keep it as simple as possible to be clear about what it is doing. And, in a sense this keeps with the fast and loose way I think this programming environment will generally be used."}]},{"type":"heading4","content":[{"type":"text","text":"Revert From History"}]},{"type":"paragraph","content":[{"type":"text","text":"This reverts the game board to the previous move made by the user."}]},{"type":"apogeeComponent","attrs":{"name":"undoFromHistory","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This replays the next move made by the user, is undo has been done."}]},{"type":"apogeeComponent","attrs":{"name":"redoFromHistory","id":0,"state":""}},{"type":"heading4","content":[{"type":"text","text":"Undo/Redo Available"}]},{"type":"paragraph","content":[{"type":"text","text":"This returns true if it is possible to undo a move."}]},{"type":"apogeeComponent","attrs":{"name":"undoAvailable","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This returns true if it is possible to redo a move."}]},{"type":"apogeeComponent","attrs":{"name":"redoAvailable","id":0,"state":""}},{"type":"heading4","content":[{"type":"text","text":"Get Initial History"}]},{"type":"paragraph","content":[{"type":"text","text":"When a new game is started, the history should be cleared. We don not do that from this function because there are several other messenger actions done when the game is started. We instead return the value for the initial history given an initial game board. The caller should then write this to the history cell when the other game-starting messages are sent."}]},{"type":"apogeeComponent","attrs":{"name":"getInitialHistory","id":0,"state":""}},{"type":"heading4","content":[{"type":"text","text":"History Data"}]},{"type":"paragraph","content":[{"type":"text","text":"This member stores the history data."}]},{"type":"apogeeComponent","attrs":{"name":"history","id":0,"state":""}},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"}]}},"children":{"gameBoard":{"type":"apogeeapp.JsonCell","dataView":"Grid","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":234},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"gameBoardData":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"getAllowedSquareValues":{"type":"apogeeapp.PageFunctionComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"getAllowedSquareValues"}]},{"type":"paragraph","content":[{"type":"text","text":"This page function finds the allowed values for a gameboard square given the square row and column and the game board data."}]},{"type":"heading2","content":[{"type":"text","text":"Inputs"}]},{"type":"paragraph","content":[{"type":"text","text":"This is the row index for the working square."}]},{"type":"apogeeComponent","attrs":{"name":"rowIndex","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the column index for the working square."}]},{"type":"apogeeComponent","attrs":{"name":"columnIndex","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the game board data."}]},{"type":"apogeeComponent","attrs":{"name":"gameBoardData","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Processing"}]},{"type":"heading3","content":[{"type":"text","text":"Section Info"}]},{"type":"paragraph","content":[{"type":"text","text":"The following functions deal with sections. That is what I am calling a 3x3 section of the board. There may be a proper name for this, but I don't know much about sudoku so I am going with this."}]},{"type":"paragraph","content":[{"type":"text","text":"The naming conventions I am using is section number refers to the 3x3 square from the game board and section index refers to the sqaure within the section. The numbering/indexing starts at the top left (with 0) and increases by one as you go horizontally."}]},{"type":"paragraph","content":[{"type":"text","text":"Below are the section number and section index for the current active square."}]},{"type":"apogeeComponent","attrs":{"name":"sectionNumber","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"sectionIndex","id":0,"state":""}},{"type":"heading3","content":[{"type":"text","text":"Selections"}]},{"type":"paragraph","content":[{"type":"text","text":"The following are the selections on the game board in the active row, excluding the current square."}]},{"type":"apogeeComponent","attrs":{"name":"rowSelections","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"The following are the selections on the game board in the active column, excluding the current square."}]},{"type":"apogeeComponent","attrs":{"name":"columnSelections","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"The following are the selections on the game board in the active section, excluding the current square."}]},{"type":"apogeeComponent","attrs":{"name":"sectionSelections","id":0,"state":""}},{"type":"paragraph"},{"type":"heading3","content":[{"type":"text","text":"Return Value"}]},{"type":"paragraph","content":[{"type":"text","text":"Here we calculate what values are allowed for a cell given the current game board data. This is also the return value."}]},{"type":"apogeeComponent","attrs":{"name":"allowedSquareValues","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"xx"}]}]}},"children":{"rowIndex":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"columnIndex":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"gameBoardData":{"type":"apogeeapp.JsonCell","dataView":"Grid","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":300},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"sectionNumber":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"sectionIndex":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"rowSelections":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false,"height":7000}}}}},"columnSelections":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"sectionSelections":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"allowedSquareValues":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":true,"height":7000}}}}}},"viewState":{"treeState":-1}},"boardAnalysis":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"updater":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"allowedMoves":{"type":"apogeeapp.JsonCell","dataView":"Grid","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":300},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false,"height":7000}}}}},"history":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"gameBoards":{"type":"apogeeapp.PageComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Game Boards"}]},{"type":"paragraph","content":[{"type":"text","text":"This page contains a list of game boards that can be played."}]},{"type":"apogeeComponent","attrs":{"name":"easy_1","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"medium_1","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"hard_1","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"evil_1","id":0,"state":""}},{"type":"paragraph"},{"type":"paragraph"}]}},"children":{"easy_1":{"type":"apogeeapp.JsonCell","dataView":"Grid","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"medium_1":{"type":"apogeeapp.JsonCell","dataView":"Grid","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"hard_1":{"type":"apogeeapp.JsonCell","dataView":"Grid","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"evil_1":{"type":"apogeeapp.JsonCell","dataView":"Grid","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":300},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":-1}},"getSelectionFromSingleOption":{"type":"apogeeapp.FunctionCell","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"getSelectionFromOnlyOption":{"type":"apogeeapp.PageFunctionComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"getCellSelectionFromOptions"}]},{"type":"paragraph","content":[{"type":"text","text":"This page function finds the allowed values for a gameboard square given the square row and column and the game board data."}]},{"type":"heading2","content":[{"type":"text","text":"Inputs"}]},{"type":"paragraph","content":[{"type":"text","text":"This is the row index for the working square."}]},{"type":"apogeeComponent","attrs":{"name":"rowIndex","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the column index for the working square."}]},{"type":"apogeeComponent","attrs":{"name":"columnIndex","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the game board data."}]},{"type":"apogeeComponent","attrs":{"name":"boardAnalysis","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Processing"}]},{"type":"heading3","content":[{"type":"text","text":"Section Info"}]},{"type":"paragraph","content":[{"type":"text","text":"The following functions deal with sections. That is what I am calling a 3x3 section of the board. There may be a proper name for this, but I don't know much about sudoku so I am going with this."}]},{"type":"paragraph","content":[{"type":"text","text":"The naming conventions I am using is section number refers to the 3x3 square from the game board and section index refers to the sqaure within the section. The numbering/indexing starts at the top left (with 0) and increases by one as you go horizontally."}]},{"type":"paragraph","content":[{"type":"text","text":"Below are the section number and section index for the current active square."}]},{"type":"apogeeComponent","attrs":{"name":"sectionNumber","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"sectionIndex","id":0,"state":""}},{"type":"heading3","content":[{"type":"text","text":"Selections"}]},{"type":"paragraph","content":[{"type":"text","text":"The following are the selections on the game board in the active row, excluding the current square."}]},{"type":"apogeeComponent","attrs":{"name":"rowOptions","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"The following are the selections on the game board in the active column, excluding the current square."}]},{"type":"apogeeComponent","attrs":{"name":"columnOptions","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"The following are the selections on the game board in the active section, excluding the current square."}]},{"type":"apogeeComponent","attrs":{"name":"sectionOptions","id":0,"state":""}},{"type":"paragraph"},{"type":"heading3","content":[{"type":"text","text":"Return Value"}]},{"type":"paragraph","content":[{"type":"text","text":"Here we calculate what values are allowed for a cell given the current game board data. This is also the return value."}]},{"type":"apogeeComponent","attrs":{"name":"selection","id":0,"state":""}},{"type":"paragraph"}]}},"children":{"rowIndex":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"columnIndex":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"sectionNumber":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"sectionIndex":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"boardAnalysis":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":294},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"rowOptions":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false,"height":7000}}}}},"columnOptions":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"sectionOptions":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"selection":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":true,"height":7000}}}}}},"viewState":{"treeState":-1}},"BAD_BOARD_VALUE":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"NO_SELECTION_VALUE":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"mergeSelectionValue":{"type":"apogeeapp.FunctionCell","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"gameBoardSelectionError":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"gameForm":{"type":"apogeeapp.ActionFormCell","viewState":{"childDisplayState":{"views":{"Form":{"isViewActive":true},"Code":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"historyUpdater":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false,"height":7000}}}}},"undoForm":{"type":"apogeeapp.ActionFormCell","viewState":{"childDisplayState":{"views":{"Form":{"isViewActive":true},"Code":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"ALLOWED_SELECTIONS":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"getInitialHistory":{"type":"apogeeapp.FunctionCell","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"lastUpdaterResult":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"DEFAULT_GAME_NAME":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"DEFAULT_ASSIST_LEVEL":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"settings":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":false,"height":280},"Formula":{"isViewActive":false,"height":7000},"Private":{"isViewActive":false}}}}},"undoAvailable":{"type":"apogeeapp.FunctionCell","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"redoAvailable":{"type":"apogeeapp.FunctionCell","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"undoFromHistory":{"type":"apogeeapp.FunctionCell","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"redoFromHistory":{"type":"apogeeapp.FunctionCell","viewState":{"childDisplayState":{"views":{"Code":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":1,"tabOpened":true,"tabShowing":true}},"viewState":{"treeState":1}}},"viewState":{"treeState":1}}