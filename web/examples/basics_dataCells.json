{"fileType":"apogee app js workspace","version":"0.60","references":{"viewState":{"treeState":-1,"lists":{"es module":{"treeState":0},"js link":{"treeState":0},"css link":{"treeState":0}}}},"code":{"model":{"fileType":"apogee model","version":0.3,"name":"Data Cell Basics","children":{"Model":{"name":"Model","type":"apogee.Folder","children":{"year":{"name":"year","type":"apogee.JsonTable","updateData":{"data":2000}},"url":{"name":"url","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return `http://localhost:8888/examples/population/us${year}.json`;","supplementalCode":""}},"populationData":{"name":"populationData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return apogeeutil.jsonRequest(url);","supplementalCode":""}},"errorPopulationData":{"name":"errorPopulationData","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"let errorUrl = url + \"xxx\";\n\n//return apogeeutil.jsonRequest(errorUrl);\nreturn \"comment out the request in the formula to see the error message\";","supplementalCode":""}},"invalidValueTable":{"name":"invalidValueTable","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"//return apogeeutil.INVALID_VALUE;\nreturn \"comment out the invale return value in the formula to see the invalid message\";","supplementalCode":""}},"textCell":{"name":"textCell","type":"apogee.JsonTable","updateData":{"data":"This is text. And here I include a solitary quote which has to be escaped in a regular JSON: \"\nAnd I have a second line."}},"gridCell":{"name":"gridCell","type":"apogee.JsonTable","updateData":{"data":[[1,2,3],[4,5,6]]}},"jsonTypes":{"name":"jsonTypes","type":"apogee.JsonTable","updateData":{"data":{"numericValue":3.4,"stringValue":"Hello","booleanValue":true,"nullValue":null,"arrayValue":[3.4,"Hello",true,null],"objectValue":{"numericValue":3.4,"stringValue":"Hello","booleanValue":true,"nullValue":null}}}}}}}},"components":{"Model":{"type":"apogeeapp.app.FolderComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Basics - Data Cells"}]},{"type":"paragraph","content":[{"type":"text","text":"Apogee looks a lot like a Jupyter notebook. However, the inspiration was the spreadsheet. Apogee is like a spreadsheet except cell can contain more complex data and formulas. The notebook-style literate programming is just to help you keep track of what you are doing."}]},{"type":"paragraph","content":[{"type":"text","text":"On this page are multiple \"cells\", in Jupyter parlance, which are the gray boxes. Each of these cells contains an Apogee component, of which there are many kinds with many functions. The most basic component is a JSON component, which stores a JSON value and has an optional javascript function as the formula. "}]},{"type":"heading2","content":[{"type":"text","text":"Static Values"}]},{"type":"paragraph","content":[{"type":"text","text":"The following cell contains a Data Component which we have called "},{"type":"text","marks":[{"type":"italic"}],"text":"year"},{"type":"text","text":". We will enter a plain static value for it. To store a static value, just enter type value in the view marked "},{"type":"text","marks":[{"type":"italic"}],"text":"Data"},{"type":"text","text":" and press "},{"type":"text","marks":[{"type":"italic"}],"text":"save"},{"type":"text","text":". The value should be expressed as a JSON value."}]},{"type":"apogeeComponent","attrs":{"name":"year","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":" The value can be any JSON value, whether it is a single number like this, or the contents of a JSON file that is over a megabyte in size."}]},{"type":"heading2","content":[{"type":"text","text":"Formulas"}]},{"type":"paragraph","content":[{"type":"text","text":"We see there is also a data view called "},{"type":"text","marks":[{"type":"italic"}],"text":"Formula"},{"type":"text","text":". We will use this in the cell below. We create a new Data Component called url and we place a javascript formula in it."}]},{"type":"paragraph","content":[{"type":"text","text":"Here we use a string template literal. It accesses a variable named year, which is just the data component we defined above. Any component appears as a variable we can access in other formulas."}]},{"type":"apogeeComponent","attrs":{"name":"url","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is an interactive page. You can change cells and see the values update."}]},{"type":"paragraph","content":[{"type":"text","text":"For example, if you change the value of the "},{"type":"text","marks":[{"type":"italic"}],"text":"year"},{"type":"text","text":" cell, the "},{"type":"text","marks":[{"type":"italic"}],"text":"url"},{"type":"text","text":" cell will also change."}]},{"type":"paragraph","content":[{"type":"text","text":"In fact, there will be more changes. You will probably get an error on the page because the URL may no longer point at real data. See the next sections on "},{"type":"text","marks":[{"type":"italic"}],"text":"Asynchronous Formulas"},{"type":"text","text":" and "},{"type":"text","marks":[{"type":"italic"}],"text":"Error Handling"},{"type":"text","text":"."}]},{"type":"paragraph","content":[{"type":"text","text":"Incidentally, the above URL is only valid for the following years:"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"1980"}]},{"type":"listItem","content":[{"type":"text","text":"2000"}]},{"type":"listItem","content":[{"type":"text","text":"2017"}]}]},{"type":"heading2","content":[{"type":"text","text":"More on Data Components"}]},{"type":"paragraph","content":[{"type":"text","text":"To add a data component, press the \"Data Component' button in the editor toolbar. This lets you name the component and set any other settings."}]},{"type":"paragraph","content":[{"type":"text","text":"Once you have your component, the icon to the left of the name doubles as a menu. This will let you edit properties or delete the component."}]},{"type":"paragraph","content":[{"type":"text","text":"We have used the "},{"type":"text","marks":[{"type":"italic"}],"text":"Data"},{"type":"text","text":" and "},{"type":"text","marks":[{"type":"italic"}],"text":"Formula"},{"type":"text","text":" views. There is also a private view. You can add any functions or constants you want here. They are accessible only from the formula for this component."}]},{"type":"paragraph","content":[{"type":"text","text":"You can add additional components and play around with formulas directly on this page."}]},{"type":"paragraph","content":[{"type":"text","marks":[{"type":"italic"}],"text":"<< insert your own data component here >>"},{"type":"text","text":" "}]},{"type":"heading3","content":[{"type":"text","text":"JSON Values"}]},{"type":"paragraph","content":[{"type":"text","text":"In the data component, the value is a JSON. This is a formally formatted JSON where you must include quotes on the keys. Typing in JSON components can be cumbersome but I find I seldom do this in normal programming, at least no more than I would in normal javascript programming."}]},{"type":"paragraph","content":[{"type":"text","text":"Here are some example JSON values:"}]},{"type":"apogeeComponent","attrs":{"name":"jsonTypes","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"One more note, "},{"type":"text","marks":[{"type":"italic"}],"text":"undefined"},{"type":"text","text":" is not a valid value in a JSON."}]},{"type":"heading2","content":[{"type":"text","text":"Asynchronous Formulas"}]},{"type":"paragraph","content":[{"type":"text","text":"Apogee has built in handling for asynchronous functions. To do an asynchronous action, just return a Promise object from the function. Apogee will automatically pause any cell that depends on this asynchronous value until it is resolved."}]},{"type":"paragraph","content":[{"type":"text","text":"Visually, a yellow banner appears on the cell indicating the value is pending. In the example below this should appear briefly after "},{"type":"text","marks":[{"type":"italic"}],"text":"save"},{"type":"text","text":" is pressed in the "},{"type":"text","marks":[{"type":"italic"}],"text":"Formula"},{"type":"text","text":" view."}]},{"type":"paragraph","content":[{"type":"text","text":"The request is made using a library function from apogee which is very similar to javascript's "},{"type":"text","marks":[{"type":"italic"}],"text":"fetch"},{"type":"text","text":". (You can use fetch too if you want.) The difference is mainly in error handling. The apogee jsonRequest function throws an error (called an exception in some other languages). As shown below, this is convenient in Apogee for error handling."}]},{"type":"apogeeComponent","attrs":{"name":"populationData","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Error Handling"}]},{"type":"paragraph","content":[{"type":"text","text":"Apogee also has built in handling for javascript "},{"type":"text","marks":[{"type":"italic"}],"text":"Errors"},{"type":"text","text":". There are mixed views on whether errors/exceptions should be used. In Apogee they are recommended in context where you are working interactively with the code. The idea is that the error is obvious and you will be working to fix it, if that is the appropriate thing to do."}]},{"type":"paragraph","content":[{"type":"text","text":"To demonstrate an error, will repeat the population data example except we will make the url invalid. Incidentally, this also demonstrates the behavior of the jsonRequest function when there is an error."}]},{"type":"paragraph","content":[{"type":"text","text":"Here, a red banner is placed on the cell giving the error message. Any cell that depends on this cell will also get an error banner. The page that is parent to the cell will also get the error, as will the pages parent page. (Technically, the value of the page depends on the value of each cell on the page, as we will illustrate later.)"}]},{"type":"paragraph","content":[{"type":"text","text":"Because we don't want to display the error on this page, because that would be confusing when you try to do the tutorial, we will comment out the offending request. If you want to see the error, just update the comments below."}]},{"type":"apogeeComponent","attrs":{"name":"errorPopulationData","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Invalid Value"}]},{"type":"paragraph","content":[{"type":"text","text":"There is one final return value for table formulas, apogeeutil.INVALID_VALUE. This causes yet another banner, a gray one. If a table returns apogeeutil.INVALID_VALUE, any table that depends on it will also be given the value apogeeutil.INVALID_VALUE."}]},{"type":"paragraph","content":[{"type":"text","text":"As with the error, we comment out the return to avoid setting the gray banner on this page."}]},{"type":"apogeeComponent","attrs":{"name":"invalidValueTable","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Data Views"}]},{"type":"paragraph","content":[{"type":"text","text":"There are three different ways to view the data in a data cell. The default is as a JSON. This is the most general way to do it since the value of the data cell is a JSON."}]},{"type":"paragraph","content":[{"type":"text","text":"You can also view the data as plain text or as a grid. To see the JSON value displayed for each of these cells, go to edit properties and select the JSON view."}]},{"type":"paragraph","content":[{"type":"text","text":"Here is the text data view. It is convenient for working with text, so you don't need to deal with escaping characters."}]},{"type":"apogeeComponent","attrs":{"name":"textCell","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here is the grid data view. It is especially convenient for pasting data from or to a spreadsheet. The JSON format for the grid is a array of arrays."}]},{"type":"apogeeComponent","attrs":{"name":"gridCell","id":0,"state":""}},{"type":"paragraph"},{"type":"paragraph"}]}},"children":{"year":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"height":7000,"isViewActive":false},"Private":{"isViewActive":false}}}}},"url":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"populationData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"errorPopulationData":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"invalidValueTable":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"textCell":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Text Data","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":7000},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"gridCell":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Grid","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":300},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"jsonTypes":{"type":"apogeeapp.app.JsonTableComponent","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":-1,"tabOpened":true,"tabShowing":true}},"viewState":{"treeState":1}}},"viewState":{"treeState":1}}