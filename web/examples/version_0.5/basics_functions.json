{"fileType":"apogee app js workspace","version":"0.50","references":[],"workspace":{"fileType":"apogee workspace","version":0.2,"name":"Functions Basics","data":{"name":"Model","type":"apogee.Folder","children":{"foo":{"name":"foo","type":"apogee.FunctionTable","updateData":{"argList":["a","b"],"functionBody":"return a + b;","supplementalCode":""}},"dummy1":{"name":"dummy1","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return foo(2,3);","supplementalCode":""}},"dummy2":{"name":"dummy2","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return _foo(2,OTHER_PARAMETER);","supplementalCode":"const OTHER_PARAMETER = 3;\n\nfunction _foo(a,b) {\n    return a + b;\n}"}},"pageFoo":{"name":"pageFoo","type":"apogee.FolderFunction","updateData":{"argList":["a","b"],"returnValue":"c"},"children":{"root":{"name":"root","type":"apogee.Folder","children":{"a":{"name":"a","type":"apogee.JsonTable","updateData":{"data":1}},"b":{"name":"b","type":"apogee.JsonTable","updateData":{"data":2}},"c":{"name":"c","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return a + b;","supplementalCode":""}}}}}},"dummy3":{"name":"dummy3","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return pageFoo(2,3)","supplementalCode":""}}}}},"components":{"type":"apogeeapp.app.FolderComponent","treeState":null,"data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Function Basics"}]},{"type":"paragraph","content":[{"type":"text","text":"We learned about data cells, which is our basic representation of a value. We also can make functions, in a number of different ways."}]},{"type":"heading2","content":[{"type":"text","text":"Function Cell"}]},{"type":"paragraph","content":[{"type":"text","text":"The most obvious way of creating a function is to create a function cell. Whereas a data cell acts as a value which we can access by name elsewhere in our workspace, the function cell acts as a function we can access by name elsewhere in our workspace. Creating a function is similar to creating a data cell. Here we must supply not only the name but also the arguments."}]},{"type":"paragraph","content":[{"type":"text","text":"Below we create the function "},{"type":"text","marks":[{"type":"italic"}],"text":"foo"},{"type":"text","text":" with the arguments "},{"type":"text","marks":[{"type":"italic"}],"text":"a"},{"type":"text","text":" and "},{"type":"text","marks":[{"type":"italic"}],"text":"b"},{"type":"text","text":". This function just adds the tow arguments together. A function like this is basically a global function."}]},{"type":"apogeeComponent","attrs":{"name":"foo","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"We'll create a dummy data table below to use this function. "}]},{"type":"apogeeComponent","attrs":{"name":"dummy1","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Private Functions"}]},{"type":"paragraph","content":[{"type":"text","text":"There is also the ability to create private functions. These are not private in the sense of object oriented programming. There is no \"this\" context on the functions. Instead, it is just a plain function that only the given cell has access too. This is done using the Private view on the cell."}]},{"type":"paragraph","content":[{"type":"text","text":"Here is a new dummy table illustrating a private function. I have prepended an underscore just to remind myself that I will find the definition of the function in the private area for this cell. Note that I also defined a constant in the private area. That is legal too."}]},{"type":"paragraph","content":[{"type":"text","text":"The benefit of using the private area is that it keeps the rest of the workspace clean if this is a function or constant that is used only in this one cell."}]},{"type":"apogeeComponent","attrs":{"name":"dummy2","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Non-functions"}]},{"type":"paragraph","content":[{"type":"text","text":"By non-function I mean not using a function. Functions are certainly a good thing. It is difficult to read when you have giant lengths of inline code. However, in the context of iterative programming, if you find yourself writing a lot of code in functions, whether as a function cell or a private function, you are doing a lot of work without seeing real time feedback as to whether or not your code works. In other words, you are back to \"normal\" coding as opposed to interactive coding."}]},{"type":"paragraph","content":[{"type":"text","text":"In general it is better to have more data cells (or other value cells) where you an see iterative results rather than using a lot of code, in a function or not, to give a particular cell value."}]},{"type":"heading2","content":[{"type":"text","text":"Page Functions"}]},{"type":"paragraph","content":[{"type":"text","text":"There is another kind of function, a page function. Here, the body of the function is expressed as a page (or multiple pages) of Apogee code. A trivial example is shown here."}]},{"type":"paragraph","content":[{"type":"text","text":"The idea is that you define a page with set cells on it. You cal define the "},{"type":"text","marks":[{"type":"italic"}],"text":"input"},{"type":"text","text":" and "},{"type":"text","marks":[{"type":"italic"}],"text":"output"},{"type":"text","text":" cells. When the function is called the arguments of the function are passed in to the input cells of the page function. The page (actually a virtual copy of the page) is calculated/updated and the value in the output cell is given as the return value of the function."}]},{"type":"paragraph","content":[{"type":"text","text":"Below I create the table "},{"type":"text","marks":[{"type":"italic"}],"text":"pageFoo"},{"type":"text","text":" with the arguments "},{"type":"text","marks":[{"type":"italic"}],"text":"a"},{"type":"text","text":" and "},{"type":"text","marks":[{"type":"italic"}],"text":"b"},{"type":"text","text":" and the return value "},{"type":"text","marks":[{"type":"italic"}],"text":"c"},{"type":"text","text":". I can open the page function body from the tree panel on the left. There I can populate the body, including the input and output cells. "},{"type":"text","marks":[{"type":"highlight","attrs":{"color":"yellow"}}],"text":"ADD A LINK TO NAVIGATE THERE?"}]},{"type":"apogeeComponent","attrs":{"name":"pageFoo","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"The example page function here is trivial. For a good example where a page function is useful, see the Sudoku Helper workspace. "},{"type":"text","marks":[{"type":"highlight","attrs":{"color":"yellow"}}],"text":"LINK TO THAT HERE?"}]},{"type":"paragraph","content":[{"type":"text","text":"Here is another dummy data cell which uses this function."}]},{"type":"apogeeComponent","attrs":{"name":"dummy3","id":0,"state":""}},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"}]},"selection":{"type":"text","anchor":2020,"head":2020}},"children":{"foo":{"type":"apogeeapp.app.FunctionComponent","windowState":{"views":{"Code":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}},"dummy1":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}},"dataView":"Colorized"},"dummy2":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":true,"height":7000}}},"dataView":"Colorized"},"pageFoo":{"type":"apogeeapp.app.FolderFunctionComponent","treeState":null,"data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Page Foo - Example Page Function"}]},{"type":"paragraph","content":[{"type":"text","text":"This is the example page function. When the function is called, the arguments are placed in the input cells, as if you typed in the values. The page then updates any other cells on the page, including the output cell. Finally the value in the output cell is returned as the return value of the function."}]},{"type":"paragraph","content":[{"type":"text","text":"One note, this specific page is not actually changed. A virtual copy of the page is used when the function is called."}]},{"type":"heading2","content":[{"type":"text","text":"Inputs"}]},{"type":"paragraph","content":[{"type":"text","text":"I have placed the input tables in this section."}]},{"type":"apogeeComponent","attrs":{"name":"a","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"b","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Processing"}]},{"type":"paragraph","content":[{"type":"text","text":"Because this is a trivial function, there is no internal processing. I will not add any other tables besides the input and output tables, but typically there will be some."}]},{"type":"heading2","content":[{"type":"text","text":"Output"}]},{"type":"paragraph","content":[{"type":"text","text":"This is the output table. In this cases it includes all the actual computation of the function."}]},{"type":"apogeeComponent","attrs":{"name":"c","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":" "}]}]},"selection":{"type":"text","anchor":457,"head":457}},"children":{"a":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}},"dataView":"Colorized"},"b":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}},"dataView":"Colorized"},"c":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}},"dataView":"Colorized"}}},"dummy3":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}},"dataView":"Colorized"}}},"openTabs":["Model","Model.pageFoo"],"activeTabMember":"Model"}