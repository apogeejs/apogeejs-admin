{"fileType":"apogee workspace","jsLinks":["https://unpkg.com/leaflet@1.2.0/dist/leaflet.js"],"cssLinks":["https://unpkg.com/leaflet@1.2.0/dist/leaflet.css"],"workspace":{"fileType":"apogee workspace","version":0.2,"data":{"name":"Workspace","type":"apogee.Folder","children":{"osmDownload":{"name":"osmDownload","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var options = {};\noptions.method = \"POST\";\noptions.body = getBody(swneBoundingBox);\n\nreturn apogee.net.jsonRequest(url,options);","supplementalCode":"function getBody(boundingBoxArray) {\n    var bboxString = boundingBoxArray.join(\",\");\n\n    var query = \"[out:json];\"\n    query += \"(\"\n    query += \"node(\" + bboxString + \");\";\n    query += \"(\";\n    query += \"way(\" + bboxString + \");\";\n    query += \">;\"\n    query += \");\"\n    query += \");\"\n    query += \"out;\";\n    \n    return query;\n}","description":""}},"rawFeatures":{"name":"rawFeatures","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = [];\n\n//keep elements if it has properties and is a node or way (not a relation)\nvar keepElement = (element) =>((element.tags !== undefined)&&(element.type != \"relation\"));\n\nvar output = osmDownload.elements.filter(keepElement).map(toRawFeature);\n\nreturn output;","supplementalCode":"function toRawFeature(element) {\n    var feature = {};\n    feature.id = element.id;\n    feature.type = element.type;\n    feature.properties = element.tags;\n    \n    if(element.type == \"node\") {\n        feature.coords = getNodePoint(element.id);\n    }\n    else if(element.type == \"way\") {\n        feature.coords = getNodePointList(element.nodes);\n    }\n   else {\n        //shouldn't happen\n        throw new Error(\"Unexpected osm type: \" + element.type);\n    }\n    \n    return feature;\n}\n\nfunction getNodePointList(nodeIdList) {\n    return nodeIdList.map((id) => getNodePoint(id));\n}","description":""}},"nodePointMap":{"name":"nodePointMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nvar isNode = (element) => (element.type == \"node\");\nvar addToMap = (element) => output[element.id] = [element.lon,element.lat];\n\nosmDownload.elements.filter(isNode).forEach(addToMap);\n\nreturn output;","supplementalCode":"","description":""}},"getNodePoint":{"name":"getNodePoint","type":"apogee.FunctionTable","updateData":{"argList":["nodeId"],"functionBody":"return nodePointMap[nodeId];","supplementalCode":"","description":""}},"swneBoundingBox":{"name":"swneBoundingBox","type":"apogee.JsonTable","updateData":{"data":[37.38610011411437,-122.08340406417848,37.39639727453046,-122.0768165588379],"description":""}},"geoJson":{"name":"geoJson","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\noutput.type = \"FeatureCollection\";\noutput.properties = {};\noutput.features = rawFeatures.map(createFeature);\nreturn output;","supplementalCode":"function createFeature(rawFeature) {\n    var feature = {};\n    feature.type = \"Feature\";\n    feature.properties = rawFeature.properties;\n    feature.geometry = getGeometry(rawFeature);\n    return feature;\n}\n\nfunction getGeometry(rawFeature) {\n    var coords;\n    var type;\n    switch(rawFeature.type) {\n        case \"node\":\n            type = \"Point\";\n            coords = getGeojsonPoint(rawFeature.coords);\n            break;\n            \n        case \"way\":\n            if(theme.isPolygon(rawFeature)) {\n                type = \"Polygon\";\n                coords = getGeojsonPolygon(rawFeature.coords);    \n            }\n            else {\n                type = \"LineString\";\n                coords = getGeojsonLineString(rawFeature.coords);\n            }\n            break;\n            \n        default:\n            throw new Error(\"Unexpected osm type!\");\n    }\n    \n    return {\n        \"type\": type,\n        \"coordinates\": coords\n    }\n}\n\nfunction getGeojsonPoint(coords) {\n    return coords;\n}\n\nfunction getGeojsonLineString(coords) {\n    return coords;\n}\n\nfunction getGeojsonPolygon(coords) {\n    return [getGeojsonLineString(coords)];\n}\n\n","description":""}},"render":{"name":"render","type":"apogee.Folder","children":{"map":{"name":"map","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var data = {};\ndata.geoJson = geoJson;\ndata.options = getOptions();\ndata.bounds= getLeafletBounds(swneBoundingBox);\n\nreturn data;","supplementalCode":"function getOptions() {\n    \n    var options = {};\n    \n    //filter geometry with styles\n    options.filter = theme.mapFilter\n    \n    //style lines and polygons\n    options.style = theme.lineAndAreaStyle;\n    \n    //style points\n    options.pointToLayer = function(feature,latLng) {\n        var pointStyleInfo = theme.pointStyle(feature);\n        if(pointStyleInfo) {\n            if(pointStyleInfo.url) {\n                var options = {\"icon\":L.icon({\"iconUrl\": pointStyleInfo.url})};\n                return L.marker(latLng, options);\n            }\n            else {\n                return  L.circleMarker(latLng, pointStyleInfo);\n            }\n        }\n        else {\n            return null;\n        }\n    };\n    \n    //add a popup\n    options.onEachFeature = function(feature,layer) {\n        var outputLines = [];\n        if(feature.properties.name) outputLines.push(feature.properties.name);\n        if(feature.properties.amenity) outputLines.push(feature.properties.amenity);\n        if(feature.properties.cuisine) outputLines.push(feature.properties.cuisine);\n        \n        if(outputLines.length > 0) {\n            layer.bindPopup(outputLines.join(\"<br>\"));\n        }\n    }\n \n    return options;   \n}\n\nfunction getLeafletBounds(swneBoundingBox) {\n    var bottomRight = L.latLng(swneBoundingBox[0], swneBoundingBox[1]);\n    var topLeft = L.latLng(swneBoundingBox[2], swneBoundingBox[3]);\n    return L.latLngBounds(bottomRight, topLeft);\n}\n","description":""}}}},"url":{"name":"url","type":"apogee.JsonTable","updateData":{"data":"http://overpass-api.de/api/interpreter","description":""}},"theme":{"name":"theme","type":"apogee.Folder","children":{"themeTemplate":{"name":"themeTemplate","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = [];\n\n//header row\noutput.push(columns);\n\nvar addKeyToGrid = function(key) {\n    for(var tag in tags[key]) {\n        var row = [key,tag];\n        output.push(row);\n    }\n    var defaultRow = [key,\"\"];\n    output.push(defaultRow);\n}\n\nkeysOfInterest.forEach(addKeyToGrid);\n\n// for(var key in tags) {\n//     var keyEntry = tags[key];\n//     for(var value in keyEntry) {\n//         var valueRow = [key,value,keyEntry[value]];\n//         output.push(valueRow);\n//     }\n//     var keyRow = [key];\n//     output.push(keyRow)\n// }\n\nreturn output;","supplementalCode":"","description":""}},"tags":{"name":"tags","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var tagMap = {};\n\nfor(var i = 0; i < rawFeatures.length; i++) {\n    var feature = rawFeatures[i];\n    var properties = feature.properties;\n    \n    for(var key in properties) {\n        var keyEntry = tagMap[key];\n        if(!keyEntry) {\n            keyEntry = {};\n            tagMap[key] = keyEntry;\n        }\n        \n        var value = properties[key];\n        if(keyEntry[value] === undefined) {\n            keyEntry[value] = 1;\n        }\n        else {\n            keyEntry[value]++;\n        }\n    }\n}\n\nreturn tagMap;","supplementalCode":"","description":""}},"themeInput":{"name":"themeInput","type":"apogee.JsonTable","updateData":{"data":[["Key","Value","Is Polygon","Fill Color","Stroke Color","Stroke Weight","Icon Url"],["highway","traffic_signals","","","","",""],["highway","turning_circle","","","","",""],["highway","stop","","","","",""],["highway","crossing","","","","",""],["highway","primary_link","","","","",""],["highway","service","","","","",""],["highway","residential","","","#404080","4",""],["highway","unclassified","","","","",""],["highway","primary","","","#800000","12",""],["highway","primary_link","","","#800000","8",""],["highway","footway","","","","",""],["highway","motorway","","","#0000ff","16",""],["highway","motorway_link","","","#0000ff","12",""],["highway","secondary","","","#800000","8",""],["highway","","","","#404080","4",""],["building","yes","","","","",""],["building","retail","","","","",""],["building","roof","","","","",""],["building","commercial","","","","",""],["building","garage","","","","",""],["building","","TRUE","#2a4cd4","#404040","1",""],["cuisine","chinese","","","","","http://localhost:8383/extra/flags24/China.png"],["cuisine","ice_cream","","","","","http://localhost:8383/extra/food/icecream.png"],["cuisine","burger","","","","","http://localhost:8383/extra/food/burger.png"],["cuisine","indian","","","","","http://localhost:8383/extra/flags24/India.png"],["cuisine","sandwich","","","","","http://localhost:8383/extra/food/sandwich.png"],["cuisine","thai","","","","","http://localhost:8383/extra/flags24/Thailand.png"],["cuisine","vietnamese","","","","","http://localhost:8383/extra/flags24/VietNam.png"],["cuisine","mexican","","","","","http://localhost:8383/extra/flags24/Mexico.png"],["cuisine","spanish","","","","","http://localhost:8383/extra/flags24/Spain.png"],["cuisine","mediterranean","","","","",""],["cuisine","japanese","","","","","http://localhost:8383/extra/flags24/Japan.png"],["cuisine","korean;chicken","","","","","http://localhost:8383/extra/flags24/SouthKorea.png"],["cuisine","american","","","","","http://localhost:8383/extra/flags24/UnitedStates.png"],["cuisine","bagel","","","","","http://localhost:8383/extra/food/bagel.png"],["cuisine","french;italian","","","","","http://localhost:8383/extra/flags24/France.png"],["cuisine","pizza","","","","","http://localhost:8383/extra/food/pizza.png"],["cuisine","seafood","","","","","http://localhost:8383/extra/food/fish.png"],["cuisine","pakistani;indian","","","","","http://localhost:8383/extra/flags24/Pakistan.png"],["cuisine","korean","","","","","http://localhost:8383/extra/flags24/SouthKorea.png"],["cuisine","bubble_tea","","","","","http://localhost:8383/extra/food/tea.png"],["cuisine","asian","","","","",""],["cuisine","italian","","","","","http://localhost:8383/extra/flags24/Italy.png"],["cuisine","israeli","","","","","http://localhost:8383/extra/flags24/Israel.png"],["cuisine","french","","","","","http://localhost:8383/extra/flags24/France.png"],["cuisine","japanese;sushi","","","","","http://localhost:8383/extra/flags24/Japan.png"],["cuisine","mongolian","","","","","http://localhost:8383/extra/flags24/Mongolia.png"],["cuisine","","","","","","http://localhost:8383/extra/food/restaurant.png"],["amenity","fuel","","","","",""],["amenity","atm","","","","",""],["amenity","restaurant","","","","",""],["amenity","bicycle_parking","","","","",""],["amenity","cafe","","","","",""],["amenity","fast_food","","","","",""],["amenity","parking","","","","",""],["amenity","","","","","","http://localhost:8383/extra/misc/favorite.png"]],"description":""}},"columnIndexMap":{"name":"columnIndexMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nfor(var i = 0; i < columns.length; i++) {\n    output[columns[i]] = i;\n}\n\nreturn output;","supplementalCode":"","description":""}},"columns":{"name":"columns","type":"apogee.JsonTable","updateData":{"data":["Key","Value","Is Polygon","Fill Color","Stroke Color","Stroke Weight","Icon Url"],"description":""}},"mapFilter":{"name":"mapFilter","type":"apogee.FunctionTable","updateData":{"argList":["feature"],"functionBody":"var styleInfo;\n\nif(feature.geometry.type == \"Point\") {\n    styleInfo = pointStyle(feature);\n}\nelse {\n    styleInfo = lineAndAreaStyle(feature);\n}\n\nreturn (styleInfo != null);","supplementalCode":"","description":""}},"lineAndAreaStyle":{"name":"lineAndAreaStyle","type":"apogee.FunctionTable","updateData":{"argList":["feature"],"functionBody":"return readPropertyTree(wayStyleTree,feature);","supplementalCode":"","description":""}},"pointStyle":{"name":"pointStyle","type":"apogee.FunctionTable","updateData":{"argList":["feature"],"functionBody":"return readPropertyTree(pointStyleTree,feature);","supplementalCode":"","description":""}},"keysOfInterest":{"name":"keysOfInterest","type":"apogee.JsonTable","updateData":{"data":["highway","amenity","building","cuisine"],"description":""}},"getRowEntry":{"name":"getRowEntry","type":"apogee.FunctionTable","updateData":{"argList":["row","columnName"],"functionBody":"var columnIndex = columnIndexMap[columnName];\nif(columnIndex === undefined) {\n    throw new Error(\"Unknown theme column: \" + columnName);\n}\n\nreturn row[columnIndex];","supplementalCode":"","description":""}},"wayStyleTree":{"name":"wayStyleTree","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return createPropertyTree(themeInput,createWayStyleInfo);\n","supplementalCode":"function createWayStyleInfo(row) {\n    var fillColor = getRowEntry(row,\"Fill Color\");\n    var strokeColor = getRowEntry(row,\"Stroke Color\");\n    var strokeWeight = getRowEntry(row,\"Stroke Weight\");\n    \n    var styleInfo = {};\n    var entryAdded = false;\n    \n    if(fillColor != \"\") {\n        styleInfo.fillColor = fillColor;\n        entryAdded = true;\n    }\n    if(strokeColor != \"\") {\n        styleInfo.color = strokeColor;\n        if(strokeWeight != \"\") {\n            styleInfo.weight = strokeWeight;\n        }\n        entryAdded = true;\n    }\n    \n    if(entryAdded) {\n        return styleInfo;\n    }\n    else {\n        return null;\n    }\n}\n","description":""}},"pointStyleTree":{"name":"pointStyleTree","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return createPropertyTree(themeInput,createPointStyleInfo);","supplementalCode":"function createPointStyleInfo(row) {\n    var url = getRowEntry(row,\"Icon Url\");\n    \n    if(url != \"\") {\n        var styleInfo = {};\n        styleInfo.url = url;\n        return styleInfo;\n    }\n    else {\n        return null;\n    }\n}","description":""}},"isPolygon":{"name":"isPolygon","type":"apogee.FunctionTable","updateData":{"argList":["feature"],"functionBody":"return readPropertyTree(polygonTree,feature);","supplementalCode":"","description":""}},"polygonTree":{"name":"polygonTree","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"return createPropertyTree(themeInput,polygonDetector);","supplementalCode":"function polygonDetector(row) {\n    var isPolygon = getRowEntry(row,\"Is Polygon\");\n\n    if(isPolygon) {\n        return true;\n    }\n    else {\n        return null;\n    }\n}","description":""}},"createPropertyTree":{"name":"createPropertyTree","type":"apogee.FunctionTable","updateData":{"argList":["inputMatrix","createPayloadFunction"],"functionBody":"var propertyTree = {};\n\n//don't include header row\nfor(var i = 1; i < inputMatrix.length; i++) {\n    var row = inputMatrix[i];\n    \n    var payload = createPayloadFunction(row);\n    if(payload) {\n        var key = getRowEntry(row,\"Key\");\n        var value = getRowEntry(row,\"Value\");\n        \n        //get key entry\n        var keyEntry = propertyTree[key];\n        if(keyEntry === undefined) {\n            var keyEntry = {};\n            propertyTree[key] = keyEntry;\n        }\n        \n        //add style to key or value \n        if(value != \"\") {\n            if(keyEntry.values === undefined) {\n                keyEntry.values = {};\n            }\n            keyEntry.values[value] = payload; \n        }\n        else {\n            keyEntry.default = payload;\n        }\n    }\n}\n\nreturn propertyTree;","supplementalCode":"","description":""}},"readPropertyTree":{"name":"readPropertyTree","type":"apogee.FunctionTable","updateData":{"argList":["tree","feature"],"functionBody":"for(var key in tree) {\n    \n    var featureValue = feature.properties[key];\n    if(featureValue !== undefined) {\n        var treeEntry = tree[key];\n        //check the value specific entry\n        if(treeEntry.values) {\n            var payload = treeEntry.values[featureValue];\n            if(payload !== undefined) {\n                return payload;\n            }\n        }\n        \n        //check the default entry\n        if(treeEntry.default !== undefined) {\n            return treeEntry.default;\n        }\n    }\n}\n\n//none found\nreturn null;","supplementalCode":"","description":""}}}}}}},"components":{"osmDownload":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":795,"height":512},"posInfo":{"x":41,"y":161},"state":-1,"viewType":"JSON"}},"rawFeatures":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":698,"height":625},"posInfo":{"x":39,"y":230},"state":-1,"viewType":"JSON"}},"nodePointMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":588,"height":401},"posInfo":{"x":376,"y":134},"state":-1,"viewType":"Formula"}},"getNodePoint":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":401,"height":51},"posInfo":{"x":377,"y":180},"state":-1,"viewType":"Code"}},"swneBoundingBox":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":276,"height":115},"posInfo":{"x":45,"y":28},"state":-1,"viewType":"JSON"}},"geoJson":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":809,"height":657},"posInfo":{"x":37,"y":292},"state":-1,"viewType":"Private"}},"render":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":460,"y":69}},"children":{"map":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":844,"height":702},"posInfo":{"x":63,"y":67},"state":0,"viewType":"Output"},"resource":{"html":"<div id=\"mapElement\">\n</div>\n<button id=\"captureButton\">Capture</button>","css":"#mapElement {\n    position: absolute;\n    top: 0px;\n    left: 0px;\n    bottom: 0px;\n    right: 0px;\n}\n#captureButton {\n    position: absolute;\n    left: 10px;\n    bottom: 10px;\n    z-index: 1000;\n}","constructorAddition":"this.mapElement = null;\nthis.captureButton = null;\nthis.initialized = false;\n\n\nthis.render = function(data) {\n    if(this.geoJsonLayer) {\n        //remove the old layer\n        this.geoJsonLayer.remove();\n        this.geomJsonLayer = null;\n    }\n    \n    if(data) {\n        if(data.geoJson) {\n            this.geoJsonLayer = L.geoJSON(data.geoJson,data.options).addTo(this.map);\n        }\n        \n        if(data.bounds) {\n            this.map.fitBounds(data.bounds);\n        }\n    }\n}\n\nthis.onCapture = function() {\n    if(this.map) {\n        var mapBounds = this.map.getBounds();\n        var swneBoundsArray = [\n            mapBounds.getSouth(),\n            mapBounds.getWest(),\n            mapBounds.getNorth(),\n            mapBounds.getEast()\n        ]\n           \n        mode.getMessenger().dataUpdate(\"swneBoundingBox\",swneBoundsArray);\n    }\n    \n} \n","onLoad":"if(!this.initialized) {\n    //some working variables\n    this.mapElement = document.getElementById(\"mapElement\");\n    this.captureButton = document.getElementById(\"captureButton\");\n    this.captureButton.onclick = () => this.onCapture();\n    \n    //create the map\n    this.map = L.map('mapElement');\n    \n    // create the tile layer with correct attribution\n    var osmUrl='http://a.tile.openstreetmap.org/{z}/{x}/{y}.png';\n    var osmAttrib='Map data © <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors';\n    var osm = new L.TileLayer(osmUrl, {minZoom: 1, maxZoom: 19, attribution: osmAttrib});\t\t\n    this.map.addLayer(osm);\n    \n    //control to turn on/off base map\n    var layers = {\n        \"Base Layer\": osm\n    }\n    L.control.layers({},layers).addTo(this.map);\n    \n    this.initialized = true;\n    \n    if(this.data) {\n        this.render(this.data)\n    }\n}","setData":"this.data = data;\nif(this.initialized) {\n   this.render(data); \n}\n\n\n\n","onHide":"","onResize":"if(this.map) {\n    this.map.invalidateSize();\n}"}}}},"url":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":367,"height":49},"posInfo":{"x":45,"y":72},"state":-1,"viewType":"Text"}},"theme":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":460,"y":23}},"children":{"themeTemplate":{"type":"apogeeapp.app.GridTableComponent","windowState":{"sizeInfo":{"width":864,"height":531},"posInfo":{"x":566,"y":35},"state":-1,"viewType":"Grid"}},"tags":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":773,"height":705},"posInfo":{"x":31,"y":144},"state":-1,"viewType":"JSON"}},"themeInput":{"type":"apogeeapp.app.GridTableComponent","windowState":{"sizeInfo":{"width":950,"height":661},"posInfo":{"x":32,"y":0},"state":0,"viewType":"Grid"}},"columnIndexMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":266,"height":148},"posInfo":{"x":31,"y":65},"state":-1,"viewType":"JSON"}},"columns":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":229,"height":192},"posInfo":{"x":606,"y":148},"state":0,"viewType":"JSON"}},"mapFilter":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":472,"height":406},"posInfo":{"x":36,"y":625},"state":-1,"viewType":"Code"}},"lineAndAreaStyle":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":472,"height":115},"posInfo":{"x":31,"y":420},"state":-1,"viewType":"Code"}},"pointStyle":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":110},"posInfo":{"x":32,"y":528},"state":-1,"viewType":"Code"}},"keysOfInterest":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":300,"height":331},"posInfo":{"x":565,"y":84},"state":-1,"viewType":"Form"}},"getRowEntry":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":560,"height":111},"posInfo":{"x":32,"y":111},"state":-1,"viewType":"Code"}},"wayStyleTree":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":434,"height":602},"posInfo":{"x":37,"y":369},"state":-1,"viewType":"Formula"}},"pointStyleTree":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":643,"height":448},"posInfo":{"x":34,"y":478},"state":-1,"viewType":"JSON"}},"isPolygon":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":400,"height":400},"posInfo":{"x":406,"y":421},"state":-1,"viewType":"Code"}},"polygonTree":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":452,"height":461},"posInfo":{"x":404,"y":373},"state":-1,"viewType":"Formula"}},"createPropertyTree":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":591,"height":528},"posInfo":{"x":33,"y":241},"state":-1,"viewType":"Code"}},"readPropertyTree":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":504,"height":400},"posInfo":{"x":33,"y":285},"state":-1,"viewType":"Code"}}}}}}