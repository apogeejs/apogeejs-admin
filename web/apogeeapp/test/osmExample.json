{
	"fileType": "apogee app js workspace",
	"version": 0.4,
	"workspace": {
		"fileType": "apogee workspace",
		"version": 0.2,
		"data": {
			"name": "Model",
			"type": "apogee.Folder",
			"children": {
				"swneBoundingBox": {
					"name": "swneBoundingBox",
					"type": "apogee.JsonTable",
					"updateData": {
						"data": [
							37.39303678804945,
							-122.08008885383607,
							37.39453272390984,
							-122.0778250694275
						],
						"description": ""
					}
				},
				"render": {
					"name": "render",
					"type": "apogee.Folder",
					"children": {
						"map": {
							"name": "map",
							"type": "apogee.JsonTable",
							"updateData": {
								"argList": [],
								"functionBody": "var data = {};\ndata.geojson = geojson;\n\ndata.styleFunctions = {};\ndata.styleFunctions.getLineAndAreaStyle = propertyAnalysis.getLineAndAreaStyle;\ndata.styleFunctions.getPointStyle = propertyAnalysis.getPointStyle;\ndata.styleFunctions.mapFilter = propertyAnalysis.mapFilter;\n\ndata.bounds= getLeafletBounds(swneBoundingBox);\n\nreturn data;",
								"supplementalCode": "function getOptions() {\n    \n    var options = {};\n    \n    //filter geometry with styles\n    options.filter = theme.mapFilter\n    \n    //style lines and polygons\n    options.style = theme.getLineAndAreaStyle;\n    \n    //style points\n    options.pointToLayer = function(feature,latLng) {\n        var iconUrl = theme.getPointIconUrl(feature);\n        if(iconUrl) {\n            var options = {\"icon\":L.icon({\"iconUrl\": iconUrl})};\n            return L.marker(latLng, options);\n        }\n        else {\n            return null;\n        }\n    };\n    \n    //add a popup\n    options.onEachFeature = function(feature,layer) {\n        var outputLines = [];\n        if(feature.properties.name) outputLines.push(feature.properties.name);\n        if(feature.properties.amenity) outputLines.push(feature.properties.amenity);\n        if(feature.properties.cuisine) outputLines.push(feature.properties.cuisine);\n        \n        if(outputLines.length > 0) {\n            layer.bindPopup(outputLines.join(\"<br>\"));\n        }\n    }\n \n    return options;   \n}\n\nfunction getLeafletBounds(swneBoundingBox) {\n    var bottomRight = L.latLng(swneBoundingBox[0], swneBoundingBox[1]);\n    var topLeft = L.latLng(swneBoundingBox[2], swneBoundingBox[3]);\n    return L.latLngBounds(bottomRight, topLeft);\n}\n",
								"description": ""
							}
						}
					}
				},
				"url": {
					"name": "url",
					"type": "apogee.JsonTable",
					"updateData": {
						"data": "http://overpass-api.de/api/interpreter",
						"description": ""
					}
				},
				"geojsonPointLookupTable": {
					"name": "geojsonPointLookupTable",
					"type": "apogee.JsonTable",
					"updateData": {
						"argList": [],
						"functionBody": "var output = {};\n\nvar isNode = (element) => (element.type == \"node\");\nvar addToMap = (element) => output[element.id] = [element.lon,element.lat];\n\nosmData.elements.filter(isNode).forEach(addToMap);\n\nreturn output;",
						"supplementalCode": "",
						"description": ""
					}
				},
				"geojson": {
					"name": "geojson",
					"type": "apogee.JsonTable",
					"updateData": {
						"argList": [],
						"functionBody": "var output = {};\noutput.type = \"FeatureCollection\";\noutput.properties = {};\n\nvar hasTags = (element) => (element.tags !== undefined);\n\nvar toGeojsonFeature = (osmFeature) => {\n    var geojsonFeature = {};\n    geojsonFeature.type = \"Feature\";\n    geojsonFeature.id = osmFeature.id;\n    geojsonFeature.properties = osmFeature.tags;\n    geojsonFeature.geometry = getGeojsonGeometry(osmFeature);\n    return geojsonFeature;\n}\n\noutput.features = osmData.elements.filter(hasTags).map(toGeojsonFeature);\n\nreturn output;",
						"supplementalCode": "function getGeojsonGeometry(osmFeature) {\n    var geometry = {};\n    if(osmFeature.type == \"node\") {\n        geometry.type = \"Point\";\n        geometry.coordinates = getPointCoordinates(osmFeature.id);\n    }\n    else if(osmFeature.type == \"way\") {\n        if(propertyAnalysis.isPolygon(osmFeature)) {\n            geometry.type = \"Polygon\";\n            geometry.coordinates = getPolygonCoordinates(osmFeature.nodes)\n        }\n        else {\n            geometry.type = \"LineString\";\n            geometry.coordinates = getLineStringCoordinates(osmFeature.nodes);\n        }\n    }\n    else {\n        throw new Error(\"Unexpected osm type: \" + osmFeature.type);\n    }\n    return geometry;\n}\n\n// function isPolygon(osmFeature) {\n//     return false;\n// }\n\n/** Point - lookup lon lat point for given node id */\nfunction getPointCoordinates(nodeId) {\n    return geojsonPointLookupTable[nodeId];\n}\n\n/** Line String - list of lat lon points for a list of node ids */\nfunction getLineStringCoordinates(nodeIdList) {\n    return nodeIdList.map(getPointCoordinates);\n}\n\n/** Polygon - get a list o fline strings (with one entry - the outer loop)\n * We are not supporting interior rings for now. */\nfunction getPolygonCoordinates(nodeIdList) {\n    return [getLineStringCoordinates(nodeIdList)];\n}\n\n",
						"description": ""
					}
				},
				"propertyAnalysis": {
					"name": "propertyAnalysis",
					"type": "apogee.Folder",
					"children": {
						"themeTemplate": {
							"name": "themeTemplate",
							"type": "apogee.JsonTable",
							"updateData": {
								"argList": [],
								"functionBody": "var output = [];\n\n//header row\noutput.push(columns);\n\nvar addKeyToGrid = function(key) {\n    for(var tag in tags[key]) {\n        var row = [key,tag];\n        output.push(row);\n    }\n    var defaultRow = [key,\"\"];\n    output.push(defaultRow);\n}\n\nkeysOfInterest.forEach(addKeyToGrid);\n\n// for(var key in tags) {\n//     var keyEntry = tags[key];\n//     for(var value in keyEntry) {\n//         var valueRow = [key,value,keyEntry[value]];\n//         output.push(valueRow);\n//     }\n//     var keyRow = [key];\n//     output.push(keyRow)\n// }\n\nreturn output;",
								"supplementalCode": "",
								"description": ""
							}
						},
						"tags": {
							"name": "tags",
							"type": "apogee.JsonTable",
							"updateData": {
								"argList": [],
								"functionBody": "var tagMap = {};\n\nvar saveTags = function(feature) {\n    for(var key in feature.properties) {\n        var keyEntry = tagMap[key];\n        if(!keyEntry) {\n            keyEntry = {};\n            tagMap[key] = keyEntry;\n        }\n        \n        var value = feature.properties[key];\n        if(keyEntry[value] === undefined) {\n            keyEntry[value] = 1;\n        }\n        else {\n            keyEntry[value]++;\n        }\n    }\n}\n\ngeojson.features.forEach(saveTags);\n\nreturn tagMap;",
								"supplementalCode": "",
								"description": ""
							}
						},
						"themeInput": {
							"name": "themeInput",
							"type": "apogee.JsonTable",
							"updateData": {
								"data": [
									[
										"Key",
										"Value",
										"Is Polygon",
										"Fill Color",
										"Stroke Color",
										"Stroke Weight",
										"Icon Url",
										"Icon Anchor"
									],
									[
										"highway",
										"traffic_signals",
										"",
										"",
										"",
										"",
										"",
										null
									],
									[
										"highway",
										"turning_circle",
										"",
										"",
										"",
										"",
										"",
										null
									],
									[
										"highway",
										"stop",
										"",
										"",
										"",
										"",
										"",
										null
									],
									[
										"highway",
										"crossing",
										"",
										"",
										"",
										"",
										"",
										null
									],
									[
										"highway",
										"primary_link",
										"",
										"",
										"",
										"",
										"",
										null
									],
									[
										"highway",
										"service",
										"",
										"",
										"",
										"",
										"",
										null
									],
									[
										"highway",
										"residential",
										"",
										"",
										"#404080",
										"4",
										"",
										null
									],
									[
										"highway",
										"unclassified",
										"",
										"",
										"",
										"",
										"",
										null
									],
									[
										"highway",
										"primary",
										"",
										"",
										"#800000",
										"12",
										"",
										null
									],
									[
										"highway",
										"primary_link",
										"",
										"",
										"#800000",
										"8",
										"",
										null
									],
									[
										"highway",
										"footway",
										"",
										"",
										"",
										"",
										"",
										null
									],
									[
										"highway",
										"motorway",
										"",
										"",
										"#0000ff",
										"16",
										"",
										null
									],
									[
										"highway",
										"motorway_link",
										"",
										"",
										"#0000ff",
										"12",
										"",
										null
									],
									[
										"highway",
										"secondary",
										"",
										"",
										"#800000",
										"8",
										"",
										null
									],
									[
										"highway",
										"",
										"",
										"",
										"#404080",
										"4",
										"",
										null
									],
									[
										"building",
										"yes",
										"",
										"",
										"",
										"",
										"",
										null
									],
									[
										"building",
										"retail",
										"",
										"",
										"",
										"",
										"",
										null
									],
									[
										"building",
										"roof",
										"",
										"",
										"",
										"",
										"",
										null
									],
									[
										"building",
										"commercial",
										"",
										"",
										"",
										"",
										"",
										null
									],
									[
										"building",
										"garage",
										"",
										"",
										"",
										"",
										"",
										null
									],
									[
										"building",
										"",
										"TRUE",
										"#2a4cd4",
										"#404040",
										"1",
										"",
										null
									],
									[
										"cuisine",
										"chinese",
										"",
										"",
										"",
										"",
										"http://localhost:8383/extra/flags24/China.png",
										"[12,12]"
									],
									[
										"cuisine",
										"ice_cream",
										"",
										"",
										"",
										"",
										"http://localhost:8383/extra/food/icecream.png",
										"[12,12]"
									],
									[
										"cuisine",
										"burger",
										"",
										"",
										"",
										"",
										"http://localhost:8383/extra/food/burger.png",
										"[12,12]"
									],
									[
										"cuisine",
										"indian",
										"",
										"",
										"",
										"",
										"http://localhost:8383/extra/flags24/India.png",
										"[12,12]"
									],
									[
										"cuisine",
										"sandwich",
										"",
										"",
										"",
										"",
										"http://localhost:8383/extra/food/sandwich.png",
										"[12,12]"
									],
									[
										"cuisine",
										"thai",
										"",
										"",
										"",
										"",
										"http://localhost:8383/extra/flags24/Thailand.png",
										"[12,12]"
									],
									[
										"cuisine",
										"vietnamese",
										"",
										"",
										"",
										"",
										"http://localhost:8383/extra/flags24/VietNam.png",
										"[12,12]"
									],
									[
										"cuisine",
										"mexican",
										"",
										"",
										"",
										"",
										"http://localhost:8383/extra/flags24/Mexico.png",
										"[12,12]"
									],
									[
										"cuisine",
										"spanish",
										"",
										"",
										"",
										"",
										"http://localhost:8383/extra/flags24/Spain.png",
										"[12,12]"
									],
									[
										"cuisine",
										"mediterranean",
										"",
										"",
										"",
										"",
										"",
										null
									],
									[
										"cuisine",
										"japanese",
										"",
										"",
										"",
										"",
										"http://localhost:8383/extra/flags24/Japan.png",
										"[12,12]"
									],
									[
										"cuisine",
										"korean;chicken",
										"",
										"",
										"",
										"",
										"http://localhost:8383/extra/flags24/SouthKorea.png",
										"[12,12]"
									],
									[
										"cuisine",
										"american",
										"",
										"",
										"",
										"",
										"http://localhost:8383/extra/flags24/UnitedStates.png",
										"[12,12]"
									],
									[
										"cuisine",
										"bagel",
										"",
										"",
										"",
										"",
										"http://localhost:8383/extra/food/bagel.png",
										"[12,12]"
									],
									[
										"cuisine",
										"french;italian",
										"",
										"",
										"",
										"",
										"http://localhost:8383/extra/flags24/France.png",
										"[12,12]"
									],
									[
										"cuisine",
										"pizza",
										"",
										"",
										"",
										"",
										"http://localhost:8383/extra/food/pizza.png",
										"[12,12]"
									],
									[
										"cuisine",
										"seafood",
										"",
										"",
										"",
										"",
										"http://localhost:8383/extra/food/fish.png",
										"[12,12]"
									],
									[
										"cuisine",
										"pakistani;indian",
										"",
										"",
										"",
										"",
										"http://localhost:8383/extra/flags24/Pakistan.png",
										"[12,12]"
									],
									[
										"cuisine",
										"korean",
										"",
										"",
										"",
										"",
										"http://localhost:8383/extra/flags24/SouthKorea.png",
										"[12,12]"
									],
									[
										"cuisine",
										"bubble_tea",
										"",
										"",
										"",
										"",
										"http://localhost:8383/extra/food/tea.png",
										"[12,12]"
									],
									[
										"cuisine",
										"asian",
										"",
										"",
										"",
										"",
										"",
										null
									],
									[
										"cuisine",
										"italian",
										"",
										"",
										"",
										"",
										"http://localhost:8383/extra/flags24/Italy.png",
										"[12,12]"
									],
									[
										"cuisine",
										"israeli",
										"",
										"",
										"",
										"",
										"http://localhost:8383/extra/flags24/Israel.png",
										"[12,12]"
									],
									[
										"cuisine",
										"french",
										"",
										"",
										"",
										"",
										"http://localhost:8383/extra/flags24/France.png",
										"[12,12]"
									],
									[
										"cuisine",
										"japanese;sushi",
										"",
										"",
										"",
										"",
										"http://localhost:8383/extra/flags24/Japan.png",
										"[12,12]"
									],
									[
										"cuisine",
										"mongolian",
										"",
										"",
										"",
										"",
										"http://localhost:8383/extra/flags24/Mongolia.png",
										"[12,12]"
									],
									[
										"cuisine",
										"",
										"",
										"",
										"",
										"",
										"http://localhost:8383/extra/food/restaurant.png",
										"[12,12]"
									],
									[
										"amenity",
										"fuel",
										"",
										"",
										"",
										"",
										"",
										null
									],
									[
										"amenity",
										"atm",
										"",
										"",
										"",
										"",
										"",
										null
									],
									[
										"amenity",
										"restaurant",
										"",
										"",
										"",
										"",
										"",
										null
									],
									[
										"amenity",
										"bicycle_parking",
										"",
										"",
										"",
										"",
										"",
										null
									],
									[
										"amenity",
										"cafe",
										"",
										"",
										"",
										"",
										"",
										null
									],
									[
										"amenity",
										"fast_food",
										"",
										"",
										"",
										"",
										"",
										null
									],
									[
										"amenity",
										"parking",
										"",
										"",
										"",
										"",
										"",
										null
									],
									[
										"amenity",
										"",
										"",
										"",
										"",
										"",
										"http://localhost:8383/extra/misc/favorite.png",
										"[8,8]"
									]
								],
								"description": ""
							}
						},
						"columnIndexMap": {
							"name": "columnIndexMap",
							"type": "apogee.JsonTable",
							"updateData": {
								"argList": [],
								"functionBody": "var output = {};\n\nfor(var i = 0; i < columns.length; i++) {\n    output[columns[i]] = i;\n}\n\nreturn output;",
								"supplementalCode": "",
								"description": ""
							}
						},
						"columns": {
							"name": "columns",
							"type": "apogee.JsonTable",
							"updateData": {
								"data": [
									"Key",
									"Value",
									"Is Polygon",
									"Fill Color",
									"Stroke Color",
									"Stroke Weight",
									"Icon Url",
									"Icon Anchor"
								],
								"description": ""
							}
						},
						"mapFilter": {
							"name": "mapFilter",
							"type": "apogee.FunctionTable",
							"updateData": {
								"argList": [
									"geojsonFeature"
								],
								"functionBody": "var styleInfo;\n\nif(geojsonFeature.geometry.type == \"Point\") {\n    styleInfo = getPointStyle(geojsonFeature);\n}\nelse {\n    styleInfo = getLineAndAreaStyle(geojsonFeature);\n}\n\nreturn (styleInfo != null);",
								"supplementalCode": "",
								"description": ""
							}
						},
						"keysOfInterest": {
							"name": "keysOfInterest",
							"type": "apogee.JsonTable",
							"updateData": {
								"data": [
									"highway",
									"amenity",
									"building",
									"cuisine"
								],
								"description": ""
							}
						},
						"getRowEntry": {
							"name": "getRowEntry",
							"type": "apogee.FunctionTable",
							"updateData": {
								"argList": [
									"row",
									"columnName"
								],
								"functionBody": "var columnIndex = columnIndexMap[columnName];\nif(columnIndex === undefined) {\n    throw new Error(\"Unknown theme column: \" + columnName);\n}\n\nreturn row[columnIndex];",
								"supplementalCode": "",
								"description": ""
							}
						},
						"wayStyleTree": {
							"name": "wayStyleTree",
							"type": "apogee.JsonTable",
							"updateData": {
								"argList": [],
								"functionBody": "return createPropertyTree(themeInput,createWayStyleInfo);\n",
								"supplementalCode": "function createWayStyleInfo(row) {\n    var fillColor = getRowEntry(row,\"Fill Color\");\n    var strokeColor = getRowEntry(row,\"Stroke Color\");\n    var strokeWeight = getRowEntry(row,\"Stroke Weight\");\n    \n    var styleInfo = {};\n    var entryAdded = false;\n    \n    if(fillColor != \"\") {\n        styleInfo.fillColor = fillColor;\n        entryAdded = true;\n    }\n    if(strokeColor != \"\") {\n        styleInfo.color = strokeColor;\n        if(strokeWeight != \"\") {\n            styleInfo.weight = strokeWeight;\n        }\n        entryAdded = true;\n    }\n    \n    if(entryAdded) {\n        return styleInfo;\n    }\n    else {\n        return null;\n    }\n}\n",
								"description": ""
							}
						},
						"pointStyleTree": {
							"name": "pointStyleTree",
							"type": "apogee.JsonTable",
							"updateData": {
								"argList": [],
								"functionBody": "return createPropertyTree(themeInput,createPointStyleInfo);",
								"supplementalCode": "function createPointStyleInfo(row) {\n    var url = getRowEntry(row,\"Icon Url\");\n    \n    if(url != \"\") {\n        style = {};\n        style.iconUrl = url;\n        var anchorString = getRowEntry(row,\"Icon Anchor\");\n        if(anchorString) {\n            style.iconAnchor = JSON.parse(anchorString);\n        }\n        return style;\n    }\n    else {\n        return null;\n    }\n}",
								"description": ""
							}
						},
						"isPolygon": {
							"name": "isPolygon",
							"type": "apogee.FunctionTable",
							"updateData": {
								"argList": [
									"osmFeature"
								],
								"functionBody": "return readPropertyTree(polygonTree,osmFeature.tags);",
								"supplementalCode": "",
								"description": ""
							}
						},
						"polygonTree": {
							"name": "polygonTree",
							"type": "apogee.JsonTable",
							"updateData": {
								"argList": [],
								"functionBody": "return createPropertyTree(themeInput,polygonDetector);",
								"supplementalCode": "function polygonDetector(row) {\n    var isPolygon = getRowEntry(row,\"Is Polygon\");\n\n    if(isPolygon) {\n        return true;\n    }\n    else {\n        return null;\n    }\n}",
								"description": ""
							}
						},
						"createPropertyTree": {
							"name": "createPropertyTree",
							"type": "apogee.FunctionTable",
							"updateData": {
								"argList": [
									"inputMatrix",
									"createPayloadFunction"
								],
								"functionBody": "var propertyTree = {};\n\n//don't include header row\nfor(var i = 1; i < inputMatrix.length; i++) {\n    var row = inputMatrix[i];\n    \n    var payload = createPayloadFunction(row);\n    if(payload) {\n        var key = getRowEntry(row,\"Key\");\n        var value = getRowEntry(row,\"Value\");\n        \n        //get key entry\n        var keyEntry = propertyTree[key];\n        if(keyEntry === undefined) {\n            var keyEntry = {};\n            propertyTree[key] = keyEntry;\n        }\n        \n        //add style to key or value \n        if(value != \"\") {\n            if(keyEntry.values === undefined) {\n                keyEntry.values = {};\n            }\n            keyEntry.values[value] = payload; \n        }\n        else {\n            keyEntry.default = payload;\n        }\n    }\n}\n\nreturn propertyTree;",
								"supplementalCode": "",
								"description": ""
							}
						},
						"readPropertyTree": {
							"name": "readPropertyTree",
							"type": "apogee.FunctionTable",
							"updateData": {
								"argList": [
									"tree",
									"properties"
								],
								"functionBody": "for(var key in tree) {\n    \n    var featureValue = properties[key];\n    if(featureValue !== undefined) {\n        var treeEntry = tree[key];\n        //check the value specific entry\n        if(treeEntry.values) {\n            var payload = treeEntry.values[featureValue];\n            if(payload !== undefined) {\n                return payload;\n            }\n        }\n        \n        //check the default entry\n        if(treeEntry.default !== undefined) {\n            return treeEntry.default;\n        }\n    }\n}\n\n//none found\nreturn null;",
								"supplementalCode": "",
								"description": ""
							}
						},
						"getLineAndAreaStyle": {
							"name": "getLineAndAreaStyle",
							"type": "apogee.FunctionTable",
							"updateData": {
								"argList": [
									"geojsonFeature"
								],
								"functionBody": "return readPropertyTree(wayStyleTree,geojsonFeature.properties);",
								"supplementalCode": "",
								"description": ""
							}
						},
						"getPointStyle": {
							"name": "getPointStyle",
							"type": "apogee.FunctionTable",
							"updateData": {
								"argList": [
									"geojsonFeature"
								],
								"functionBody": "return readPropertyTree(pointStyleTree,geojsonFeature.properties);",
								"supplementalCode": "",
								"description": ""
							}
						}
					}
				},
				"osmData": {
					"name": "osmData",
					"type": "apogee.JsonTable",
					"updateData": {
						"argList": [],
						"functionBody": "var options = {};\noptions.method = \"POST\";\noptions.body = getBody(swneBoundingBox);\n\nreturn apogee.net.jsonRequest(url,options);",
						"supplementalCode": "function getBody(boundingBoxArray) {\n    var bboxString = boundingBoxArray.join(\",\");\n    var body = apogee.util.formatString(\"[out:json];(node({0});(way({0});>;););out;\",bboxString);\n    return body;\n}",
						"description": ""
					}
				}
			}
		},
		"name": "Workspace"
	},
	"components": {
		"type": "apogeeapp.app.FolderComponent",
		"tabOpen": true,
		"treeState": 1,
		"children": {
			"swneBoundingBox": {
				"type": "apogeeapp.app.JsonTableComponent",
				"windowState": {
					"sizeInfo": {
						"width": 276,
						"height": 115
					},
					"posInfo": {
						"x": 53,
						"y": 27
					},
					"state": 0,
					"viewType": "Data"
				},
				"dataView": "Colorized"
			},
			"render": {
				"type": "apogeeapp.app.FolderComponent",
				"windowState": {
					"posInfo": {
						"x": 600,
						"y": 56
					}
				},
				"tabOpen": true,
				"treeState": 1,
				"children": {
					"map": {
						"type": "apogeeapp.app.CustomControlComponent",
						"windowState": {
							"sizeInfo": {
								"width": 844,
								"height": 702
							},
							"posInfo": {
								"x": 49,
								"y": 0
							},
							"state": 0,
							"viewType": "Output"
						},
						"resource": {
							"html": "<div id=\"mapElement\"></div>\n<button id=\"captureButton\">Capture</button>",
							"css": "#mapElement {\n    position: absolute;\n    top: 0px;\n    left: 0px;\n    bottom: 0px;\n    right: 0px;\n}\n#captureButton {\n    position: absolute;\n    left: 10px;\n    bottom: 10px;\n    z-index: 1000;\n}",
							"constructorAddition": "this.mapElement = null;\nthis.captureButton = null;\nthis.initialized = false;\n\n\nthis.render = function(data) {\n    if(this.geojsonLayer) {\n        //remove the old layer\n        this.geojsonLayer.remove();\n        this.geomjsonLayer = null;\n    }\n    \n    if(data) {\n        if(data.geojson) {\n            this.geojsonLayer = L.geoJSON(data.geojson,this.createOptions(data.styleFunctions)).addTo(this.map);\n        }\n        \n        if(data.bounds) {\n            this.map.fitBounds(data.bounds);\n        }\n    }\n}\n\nthis.onCapture = function() {\n    if(this.map) {\n        var mapBounds = this.map.getBounds();\n        var swneBoundsArray = [\n            mapBounds.getSouth(),\n            mapBounds.getWest(),\n            mapBounds.getNorth(),\n            mapBounds.getEast()\n        ]\n           \n        mode.getMessenger().dataUpdate(\"swneBoundingBox\",swneBoundsArray);\n    }\n    \n} \n\nthis.createOptions = function(styleFunctions) {\n    \n    var options = {};\n    \n    //filter geometry with styles\n    options.filter = feature => {\n        return styleFunctions.mapFilter(feature);\n    }\n    \n    //style lines and polygons\n    options.style = feature => {\n        return styleFunctions.getLineAndAreaStyle(feature);\n    }\n    \n    //style points\n    options.pointToLayer = function(feature,latLng) {\n        var iconOptions = styleFunctions.getPointStyle(feature);\n        if(iconOptions) {\n            var options = {\"icon\":L.icon(iconOptions)};\n            return L.marker(latLng, options);\n        }\n        else {\n            return null;\n        }\n    };\n    \n    //add a popup\n    options.onEachFeature = function(feature,layer) {\n        var outputLines = [];\n        if(feature.properties.name) outputLines.push(feature.properties.name);\n        if(feature.properties.amenity) outputLines.push(feature.properties.amenity);\n        if(feature.properties.cuisine) outputLines.push(feature.properties.cuisine);\n        \n        if(outputLines.length > 0) {\n            layer.bindPopup(outputLines.join(\"<br>\"));\n        }\n    }\n \n    return options;   \n}\n\nfunction getLeafletBounds(swneBoundingBox) {\n    var bottomRight = L.latLng(swneBoundingBox[0], swneBoundingBox[1]);\n    var topLeft = L.latLng(swneBoundingBox[2], swneBoundingBox[3]);\n    return L.latLngBounds(bottomRight, topLeft);\n}\n\n",
							"onLoad": "if(!this.initialized) {\n    //some working variables\n    this.mapElement = document.getElementById(\"mapElement\");\n    this.captureButton = document.getElementById(\"captureButton\");\n    this.captureButton.onclick = () => this.onCapture();\n    \n    //create the map\n    this.map = L.map('mapElement');\n    \n    // create the tile layer with correct attribution\n    var osmUrl='http://a.tile.openstreetmap.org/{z}/{x}/{y}.png';\n    var osmAttrib='Map data © <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors';\n    var osm = new L.TileLayer(osmUrl, {minZoom: 1, maxZoom: 19, attribution: osmAttrib});\t\t\n    this.map.addLayer(osm);\n    \n    //control to turn on/off base map\n    var layers = {\n        \"Base Layer\": osm\n    }\n    L.control.layers({},layers).addTo(this.map);\n    \n    this.initialized = true;\n    \n    //draw the map\n    if(this.data) {\n        this.render(this.data)\n    }\n}",
							"setData": "this.data = data;\nif(this.initialized) {\n   this.render(data); \n}\n\n\n\n",
							"onHide": "",
							"onResize": "if(this.map) {\n    this.map.invalidateSize();\n}"
						},
						"destroyOnInactive": false
					}
				}
			},
			"url": {
				"type": "apogeeapp.app.JsonTableComponent",
				"windowState": {
					"sizeInfo": {
						"width": 367,
						"height": 49
					},
					"posInfo": {
						"x": 51,
						"y": 184
					},
					"state": -1,
					"viewType": "Data"
				},
				"dataView": "Colorized"
			},
			"geojsonPointLookupTable": {
				"type": "apogeeapp.app.JsonTableComponent",
				"windowState": {
					"sizeInfo": {
						"width": 588,
						"height": 401
					},
					"posInfo": {
						"x": 431,
						"y": 173
					},
					"state": -1,
					"viewType": "Formula"
				},
				"dataView": "Colorized"
			},
			"geojson": {
				"type": "apogeeapp.app.JsonTableComponent",
				"windowState": {
					"sizeInfo": {
						"width": 843,
						"height": 766
					},
					"posInfo": {
						"x": 433,
						"y": 224
					},
					"state": -1,
					"viewType": "Private"
				},
				"dataView": "Colorized"
			},
			"propertyAnalysis": {
				"type": "apogeeapp.app.FolderComponent",
				"windowState": {
					"posInfo": {
						"x": 601,
						"y": 15
					}
				},
				"tabOpen": true,
				"treeState": 1,
				"children": {
					"themeTemplate": {
						"type": "apogeeapp.app.GridTableComponent",
						"windowState": {
							"sizeInfo": {
								"width": 864,
								"height": 531
							},
							"posInfo": {
								"x": 360,
								"y": 484
							},
							"state": 0,
							"viewType": "Grid"
						}
					},
					"tags": {
						"type": "apogeeapp.app.JsonTableComponent",
						"windowState": {
							"sizeInfo": {
								"width": 773,
								"height": 379
							},
							"posInfo": {
								"x": 30,
								"y": 63
							},
							"state": -1,
							"viewType": "Data"
						},
						"dataView": "Colorized"
					},
					"themeInput": {
						"type": "apogeeapp.app.GridTableComponent",
						"windowState": {
							"sizeInfo": {
								"width": 967,
								"height": 513
							},
							"posInfo": {
								"x": 28,
								"y": 186
							},
							"state": -1,
							"viewType": "Grid"
						}
					},
					"columnIndexMap": {
						"type": "apogeeapp.app.JsonTableComponent",
						"windowState": {
							"sizeInfo": {
								"width": 266,
								"height": 148
							},
							"posInfo": {
								"x": 558,
								"y": 95
							},
							"state": -1,
							"viewType": "Data"
						},
						"dataView": "Colorized"
					},
					"columns": {
						"type": "apogeeapp.app.JsonTableComponent",
						"windowState": {
							"sizeInfo": {
								"width": 229,
								"height": 192
							},
							"posInfo": {
								"x": 295,
								"y": 0
							},
							"state": 0,
							"viewType": "Data"
						},
						"dataView": "Colorized"
					},
					"mapFilter": {
						"type": "apogeeapp.app.FunctionComponent",
						"windowState": {
							"sizeInfo": {
								"width": 575,
								"height": 406
							},
							"posInfo": {
								"x": 34,
								"y": 613
							},
							"state": 0,
							"viewType": "Code"
						}
					},
					"keysOfInterest": {
						"type": "apogeeapp.app.JsonTableComponent",
						"windowState": {
							"sizeInfo": {
								"width": 300,
								"height": 331
							},
							"posInfo": {
								"x": 25,
								"y": 112
							},
							"state": -1,
							"viewType": "Data"
						},
						"dataView": "Colorized"
					},
					"getRowEntry": {
						"type": "apogeeapp.app.FunctionComponent",
						"windowState": {
							"sizeInfo": {
								"width": 560,
								"height": 111
							},
							"posInfo": {
								"x": 563,
								"y": 147
							},
							"state": -1,
							"viewType": "Code"
						}
					},
					"wayStyleTree": {
						"type": "apogeeapp.app.JsonTableComponent",
						"windowState": {
							"sizeInfo": {
								"width": 434,
								"height": 515
							},
							"posInfo": {
								"x": 35,
								"y": 363
							},
							"state": -1,
							"viewType": "Data"
						},
						"dataView": "Colorized"
					},
					"pointStyleTree": {
						"type": "apogeeapp.app.JsonTableComponent",
						"windowState": {
							"sizeInfo": {
								"width": 643,
								"height": 448
							},
							"posInfo": {
								"x": 36,
								"y": 483
							},
							"state": -1,
							"viewType": "Private"
						},
						"dataView": "Colorized"
					},
					"isPolygon": {
						"type": "apogeeapp.app.FunctionComponent",
						"windowState": {
							"sizeInfo": {
								"width": 440,
								"height": 400
							},
							"posInfo": {
								"x": 652,
								"y": 364
							},
							"state": -1,
							"viewType": "Code"
						}
					},
					"polygonTree": {
						"type": "apogeeapp.app.JsonTableComponent",
						"windowState": {
							"sizeInfo": {
								"width": 452,
								"height": 461
							},
							"posInfo": {
								"x": 657,
								"y": 316
							},
							"state": -1,
							"viewType": "Private"
						},
						"dataView": "Colorized"
					},
					"createPropertyTree": {
						"type": "apogeeapp.app.FunctionComponent",
						"windowState": {
							"sizeInfo": {
								"width": 591,
								"height": 528
							},
							"posInfo": {
								"x": 33,
								"y": 246
							},
							"state": -1,
							"viewType": "Code"
						}
					},
					"readPropertyTree": {
						"type": "apogeeapp.app.FunctionComponent",
						"windowState": {
							"sizeInfo": {
								"width": 504,
								"height": 400
							},
							"posInfo": {
								"x": 33,
								"y": 285
							},
							"state": -1,
							"viewType": "Code"
						}
					},
					"getLineAndAreaStyle": {
						"type": "apogeeapp.app.FunctionComponent",
						"windowState": {
							"sizeInfo": {
								"width": 472,
								"height": 108
							},
							"posInfo": {
								"x": 36,
								"y": 403
							},
							"state": -1,
							"viewType": "Code"
						}
					},
					"getPointStyle": {
						"type": "apogeeapp.app.FunctionComponent",
						"windowState": {
							"sizeInfo": {
								"width": 492,
								"height": 110
							},
							"posInfo": {
								"x": 28,
								"y": 524
							},
							"state": -1,
							"viewType": "Code"
						}
					}
				}
			},
			"osmData": {
				"type": "apogeeapp.app.JsonTableComponent",
				"windowState": {
					"sizeInfo": {
						"width": 444,
						"height": 502
					},
					"posInfo": {
						"x": 57,
						"y": 260
					},
					"state": -1,
					"viewType": "Data"
				},
				"dataView": "Colorized"
			}
		}
	},
	"activeTabMember": "Workspace.render",
	"references": [
		{
			"url": "https://unpkg.com/leaflet@1.2.0/dist/leaflet.js",
			"entryType": "js link"
		},
		{
			"url": "https://unpkg.com/leaflet@1.2.0/dist/leaflet.css",
			"entryType": "css link"
		}
	]
}