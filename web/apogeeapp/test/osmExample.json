{"fileType":"apogee workspace","jsLinks":["https://unpkg.com/leaflet@1.2.0/dist/leaflet.js"],"cssLinks":["https://unpkg.com/leaflet@1.2.0/dist/leaflet.css"],"workspace":{"fileType":"apogee workspace","version":0.2,"data":{"name":"Workspace","type":"apogee.Folder","children":{"osmDownload":{"name":"osmDownload","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var options = {};\noptions.method = \"POST\";\noptions.body = getBody(swneBoundingBox);\n\nreturn apogee.net.jsonRequest(url,options);","supplementalCode":"function getBody(boundingBoxArray) {\n    var bboxString = boundingBoxArray.join(\",\");\n\n    var query = \"[out:json];\"\n    query += \"(\"\n    query += \"node(\" + bboxString + \");\";\n    query += \"(\";\n    query += \"way(\" + bboxString + \");\";\n    query += \">;\"\n    query += \");\"\n    query += \");\"\n    query += \"out;\";\n    \n    return query;\n}","description":""}},"rawFeatures":{"name":"rawFeatures","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = [];\n\nfor(var i =0 ; i < osmDownload.elements.length; i++) {\n    var element = osmDownload.elements[i];\n    \n    //only save features that have properties\n    if(element.tags === undefined) continue;\n    \n    //process the different feature types\n    var feature = {};\n    feature.id = element.id;\n    feature.type = element.type;\n    feature.tags = element.tags;\n    \n    switch(element.type) {\n        case \"node\":\n            feature.coords = getNodePoint(element.id);\n            break;\n            \n        case \"way\":\n            feature.coords = getNodePointList(element.nodes);\n            break;\n            \n        case \"relation\": \n            //we will ignore these\n            feature.coords = null;\n            break;\n            \n        default:\n            //we will handle this later if we have to deal with it\n            throw new Error(\"Unexpected osm type: \" + element.type);\n    }\n    \n    //only sve things that have geometry\n    if(feature.coords) { \n        output.push(feature)\n    }\n    \n}\n\nreturn output;","supplementalCode":"function getNodePointList(nodeIdList) {\n    return nodeIdList.map((id) => getNodePoint(id));\n}","description":""}},"nodePointMap":{"name":"nodePointMap","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\n\nfor(var i =0 ; i < osmDownload.elements.length; i++) {\n    var element = osmDownload.elements[i];\n    \n    if(element.type == \"node\") {\n        output[element.id] = [element.lon,element.lat];\n    }\n}\n\nreturn output;","supplementalCode":"","description":""}},"getNodePoint":{"name":"getNodePoint","type":"apogee.FunctionTable","updateData":{"argList":["nodeId"],"functionBody":"return nodePointMap[nodeId];","supplementalCode":"","description":""}},"swneBoundingBox":{"name":"swneBoundingBox","type":"apogee.JsonTable","updateData":{"data":[37.391369,-122.3054137,37.413733,-122.246233],"description":""}},"geoJson":{"name":"geoJson","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = {};\noutput.type = \"FeatureCollection\";\noutput.properties = {};\noutput.features = rawFeatures.map((rawFeature) => createFeature(rawFeature));\nreturn output;","supplementalCode":"function createFeature(rawFeature) {\n    var feature = {};\n    feature.type = \"Feature\";\n    feature.properties = rawFeature.tags;\n    feature.geometry = getGeometry(rawFeature);\n    return feature;\n}\n\nfunction getGeometry(rawFeature) {\n    var coords;\n    var type;\n    switch(rawFeature.type) {\n        case \"node\":\n            type = \"Point\";\n            coords = getGeojsonPoint(rawFeature.coords);\n            break;\n            \n        case \"way\":\n            //later - choose polygon or linestring\n            type = \"LineString\";\n            coords = getGeojsonLineString(rawFeature.coords);\n            break;\n            \n        default:\n            throw new Error(\"Unexpected osm type!\");\n    }\n    \n    return {\n        \"type\": type,\n        \"coordinates\": coords\n    }\n}\n\nfunction getGeojsonPoint(coords) {\n    return coords;\n}\n\nfunction getGeojsonLineString(coords) {\n    return coords;\n}\n\n","description":""}},"render":{"name":"render","type":"apogee.Folder","children":{"map":{"name":"map","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var data = {};\ndata.geoJson = geoJson;\ndata.options = getOptions();\ndata.bounds= getLeafletBounds(swneBoundingBox);\n\nreturn data;","supplementalCode":"function getOptions() {\n    \n    //common style for lines and polygons\n    var wayStyleInfo = {\n        \"color\": \"black\",\n        \"weight\": 2\n    };\n    \n    //common style for points\n    var pointStyleInfo = {\n        \"radius\": 8,\n        \"color\": \"red\",\n        \"weight\": 1,\n        \"opacity\": 1,\n        \"fillColor\": \"blue\",\n        \"fillOpacity\": 0.8\n    }\n    \n    var options = {};\n    options.style = function(feature) {\n        return wayStyleInfo;\n    }\n    options.pointToLayer = function(feature,latLng) {\n        return  L.circleMarker(latLng, pointStyleInfo);\n    }\n \n    return options;   \n}\n\nfunction getLeafletBounds(swneBoundingBox) {\n    var bottomRight = L.latLng(swneBoundingBox[0], swneBoundingBox[1]);\n    var topLeft = L.latLng(swneBoundingBox[2], swneBoundingBox[3]);\n    return L.latLngBounds(bottomRight, topLeft);\n}\n","description":""}}}},"url":{"name":"url","type":"apogee.JsonTable","updateData":{"data":"http://overpass-api.de/api/interpreter","description":""}},"themeGenerate":{"name":"themeGenerate","type":"apogee.Folder","children":{"themeTemplate":{"name":"themeTemplate","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var output = [];\n\nvar headerRow = [\"Key\",\"Value\",\"Count\",\"Is Polygon\",\"Fill Color\",\"Stroke Color\",\"Icon Url\",\"Point Radius\"]\noutput.push(headerRow);\n\nfor(var key in tags) {\n    var keyEntry = tags[key];\n    for(var value in keyEntry) {\n        var row = [key,value,keyEntry[value]];\n        output.push(row);\n    }\n}\n\nreturn output;","supplementalCode":"","description":""}},"tags":{"name":"tags","type":"apogee.JsonTable","updateData":{"argList":[],"functionBody":"var tagMap = {};\n\nfor(var i = 0; i < rawFeatures.length; i++) {\n    var feature = rawFeatures[i];\n    var properties = feature.tags;\n    \n    for(var key in properties) {\n        var keyEntry = tagMap[key];\n        if(!keyEntry) {\n            keyEntry = {};\n            tagMap[key] = keyEntry;\n        }\n        \n        var value = properties[key];\n        if(keyEntry[value] === undefined) {\n            keyEntry[value] = 1;\n        }\n        else {\n            keyEntry[value]++;\n        }\n    }\n}\n\nreturn tagMap;","supplementalCode":"","description":""}},"themeInput":{"name":"themeInput","type":"apogee.JsonTable","updateData":{"data":[[""]],"description":""}}}}}}},"components":{"osmDownload":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":795,"height":512},"posInfo":{"x":126,"y":276},"state":-1,"viewType":"Private"}},"rawFeatures":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":643,"height":625},"posInfo":{"x":52,"y":376},"state":-1,"viewType":"JSON"}},"nodePointMap":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":588,"height":401},"posInfo":{"x":385,"y":192},"state":-1,"viewType":"JSON"}},"getNodePoint":{"type":"apogeeapp.app.FunctionComponent","windowState":{"sizeInfo":{"width":401,"height":51},"posInfo":{"x":393,"y":246},"state":-1,"viewType":"Code"}},"swneBoundingBox":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":276,"height":115},"posInfo":{"x":45,"y":28},"state":0,"viewType":"JSON"}},"geoJson":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":809,"height":657},"posInfo":{"x":45,"y":430},"state":-1,"viewType":"Private"}},"render":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":460,"y":69}},"children":{"map":{"type":"apogeeapp.app.CustomControlComponent","windowState":{"sizeInfo":{"width":976,"height":664},"posInfo":{"x":26,"y":66},"state":0,"viewType":"Output"},"resource":{"html":"<div id=\"mapElement\"></div>","css":"#mapElement {\n    position: absolute;\n    top: 0px;\n    left: 0px;\n    bottom: 0px;\n    right: 0px;\n}","constructorAddition":"this.mapElement = null;\nthis.initialized = false;\n","onLoad":"if(!this.initialized) {\n    //some working variables\n    this.mapElement = document.getElementById(\"mapElement\");\n    \n    //create the map\n    this.map = L.map('mapElement');\n    \n    // create the tile layer with correct attribution\n    var osmUrl='http://a.tile.openstreetmap.org/{z}/{x}/{y}.png';\n    var osmAttrib='Map data Â© <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors';\n    var osm = new L.TileLayer(osmUrl, {minZoom: 1, maxZoom: 19, attribution: osmAttrib});\t\t\n    //this.map.addLayer(osm);\n    \n    this.initialized = true;\n}","setData":"if(!this.initialized) return;\n\nif(this.geoJsonLayer) {\n    //remove the old layer\n    this.geoJsonLayer.remove();\n    this.geomJsonLayer = null;\n}\n\nif(data.geoJson) {\n    this.geoJsonLayer = L.geoJSON(data.geoJson,data.options).addTo(this.map);\n}\n\nif(data.bounds) {\n    this.map.fitBounds(data.bounds);\n}\n\n"}}}},"url":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":367,"height":49},"posInfo":{"x":48,"y":195},"state":-1,"viewType":"Text"}},"themeGenerate":{"type":"apogeeapp.app.FolderComponent","windowState":{"posInfo":{"x":460,"y":23}},"children":{"themeTemplate":{"type":"apogeeapp.app.GridTableComponent","windowState":{"sizeInfo":{"width":455,"height":287},"posInfo":{"x":53,"y":111},"state":0,"viewType":"Grid"}},"tags":{"type":"apogeeapp.app.JsonTableComponent","windowState":{"sizeInfo":{"width":626,"height":491},"posInfo":{"x":49,"y":25},"state":0,"viewType":"JSON"}},"themeInput":{"type":"apogeeapp.app.GridTableComponent","windowState":{"sizeInfo":{"width":300,"height":300},"posInfo":{"x":48,"y":470},"state":0,"viewType":"Grid"}}}}}}