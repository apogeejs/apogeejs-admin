{"name":"Revenue Projection","fileType":"hax workspace","jsLinks":[],"cssLinks":[],"workspace":{"name":"Revenue Projection","fileType":"hax workspace","version":0.2,"data":{"name":"Revenue Projection","type":"hax.Folder","children":{"revenue_A":{"name":"revenue_A","type":"hax.JsonTable","updateData":{"argList":["memberInfo"],"functionBody":"var value;\nvalue = [];\nvalue[0] = settings.initialRevenue;\nfor(var i = 0; i < settings.projectionCount; i++) {\n    value[i+1] = value[i] * (1 + settings.growthRate/100);\n}\nreturn value;\n\n","supplementalCode":""}},"settings":{"name":"settings","type":"hax.JsonTable","updateData":{"data":{"initialYear":2015,"initialRevenue":1000000,"growthRate":5,"projectionCount":10}}},"revenue_B":{"name":"revenue_B","type":"hax.JsonTable","updateData":{"argList":["memberInfo"],"functionBody":"var value;\nvalue = [];\nvalue[0] = createEntry(settings.initialYear,settings.initialRevenue);\nfor(var i = 0; i < settings.projectionCount; i++) {\n    value[i+1] = getNextEntry(value[i]);\n}\nreturn value;\n\n","supplementalCode":"function createEntry(year,revenue) {\n    entry = {};\n    entry.year = year;\n    entry.revenue = revenue;\n    return entry;\n}\n\nfunction getNextEntry(entry) {\n    var nextEntry = {};\n    nextEntry.year = entry.year + 1;\n    nextEntry.revenue = entry.revenue * (1 + settings.growthRate/100);\n    return nextEntry;\n}"}},"revenueTable":{"name":"revenueTable","type":"hax.JsonTable","updateData":{"argList":["memberInfo"],"functionBody":"var value;\nvalue = [];\n\n//add heading\nvalue.push([\"Year\",\"Revenue\"]);\n\n//add yearly values\nfor(var i = 0; i < revenue_B.length; i++) {\n    value.push([revenue_B[i].year,revenue_B[i].revenue]);\n}\n\n//add total\nvalue.push([\"Total\",totalRevenue]);\nreturn value;\n\n","supplementalCode":""}},"totalRevenue":{"name":"totalRevenue","type":"hax.JsonTable","updateData":{"argList":["memberInfo"],"functionBody":"var value;\n//ASYNCHRONOUS FORMULAS\r\n\r\n//we don't need to populate value\r\n//but if we do, it will have no effect.\r\n\r\n//We will be using a predefined variable \"memberInfo\"\r\n//to flag that our result will be asynchronous.\r\n//It also contains the callback we wil use to set the value.\r\n//Note the the callback should ONLY be used if the result\r\n//is asynchronous. \r\n\r\n//to simulate an asynchronous process \r\n//we will use a timer. This is out timer callback.\r\nvar calcValue = function() {\r\n//calculate the result\r\nvar result = 0;\r\nfor(var i = 0; i < revenue_B.length; i++) {\r\n    result += revenue_B[i].revenue;\r\n}\r\n\r\n//when finsihed, call \"asynchCallback\" of memberInfo\r\n//with the value.\r\nmemberInfo.asynchCallback(result)\r\n}\r\n\r\n//here we are setting the timer\r\nsetTimeout(calcValue,3000);\r\n\r\n//flag the result as pending, as below. This is how\r\n//the application knows we need to wait for the result.\r\nmemberInfo.pending = true;\nreturn value;\n\n","supplementalCode":""}}}}},"components":{"revenue_A":{"type":"haxapp.app.JsonTableComponent","coordInfo":{"x":355,"y":21,"width":519,"height":158},"windowState":0},"settings":{"type":"haxapp.app.JsonTableComponent","coordInfo":{"x":38,"y":25,"width":273,"height":204},"windowState":0},"revenue_B":{"type":"haxapp.app.JsonTableComponent","coordInfo":{"x":39,"y":258,"width":447,"height":433},"windowState":0},"revenueTable":{"type":"haxapp.app.GridTableComponent","coordInfo":{"x":947,"y":22,"width":301,"height":422},"windowState":0},"totalRevenue":{"type":"haxapp.app.JsonTableComponent","coordInfo":{"x":503,"y":454,"width":543,"height":429},"windowState":0}}}