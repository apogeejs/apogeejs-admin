{"name":"workspace","fileType":"hax workspace","jsLinks":[],"cssLinks":[],"workspace":{"name":"workspace","fileType":"hax workspace","version":0.2,"data":{"name":"workspace","type":"hax.Folder","children":{"a":{"name":"a","type":"hax.JsonTable","updateData":{"argList":["memberInfo"],"functionBody":"var value;\n//BASIC ASYNCHROUNOUS FORMULA\r\n//Proper error handling is shown in table b.\r\n\r\n//We do not need to populate \"value\" as in a normal \r\n//data table formula. We can if we want, but it will have\r\n//no effect.\r\n\r\n//We will be using a predefined variable \"memberInfo\" to\r\n//do an asynmchronous formula.\r\n\r\n//We will simulate an asynchronous formula using a timer\r\n//This is the callback for the timer.\r\n//We will calculate the result and then set it\r\n//using the function \"memberInfo.asynchCallback\"\r\nvar calcValue = function() {\r\n    var result = 7 + seed;\r\n    memberInfo.asynchCallback(result);\r\n}\r\n\r\n//note that we should ONLY call memberInfo.asynchCallback\r\n//for asynchronous formulas, not for syncrhonous formulas.\r\n\r\n//Here we run our timer, setting the time to 3 seconds.\r\nsetTimeout(calcValue,3000);\r\n\r\n//we must flag memberInfo.pending as true to tell the \r\n//application to wait for our result.\r\nmemberInfo.pending = true;\nreturn value;\n\n","supplementalCode":""}},"b":{"name":"b","type":"hax.JsonTable","updateData":{"argList":["memberInfo"],"functionBody":"var value;\n//ASYNCHRONOUS FORMULA WITH ERROR HANDLING\r\n\r\n//We do this similar to table \"a\" except here we handle the\r\n//error case. Our error case here is just a sample. It can be\r\n//triggered by setting the \"seed\" table to anything less than 6.\r\n\r\n//call member.asynchCallback with the desired table value on success.\r\n//call member.asynchErrorCallback with an error message on failure.\r\n//If neither of these functions are called the pending state will never be cleared.\r\nvar calcValue = function() {\r\n    var result = 4 + seed;\r\n    var error = (result < 10);\r\n    if(!error) {\r\n        memberInfo.asynchCallback(result);\r\n    }\r\n    else {\r\n        memberInfo.asynchErrorCallback(\"Error in asynchronous processing! Result to small\");\r\n    }\r\n}\r\n\r\n//run the timer and set the pending flag.\r\nsetTimeout(calcValue,5000);\r\nmemberInfo.pending = true;\nreturn value;\n\n","supplementalCode":""}},"c":{"name":"c","type":"hax.JsonTable","updateData":{"argList":["memberInfo"],"functionBody":"var value;\n//This is a table that depends on tables\n//a and b, for demonstration purposes\n\nvalue = a + b;\nreturn value;\n\n","supplementalCode":""}},"seed":{"name":"seed","type":"hax.JsonTable","updateData":{"data":6}}}}},"components":{"a":{"type":"haxapp.app.JsonTableComponent","coordInfo":{"x":82,"y":175,"width":518,"height":443},"windowState":0},"b":{"type":"haxapp.app.JsonTableComponent","coordInfo":{"x":618,"y":173,"width":677,"height":279},"windowState":0},"c":{"type":"haxapp.app.JsonTableComponent","coordInfo":{"x":626,"y":474,"width":335,"height":187},"windowState":0},"seed":{"type":"haxapp.app.JsonTableComponent","coordInfo":{"x":162,"y":8,"width":321,"height":141},"windowState":0}}}