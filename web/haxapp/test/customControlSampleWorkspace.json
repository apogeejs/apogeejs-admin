{"name":"workspace","fileType":"hax workspace","jsLinks":[],"cssLinks":[],"workspace":{"name":"workspace","fileType":"hax workspace","version":0.2,"data":{"name":"workspace","type":"hax.Folder","children":{"test":{"name":"test","type":"hax.Control","updateData":{"argList":["resource"],"functionBody":"resource.setData(a);","supplementalCode":""}},"a":{"name":"a","type":"hax.JsonTable","updateData":{"data":"This is a message tttt!"}}}}},"components":{"test":{"type":"haxapp.app.CustomControlComponent","coordInfo":{"x":525,"y":177,"width":1005,"height":565},"windowState":0,"resource":{"html":"","customizeScript":"//CUSTOM CONTROL SAMPLE\n\n//In this space, an empty object named \"resource\" shoule be populated. There is\n//one other variable \"component\" which is the control component we are working on.\n//The functions below illustrate how to use the custome control.\n\n/** This optional method is called when the UI component is set for the control.\n * It is useful when making your own control component from BasicControlComponent.\n * For custom control it is kind of gratuitous because we have access to the component when the resource is defined here. */\nresource.setComponent = function(component) {\n    console.log(\"Component set!\");\n}\n\n/** This optional method is called when the user opens the output mode or whenever the model or base code is updated. */\nresource.show = function() {\n    \n    //Here we grab the output element and place the msg in the contents - every time show is called.\n    var outputElement = component.getOutputElement();\n    outputElement.innerHTML = this.msg;\n    \n    //Here we store the output element for later use and show when it changes\n    //It should only change when we change this base code. In this case, a new resource is created\n    //and the output element will be unset.\n    if(resource.outputElement) {\n        console.log(\"show called - output element match = \" + (resource.outputElement == outputElement));\n    }\n    else {\n        console.log(\"show called with no previous output element\");\n    }\n    resource.outputElement = outputElement;\n}\n\n/** This optional method is called when the output is hidden, such as when the user changes views to write model code. */\nresource.hide = function() {\n    console.log(\"hide called!\");\n}\n\n/** This optional method is called when the component is deleted, so any cleanup can be done. */\nresource.delete = function() {\n    console.lot(\"delete called\");\n}\n\n//-------------------------------\n// You can add as many other functions and properties as you want, intended to be used to interact with the resource\n// from the model code. \n//-------------------------------\n\n/** We use this method to set the message to display. */\nresource.setData = function(msg) {\n    //we store the message, to be used when \"show\" is called.\n    resource.msg = msg;\n}","supplementalCode":"","css":""}},"a":{"type":"haxapp.app.JsonTableComponent","coordInfo":{"x":83,"y":244,"width":331,"height":139},"windowState":0}}}