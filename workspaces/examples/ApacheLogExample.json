{"fileType":"apogee app js workspace","version":"0.60","references":{"viewState":{"treeState":-1,"lists":{"es module":{"treeState":0},"js link":{"treeState":0},"css link":{"treeState":0}}}},"code":{"model":{"fileType":"apogee model","version":0.3,"name":"ApacheLogExample","children":{"main":{"name":"main","type":"apogee.Folder","children":{"apacheLog":{"name":"apacheLog","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"//This library function is similar to fetch. It returns a promise for the request. In this case it returns the text body.\n//On failure it throws an exception, which is the preferred way of handling errors in Apogee.\n//There is also a function apogeeutil.jsonRequest(url) which returns a JSON object from the request.\nreturn apogeeutil.textRequest(logUrl);","supplementalCode":""}},"parsedLog":{"name":"parsedLog","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"var createEntry = row => {\n    var entry = {};\n    entry.ipAddress = row[0];\n    entry.date = _trimCharacters(row[3] + \" \" + row[4],1,1);\n    entry.method = _trimCharacters(row[5],1,0);\n    entry.path = row[6];\n    entry.protocol = _trimCharacters(row[7],0,1);\n    entry.responseCode = row[8];\n    \n    //We didn't handle a query string. We will detect that here. If we run into a query string we will\n    //see the error and then we can do the work to handle is. Otherwise we can just skip it.\n    if(entry.path.includes(\"?\")) throw new Error(\"Doh! There is a query string!\");\n    \n    return entry;\n}\n\nreturn initialParse.map(createEntry);","supplementalCode":"function _trimCharacters(text,fromStart,fromEnd) {\r\n    return text.substring(fromStart,text.length-fromEnd);\r\n}"}},"endpointCounts":{"name":"endpointCounts","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let countMap = {};\n\nlet addRecordToMap = record => { \n    countMap[record.path] = countMap[record.path] ? countMap[record.path]+1 : 1;\n}\n\nparsedLog.forEach(addRecordToMap);\n\nreturn countMap;","supplementalCode":""}},"initialParse":{"name":"initialParse","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return apacheLog.split(\"\\n\").map(line => line.split(\" \"));","supplementalCode":""}},"logUrl":{"name":"logUrl","type":"apogee.JsonMember","updateData":{"data":"https://www.apogeejs.com/web/examples/apacheLogData/sampleShort.log"}}}}}},"components":{"main":{"type":"apogeeapp.PageComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":" Apache Log Parsing Example"}]},{"type":"paragraph","content":[{"type":"text","text":"This is an example Apogee workspace that parses an Apache log."}]},{"type":"heading2","content":[{"type":"text","text":"Log Data"}]},{"type":"paragraph","content":[{"type":"text","text":"We will retrieve our data file from a url."}]},{"type":"apogeeComponent","attrs":{"name":"logUrl","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"This is the raw Apache log data. Note that we are displaying this as text rather than as a JSON, the default view. Text is a valid JSON but if we show it as a JSON we will get a lot of escape characters and it is hard to read. "}]},{"type":"apogeeComponent","attrs":{"name":"apacheLog","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Log Processing"}]},{"type":"paragraph","content":[{"type":"text","text":"Here we will parse the Apache log into a format that is easier to work with."}]},{"type":"paragraph","content":[{"type":"text","text":"In the spirit of iterative programming, we will take two steps to parse the file. In the first we will do the obvious split so each record is an array of fields. Then we will work more specifically to parse the individual fields."}]},{"type":"apogeeComponent","attrs":{"name":"initialParse","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"To clean up the above fields, we will add a function in the private section of the next cell. This will trim the specified number of characters from the start and end of the field string."}]},{"type":"paragraph","content":[{"type":"text","text":"Once we have that we can clean up each field. We will also stick it into a JSON object where we can name each field. This gives us a clean parsed format for the file."}]},{"type":"apogeeComponent","attrs":{"name":"parsedLog","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Log Analysis "}]},{"type":"paragraph","content":[{"type":"text","text":"Now that we have the parsed log in a nice format we can do some analysis. Here we will count the number of times each endpoint is called."}]},{"type":"apogeeComponent","attrs":{"name":"endpointCounts","id":0,"state":""}},{"type":"paragraph"},{"type":"paragraph"}]}},"children":{"apacheLog":{"type":"apogeeapp.JsonCell","dataView":"Text Data","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"parsedLog":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":true,"height":7000}}}}},"endpointCounts":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"initialParse":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"logUrl":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":1,"tabOpened":true,"tabShowing":true}},"viewState":{"treeState":1}}},"viewState":{"treeState":1}}