{
	"fileType": "apogee app js workspace",
	"workspace": {
		"fileType": "apogee workspace",
		"version": 0.2,
		"data": {
			"name": "Model",
			"type": "apogee.Folder",
			"children": {
				"createRecord": {
					"name": "createRecord",
					"type": "apogee.FunctionTable",
					"updateData": {
						"argList": [
							"recordType",
							"fieldMap"
						],
						"functionBody": "var record = {};\n\nvar recordInfo = getRecordInfo(recordType);\n\nrecord.Id = getId();\nrecord.Type = recordInfo.name;\nrecord.Fields = fieldMap;\nrecord.read_perm = READ_PERM;\nrecord.edit_perm = EDIT_PERM;\n\nreturn record;",
						"supplementalCode": "var READ_PERM = 2;\nvar EDIT_PERM = 15;\n\nvar nextId = -1;\n\nfunction getId() {\n    return nextId--;\n}",
						"description": "This method creates a record given the field values and record info \nfrom the data set info. It creates and ID and uses standard permissions."
					}
				},
				"recordsToCreateInstructions": {
					"name": "recordsToCreateInstructions",
					"type": "apogee.FunctionTable",
					"updateData": {
						"argList": [
							"recordList"
						],
						"functionBody": "var instructions = [];\n\nfor(var i = 0; i < recordList.length; i++) {\n    var createRecord = recordList[i];\n    var instruction = createCreateInstruction(createRecord);\n    instructions.push(instruction);\n}\n\nreturn instructions;",
						"supplementalCode": "",
						"description": "This creates a list of create instructions to go along with a list of records to be created.\n\nThere is the option to assign the ID or to leave it as undefined, in which case\nan automatically incremented ID will be assigned. (For consistency in the data\nset, either all records should be preassigned or all records should be \nautomatically assigned."
					}
				},
				"createCommitBody": {
					"name": "createCommitBody",
					"type": "apogee.FunctionTable",
					"updateData": {
						"argList": [
							"instructionList",
							"commitMessage"
						],
						"functionBody": "var commit = {};\nvar actions = [];\n\nif(commitMessage.length === 0) throw new Error(\"Commit message missing!\");\n\ncommit.Name = dataSetInfo.name;\ncommit.Message = commitMessage;\ncommit.Actions = actions;\n\n//single action with commits\nvar action = {};\naction.Title = \"bulk create commit\";\naction.Instr = instructionList;\nactions.push(action);\n\nreturn commit",
						"supplementalCode": "",
						"description": "This creates a body for a commit request, given a list of instructions and a commit message."
					}
				},
				"createRequestOptions": {
					"name": "createRequestOptions",
					"type": "apogee.FunctionTable",
					"updateData": {
						"argList": [
							"bodyJson",
							"sessionKey"
						],
						"functionBody": "var header = {};\nheader[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\nheader.sessionKey = sessionKey;\nheader[\"proto-version\"] = \"4.0\";\nheader[\"db-version\"] = dataSetInfo.version;\n\nrequestInfo = {};\nrequestInfo.header = header;\nif(bodyJson) {\n    requestInfo.method = \"POST\";\n    requestInfo.body = JSON.stringify(bodyJson);\n}\n\nreturn requestInfo;\n",
						"supplementalCode": "",
						"description": "This creates the requestOptions, suitable for .jsonRequest, to go with an type of request to the workingset (micemetarequest) server."
					}
				},
				"host": {
					"name": "host",
					"type": "apogee.JsonTable",
					"updateData": {
						"data": "http://factory.micello.com/micemapsws",
						"description": ""
					}
				},
				"commitUrl": {
					"name": "commitUrl",
					"type": "apogee.JsonTable",
					"updateData": {
						"argList": [],
						"functionBody": "var value;\nvalue = host + \"/commit\";\nreturn value;\n\n",
						"supplementalCode": "",
						"description": ""
					}
				},
				"requestUrl": {
					"name": "requestUrl",
					"type": "apogee.JsonTable",
					"updateData": {
						"argList": [],
						"functionBody": "var value;\nvalue = host + \"/cannedsearch\";\nreturn value;\n\n",
						"supplementalCode": "",
						"description": ""
					}
				},
				"dataSetInfo": {
					"name": "dataSetInfo",
					"type": "apogee.JsonTable",
					"updateData": {
						"data": {
							"name": "Micemaps",
							"records": {
								"community": {
									"foreignList": [
										{
											"restrictDelete": true,
											"isUnique": false,
											"remoteField": "community_id",
											"remoteRecord": "geometry_address",
											"name": "geom_addresses"
										},
										{
											"restrictDelete": true,
											"isUnique": false,
											"remoteField": "community_id",
											"remoteRecord": "drawing",
											"name": "drawings"
										},
										{
											"restrictDelete": true,
											"isUnique": false,
											"remoteField": "community_id",
											"remoteRecord": "community_prop",
											"orderField": "ordr",
											"name": "community_props"
										}
									],
									"idField": "community_id",
									"name": "community",
									"recordClass": "com.micello.micemaps.data.Community",
									"fields": [
										{
											"fieldClass": "java.lang.Double",
											"name": "center_lat",
											"nullOk": true
										},
										{
											"fieldClass": "java.lang.Double",
											"name": "center_lon",
											"nullOk": true
										}
									]
								},
								"drawing": {
									"foreignList": [
										{
											"restrictDelete": true,
											"isUnique": false,
											"remoteField": "drawing_id",
											"remoteRecord": "drawing_level",
											"orderField": "zlevel",
											"name": "site_level"
										},
										{
											"restrictDelete": true,
											"isUnique": false,
											"remoteField": "drawing_id",
											"remoteRecord": "drawing_prop",
											"orderField": "ordr",
											"name": "drawing_props"
										}
									],
									"idField": "drawing_id",
									"name": "drawing",
									"recordClass": "com.micello.micemaps.data.Drawing",
									"fields": [
										{
											"fieldClass": "com.micello.micemaps.data.Community",
											"name": "community_id",
											"nullOk": false
										},
										{
											"fieldClass": "java.lang.Boolean",
											"name": "is_root",
											"nullOk": false
										},
										{
											"fieldClass": "java.lang.Boolean",
											"name": "is_locked",
											"nullOk": false,
											"defaultValue": false
										},
										{
											"fieldClass": "java.lang.Float",
											"name": "width",
											"nullOk": false,
											"defaultValue": -1
										},
										{
											"fieldClass": "java.lang.Float",
											"name": "height",
											"nullOk": false,
											"defaultValue": -1
										},
										{
											"fieldClass": "java.lang.Double",
											"name": "mxx",
											"nullOk": false,
											"defaultValue": 1
										},
										{
											"fieldClass": "java.lang.Double",
											"name": "myx",
											"nullOk": false,
											"defaultValue": 0
										},
										{
											"fieldClass": "java.lang.Double",
											"name": "mxy",
											"nullOk": false,
											"defaultValue": 0
										},
										{
											"fieldClass": "java.lang.Double",
											"name": "myy",
											"nullOk": false,
											"defaultValue": 1
										},
										{
											"fieldClass": "java.lang.Double",
											"name": "mx0",
											"nullOk": false,
											"defaultValue": 0
										},
										{
											"fieldClass": "java.lang.Double",
											"name": "my0",
											"nullOk": false,
											"defaultValue": 0
										}
									]
								},
								"nav_node": {
									"foreignList": [
										{
											"restrictDelete": true,
											"isUnique": false,
											"remoteField": "node_id",
											"remoteRecord": "nav_node_level",
											"name": "level_list"
										},
										{
											"restrictDelete": true,
											"isUnique": false,
											"remoteField": "node1_id",
											"remoteRecord": "nav_link",
											"name": "link_starts"
										},
										{
											"restrictDelete": true,
											"isUnique": false,
											"remoteField": "node2_id",
											"remoteRecord": "nav_link",
											"name": "link_ends"
										},
										{
											"restrictDelete": true,
											"isUnique": false,
											"remoteField": "node_id",
											"remoteRecord": "node_prop",
											"orderField": "ordr",
											"name": "node_prop"
										}
									],
									"idField": "node_id",
									"name": "nav_node",
									"recordClass": "com.micello.micemaps.data.NavNode",
									"fields": [
										{
											"fieldClass": "java.lang.Double",
											"name": "mx",
											"nullOk": false
										},
										{
											"fieldClass": "java.lang.Double",
											"name": "my",
											"nullOk": false
										}
									]
								},
								"geometry": {
									"foreignList": [
										{
											"restrictDelete": true,
											"isUnique": false,
											"remoteField": "main_geom_id",
											"remoteRecord": "geometry_group",
											"name": "my_group_map"
										},
										{
											"restrictDelete": true,
											"isUnique": true,
											"remoteField": "geom_id",
											"remoteRecord": "geometry_group",
											"name": "group_map"
										},
										{
											"restrictDelete": true,
											"isUnique": false,
											"remoteField": "geometry_id",
											"remoteRecord": "geometry_prop",
											"orderField": "ordr",
											"name": "geometry_prop"
										},
										{
											"restrictDelete": true,
											"isUnique": true,
											"remoteField": "geometry_id",
											"remoteRecord": "geometry_address",
											"name": "geometry_address"
										}
									],
									"idField": "geom_id",
									"name": "geometry",
									"recordClass": "com.micello.micemaps.data.Geometry",
									"fields": [
										{
											"fieldClass": "java.lang.Integer",
											"name": "zorder",
											"nullOk": false,
											"defaultValue": 0
										},
										{
											"fieldClass": "java.lang.Integer",
											"name": "parent_draw_order",
											"nullOk": false,
											"defaultValue": 9999
										},
										{
											"fieldClass": "java.lang.Integer",
											"name": "parent_zorder",
											"nullOk": false,
											"defaultValue": 0
										},
										{
											"fieldClass": "com.micello.micemaps.data.DrawingLevel",
											"name": "parent_level_id",
											"nullOk": true
										},
										{
											"fieldClass": "com.micello.micemaps.data.DrawingLevel",
											"name": "my_level_id",
											"nullOk": true
										},
										{
											"fieldClass": "com.micello.miceditor.geometry.MShape",
											"name": "geom",
											"nullOk": false
										},
										{
											"fieldClass": "com.micello.miceditor.geometry.RotRect",
											"name": "label",
											"nullOk": true
										},
										{
											"fieldClass": "java.lang.Double",
											"name": "mark_x",
											"nullOk": true
										},
										{
											"fieldClass": "java.lang.Double",
											"name": "mark_y",
											"nullOk": true
										},
										{
											"fieldClass": "java.lang.Boolean",
											"name": "is_locked",
											"nullOk": false,
											"defaultValue": false
										},
										{
											"fieldClass": "java.lang.Boolean",
											"name": "custom_label",
											"nullOk": false,
											"defaultValue": false
										}
									]
								},
								"drawing_prop": {
									"foreignList": [],
									"idField": "drawing_prop_id",
									"name": "drawing_prop",
									"recordClass": "com.micello.micemaps.data.DrawingProp",
									"fields": [
										{
											"fieldClass": "java.lang.Integer",
											"name": "ordr",
											"nullOk": false,
											"defaultValue": 0
										},
										{
											"fieldClass": "com.micello.micemaps.data.Drawing",
											"name": "drawing_id",
											"nullOk": false
										},
										{
											"fieldClass": "java.lang.String",
											"name": "key_name",
											"nullOk": false
										},
										{
											"fieldClass": "java.lang.String",
											"name": "key_value",
											"nullOk": true
										},
										{
											"fieldClass": "java.lang.String",
											"name": "lang",
											"nullOk": true
										}
									]
								},
								"geometry_prop": {
									"foreignList": [],
									"idField": "prop_id",
									"name": "geometry_prop",
									"recordClass": "com.micello.micemaps.data.GeometryProp",
									"fields": [
										{
											"fieldClass": "java.lang.Integer",
											"name": "ordr",
											"nullOk": false,
											"defaultValue": 0
										},
										{
											"fieldClass": "com.micello.micemaps.data.Geometry",
											"name": "geometry_id",
											"nullOk": true
										},
										{
											"fieldClass": "java.lang.String",
											"name": "key_name",
											"nullOk": false
										},
										{
											"fieldClass": "java.lang.String",
											"name": "key_value",
											"nullOk": false
										},
										{
											"fieldClass": "java.lang.String",
											"name": "lang",
											"nullOk": true
										}
									]
								},
								"node_prop": {
									"foreignList": [],
									"idField": "prop_id",
									"name": "node_prop",
									"recordClass": "com.micello.micemaps.data.NavNodeProp",
									"fields": [
										{
											"fieldClass": "java.lang.Integer",
											"name": "ordr",
											"nullOk": false,
											"defaultValue": 0
										},
										{
											"fieldClass": "com.micello.micemaps.data.NavNode",
											"name": "node_id",
											"nullOk": true
										},
										{
											"fieldClass": "java.lang.String",
											"name": "key_name",
											"nullOk": false
										},
										{
											"fieldClass": "java.lang.String",
											"name": "key_value",
											"nullOk": false
										},
										{
											"fieldClass": "java.lang.String",
											"name": "lang",
											"nullOk": true
										}
									]
								},
								"geometry_group": {
									"foreignList": [],
									"idField": "geom_group_id",
									"name": "geometry_group",
									"recordClass": "com.micello.micemaps.data.GeometryGroup",
									"fields": [
										{
											"fieldClass": "com.micello.micemaps.data.Geometry",
											"name": "main_geom_id",
											"nullOk": false
										},
										{
											"fieldClass": "com.micello.micemaps.data.Geometry",
											"name": "geom_id",
											"nullOk": false
										}
									]
								},
								"geometry_address": {
									"foreignList": [
										{
											"restrictDelete": true,
											"isUnique": false,
											"remoteField": "parent_address_id",
											"remoteRecord": "geometry_address",
											"name": "child_address"
										}
									],
									"idField": "address_id",
									"name": "geometry_address",
									"recordClass": "com.micello.micemaps.data.GeometryAddress",
									"fields": [
										{
											"fieldClass": "com.micello.micemaps.data.Community",
											"name": "community_id",
											"nullOk": false
										},
										{
											"fieldClass": "com.micello.micemaps.data.Geometry",
											"name": "geometry_id",
											"nullOk": true
										},
										{
											"fieldClass": "java.lang.String",
											"name": "address_key",
											"nullOk": false
										},
										{
											"fieldClass": "java.lang.String",
											"name": "address_value",
											"nullOk": false
										},
										{
											"fieldClass": "com.micello.micemaps.data.GeometryAddress",
											"name": "parent_address_id",
											"nullOk": true
										}
									]
								},
								"nav_node_level": {
									"foreignList": [],
									"idField": "node_level_id",
									"name": "nav_node_level",
									"recordClass": "com.micello.micemaps.data.NavNodeLevel",
									"fields": [
										{
											"fieldClass": "com.micello.micemaps.data.NavNode",
											"name": "node_id",
											"nullOk": false
										},
										{
											"fieldClass": "com.micello.micemaps.data.DrawingLevel",
											"name": "level_id",
											"nullOk": false
										}
									]
								},
								"level_prop": {
									"foreignList": [],
									"idField": "level_prop_id",
									"name": "level_prop",
									"recordClass": "com.micello.micemaps.data.LevelProp",
									"fields": [
										{
											"fieldClass": "java.lang.Integer",
											"name": "ordr",
											"nullOk": false,
											"defaultValue": 0
										},
										{
											"fieldClass": "com.micello.micemaps.data.DrawingLevel",
											"name": "level_id",
											"nullOk": false
										},
										{
											"fieldClass": "java.lang.String",
											"name": "key_name",
											"nullOk": false
										},
										{
											"fieldClass": "java.lang.String",
											"name": "key_value",
											"nullOk": true
										},
										{
											"fieldClass": "java.lang.String",
											"name": "lang",
											"nullOk": true
										}
									]
								},
								"nav_link": {
									"foreignList": [
										{
											"restrictDelete": true,
											"isUnique": false,
											"remoteField": "link_id",
											"remoteRecord": "link_prop",
											"orderField": "ordr",
											"name": "link_prop"
										}
									],
									"idField": "link_id",
									"name": "nav_link",
									"recordClass": "com.micello.micemaps.data.NavLink",
									"fields": [
										{
											"fieldClass": "com.micello.micemaps.data.NavNode",
											"name": "node1_id",
											"nullOk": false
										},
										{
											"fieldClass": "com.micello.micemaps.data.NavNode",
											"name": "node2_id",
											"nullOk": false
										},
										{
											"fieldClass": "java.lang.Double",
											"name": "distance",
											"nullOk": false
										},
										{
											"fieldClass": "java.lang.Byte",
											"name": "direction",
											"nullOk": false
										},
										{
											"fieldClass": "java.lang.Integer",
											"name": "delta_zlevel",
											"nullOk": false
										}
									]
								},
								"drawing_level": {
									"foreignList": [
										{
											"restrictDelete": true,
											"isUnique": false,
											"remoteField": "parent_level_id",
											"remoteRecord": "geometry",
											"orderField": "parent_draw_order",
											"name": "child_geometry"
										},
										{
											"restrictDelete": true,
											"isUnique": true,
											"remoteField": "my_level_id",
											"remoteRecord": "geometry",
											"name": "root_geoemtry"
										},
										{
											"restrictDelete": true,
											"isUnique": false,
											"remoteField": "level_id",
											"remoteRecord": "nav_node_level",
											"name": "nav_node_list"
										},
										{
											"restrictDelete": true,
											"isUnique": false,
											"remoteField": "level_id",
											"remoteRecord": "level_prop",
											"orderField": "ordr",
											"name": "level_props"
										}
									],
									"idField": "id",
									"name": "drawing_level",
									"recordClass": "com.micello.micemaps.data.DrawingLevel",
									"fields": [
										{
											"fieldClass": "java.lang.Integer",
											"name": "zlevel",
											"nullOk": false,
											"defaultValue": 0
										},
										{
											"fieldClass": "java.lang.Boolean",
											"name": "is_main",
											"nullOk": false,
											"defaultValue": false
										},
										{
											"fieldClass": "com.micello.micemaps.data.Drawing",
											"name": "drawing_id",
											"nullOk": false
										},
										{
											"fieldClass": "java.lang.Byte",
											"name": "view_parent_flags",
											"nullOk": false,
											"defaultValue": 2
										}
									]
								},
								"community_prop": {
									"foreignList": [],
									"idField": "community_prop_id",
									"name": "community_prop",
									"recordClass": "com.micello.micemaps.data.CommunityProp",
									"fields": [
										{
											"fieldClass": "java.lang.Integer",
											"name": "ordr",
											"nullOk": false,
											"defaultValue": 0
										},
										{
											"fieldClass": "com.micello.micemaps.data.Community",
											"name": "community_id",
											"nullOk": false
										},
										{
											"fieldClass": "java.lang.String",
											"name": "key_name",
											"nullOk": false
										},
										{
											"fieldClass": "java.lang.String",
											"name": "key_value",
											"nullOk": true
										},
										{
											"fieldClass": "java.lang.String",
											"name": "lang",
											"nullOk": true
										}
									]
								},
								"link_prop": {
									"foreignList": [],
									"idField": "prop_id",
									"name": "link_prop",
									"recordClass": "com.micello.micemaps.data.NavLinkProp",
									"fields": [
										{
											"fieldClass": "java.lang.Integer",
											"name": "ordr",
											"nullOk": false,
											"defaultValue": 0
										},
										{
											"fieldClass": "com.micello.micemaps.data.NavLink",
											"name": "link_id",
											"nullOk": true
										},
										{
											"fieldClass": "java.lang.String",
											"name": "key_name",
											"nullOk": false
										},
										{
											"fieldClass": "java.lang.String",
											"name": "key_value",
											"nullOk": false
										},
										{
											"fieldClass": "java.lang.String",
											"name": "lang",
											"nullOk": true
										}
									]
								}
							},
							"version": "5.2"
						},
						"description": ""
					}
				},
				"createUpdateInstruction": {
					"name": "createUpdateInstruction",
					"type": "apogee.FunctionTable",
					"updateData": {
						"argList": [
							"initialRecord",
							"targetRecord"
						],
						"functionBody": "if(initialRecord.Id != targetRecord.Id) {\n    throw new Error(\"Record ID mismatch in create update instruction for target record: \" + getRecordErrString(targetRecord));\n}\n\nif(initialRecord.Type != targetRecord.Type) {\n    throw new Error(\"Inital and target record types do not match. Target record: \" + getRecordErrString(targetRecord));\n}\n\nvar recordsDifferent = false;\n\nvar recordInfo = getRecordInfo(initialRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Update\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = initialRecord.Id;\n\ninstruction.initialReadPerm = initialRecord.read_perm;\ninstruction.initialEditPerm = initialRecord.edit_perm;\n\nif(initialRecord.readPerm != targetRecord.readPerm) {\n    instruction.targetReadPerm = targetRecord.read_perm;\n    recordsDifferent = true;\n}\n\nif(initialRecord.editPerm != targetRecord.editPerm) {\n    instruction.targetEditPerm = targetRecord.edit_perm;\n    recordsDifferent = true;\n}\n\nvar initialData = {};\ninstruction.Initial = initialData;\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    \n    var initialValue;\n    var targetValue;\n    \n    var initialValue = initialRecord.Fields[field.name];\n    var targetValue = targetRecord.Fields[field.name];\n    \n    //validate target values\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(targetRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(targetRecord,field));\n        }\n    }\n    \n    if(!fieldsMatch(initialValue,targetValue,field)) {\n        initialData[field.name] = initialValue;\n        targetData[field.name] = targetValue;\n        recordsDifferent = true;\n    }\n}\n\nif(recordsDifferent) {\n    return instruction;\n}\nelse {\n    return null;\n}\n",
						"supplementalCode": "function fieldsMatch(initialValue,targetValue,fieldInfo) {\n    if(fieldInfo.fieldClass === \"java.lang.String\") {\n        //compare strings with \"==\"\n        return (initialValue == targetValue);\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"java.lang\")) {\n        //compare other basic values with \"===\"\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass.startsWith(\"com.micello\")) {\n        return initialValue === targetValue;\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONObject\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else if(fieldInfo.fieldClass == \"org.json.JSONArray\") {\n        return compareJsonData(initialValue,targetValue);\n    }\n    else {\n        throw new Error(\"unrecognized field type: \" + fieldInfo.fieldClass);\n    }\n}\n\nfunction compareJsonData(a,b) {\n    var an = apogeeutil.getNormalizedObjectCopy(a);\n    var bn = apogeeutil.getNormalizedObjectCopy(b);\n    var aString = JSON.stringify(an);\n    var bString = JSON.stringify(bn);\n    return aString == bString;\n}\n    ",
						"description": "This function creates an update instruction given an initial and target record. If the records are the same then NULL is returned. (No update is needed.)"
					}
				},
				"createCreateInstruction": {
					"name": "createCreateInstruction",
					"type": "apogee.FunctionTable",
					"updateData": {
						"argList": [
							"createRecord"
						],
						"functionBody": "\nvar recordInfo = getRecordInfo(createRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Create\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = createRecord.Id;\n\ninstruction.targetReadPerm = createRecord.read_perm;\ninstruction.targetEditPerm = createRecord.edit_perm;\n\nvar targetData = {};\ninstruction.Target = targetData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var targetValue;\n    var targetValue = createRecord.Fields[field.name];\n    if(targetValue === undefined) {\n        //use default\n        targetValue = field.defaultValue;\n    }\n    \n    if(targetValue === undefined) {\n        throw new Error(\"Unknown problem: undefined field value: \" + getFieldErrString(createRecord,field));\n    }\n    \n    if(targetValue === null) {\n        if(!field.nullOk) {\n            throw new Error(\"Illegal null value: \" + getFieldErrString(createRecord,field));\n        }\n    }\n    \n    targetData[field.name] = targetValue;\n}\n\nreturn instruction;\n",
						"supplementalCode": "",
						"description": ""
					}
				},
				"getFieldErrString": {
					"name": "getFieldErrString",
					"type": "apogee.FunctionTable",
					"updateData": {
						"argList": [
							"record",
							"fieldInfo"
						],
						"functionBody": "return getRecordErrString(record) + \" - \" + fieldInfo.name;",
						"supplementalCode": "",
						"description": ""
					}
				},
				"getRecordErrString": {
					"name": "getRecordErrString",
					"type": "apogee.FunctionTable",
					"updateData": {
						"argList": [
							"record"
						],
						"functionBody": "return record.Type + \" \" + record.Id;",
						"supplementalCode": "",
						"description": ""
					}
				},
				"createDeleteInstruction": {
					"name": "createDeleteInstruction",
					"type": "apogee.FunctionTable",
					"updateData": {
						"argList": [
							"deleteRecord"
						],
						"functionBody": "\nvar recordInfo = getRecordInfo(deleteRecord.Type);\n\nvar instruction = {};\ninstruction.Type = \"Delete\";\ninstruction.Record = recordInfo.name;\ninstruction.Id = deleteRecord.Id;\n\ninstruction.initialReadPerm = deleteRecord.read_perm;\ninstruction.initialEditPerm = deleteRecord.edit_perm;\n\nvar initialData = {};\ninstruction.Initial = initialData;\n\nfor(var i = 0; i < recordInfo.fields.length; i++) {\n    var field = recordInfo.fields[i];\n    var initialValue = deleteRecord.Fields[field.name];\n    \n    initialData[field.name] = initialValue;\n}\n\nreturn instruction;\n",
						"supplementalCode": "",
						"description": ""
					}
				},
				"getRecordInfo": {
					"name": "getRecordInfo",
					"type": "apogee.FunctionTable",
					"updateData": {
						"argList": [
							"recordType"
						],
						"functionBody": "var recordInfo = dataSetInfo.records[recordType];\n\nif(!recordInfo) {\n    throw new Error(\"Record type not found in getRecordInfo: \" + recordType);\n}\n\nreturn recordInfo;",
						"supplementalCode": "",
						"description": ""
					}
				},
				"combinedEntriesToInstructionList": {
					"name": "combinedEntriesToInstructionList",
					"type": "apogee.FunctionTable",
					"updateData": {
						"argList": [
							"combinedEntries"
						],
						"functionBody": "var output = [];\nfor(var key in combinedEntries) {\n    var entry = combinedEntries[key];\n    var instruction = getInstructionForCombinedEntry(entry);\n    if(instruction) {\n        output.push(instruction);\n    }\n}\n\nreturn output;",
						"supplementalCode": "function getInstructionForCombinedEntry(combinedEntry) {\n    var newEntry = combinedEntry.newEntry;\n    var oldEntry = combinedEntry.oldEntry;\n    \n    if(newEntry) {\n        if(!oldEntry) {\n            console.log(\"Create: \" + newEntry.Id);\n            return createCreateInstruction(newEntry);\n        }\n        else {\n            //this will return null for matching records\n            console.log(\"Update(maybe): \" + newEntry.Id);\n            return createUpdateInstruction(oldEntry,newEntry);\n        }\n    }\n    else if(oldEntry) {\n        console.log(\"Delete: \" + oldEntry.Id);\n        return createDeleteInstruction(oldEntry);\n    }\n    \n    return null;\n}\n\nfunction entriesDifferent(entry1,entry2) {\n    var string1 = JSON.stringify(apogeeutil.getNormalizedCopy(entry1));\n    var string2 = JSON.stringify(apogeeutil.getNormalizedCopy(entry2));\n    return (string1 == string2);\n}",
						"description": "This function takes a combined entry map of the format:\n\n{\n  \"some-identifier\":{\n    \"oldEntry\":{original record entry, if applicable},\n    \"newEntry\":{new record entry, if applicable}\n  },\n  ...\n}\n\nIt returns an instruction list.\n\n"
					}
				},
				"getCommitPromise": {
					"name": "getCommitPromise",
					"type": "apogee.FunctionTable",
					"updateData": {
						"argList": [
							"instructionList",
							"commitMessage",
							"sessionKey"
						],
						"functionBody": "var commitBody = createCommitBody(instructionList,commitMessage);\nvar requestOptions = createRequestOptions(commitBody,sessionKey);\nvalue = .jsonRequest(commitUrl,requestOptions);\nreturn value;",
						"supplementalCode": "",
						"description": ""
					}
				},
				"getRequestPromise": {
					"name": "getRequestPromise",
					"type": "apogee.FunctionTable",
					"updateData": {
						"argList": [
							"requestBody",
							"sessionKey"
						],
						"functionBody": "var requestOptions = createRequestOptions(requestBody,sessionKey);\nvalue = .jsonRequest(requestUrl,requestOptions);\nreturn value;",
						"supplementalCode": "",
						"description": ""
					}
				},
				"getMapRequest": {
					"name": "getMapRequest",
					"type": "apogee.FunctionTable",
					"updateData": {
						"argList": [
							"cid",
							"sessionKey"
						],
						"functionBody": "var requestBody = {};\nrequestBody.search = \"community_map\";\nrequestBody.id = cid;\n\nvar requestOptions = createRequestOptions(requestBody,sessionKey);\n\nvar requestUrl = host + \"/cannedsearch\";\nreturn .jsonRequest(requestUrl,requestOptions);",
						"supplementalCode": "",
						"description": ""
					}
				}
			}
		},
		"name": "micemapsDataAccess"
	},
	"components": {
		"type": "apogeeapp.app.FolderComponent",
		"children": {
			"createRecord": {
				"type": "apogeeapp.app.FunctionComponent",
				"windowState": {
					"sizeInfo": {
						"width": 560,
						"height": 321
					},
					"posInfo": {
						"x": 32,
						"y": 420
					},
					"state": -1,
					"viewType": "Code"
				}
			},
			"recordsToCreateInstructions": {
				"type": "apogeeapp.app.FunctionComponent",
				"windowState": {
					"sizeInfo": {
						"width": 834,
						"height": 391
					},
					"posInfo": {
						"x": 32,
						"y": 467
					},
					"state": -1,
					"viewType": "Code"
				}
			},
			"createCommitBody": {
				"type": "apogeeapp.app.FunctionComponent",
				"windowState": {
					"sizeInfo": {
						"width": 568,
						"height": 400
					},
					"posInfo": {
						"x": 786,
						"y": 273
					},
					"state": -1,
					"viewType": "Code"
				}
			},
			"createRequestOptions": {
				"type": "apogeeapp.app.FunctionComponent",
				"windowState": {
					"sizeInfo": {
						"width": 523,
						"height": 254
					},
					"posInfo": {
						"x": 786,
						"y": 321
					},
					"state": -1,
					"viewType": "Code"
				}
			},
			"host": {
				"type": "apogeeapp.app.JsonTableComponent",
				"windowState": {
					"sizeInfo": {
						"width": 353,
						"height": 71
					},
					"posInfo": {
						"x": 18,
						"y": 11
					},
					"state": -1,
					"viewType": "Text"
				}
			},
			"commitUrl": {
				"type": "apogeeapp.app.JsonTableComponent",
				"windowState": {
					"sizeInfo": {
						"width": 433,
						"height": -4
					},
					"posInfo": {
						"x": 22,
						"y": 60
					},
					"state": -1,
					"viewType": "Text"
				}
			},
			"requestUrl": {
				"type": "apogeeapp.app.JsonTableComponent",
				"windowState": {
					"sizeInfo": {
						"width": 450,
						"height": 4
					},
					"posInfo": {
						"x": 22,
						"y": 101
					},
					"state": -1,
					"viewType": "Formula"
				}
			},
			"dataSetInfo": {
				"type": "apogeeapp.app.JsonTableComponent",
				"windowState": {
					"sizeInfo": {
						"width": 1064,
						"height": 611
					},
					"posInfo": {
						"x": 290,
						"y": 138
					},
					"state": -1,
					"viewType": "Text"
				}
			},
			"createUpdateInstruction": {
				"type": "apogeeapp.app.FunctionComponent",
				"windowState": {
					"sizeInfo": {
						"width": 886,
						"height": 655
					},
					"posInfo": {
						"x": 36,
						"y": 247
					},
					"state": -1,
					"viewType": "Code"
				}
			},
			"createCreateInstruction": {
				"type": "apogeeapp.app.FunctionComponent",
				"windowState": {
					"sizeInfo": {
						"width": 994,
						"height": 643
					},
					"posInfo": {
						"x": 35,
						"y": 209
					},
					"state": -1,
					"viewType": "Code"
				}
			},
			"getFieldErrString": {
				"type": "apogeeapp.app.FunctionComponent",
				"windowState": {
					"sizeInfo": {
						"width": 512,
						"height": 68
					},
					"posInfo": {
						"x": 761,
						"y": 616
					},
					"state": -1,
					"viewType": "Code"
				}
			},
			"getRecordErrString": {
				"type": "apogeeapp.app.FunctionComponent",
				"windowState": {
					"sizeInfo": {
						"width": 400,
						"height": 81
					},
					"posInfo": {
						"x": 762,
						"y": 664
					},
					"state": -1,
					"viewType": "Code"
				}
			},
			"createDeleteInstruction": {
				"type": "apogeeapp.app.FunctionComponent",
				"windowState": {
					"sizeInfo": {
						"width": 678,
						"height": 540
					},
					"posInfo": {
						"x": 36,
						"y": 289
					},
					"state": -1,
					"viewType": "Code"
				}
			},
			"getRecordInfo": {
				"type": "apogeeapp.app.FunctionComponent",
				"windowState": {
					"sizeInfo": {
						"width": 480,
						"height": 400
					},
					"posInfo": {
						"x": 788,
						"y": 372
					},
					"state": -1,
					"viewType": "Code"
				}
			},
			"combinedEntriesToInstructionList": {
				"type": "apogeeapp.app.FunctionComponent",
				"windowState": {
					"sizeInfo": {
						"width": 721,
						"height": 524
					},
					"posInfo": {
						"x": 32,
						"y": 512
					},
					"state": -1,
					"viewType": "Private"
				}
			},
			"getCommitPromise": {
				"type": "apogeeapp.app.FunctionComponent",
				"windowState": {
					"sizeInfo": {
						"width": 741,
						"height": 400
					},
					"posInfo": {
						"x": 292,
						"y": 61
					},
					"state": -1,
					"viewType": "Code"
				}
			},
			"getRequestPromise": {
				"type": "apogeeapp.app.FunctionComponent",
				"windowState": {
					"sizeInfo": {
						"width": 810,
						"height": 400
					},
					"posInfo": {
						"x": 292,
						"y": 16
					},
					"state": -1,
					"viewType": "Code"
				}
			},
			"getMapRequest": {
				"type": "apogeeapp.app.FunctionComponent",
				"windowState": {
					"sizeInfo": {
						"width": 400,
						"height": 400
					},
					"posInfo": {
						"x": 34,
						"y": 601
					},
					"state": -1,
					"viewType": "Code"
				}
			}
		}
	},
	"version": 0.4,
	"references": []
}