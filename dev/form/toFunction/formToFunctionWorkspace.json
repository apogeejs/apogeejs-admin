{"fileType":"apogee app js workspace","version":"0.60","references":{"viewState":{"treeState":1,"lists":{"es module":{"treeState":0},"js link":{"treeState":0},"css link":{"treeState":0}}}},"code":{"model":{"fileType":"apogee model","version":0.3,"name":"Workspace","children":{"main":{"name":"main","type":"apogee.Folder","children":{"output":{"name":"output","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let functionBody = _getFunctionBody(formValue,formMeta);\n\nreturn functionBody;","supplementalCode":"/** This gets the function body to convert a form including expressions. */\nfunction _getFunctionBody(formValue,formMeta) {\n    let parentObjectName = \"output\";\n    let functionLines = [];\n    functionLines.push(\"let output = {};\");\n    _loadPanelLines(parentObjectName,formValue,formMeta,functionLines);\n    functionLines.push(\"return output;\")\n    \n    return functionLines.join(\"\\n\");\n}\n\n/** This loads a value to an assignee. */\nfunction _loadEntry(assigneeName,value,meta,functionLines) {\n    if((!meta)||(value === undefined)||(value === null)||((meta.excludeValue)&&(meta.excludeValue === value))) {\n        //value excluded\n        //handle value === undefined!!\n        return false;\n    }\n        \n    //add value\n    if(meta.expression) {\n        //expression\n        switch(meta.expression) {\n            case \"simple\":\n                return _loadSimpleExpressionEntry(assigneeName,value,functionLines);\n                \n            case \"object\":\n                functionLines.push(assigneeName + \"= {};\");\n                _loadPanelLines(assigneeName,value,meta.childMeta,functionLines);\n                //for now we always add the base object, even if empty\n                return true;\n                \n            case \"array\": \n                functionLines.push(assigneeName + \"= []\");\n                if(meta.childMeta) {\n                    _loadMultiTypedArrayLines(assigneeName,value,meta.childMeta,functionLines);\n                }\n                else if(meta.entryMeta) {\n                    _loadSingleTypedArrayLines(assigneeName,value,meta.entryMeta,functionLines);\n                }\n                //for now we always add the base array, even if empty\n                return true;\n                \n            default:\n                console.error(\"Expression type not supported: \" + meta.expression);\n                return false;\n        }\n    }\n    else {\n        //plain value, not an expression\n        return _loadSimpleValueEntry(assigneeName,value,functionLines);\n    }\n}\n\n/** This loads a value to an assignee for a simple value. */\nfunction _loadSimpleValueEntry(assigneeName,value,functionLines) {\n    let line = assigneeName + \" = \" + JSON.stringify(value);\n    functionLines.push(line);\n    return true;\n}\n\n/** This loads a value to an assignee for a simple expression. */\nfunction _loadSimpleExpressionEntry(assigneeName,value,functionLines) {\n    let trimmedValue = value.toString().trim();\n    if(trimmedValue === \"\") return false;\n    \n    let line = assigneeName + \" = \" + trimmedValue;\n    functionLines.push(line);\n    return true;\n}\n\n/** This loads a value to an assignee fpr a panel. */\nfunction _loadPanelLines(parentObjectName,panelValue,panelMeta,functionLines) {\n    for(let key in panelMeta) {\n        let meta = panelMeta[key];\n        let value = panelValue[key];\n        let assigneeName = parentObjectName + \"[\" + JSON.stringify(key) + \"]\";\n        _loadEntry(assigneeName,value,meta,functionLines);\n    }\n}\n\nfunction _loadMultiTypedArrayLines(assigneeName,value,metaMap,functionLines) {\n    let insertIndex = 0;\n    let linesAdded = false;\n    value.forEach( (keyedEntry) => {\n        let key = keyedEntry.key;\n        let entryValue = keyedEntry.value;\n        let entryMeta = metaMap[key];\n        let entryAssigneeName = assigneeName + \"[\" + insertIndex + \"]\";\n        let lineAdded = _loadEntry(entryAssigneeName,entryValue,entryMeta,functionLines);\n        if(lineAdded) {\n            insertIndex++;\n            linesAdded = true;\n        }\n    });\n    return linesAdded;\n}\n\nfunction _loadSingleTypedArrayLines(assigneeName,value,entryMeta,functionLines) {\n    let insertIndex = 0;\n    let linesAdded = false;\n    value.forEach( (entryValue) => {\n        let entryAssigneeName = assigneeName + \"[\" + insertIndex + \"]\";\n        let lineAdded = _loadEntry(entryAssigneeName,entryValue,entryMeta,functionLines);\n        if(lineAdded) {\n            insertIndex++;\n            linesAdded = true;\n        }\n    });\n    return linesAdded;\n}"}},"formValue":{"name":"formValue","type":"apogee.JsonMember","updateData":{"data":{"b1":true,"b2":true,"n1":4.5,"n2":4.5,"s1":"test[0]","s2":"test[1]","o1":{"boolean":true,"number":4.5,"string":"test[3]"},"o2":{"boolean":true,"number":4.5,"string":"test[4]"},"a1":[true,4.5,"The rain in spain"],"a2":[true,4.5,"The rain in spain"],"a3":[{"key":"otherString","value":"This is a string"},{"key":"boolean","value":true},{"key":"number","value":4.5},{"key":"string","value":"test[3]"},{"key":"otherString","value":"This is a string too"}],"a4":[" ","test[0]","test[1]","test[2]","test[3]","xxx"]}}},"formMeta":{"name":"formMeta","type":"apogee.JsonMember","updateData":{"data":{"b1":{"expression":"simple"},"b2":{"expression":false},"s1":{"expression":"simple"},"s2":{},"n1":{"expression":"simple"},"n2":{"expression":false},"o1":{"expression":"object","childMeta":{"boolean":{"expression":"simple"},"number":{"expression":"simple"},"string":{"expression":"simple"}}},"o2":{"expression":false},"a1":{"expression":false},"a2":{"expression":"array"},"a3":{"expression":"array","childMeta":{"boolean":{"expression":false},"number":{"expression":"simple"},"string":{"expression":"simple"},"otherString":{"expression":false}}},"a4":{"expression":"array","entryMeta":{"expression":"simple","excludeValue":"xxx"}}}}},"result":{"name":"result","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let output = {};\noutput[\"b1\"] = true\noutput[\"b2\"] = true\noutput[\"s1\"] = test[0]\noutput[\"s2\"] = \"test[1]\"\noutput[\"n1\"] = 4.5\noutput[\"n2\"] = 4.5\noutput[\"o1\"]= {};\noutput[\"o1\"][\"boolean\"] = true\noutput[\"o1\"][\"number\"] = 4.5\noutput[\"o1\"][\"string\"] = test[3]\noutput[\"o2\"] = {\"boolean\":true,\"number\":4.5,\"string\":\"test[4]\"}\noutput[\"a1\"] = [true,4.5,\"The rain in spain\"]\noutput[\"a2\"]= []\noutput[\"a3\"]= []\noutput[\"a3\"][0] = \"This is a string\"\noutput[\"a3\"][1] = true\noutput[\"a3\"][2] = 4.5\noutput[\"a3\"][3] = test[3]\noutput[\"a3\"][4] = \"This is a string too\"\noutput[\"a4\"]= []\noutput[\"a4\"][0] = test[0]\noutput[\"a4\"][1] = test[1]\noutput[\"a4\"][2] = test[2]\noutput[\"a4\"][3] = test[3]\nreturn output;","supplementalCode":""}},"resultRef":{"name":"resultRef","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"let output = {};\noutput[\"b1\"] = true;\noutput[\"b2\"] = true;\noutput[\"s1\"] = test[0];\noutput[\"s2\"] = \"test[1]\";\noutput[\"n1\"] = 4.5;\noutput[\"n2\"] = 4.5;\noutput[\"o1\"] = {};\noutput[\"o1\"][\"boolean\"] = true;\noutput[\"o1\"][\"number\"] = 4.5;\noutput[\"o1\"][\"string\"] = test[3];\noutput[\"o2\"] = {\"boolean\":true,\"number\":4.5,\"string\":\"test[4]\"};\noutput[\"a1\"] = [true,4.5,\"The rain in spain\"];\noutput[\"a2\"] = [true,4.5,\"The rain in spain\"];\nreturn output;","supplementalCode":""}},"matchesRef":{"name":"matchesRef","type":"apogee.JsonMember","updateData":{"argList":[],"functionBody":"return apogeeutil.jsonEquals(result,resultRef);","supplementalCode":""}},"test":{"name":"test","type":"apogee.JsonMember","updateData":{"data":["test0 value!","test1 value!",[1,2,3],{"a":"A","b":"B"}]}}}}}},"components":{"main":{"type":"apogeeapp.PageComponent","data":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"Forms With Expressions"}]},{"type":"paragraph","content":[{"type":"text","text":"This workspace is for some development code to create a conversion of a form to a function body which will populate expresssions into the form value, where applicable."}]},{"type":"heading2","content":[{"type":"text","text":"Form Data"}]},{"type":"paragraph","content":[{"type":"text","text":"This is the result of the form."}]},{"type":"apogeeComponent","attrs":{"name":"formValue","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Form Metadata"}]},{"type":"paragraph","content":[{"type":"text","text":"This is a new added field for the form elements, \"Meta\"."}]},{"type":"paragraph","content":[{"type":"text","text":"The meta value for the form can be obtained from the form object. It has the following fields:"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"expression: This tells if the value of the form should be an expression. [\"object\",\"array\",\"simple\",false,missing]"}]},{"type":"listItem","content":[{"type":"text","text":"excludeValue: If the element has this value, it should not be included in the form."}]},{"type":"listItem","content":[{"type":"text","text":"childMeta - This is automatically inserted from a panel (by collecting meta entries on child elements) or multitype list element (by collecting the meta entries on each entry type). (type = object or type = array)"}]},{"type":"listItem","content":[{"type":"text","text":"entryMeta - This is automatically inserted from a single entry list. It can also be added on other elements returning an array value. (type = array only)"}]}]},{"type":"paragraph","content":[{"type":"text","text":"Some additional notes:"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"Entries are not put in if the value is undefined or null."}]},{"type":"listItem","content":[{"type":"text","text":"Entries are not put in whenever there is no metadata for that element."}]},{"type":"listItem","content":[{"type":"text","text":"Entries are not put in when it matches the optional \"excluded value\". An exact match is used ===."}]},{"type":"listItem","content":[{"type":"text","text":"For objects and arrays, the object and array are added to the output even if empty."}]},{"type":"listItem","content":[{"type":"text","text":"If an expression is an empty string (or just whitespace), it is not added."}]}]},{"type":"paragraph","content":[{"type":"text","text":"How the form metadata is created:"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"The top level panel does not have metadata"}]},{"type":"listItem","content":[{"type":"text","text":"Child Panel metadata: if there is metadata for the panel, an object \"childMeta\" is added containing a map of the child metadata objects, using the child element key as the map key."}]},{"type":"listItem","content":[{"type":"text","text":"Child Array metadata: (If there is metadata for the list...) If it is a multitype array, \"childMeta\" is created, using the key for the entry types. If it is a singe type array, the meta entry for that single type is added with the title \"entryMeta\". Alternatively, if the element is a different element which returns a list, the user can set \"entryMeta\" manually."}]}]},{"type":"apogeeComponent","attrs":{"name":"formMeta","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Function Body Generation"}]},{"type":"paragraph","content":[{"type":"text","text":"Here we generate the function body to convert the form result using the above data."}]},{"type":"apogeeComponent","attrs":{"name":"output","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here we test the function body."}]},{"type":"apogeeComponent","attrs":{"name":"result","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Sample Data"}]},{"type":"paragraph","content":[{"type":"text","text":"This is just sample data to be used below."}]},{"type":"apogeeComponent","attrs":{"name":"test","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Appendix"}]},{"type":"paragraph","content":[{"type":"text","text":"This is just extra stuff."}]},{"type":"paragraph","content":[{"type":"text","text":"Below is currently not used. But I might want to again."}]},{"type":"apogeeComponent","attrs":{"name":"matchesRef","id":0,"state":""}},{"type":"paragraph"},{"type":"apogeeComponent","attrs":{"name":"resultRef","id":0,"state":""}}]}},"children":{"output":{"type":"apogeeapp.JsonCell","dataView":"Text Data","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":7000},"Formula":{"height":7000,"isViewActive":true},"Private":{"height":7000,"isViewActive":true}}}}},"formValue":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"formMeta":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":7000},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"result":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":7000},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"resultRef":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"matchesRef":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"test":{"type":"apogeeapp.JsonCell","dataView":"Colorized","viewState":{"childDisplayState":{"views":{"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":1,"tabOpened":true,"tabShowing":true}},"viewState":{"treeState":1}}},"viewState":{"treeState":1}}