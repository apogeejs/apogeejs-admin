{"fileType":"apogee app js workspace","version":"1.0","references":{"refEntries":[{"entryType":"js link","url":"https://unpkg.com/react@16.12.0/umd/react.development.js","name":"react.development.js"},{"entryType":"js link","url":"https://unpkg.com/react-dom@16.12.0/umd/react-dom.development.js","name":"react-dom.development.js"}],"viewState":{"treeState":1,"lists":{"apogee module":{"treeState":0},"es module":{"treeState":0},"js link":{"treeState":1},"css link":{"treeState":0}}}},"code":{"model":{"fileType":"apogee model","version":"1.0","name":"Workspace","children":{"main":{"name":"main","type":"apogee.Folder","children":{"xxx":{"name":"xxx","type":"apogee.Folder","childrenNotWriteable":true,"children":{"jsx":{"name":"jsx","type":"apogee.FunctionMember","fields":{"argList":["props"],"functionBody":"\nfunction __createJsx(props) {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", null, \"Hello \", props.name), /*#__PURE__*/React.createElement(HelloElement, null));\n}\nreturn __createJsx(props)\n","supplementalCode":""}},"props":{"name":"props","type":"apogee.DataMember","fields":{"argList":[],"functionBody":"return {\n    name: \"Dave\"\n}","supplementalCode":""}}}},"HelloElement":{"name":"HelloElement","type":"apogee.FunctionMember","fields":{"argList":["props"],"functionBody":"\nfunction __createJsx(props) {\n  \"//>//\";\n\n  return /*#__PURE__*/React.createElement(\"p\", null, \"Hello!\");\n  \"//>//\";\n}\nreturn __createJsx(props)\n"}}}},"state":{"name":"state","type":"apogee.Folder","children":{"Name":{"name":"Name","type":"apogee.FunctionMember","fields":{"argList":["props"],"functionBody":"\nfunction __createJsx(props) {\n  \"//>//\";\n\n  return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"label\", null, \"Name: \"), /*#__PURE__*/React.createElement(\"input\", {\n    value: props.name,\n    onChange: props.onNameChange\n  }));\n  \"//>//\";\n}\nreturn __createJsx(props)\n"}},"FavoriteAnimal":{"name":"FavoriteAnimal","type":"apogee.FunctionMember","fields":{"argList":["props"],"functionBody":"\nfunction __createJsx(props) {\n  \"//>//\";\n\n  return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"label\", null, \"Favorite Animal: \"), /*#__PURE__*/React.createElement(\"input\", {\n    value: props.animal,\n    onChange: props.onAnimalChange\n  }));\n  \"//>//\";\n}\nreturn __createJsx(props)\n"}},"Display":{"name":"Display","type":"apogee.FunctionMember","fields":{"argList":["props"],"functionBody":"\nfunction __createJsx(props) {\n  \"//>//\";\n\n  return /*#__PURE__*/React.createElement(\"div\", null, `Hey ${props.name}, your favorite animal is ${props.animal}!`);\n  \"//>//\";\n}\nreturn __createJsx(props)\n"}},"App":{"name":"App","type":"apogee.Folder","childrenNotWriteable":true,"children":{"jsx":{"name":"jsx","type":"apogee.FunctionMember","fields":{"argList":["props"],"functionBody":"\nfunction __createJsx(props) {\n  const nameStateArray = React.useState(props.name);\n  const name = nameStateArray[0];\n  const setName = nameStateArray[1];\n  const animalStateArray = React.useState(props.animal);\n  const animal = animalStateArray[0];\n  const setAnimal = animalStateArray[1];\n  return /*#__PURE__*/React.createElement(\"form\", null, /*#__PURE__*/React.createElement(Name, {\n    name: name,\n    onNameChange: event => setName(event.target.value)\n  }), /*#__PURE__*/React.createElement(FavoriteAnimal, {\n    animal: animal,\n    onAnimalChange: event => setAnimal(event.target.value)\n  }), /*#__PURE__*/React.createElement(Display, {\n    name: name,\n    animal: animal\n  }));\n}\nreturn __createJsx(props)\n","supplementalCode":""}},"props":{"name":"props","type":"apogee.DataMember","fields":{"argList":[],"functionBody":"return {\n    name: \"Tom\",\n    animal: \"Pig\"\n}","supplementalCode":""}}}},"test":{"name":"test","type":"apogee.Folder","childrenNotWriteable":true,"children":{"jsx":{"name":"jsx","type":"apogee.FunctionMember","fields":{"argList":["props"],"functionBody":"\nfunction __createJsx(props) {\n  return /*#__PURE__*/React.createElement(Name, {\n    name: props.name,\n    onNameChange: props.onNameChange\n  });\n}\nreturn __createJsx(props)\n","supplementalCode":""}},"props":{"name":"props","type":"apogee.DataMember","fields":{"argList":[],"functionBody":"return {\n    name: \"Bill\",\n    onNameChange: event => console.log(event.target.value)\n}","supplementalCode":""}}}},"test2":{"name":"test2","type":"apogee.Folder","childrenNotWriteable":true,"children":{"jsx":{"name":"jsx","type":"apogee.FunctionMember","fields":{"argList":["props"],"functionBody":"\nfunction __createJsx(props) {\n  return /*#__PURE__*/React.createElement(FavoriteAnimal, {\n    animal: props.animal,\n    onAnimalChange: event => props.setAnimal(event.target.value)\n  });\n}\nreturn __createJsx(props)\n","supplementalCode":""}},"props":{"name":"props","type":"apogee.DataMember","fields":{"argList":[],"functionBody":"return {\n    animal: favoriteAnimal,\n    setAnimal: animal => {\n        console.log(\"setting animal: \" + animal)\n        apogeeMessenger.dataUpdate(\"favoriteAnimal\",animal)\n    }\n}","supplementalCode":""}}}},"test3":{"name":"test3","type":"apogee.Folder","childrenNotWriteable":true,"children":{"jsx":{"name":"jsx","type":"apogee.FunctionMember","fields":{"argList":["props"],"functionBody":"\nfunction __createJsx(props) {\n  return /*#__PURE__*/React.createElement(Display, {\n    name: props.name,\n    animal: props.animal\n  });\n}\nreturn __createJsx(props)\n","supplementalCode":""}},"props":{"name":"props","type":"apogee.DataMember","fields":{"argList":[],"functionBody":"return {\n    name: \"Dave\",\n    animal: \"Curious Pose Striker\"\n}","supplementalCode":""}}}},"favoriteAnimal":{"name":"favoriteAnimal","type":"apogee.DataMember","fields":{"data":"jlkjhlkjhlkjhlkjhlkjhlkjhlkh"}},"ExternalStateApp":{"name":"ExternalStateApp","type":"apogee.Folder","childrenNotWriteable":true,"children":{"jsx":{"name":"jsx","type":"apogee.FunctionMember","fields":{"argList":["props"],"functionBody":"\nfunction __createJsx(props) {\n  console.log(\"redraw!\");\n  const nameStateArray = React.useState(props.name);\n  const name = nameStateArray[0];\n  const setName = nameStateArray[1];\n  const animalStateArray = React.useState(props.animal);\n  const animal = animalStateArray[0];\n  const setAnimal = animalStateArray[1];\n  const modeStateArray = React.useState(\"display\");\n  const mode = modeStateArray[0];\n  const setMode = modeStateArray[1];\n  console.log(`props: ${props.name} ${props.animal}/n state: ${name} ${animal}`);\n\n  if (mode == \"display\") {\n    console.log(\"display update!\");\n\n    if (name != props.name) {\n      console.log(\"-- name\");\n      setName(props.name);\n    }\n\n    if (animal != props.animal) {\n      console.log(\"-- animal\");\n      setAnimal(props.animal);\n    }\n  }\n\n  const saveState = () => {\n    console.log(\"save state!\");\n    setMode(\"display\");\n    apogeeMessenger.dataUpdate(\"externalState\", {\n      name,\n      animal\n    }); //this may only be desired if the messenger is asynchronous. For synchronous it might be better to skip it. TBD.\n    //setName(props.name);\n    //setAnimal(props.animal);\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", null, /*#__PURE__*/React.createElement(Name, {\n    name: mode == \"display\" ? props.name : name,\n    onNameChange: event => {\n      setName(event.target.value);\n      if (mode != \"edit\") setMode(\"edit\");\n    }\n  }), /*#__PURE__*/React.createElement(FavoriteAnimal, {\n    animal: mode == \"display\" ? props.animal : animal,\n    onAnimalChange: event => {\n      setAnimal(event.target.value);\n      if (mode != \"edit\") setMode(\"edit\");\n    }\n  }), /*#__PURE__*/React.createElement(Display, {\n    name: name,\n    animal: animal\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: saveState\n  }, \"Save\"));\n}\nreturn __createJsx(props)\n","supplementalCode":""}},"props":{"name":"props","type":"apogee.DataMember","fields":{"argList":[],"functionBody":"return externalState","supplementalCode":""}}}},"externalState":{"name":"externalState","type":"apogee.DataMember","fields":{"data":{"name":"Dave","animal":"Dog"}}},"externalState2":{"name":"externalState2","type":"apogee.DataMember","fields":{"data":{"name":"Dave","animal":"a;lskdfj"}}},"ExternalStateApp2":{"name":"ExternalStateApp2","type":"apogee.Folder","childrenNotWriteable":true,"children":{"jsx":{"name":"jsx","type":"apogee.FunctionMember","fields":{"argList":["props"],"functionBody":"\nfunction __createJsx(props) {\n  console.log(\"Redraw!\");\n\n  const setName = name => updateField(\"name\", name);\n\n  const setAnimal = animal => updateField(\"animal\", animal);\n\n  const updateField = (fieldName, fieldValue) => {\n    if (props[fieldName] != fieldValue) {\n      let newProps = _.cloneDeep(props);\n\n      newProps[fieldName] = fieldValue;\n      apogeeMessenger.dataUpdate(\"externalState2\", newProps);\n      console.log(\"New state sent!\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", null, /*#__PURE__*/React.createElement(Name, {\n    name: props.name,\n    onNameChange: event => setName(event.target.value)\n  }), /*#__PURE__*/React.createElement(FavoriteAnimal, {\n    animal: props.animal,\n    onAnimalChange: event => setAnimal(event.target.value)\n  }), /*#__PURE__*/React.createElement(Display, {\n    name: props.name,\n    animal: props.animal\n  }));\n}\nreturn __createJsx(props)\n","supplementalCode":""}},"props":{"name":"props","type":"apogee.DataMember","fields":{"argList":[],"functionBody":"return externalState2","supplementalCode":""}}}}}}}},"components":{"main":{"type":"apogeeapp.PageComponent","fields":{"editorState":{"doc":{"type":"doc","content":[{"type":"apogeeComponent","attrs":{"name":"HelloElement","id":0,"state":""}},{"type":"apogeeComponent","attrs":{"name":"xxx","id":0,"state":""}},{"type":"paragraph"},{"type":"paragraph"},{"type":"paragraph"}]}}},"children":{"xxx":{"type":"apogeeapp.ReactDisplayCell","fields":{"jsxCode":"return (\n    <>\n        <p>Hello {props.name}</p>\n        <HelloElement />\n    </>\n);"},"viewState":{"childDisplayState":{"views":{"Info":{"isViewActive":false},"Display":{"isViewActive":true},"jsxCode":{"isViewActive":true,"height":7000},"convertedCode":{"isViewActive":true,"height":7000},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":true,"height":7000}}}}},"HelloElement":{"type":"apogeeapp.ReactElementCell","fields":{"jsxCode":"return <p>Hello!</p>"},"viewState":{"childDisplayState":{"views":{"Info":{"isViewActive":false},"jsxCode":{"isViewActive":true,"height":7000},"convertedCode":{"isViewActive":false,"height":7000}}}}}},"viewState":{"treeState":1,"tabOpened":true}},"state":{"type":"apogeeapp.PageComponent","fields":{"editorState":{"doc":{"type":"doc","content":[{"type":"heading1","content":[{"type":"text","text":"React Test"}]},{"type":"paragraph","content":[{"type":"text","text":"Issues:"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"The array spread element did not work for defining values: "},{"type":"text","marks":[{"type":"textcolor","attrs":{"color":"blue"}},{"type":"fontfamily","attrs":{"fontfamily":"Monospace"}}],"text":"const [name, setName] = React.useState()"}]},{"type":"listItem","content":[{"type":"text","text":"I should use jsx formatting for the code text editor"}]},{"type":"listItem","content":[{"type":"text","text":"I have to use \"props\". I think the spread element is preferred for the property inputs."}]}]},{"type":"heading2","content":[{"type":"text","text":"Elements and Display"}]},{"type":"paragraph","content":[{"type":"text","text":"Here I define a few elements which share state within the \"app\"."}]},{"type":"apogeeComponent","attrs":{"name":"Name","id":0,"state":""}},{"type":"apogeeComponent","attrs":{"name":"FavoriteAnimal","id":0,"state":""}},{"type":"apogeeComponent","attrs":{"name":"Display","id":0,"state":""}},{"type":"heading3","content":[{"type":"text","text":"Internal State App"}]},{"type":"paragraph","content":[{"type":"text","text":"Here I combine the elements and track the input data as internal state."}]},{"type":"apogeeComponent","attrs":{"name":"App","id":0,"state":""}},{"type":"heading3","content":[{"type":"text","text":"External State App"}]},{"type":"paragraph","content":[{"type":"text","text":"This is the same as above but I want to track the state externally, in the apogee model."}]},{"type":"paragraph","content":[{"type":"text","text":"First I use a save button. (This should be second, but oh well)"}]},{"type":"paragraph","content":[{"type":"text","text":"Save Button alternative:"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"track the name and animal state internally, along with a \"state\" - either 'edit' or 'display'"}]},{"type":"listItem","content":[{"type":"text","text":"display mode - when I go to render, render what is in the props. If the props differ from the state, update the state."}]},{"type":"listItem","content":[{"type":"text","text":"edit mode - display what is in the state, not the props."}]},{"type":"listItem","content":[{"type":"text","text":"When a change is done to a text field, go to edit mode"}]},{"type":"listItem","content":[{"type":"text","text":"when save is pressed, (1) switch to display mode (2) send the data to the model (3) revert the state to the props"}]},{"type":"listItem","content":[{"type":"text","text":"We reverted to OLD values. That is because that matches the understood value of the form (THIS MIGHT BE DIFFERENT FOR A SYNCHRONOUS COMMAND!) It will be updated when the model updates."}]}]},{"type":"paragraph","content":[{"type":"text","text":"Notes:"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"If we don't set the state to the old props, when the redraw happens, the logic will set it back and then fix it and redraw again. AT LEAST IF MESSENGER IS ASYNC"}]},{"type":"listItem","content":[{"type":"text","text":"If messenger is synch, the redraw might happen with new props. I am not sure of the order. I think there are still two though/ UGLY!!"}]}]},{"type":"paragraph","content":[{"type":"text","text":"I updated apogee to NOT so an async messenger. Then it was better without. But I have some questions."}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"text","text":"It seems to be smart enough to not do an internal redraw when the external redraw happened (having set the mode before the messenger call)"}]},{"type":"listItem","content":[{"type":"text","text":"But is there any problem with the way I did this - triggering a new component draw from the handler? I think that is OK. Nothing is happening then."}]}]},{"type":"apogeeComponent","attrs":{"name":"ExternalStateApp","id":0,"state":""}},{"type":"apogeeComponent","attrs":{"name":"externalState","id":0,"state":""}},{"type":"heading3","content":[{"type":"text","text":"Another Approach"}]},{"type":"paragraph","content":[{"type":"text","text":"Here is a direct approach where we update as we type. However, as this is, in today's code 11/10/21, this has a hard to find bug because the characters can be skipped!"}]},{"type":"paragraph","content":[{"type":"text","text":"If the model is not updated SYNCHRONOUSLY, then we can lose characters because the state the text for a field in both the model and subsequently the form do not have time to update between key presses. All events eventually happen, but the new character van be appended to the old state, not the current one - and some key presses are lost."}]},{"type":"paragraph","content":[{"type":"text","marks":[{"type":"highlight","attrs":{"color":"yellow"}}],"text":"Messenger is asynchronous when it sends commands. This causes the problem. "}]},{"type":"paragraph","content":[{"type":"text","text":"(I put in an update to make messenger commands synchronous. I need to decide if I want to keep this...)"}]},{"type":"apogeeComponent","attrs":{"name":"ExternalStateApp2","id":0,"state":""}},{"type":"apogeeComponent","attrs":{"name":"externalState2","id":0,"state":""}},{"type":"heading2","content":[{"type":"text","text":"Test"}]},{"type":"paragraph","content":[{"type":"text","text":"Here I will make some displays to test my elements."}]},{"type":"paragraph","content":[{"type":"text","text":"I don't have an onChange event here."}]},{"type":"apogeeComponent","attrs":{"name":"test","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"I do make the onChange event here, by sending state to an external field."}]},{"type":"apogeeComponent","attrs":{"name":"test2","id":0,"state":""}},{"type":"apogeeComponent","attrs":{"name":"favoriteAnimal","id":0,"state":""}},{"type":"paragraph","content":[{"type":"text","text":"Here I just display the props."}]},{"type":"apogeeComponent","attrs":{"name":"test3","id":0,"state":""}},{"type":"paragraph"}]}}},"children":{"Name":{"type":"apogeeapp.ReactElementCell","fields":{"jsxCode":"return (\n    <div>\n        <label>Name: </label>\n        <input \n            value={props.name}\n            onChange={props.onNameChange}\n        />\n    </div>\n)"},"viewState":{"childDisplayState":{"views":{"Info":{"isViewActive":false},"jsxCode":{"isViewActive":true,"height":7000},"convertedCode":{"isViewActive":false}}}}},"FavoriteAnimal":{"type":"apogeeapp.ReactElementCell","fields":{"jsxCode":"return (\r\n    <div>\r\n        <label>Favorite Animal: </label>\r\n        <input\r\n            value={props.animal}\r\n            onChange={props.onAnimalChange}\r\n        />\r\n    </div>\r\n)"},"viewState":{"childDisplayState":{"views":{"Info":{"isViewActive":false},"jsxCode":{"isViewActive":true,"height":7000},"convertedCode":{"isViewActive":false}}}}},"Display":{"type":"apogeeapp.ReactElementCell","fields":{"jsxCode":"return <div>{`Hey ${props.name}, your favorite animal is ${props.animal}!`}</div>"},"viewState":{"childDisplayState":{"views":{"Info":{"isViewActive":false},"jsxCode":{"isViewActive":true,"height":7000},"convertedCode":{"isViewActive":false}}}}},"App":{"type":"apogeeapp.ReactDisplayCell","fields":{"jsxCode":"const nameStateArray = React.useState(props.name)\r\nconst name = nameStateArray[0];\r\nconst setName = nameStateArray[1];\r\n\r\nconst animalStateArray = React.useState(props.animal)\r\nconst animal = animalStateArray[0];\r\nconst setAnimal = animalStateArray[1];\r\n\r\nreturn (\r\n    <form>\r\n        <Name\r\n            name={name}\r\n            onNameChange={event => setName(event.target.value)}\r\n        />\r\n        <FavoriteAnimal \r\n            animal={animal}\r\n            onAnimalChange={event => setAnimal(event.target.value)}\r\n        />\r\n        <Display name={name} animal={animal} />\r\n    </form>\r\n)"},"viewState":{"childDisplayState":{"views":{"Info":{"isViewActive":false},"Display":{"isViewActive":true},"jsxCode":{"isViewActive":true,"height":7000},"convertedCode":{"isViewActive":false},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"test":{"type":"apogeeapp.ReactDisplayCell","fields":{"jsxCode":"return <Name name={props.name} onNameChange={props.onNameChange}/>"},"viewState":{"childDisplayState":{"views":{"Info":{"isViewActive":false},"Display":{"isViewActive":true},"jsxCode":{"isViewActive":true,"height":7000},"convertedCode":{"isViewActive":false},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"test2":{"type":"apogeeapp.ReactDisplayCell","fields":{"jsxCode":"return <FavoriteAnimal animal={props.animal} onAnimalChange={event => props.setAnimal(event.target.value)}/>"},"viewState":{"childDisplayState":{"views":{"Info":{"isViewActive":false},"Display":{"isViewActive":true},"jsxCode":{"isViewActive":true,"height":7000},"convertedCode":{"isViewActive":false},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"test3":{"type":"apogeeapp.ReactDisplayCell","fields":{"jsxCode":"return <Display name={props.name} animal={props.animal} />"},"viewState":{"childDisplayState":{"views":{"Info":{"isViewActive":false},"Display":{"isViewActive":true},"jsxCode":{"isViewActive":true,"height":7000},"convertedCode":{"isViewActive":false},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"favoriteAnimal":{"type":"apogeeapp.JsonCell","fields":{"dataView":"Colorized"},"viewState":{"childDisplayState":{"views":{"Info":{"isViewActive":false},"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"ExternalStateApp":{"type":"apogeeapp.ReactDisplayCell","fields":{"jsxCode":"console.log(\"redraw!\")\r\n\r\nconst nameStateArray = React.useState(props.name)\r\nconst name = nameStateArray[0];\r\nconst setName = nameStateArray[1];\r\n\r\nconst animalStateArray = React.useState(props.animal)\r\nconst animal = animalStateArray[0];\r\nconst setAnimal = animalStateArray[1];\r\n\r\nconst modeStateArray = React.useState(\"display\")\r\nconst mode = modeStateArray[0];\r\nconst setMode = modeStateArray[1];\r\n\r\nconsole.log(`props: ${props.name} ${props.animal}/n state: ${name} ${animal}`)\r\n\r\nif(mode == \"display\") {\r\n    console.log(\"display update!\")\r\n    if(name != props.name) {\r\n        console.log(\"-- name\")\r\n        setName(props.name);\r\n    }\r\n    if(animal != props.animal) {\r\n        console.log(\"-- animal\")\r\n        setAnimal(props.animal);\r\n    }\r\n}\r\n\r\nconst saveState = () => {\r\n    console.log(\"save state!\")\r\n    setMode(\"display\");\r\n    apogeeMessenger.dataUpdate(\"externalState\",{name,animal});\r\n    //this may only be desired if the messenger is asynchronous. For synchronous it might be better to skip it. TBD.\r\n    //setName(props.name);\r\n    //setAnimal(props.animal);\r\n}\r\n\r\nreturn (\r\n    <form>\r\n        <Name\r\n            name={mode == \"display\" ? props.name : name}\r\n            onNameChange={event => {\r\n                    setName(event.target.value)\r\n                    if(mode != \"edit\") setMode(\"edit\")\r\n                }\r\n            }\r\n        />\r\n        <FavoriteAnimal \r\n            animal={mode == \"display\" ? props.animal : animal}\r\n            onAnimalChange={event => {\r\n                    setAnimal(event.target.value)\r\n                    if(mode != \"edit\") setMode(\"edit\")\r\n                }\r\n            }\r\n        />\r\n        <Display name={name} animal={animal} />\r\n        <button type=\"button\" onClick={saveState}>Save</button>\r\n    </form>\r\n)"},"viewState":{"childDisplayState":{"views":{"Info":{"isViewActive":false},"Display":{"isViewActive":true},"jsxCode":{"isViewActive":true,"height":7000},"convertedCode":{"isViewActive":false},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}},"externalState":{"type":"apogeeapp.JsonCell","fields":{"dataView":"Colorized"},"viewState":{"childDisplayState":{"views":{"Info":{"isViewActive":false},"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"externalState2":{"type":"apogeeapp.JsonCell","fields":{"dataView":"Colorized"},"viewState":{"childDisplayState":{"views":{"Info":{"isViewActive":false},"Data":{"isViewActive":true,"height":280},"Formula":{"isViewActive":false},"Private":{"isViewActive":false}}}}},"ExternalStateApp2":{"type":"apogeeapp.ReactDisplayCell","fields":{"jsxCode":"console.log(\"Redraw!\");\r\n\r\nconst setName = name => updateField(\"name\",name);\r\nconst setAnimal = animal => updateField(\"animal\",animal);\r\nconst updateField = (fieldName,fieldValue) => {\r\n        if(props[fieldName] != fieldValue) {\r\n            let newProps = _.cloneDeep(props);\r\n            newProps[fieldName] = fieldValue;\r\n            apogeeMessenger.dataUpdate(\"externalState2\",newProps);\r\n            console.log(\"New state sent!\")\r\n        }\r\n    }\r\n\r\nreturn (\r\n    <form>\r\n        <Name\r\n            name={props.name}\r\n            onNameChange={event => setName(event.target.value)}\r\n        />\r\n        <FavoriteAnimal \r\n            animal={props.animal}\r\n            onAnimalChange={event => setAnimal(event.target.value)}\r\n        />\r\n        <Display name={props.name} animal={props.animal} />\r\n    </form>\r\n)"},"viewState":{"childDisplayState":{"views":{"Info":{"isViewActive":false},"Display":{"isViewActive":true},"jsxCode":{"isViewActive":true,"height":7000},"convertedCode":{"isViewActive":false},"Formula":{"isViewActive":true,"height":7000},"Private":{"isViewActive":false}}}}}},"viewState":{"childDisplayState":null,"treeState":1,"tabOpened":true,"tabShowing":true}},"viewState":{"treeState":1}}},"viewState":{"treeState":1}}